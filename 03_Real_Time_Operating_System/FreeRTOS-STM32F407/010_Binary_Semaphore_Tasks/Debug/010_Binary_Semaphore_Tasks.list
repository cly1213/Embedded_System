
010_Binary_Semaphore_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a0c  08005a0c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a14  08005a14  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012eac  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f24  20012f24  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2f0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240e  00000000  00000000  0002e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  000307a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d30  00000000  00000000  000315f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f27  00000000  00000000  00032320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010565  00000000  00000000  00055247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2be5  00000000  00000000  000657ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138391  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046c0  00000000  00000000  001383e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057f0 	.word	0x080057f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080057f0 	.word	0x080057f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fc5b 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f853 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8bb 	bl	80006fc <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <main+0x98>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a20      	ldr	r2, [pc, #128]	; (800060c <main+0x98>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6013      	str	r3, [r2, #0]
  //sprintf(usr_msg,"Demo of Binary semaphore usage between 2 Tasks \r\n");
  //printmsg(usr_msg);

  /* Before a semaphore is used it must be explicitly created.
      * In this example a binary semaphore is created . */
      vSemaphoreCreateBinary( xWork );
 8000592:	2203      	movs	r2, #3
 8000594:	2100      	movs	r1, #0
 8000596:	2001      	movs	r0, #1
 8000598:	f001 ff99 	bl	80024ce <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a1c      	ldr	r2, [pc, #112]	; (8000610 <main+0x9c>)
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <main+0x9c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d006      	beq.n	80005b8 <main+0x44>
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <main+0x9c>)
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	2200      	movs	r2, #0
 80005b2:	2100      	movs	r1, #0
 80005b4:	f002 f80e 	bl	80025d4 <xQueueGenericSend>


  /* The queue is created to hold a maximum of 1 Element. */
      xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	2001      	movs	r0, #1
 80005be:	f001 ff86 	bl	80024ce <xQueueGenericCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a13      	ldr	r2, [pc, #76]	; (8000614 <main+0xa0>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* Check the semaphore and queue was created successfully. */
      if( (xWork != NULL) && (xWorkQueue != NULL) )
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0x9c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d01b      	beq.n	8000608 <main+0x94>
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <main+0xa0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d017      	beq.n	8000608 <main+0x94>
      {

      /* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
          xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 80005d8:	2300      	movs	r3, #0
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	2303      	movs	r3, #3
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2300      	movs	r3, #0
 80005e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005e6:	490c      	ldr	r1, [pc, #48]	; (8000618 <main+0xa4>)
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <main+0xa8>)
 80005ea:	f002 fb8d 	bl	8002d08 <xTaskCreate>

      /* Create a employee task with less priority than manager */
          xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 80005ee:	2300      	movs	r3, #0
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005fc:	4908      	ldr	r1, [pc, #32]	; (8000620 <main+0xac>)
 80005fe:	4809      	ldr	r0, [pc, #36]	; (8000624 <main+0xb0>)
 8000600:	f002 fb82 	bl	8002d08 <xTaskCreate>

      /* Start the scheduler so the created tasks start executing. */
          vTaskStartScheduler();
 8000604:	f002 fcec 	bl	8002fe0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x94>
 800060a:	bf00      	nop
 800060c:	e0001000 	.word	0xe0001000
 8000610:	20000190 	.word	0x20000190
 8000614:	20000194 	.word	0x20000194
 8000618:	08005808 	.word	0x08005808
 800061c:	080009b9 	.word	0x080009b9
 8000620:	08005810 	.word	0x08005810
 8000624:	08000a7d 	.word	0x08000a7d

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fea6 	bl	8004388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800069c:	2332      	movs	r3, #50	; 0x32
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fe9b 	bl	80013e8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 fa20 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f8fc 	bl	80018d8 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 fa09 	bl	8000afc <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4ba2      	ldr	r3, [pc, #648]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4aa1      	ldr	r2, [pc, #644]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b9f      	ldr	r3, [pc, #636]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b9b      	ldr	r3, [pc, #620]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a9a      	ldr	r2, [pc, #616]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b98      	ldr	r3, [pc, #608]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b94      	ldr	r3, [pc, #592]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a93      	ldr	r2, [pc, #588]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b91      	ldr	r3, [pc, #580]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b8d      	ldr	r3, [pc, #564]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a8c      	ldr	r2, [pc, #560]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b8a      	ldr	r3, [pc, #552]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b86      	ldr	r3, [pc, #536]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a85      	ldr	r2, [pc, #532]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b83      	ldr	r3, [pc, #524]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b7f      	ldr	r3, [pc, #508]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a7e      	ldr	r2, [pc, #504]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b7c      	ldr	r3, [pc, #496]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2108      	movs	r1, #8
 80007be:	4879      	ldr	r0, [pc, #484]	; (80009a4 <MX_GPIO_Init+0x2a8>)
 80007c0:	f000 fdf8 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	4877      	ldr	r0, [pc, #476]	; (80009a8 <MX_GPIO_Init+0x2ac>)
 80007ca:	f000 fdf3 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ce:	2200      	movs	r2, #0
 80007d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007d4:	4875      	ldr	r0, [pc, #468]	; (80009ac <MX_GPIO_Init+0x2b0>)
 80007d6:	f000 fded 	bl	80013b4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007da:	2308      	movs	r3, #8
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	486c      	ldr	r0, [pc, #432]	; (80009a4 <MX_GPIO_Init+0x2a8>)
 80007f2:	f000 fc43 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4866      	ldr	r0, [pc, #408]	; (80009a8 <MX_GPIO_Init+0x2ac>)
 800080e:	f000 fc35 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000822:	2305      	movs	r3, #5
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	485e      	ldr	r0, [pc, #376]	; (80009a8 <MX_GPIO_Init+0x2ac>)
 800082e:	f000 fc25 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	485a      	ldr	r0, [pc, #360]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000848:	f000 fc18 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800084c:	2310      	movs	r3, #16
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085c:	2306      	movs	r3, #6
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4852      	ldr	r0, [pc, #328]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000868:	f000 fc08 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800086c:	23e0      	movs	r3, #224	; 0xe0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087c:	2305      	movs	r3, #5
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	484a      	ldr	r0, [pc, #296]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000888:	f000 fbf8 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800088c:	2304      	movs	r3, #4
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4845      	ldr	r0, [pc, #276]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 80008a0:	f000 fbec 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	483c      	ldr	r0, [pc, #240]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 80008c2:	f000 fbdb 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4833      	ldr	r0, [pc, #204]	; (80009ac <MX_GPIO_Init+0x2b0>)
 80008e0:	f000 fbcc 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f6:	2306      	movs	r3, #6
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4829      	ldr	r0, [pc, #164]	; (80009a8 <MX_GPIO_Init+0x2ac>)
 8000902:	f000 fbbb 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4825      	ldr	r0, [pc, #148]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800091c:	f000 fbae 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000920:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000932:	230a      	movs	r3, #10
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	481c      	ldr	r0, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800093e:	f000 fb9d 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4815      	ldr	r0, [pc, #84]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000956:	f000 fb91 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800095a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096c:	2304      	movs	r3, #4
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	480f      	ldr	r0, [pc, #60]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 8000978:	f000 fb80 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000980:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0x2a8>)
 8000992:	f000 fb73 	bl	800107c <HAL_GPIO_Init>

}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400

080009b8 <vManagerTask>:

/* USER CODE BEGIN 4 */
void vManagerTask( void *pvParameters )
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	 portBASE_TYPE xStatus;

    /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
    xSemaphoreGive( xWork);
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <vManagerTask+0x70>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	2300      	movs	r3, #0
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	f001 fe03 	bl	80025d4 <xQueueGenericSend>

    for( ;; )
    {
        /* get a work ticket id(some random number) */
        xWorkTicketId = ( rand() & 0x1FF );
 80009ce:	f003 fcfb 	bl	80043c8 <rand>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009d8:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY ); //Post an item on back of the queue
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <vManagerTask+0x74>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	f107 0108 	add.w	r1, r7, #8
 80009e2:	2300      	movs	r3, #0
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e8:	f001 fdf4 	bl	80025d4 <xQueueGenericSend>
 80009ec:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d008      	beq.n	8000a06 <vManagerTask+0x4e>
		{

			//printf("%s\r\n", (char*) parameters); //through SWO
			sprintf(usr_msg,"Could not send to the queue.\r\n");
 80009f4:	490e      	ldr	r1, [pc, #56]	; (8000a30 <vManagerTask+0x78>)
 80009f6:	480f      	ldr	r0, [pc, #60]	; (8000a34 <vManagerTask+0x7c>)
 80009f8:	f003 fd24 	bl	8004444 <siprintf>
		    //printmsg(usr_msg);
			printf("%s\r\n", usr_msg); //through SWO
 80009fc:	490d      	ldr	r1, [pc, #52]	; (8000a34 <vManagerTask+0x7c>)
 80009fe:	480e      	ldr	r0, [pc, #56]	; (8000a38 <vManagerTask+0x80>)
 8000a00:	f003 fcca 	bl	8004398 <iprintf>
 8000a04:	e7e3      	b.n	80009ce <vManagerTask+0x16>

		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <vManagerTask+0x70>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f001 fde0 	bl	80025d4 <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <vManagerTask+0x84>)
 8000a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	f3bf 8f4f 	dsb	sy
 8000a20:	f3bf 8f6f 	isb	sy
        xWorkTicketId = ( rand() & 0x1FF );
 8000a24:	e7d3      	b.n	80009ce <vManagerTask+0x16>
 8000a26:	bf00      	nop
 8000a28:	20000190 	.word	0x20000190
 8000a2c:	20000194 	.word	0x20000194
 8000a30:	0800581c 	.word	0x0800581c
 8000a34:	20000094 	.word	0x20000094
 8000a38:	0800583c 	.word	0x0800583c
 8000a3c:	e000ed04 	.word	0xe000ed04

08000a40 <EmployeeDoWork>:
    }
}
/*-----------------------------------------------------------*/

void EmployeeDoWork(unsigned char TicketId)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */

	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <EmployeeDoWork+0x30>)
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <EmployeeDoWork+0x34>)
 8000a52:	f003 fcf7 	bl	8004444 <siprintf>
	//printmsg(usr_msg);
	printf("%s\r\n", usr_msg); //through SWO
 8000a56:	4907      	ldr	r1, [pc, #28]	; (8000a74 <EmployeeDoWork+0x34>)
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <EmployeeDoWork+0x38>)
 8000a5a:	f003 fc9d 	bl	8004398 <iprintf>

	vTaskDelay(TicketId);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fa89 	bl	8002f78 <vTaskDelay>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	08005844 	.word	0x08005844
 8000a74:	20000094 	.word	0x20000094
 8000a78:	0800583c 	.word	0x0800583c

08000a7c <vEmployeeTask>:

static void vEmployeeTask( void *pvParameters )
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
    /* As per most tasks, this task is implemented within an infinite loop. */
    for( ;; )
    {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xWork, 0 );
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <vEmployeeTask+0x48>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 ff2c 	bl	80028e8 <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <vEmployeeTask+0x4c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f107 010b 	add.w	r1, r7, #11
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fe68 	bl	8002770 <xQueueReceive>
 8000aa0:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d104      	bne.n	8000ab2 <vEmployeeTask+0x36>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 8000aa8:	7afb      	ldrb	r3, [r7, #11]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ffc8 	bl	8000a40 <EmployeeDoWork>
 8000ab0:	e7e8      	b.n	8000a84 <vEmployeeTask+0x8>
			//printf("%s\r\n", (char*) parameters); //through SWO
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 8000ab2:	4906      	ldr	r1, [pc, #24]	; (8000acc <vEmployeeTask+0x50>)
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <vEmployeeTask+0x54>)
 8000ab6:	f003 fcc5 	bl	8004444 <siprintf>
		    //printmsg(usr_msg);
			printf("%s\r\n", usr_msg); //through SWO
 8000aba:	4905      	ldr	r1, [pc, #20]	; (8000ad0 <vEmployeeTask+0x54>)
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <vEmployeeTask+0x58>)
 8000abe:	f003 fc6b 	bl	8004398 <iprintf>
		xSemaphoreTake( xWork, 0 );
 8000ac2:	e7df      	b.n	8000a84 <vEmployeeTask+0x8>
 8000ac4:	20000190 	.word	0x20000190
 8000ac8:	20000194 	.word	0x20000194
 8000acc:	08005870 	.word	0x08005870
 8000ad0:	20000094 	.word	0x20000094
 8000ad4:	0800583c 	.word	0x0800583c

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 f9c5 	bl	8000e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40001000 	.word	0x40001000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	2036      	movs	r0, #54	; 0x36
 8000b6e:	f000 fa5b 	bl	8001028 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b72:	2036      	movs	r0, #54	; 0x36
 8000b74:	f000 fa74 	bl	8001060 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b94:	f107 0210 	add.w	r2, r7, #16
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 f8a6 	bl	8001cf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ba4:	f001 f890 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_InitTick+0xa8>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_InitTick+0xac>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <HAL_InitTick+0xb0>)
 8000bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_InitTick+0xac>)
 8000bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_InitTick+0xac>)
 8000bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_InitTick+0xac>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_InitTick+0xac>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_InitTick+0xac>)
 8000bde:	f001 f8b9 	bl	8001d54 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d104      	bne.n	8000bf2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <HAL_InitTick+0xac>)
 8000bea:	f001 f90d 	bl	8001e08 <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3730      	adds	r7, #48	; 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	20000198 	.word	0x20000198
 8000c08:	40001000 	.word	0x40001000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM6_DAC_IRQHandler+0x10>)
 8000c3e:	f001 f953 	bl	8001ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000198 	.word	0x20000198

08000c4c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <ITM_SendChar+0x48>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <ITM_SendChar+0x48>)
 8000c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c60:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <ITM_SendChar+0x4c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <ITM_SendChar+0x4c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c6e:	bf00      	nop
 8000c70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f8      	beq.n	8000c70 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	6013      	str	r3, [r2, #0]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000edfc 	.word	0xe000edfc
 8000c98:	e0000e00 	.word	0xe0000e00

08000c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
	return 1;
 8000ca0:	2301      	movs	r3, #1
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_kill>:

int _kill(int pid, int sig)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cb6:	f003 fb2f 	bl	8004318 <__errno>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2216      	movs	r2, #22
 8000cbe:	601a      	str	r2, [r3, #0]
	return -1;
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <_exit>:

void _exit (int status)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ffe7 	bl	8000cac <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cde:	e7fe      	b.n	8000cde <_exit+0x12>

08000ce0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e00a      	b.n	8000d08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cf2:	f3af 8000 	nop.w
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf0      	blt.n	8000cf2 <_read+0x12>
	}

return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e009      	b.n	8000d40 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	60ba      	str	r2, [r7, #8]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff89 	bl	8000c4c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbf1      	blt.n	8000d2c <_write+0x12>

	}
	return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_close>:

int _close(int file)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
	return -1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_isatty>:

int _isatty(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
	return 1;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
	return 0;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff ffd7 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 fa89 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fbaf 	bl	8000574 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e24:	08005a1c 	.word	0x08005a1c
  ldr r2, =_sbss
 8000e28:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e2c:	20012f24 	.word	0x20012f24

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f8d8 	bl	8001012 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fe78 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fe4e 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	200001e0 	.word	0x200001e0

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001e0 	.word	0x200001e0

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff4c 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103a:	f7ff ff61 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 800103e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f7ff ffb1 	bl	8000fac <NVIC_EncodePriority>
 800104a:	4602      	mov	r2, r0
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff80 	bl	8000f58 <__NVIC_SetPriority>
}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff54 	bl	8000f1c <__NVIC_EnableIRQ>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e16b      	b.n	8001370 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 815a 	bne.w	800136a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d130      	bne.n	8001130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80b4 	beq.w	800136a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b60      	ldr	r3, [pc, #384]	; (8001388 <HAL_GPIO_Init+0x30c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a5f      	ldr	r2, [pc, #380]	; (8001388 <HAL_GPIO_Init+0x30c>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_GPIO_Init+0x30c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a5b      	ldr	r2, [pc, #364]	; (800138c <HAL_GPIO_Init+0x310>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_GPIO_Init+0x314>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d02b      	beq.n	80012a2 <HAL_GPIO_Init+0x226>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a51      	ldr	r2, [pc, #324]	; (8001394 <HAL_GPIO_Init+0x318>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d025      	beq.n	800129e <HAL_GPIO_Init+0x222>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <HAL_GPIO_Init+0x31c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01f      	beq.n	800129a <HAL_GPIO_Init+0x21e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_GPIO_Init+0x320>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d019      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4e      	ldr	r2, [pc, #312]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x216>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <HAL_GPIO_Init+0x328>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_GPIO_Init+0x212>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4c      	ldr	r2, [pc, #304]	; (80013a8 <HAL_GPIO_Init+0x32c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x20e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <HAL_GPIO_Init+0x330>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_GPIO_Init+0x20a>
 8001282:	2307      	movs	r3, #7
 8001284:	e00e      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 8001286:	2308      	movs	r3, #8
 8001288:	e00c      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800128a:	2306      	movs	r3, #6
 800128c:	e00a      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800128e:	2305      	movs	r3, #5
 8001290:	e008      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 8001292:	2304      	movs	r3, #4
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 8001296:	2303      	movs	r3, #3
 8001298:	e004      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800129a:	2302      	movs	r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 80012a2:	2300      	movs	r3, #0
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	f002 0203 	and.w	r2, r2, #3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4093      	lsls	r3, r2
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b4:	4935      	ldr	r1, [pc, #212]	; (800138c <HAL_GPIO_Init+0x310>)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c2:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_GPIO_Init+0x334>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e6:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <HAL_GPIO_Init+0x334>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_GPIO_Init+0x334>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <HAL_GPIO_Init+0x334>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <HAL_GPIO_Init+0x334>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133a:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_GPIO_Init+0x334>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_GPIO_Init+0x334>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <HAL_GPIO_Init+0x334>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3301      	adds	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	f67f ae90 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40013800 	.word	0x40013800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40020800 	.word	0x40020800
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40021400 	.word	0x40021400
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40021c00 	.word	0x40021c00
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d0:	e003      	b.n	80013da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	619a      	str	r2, [r3, #24]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e267      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d075      	beq.n	80014f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001406:	4b88      	ldr	r3, [pc, #544]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b04      	cmp	r3, #4
 8001410:	d00c      	beq.n	800142c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001412:	4b85      	ldr	r3, [pc, #532]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800141a:	2b08      	cmp	r3, #8
 800141c:	d112      	bne.n	8001444 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800142a:	d10b      	bne.n	8001444 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	4b7e      	ldr	r3, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d05b      	beq.n	80014f0 <HAL_RCC_OscConfig+0x108>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d157      	bne.n	80014f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e242      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144c:	d106      	bne.n	800145c <HAL_RCC_OscConfig+0x74>
 800144e:	4b76      	ldr	r3, [pc, #472]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a75      	ldr	r2, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e01d      	b.n	8001498 <HAL_RCC_OscConfig+0xb0>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x98>
 8001466:	4b70      	ldr	r3, [pc, #448]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6f      	ldr	r2, [pc, #444]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b6d      	ldr	r3, [pc, #436]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6c      	ldr	r2, [pc, #432]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0xb0>
 8001480:	4b69      	ldr	r3, [pc, #420]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a68      	ldr	r2, [pc, #416]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b66      	ldr	r3, [pc, #408]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a65      	ldr	r2, [pc, #404]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fcfe 	bl	8000ea0 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fcfa 	bl	8000ea0 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e207      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0xc0>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fcea 	bl	8000ea0 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fce6 	bl	8000ea0 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e1f3      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	4b51      	ldr	r3, [pc, #324]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0xe8>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d063      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014fe:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00b      	beq.n	8001522 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001512:	2b08      	cmp	r3, #8
 8001514:	d11c      	bne.n	8001550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001516:	4b44      	ldr	r3, [pc, #272]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d116      	bne.n	8001550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x152>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e1c7      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4937      	ldr	r1, [pc, #220]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	e03a      	b.n	80015c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_RCC_OscConfig+0x244>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff fc9f 	bl	8000ea0 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fc9b 	bl	8000ea0 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e1a8      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4925      	ldr	r1, [pc, #148]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_RCC_OscConfig+0x244>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fc7e 	bl	8000ea0 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fc7a 	bl	8000ea0 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e187      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d036      	beq.n	8001640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d016      	beq.n	8001608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_RCC_OscConfig+0x248>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fc5e 	bl	8000ea0 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fc5a 	bl	8000ea0 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e167      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_OscConfig+0x240>)
 80015fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x200>
 8001606:	e01b      	b.n	8001640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_OscConfig+0x248>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff fc47 	bl	8000ea0 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001614:	e00e      	b.n	8001634 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fc43 	bl	8000ea0 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d907      	bls.n	8001634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e150      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
 8001628:	40023800 	.word	0x40023800
 800162c:	42470000 	.word	0x42470000
 8001630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	4b88      	ldr	r3, [pc, #544]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ea      	bne.n	8001616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8097 	beq.w	800177c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	4b81      	ldr	r3, [pc, #516]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10f      	bne.n	800167e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b7d      	ldr	r3, [pc, #500]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a7c      	ldr	r2, [pc, #496]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b7a      	ldr	r3, [pc, #488]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b77      	ldr	r3, [pc, #476]	; (800185c <HAL_RCC_OscConfig+0x474>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	4b74      	ldr	r3, [pc, #464]	; (800185c <HAL_RCC_OscConfig+0x474>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a73      	ldr	r2, [pc, #460]	; (800185c <HAL_RCC_OscConfig+0x474>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff fc03 	bl	8000ea0 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff fbff 	bl	8000ea0 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e10c      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	4b6a      	ldr	r3, [pc, #424]	; (800185c <HAL_RCC_OscConfig+0x474>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2ea>
 80016c4:	4b64      	ldr	r3, [pc, #400]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a63      	ldr	r2, [pc, #396]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	e01c      	b.n	800170c <HAL_RCC_OscConfig+0x324>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x30c>
 80016da:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	4a5e      	ldr	r2, [pc, #376]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
 80016e6:	4b5c      	ldr	r3, [pc, #368]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a5b      	ldr	r2, [pc, #364]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0x324>
 80016f4:	4b58      	ldr	r3, [pc, #352]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	4a57      	ldr	r2, [pc, #348]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001700:	4b55      	ldr	r3, [pc, #340]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a54      	ldr	r2, [pc, #336]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001706:	f023 0304 	bic.w	r3, r3, #4
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fbc4 	bl	8000ea0 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171a:	e00a      	b.n	8001732 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171c:	f7ff fbc0 	bl	8000ea0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0cb      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001732:	4b49      	ldr	r3, [pc, #292]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0ee      	beq.n	800171c <HAL_RCC_OscConfig+0x334>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fbae 	bl	8000ea0 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff fbaa 	bl	8000ea0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0b5      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175e:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ee      	bne.n	8001748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	4a38      	ldr	r2, [pc, #224]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80a1 	beq.w	80018c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d05c      	beq.n	800184c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d141      	bne.n	800181e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b31      	ldr	r3, [pc, #196]	; (8001860 <HAL_RCC_OscConfig+0x478>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb7e 	bl	8000ea0 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fb7a 	bl	8000ea0 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e087      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	019b      	lsls	r3, r3, #6
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	085b      	lsrs	r3, r3, #1
 80017de:	3b01      	subs	r3, #1
 80017e0:	041b      	lsls	r3, r3, #16
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	061b      	lsls	r3, r3, #24
 80017ea:	491b      	ldr	r1, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x478>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb53 	bl	8000ea0 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff fb4f 	bl	8000ea0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e05c      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x416>
 800181c:	e054      	b.n	80018c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_RCC_OscConfig+0x478>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fb3c 	bl	8000ea0 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff fb38 	bl	8000ea0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e045      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x470>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x444>
 800184a:	e03d      	b.n	80018c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d107      	bne.n	8001864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e038      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000
 8001860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_RCC_OscConfig+0x4ec>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d028      	beq.n	80018c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d121      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d11a      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001894:	4013      	ands	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800189a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800189c:	4293      	cmp	r3, r2
 800189e:	d111      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	085b      	lsrs	r3, r3, #1
 80018ac:	3b01      	subs	r3, #1
 80018ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800

080018d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0cc      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b68      	ldr	r3, [pc, #416]	; (8001a90 <HAL_RCC_ClockConfig+0x1b8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d90c      	bls.n	8001914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b65      	ldr	r3, [pc, #404]	; (8001a90 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0b8      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800192c:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001944:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800194e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001950:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	494d      	ldr	r1, [pc, #308]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	4313      	orrs	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d044      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d119      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e07f      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d003      	beq.n	8001996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001992:	2b03      	cmp	r3, #3
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001996:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e06f      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a6:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e067      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b6:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f023 0203 	bic.w	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4934      	ldr	r1, [pc, #208]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c8:	f7ff fa6a 	bl	8000ea0 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d0:	f7ff fa66 	bl	8000ea0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e04f      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 020c 	and.w	r2, r3, #12
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d1eb      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <HAL_RCC_ClockConfig+0x1b8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d20c      	bcs.n	8001a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_RCC_ClockConfig+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e032      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4916      	ldr	r1, [pc, #88]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	490e      	ldr	r1, [pc, #56]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a5e:	f000 f821 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	490a      	ldr	r1, [pc, #40]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	5ccb      	ldrb	r3, [r1, r3]
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f86a 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023c00 	.word	0x40023c00
 8001a94:	40023800 	.word	0x40023800
 8001a98:	080058ac 	.word	0x080058ac
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa8:	b094      	sub	sp, #80	; 0x50
 8001aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	647b      	str	r3, [r7, #68]	; 0x44
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001abc:	4b79      	ldr	r3, [pc, #484]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	f200 80e1 	bhi.w	8001c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x3a>
 8001ad6:	e0db      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ada:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001adc:	e0db      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ade:	4b73      	ldr	r3, [pc, #460]	; (8001cac <HAL_RCC_GetSysClockFreq+0x208>)
 8001ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae2:	e0d8      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae4:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aee:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d063      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afa:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	2200      	movs	r2, #0
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
 8001b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b16:	4622      	mov	r2, r4
 8001b18:	462b      	mov	r3, r5
 8001b1a:	f04f 0000 	mov.w	r0, #0
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	0159      	lsls	r1, r3, #5
 8001b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b28:	0150      	lsls	r0, r2, #5
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4621      	mov	r1, r4
 8001b30:	1a51      	subs	r1, r2, r1
 8001b32:	6139      	str	r1, [r7, #16]
 8001b34:	4629      	mov	r1, r5
 8001b36:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b48:	4659      	mov	r1, fp
 8001b4a:	018b      	lsls	r3, r1, #6
 8001b4c:	4651      	mov	r1, sl
 8001b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b52:	4651      	mov	r1, sl
 8001b54:	018a      	lsls	r2, r1, #6
 8001b56:	4651      	mov	r1, sl
 8001b58:	ebb2 0801 	subs.w	r8, r2, r1
 8001b5c:	4659      	mov	r1, fp
 8001b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b76:	4690      	mov	r8, r2
 8001b78:	4699      	mov	r9, r3
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	eb18 0303 	adds.w	r3, r8, r3
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	462b      	mov	r3, r5
 8001b84:	eb49 0303 	adc.w	r3, r9, r3
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b96:	4629      	mov	r1, r5
 8001b98:	024b      	lsls	r3, r1, #9
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	024a      	lsls	r2, r1, #9
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001baa:	2200      	movs	r2, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bb4:	f7fe fb5c 	bl	8000270 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc0:	e058      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4611      	mov	r1, r2
 8001bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bdc:	4642      	mov	r2, r8
 8001bde:	464b      	mov	r3, r9
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	0159      	lsls	r1, r3, #5
 8001bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bee:	0150      	lsls	r0, r2, #5
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4641      	mov	r1, r8
 8001bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c14:	ebb2 040a 	subs.w	r4, r2, sl
 8001c18:	eb63 050b 	sbc.w	r5, r3, fp
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	00eb      	lsls	r3, r5, #3
 8001c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c2a:	00e2      	lsls	r2, r4, #3
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	461d      	mov	r5, r3
 8001c30:	4643      	mov	r3, r8
 8001c32:	18e3      	adds	r3, r4, r3
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	464b      	mov	r3, r9
 8001c38:	eb45 0303 	adc.w	r3, r5, r3
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	028b      	lsls	r3, r1, #10
 8001c4e:	4621      	mov	r1, r4
 8001c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c54:	4621      	mov	r1, r4
 8001c56:	028a      	lsls	r2, r1, #10
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	61fa      	str	r2, [r7, #28]
 8001c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c68:	f7fe fb02 	bl	8000270 <__aeabi_uldivmod>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4613      	mov	r3, r2
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	0c1b      	lsrs	r3, r3, #16
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c8e:	e002      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3750      	adds	r7, #80	; 0x50
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	007a1200 	.word	0x007a1200

08001cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ccc:	f7ff fff0 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0a9b      	lsrs	r3, r3, #10
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	080058bc 	.word	0x080058bc

08001cf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCC_GetClockConfig+0x60>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0207 	and.w	r2, r3, #7
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e041      	b.n	8001dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f839 	bl	8001df2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f000 f9d8 	bl	8002148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d001      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e04e      	b.n	8001ebe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d022      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4a:	d01d      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d018      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00e      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_TIM_Base_Start_IT+0xd4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d004      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d111      	bne.n	8001eac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d010      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eaa:	e007      	b.n	8001ebc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40000800 	.word	0x40000800
 8001ed8:	40000c00 	.word	0x40000c00
 8001edc:	40010400 	.word	0x40010400
 8001ee0:	40014000 	.word	0x40014000
 8001ee4:	40001800 	.word	0x40001800

08001ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0202 	mvn.w	r2, #2
 8001f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8ee 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8e0 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8f1 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0204 	mvn.w	r2, #4
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8c4 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8b6 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f8c7 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0208 	mvn.w	r2, #8
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f89a 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f88c 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f89d 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b10      	cmp	r3, #16
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b10      	cmp	r3, #16
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0210 	mvn.w	r2, #16
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2208      	movs	r2, #8
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f870 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f862 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f873 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10e      	bne.n	800206c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0201 	mvn.w	r2, #1
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fd36 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	2b80      	cmp	r3, #128	; 0x80
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d107      	bne.n	8002098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f902 	bl	800229c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d107      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f838 	bl	8002134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0220 	mvn.w	r2, #32
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8cc 	bl	8002288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a40      	ldr	r2, [pc, #256]	; (800225c <TIM_Base_SetConfig+0x114>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d00f      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3d      	ldr	r2, [pc, #244]	; (8002260 <TIM_Base_SetConfig+0x118>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00b      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <TIM_Base_SetConfig+0x11c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <TIM_Base_SetConfig+0x120>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3a      	ldr	r2, [pc, #232]	; (800226c <TIM_Base_SetConfig+0x124>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d108      	bne.n	800219a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2f      	ldr	r2, [pc, #188]	; (800225c <TIM_Base_SetConfig+0x114>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d027      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <TIM_Base_SetConfig+0x118>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d023      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <TIM_Base_SetConfig+0x11c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2a      	ldr	r2, [pc, #168]	; (8002268 <TIM_Base_SetConfig+0x120>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a29      	ldr	r2, [pc, #164]	; (800226c <TIM_Base_SetConfig+0x124>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a28      	ldr	r2, [pc, #160]	; (8002270 <TIM_Base_SetConfig+0x128>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a27      	ldr	r2, [pc, #156]	; (8002274 <TIM_Base_SetConfig+0x12c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <TIM_Base_SetConfig+0x130>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a25      	ldr	r2, [pc, #148]	; (800227c <TIM_Base_SetConfig+0x134>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <TIM_Base_SetConfig+0x138>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <TIM_Base_SetConfig+0x13c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <TIM_Base_SetConfig+0x114>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0xf8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <TIM_Base_SetConfig+0x124>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d103      	bne.n	8002248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	615a      	str	r2, [r3, #20]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40010000 	.word	0x40010000
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800
 8002268:	40000c00 	.word	0x40000c00
 800226c:	40010400 	.word	0x40010400
 8002270:	40014000 	.word	0x40014000
 8002274:	40014400 	.word	0x40014400
 8002278:	40014800 	.word	0x40014800
 800227c:	40001800 	.word	0x40001800
 8002280:	40001c00 	.word	0x40001c00
 8002284:	40002000 	.word	0x40002000

08002288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 0208 	add.w	r2, r3, #8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f103 0208 	add.w	r2, r3, #8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f103 0208 	add.w	r2, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	601a      	str	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002368:	d103      	bne.n	8002372 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e00c      	b.n	800238c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3308      	adds	r3, #8
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e002      	b.n	8002380 <vListInsert+0x2e>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	d2f6      	bcs.n	800237a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	601a      	str	r2, [r3, #0]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6892      	ldr	r2, [r2, #8]
 80023da:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6852      	ldr	r2, [r2, #4]
 80023e4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d103      	bne.n	80023f8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1e5a      	subs	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800243e:	bf00      	nop
 8002440:	e7fe      	b.n	8002440 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002442:	f001 fc89 	bl	8003d58 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	68f9      	ldr	r1, [r7, #12]
 8002450:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	441a      	add	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	3b01      	subs	r3, #1
 8002474:	68f9      	ldr	r1, [r7, #12]
 8002476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	441a      	add	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	22ff      	movs	r2, #255	; 0xff
 8002486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	22ff      	movs	r2, #255	; 0xff
 800248e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00f      	beq.n	80024c0 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3310      	adds	r3, #16
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 ff99 	bl	80033dc <xTaskRemoveFromEventList>
 80024aa:	e009      	b.n	80024c0 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3310      	adds	r3, #16
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fefd 	bl	80022b0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3324      	adds	r3, #36	; 0x24
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fef8 	bl	80022b0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024c0:	f001 fc7a 	bl	8003db8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024c4:	2301      	movs	r3, #1
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b08c      	sub	sp, #48	; 0x30
 80024d2:	af02      	add	r7, sp, #8
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	4613      	mov	r3, r2
 80024da:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <xQueueGenericCreate+0x2a>
        __asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	61bb      	str	r3, [r7, #24]
    }
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <xQueueGenericCreate+0x48>
 8002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	429a      	cmp	r2, r3
 8002514:	d101      	bne.n	800251a <xQueueGenericCreate+0x4c>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <xQueueGenericCreate+0x4e>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <xQueueGenericCreate+0x68>
        __asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	617b      	str	r3, [r7, #20]
    }
 8002532:	bf00      	nop
 8002534:	e7fe      	b.n	8002534 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800253c:	d90a      	bls.n	8002554 <xQueueGenericCreate+0x86>
        __asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	613b      	str	r3, [r7, #16]
    }
 8002550:	bf00      	nop
 8002552:	e7fe      	b.n	8002552 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	3350      	adds	r3, #80	; 0x50
 8002558:	4618      	mov	r0, r3
 800255a:	f001 fcdf 	bl	8003f1c <pvPortMalloc>
 800255e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3350      	adds	r3, #80	; 0x50
 800256e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002570:	79fa      	ldrb	r2, [r7, #7]
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f805 	bl	800258c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002582:	6a3b      	ldr	r3, [r7, #32]
    }
 8002584:	4618      	mov	r0, r3
 8002586:	3728      	adds	r7, #40	; 0x28
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e002      	b.n	80025ae <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025ba:	2101      	movs	r1, #1
 80025bc:	69b8      	ldr	r0, [r7, #24]
 80025be:	f7ff ff2b 	bl	8002418 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <xQueueGenericSend+0x32>
        __asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	623b      	str	r3, [r7, #32]
    }
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d103      	bne.n	8002614 <xQueueGenericSend+0x40>
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <xQueueGenericSend+0x44>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <xQueueGenericSend+0x46>
 8002618:	2300      	movs	r3, #0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <xQueueGenericSend+0x60>
        __asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	61fb      	str	r3, [r7, #28]
    }
 8002630:	bf00      	nop
 8002632:	e7fe      	b.n	8002632 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d103      	bne.n	8002642 <xQueueGenericSend+0x6e>
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <xQueueGenericSend+0x72>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <xQueueGenericSend+0x74>
 8002646:	2300      	movs	r3, #0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <xQueueGenericSend+0x8e>
        __asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	61bb      	str	r3, [r7, #24]
    }
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002662:	f001 fb79 	bl	8003d58 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <xQueueGenericSend+0xa4>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d112      	bne.n	800269e <xQueueGenericSend+0xca>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800267e:	f000 fa33 	bl	8002ae8 <prvCopyDataToQueue>
 8002682:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <xQueueGenericSend+0xc2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	3324      	adds	r3, #36	; 0x24
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fea3 	bl	80033dc <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002696:	f001 fb8f 	bl	8003db8 <vPortExitCritical>
                return pdPASS;
 800269a:	2301      	movs	r3, #1
 800269c:	e062      	b.n	8002764 <xQueueGenericSend+0x190>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <xQueueGenericSend+0xd8>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026a4:	f001 fb88 	bl	8003db8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e05b      	b.n	8002764 <xQueueGenericSend+0x190>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <xQueueGenericSend+0xec>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fef2 	bl	80034a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026bc:	2301      	movs	r3, #1
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026c0:	f001 fb7a 	bl	8003db8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026c4:	f000 fcd8 	bl	8003078 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026c8:	f001 fb46 	bl	8003d58 <vPortEnterCritical>
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d8:	d103      	bne.n	80026e2 <xQueueGenericSend+0x10e>
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ee:	d103      	bne.n	80026f8 <xQueueGenericSend+0x124>
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026f8:	f001 fb5e 	bl	8003db8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026fc:	1d3a      	adds	r2, r7, #4
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fee1 	bl	80034cc <xTaskCheckForTimeOut>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d123      	bne.n	8002758 <xQueueGenericSend+0x184>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002712:	f000 fae1 	bl	8002cd8 <prvIsQueueFull>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <xQueueGenericSend+0x178>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	3310      	adds	r3, #16
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fe35 	bl	8003394 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800272a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800272c:	f000 fa6c 	bl	8002c08 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002730:	f000 fcb0 	bl	8003094 <xTaskResumeAll>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d193      	bne.n	8002662 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <xQueueGenericSend+0x198>)
 800273c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	e78a      	b.n	8002662 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800274c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800274e:	f000 fa5b 	bl	8002c08 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002752:	f000 fc9f 	bl	8003094 <xTaskResumeAll>
 8002756:	e784      	b.n	8002662 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800275a:	f000 fa55 	bl	8002c08 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800275e:	f000 fc99 	bl	8003094 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002762:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002764:	4618      	mov	r0, r3
 8002766:	3730      	adds	r7, #48	; 0x30
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	e000ed04 	.word	0xe000ed04

08002770 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <xQueueReceive+0x30>
        __asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	623b      	str	r3, [r7, #32]
    }
 800279c:	bf00      	nop
 800279e:	e7fe      	b.n	800279e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <xQueueReceive+0x3e>
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <xQueueReceive+0x42>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <xQueueReceive+0x44>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <xQueueReceive+0x5e>
        __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	61fb      	str	r3, [r7, #28]
    }
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027ce:	f001 fac3 	bl	8003d58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d014      	beq.n	8002808 <xQueueReceive+0x98>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e2:	f000 f9eb 	bl	8002bbc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <xQueueReceive+0x90>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	3310      	adds	r3, #16
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fdee 	bl	80033dc <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002800:	f001 fada 	bl	8003db8 <vPortExitCritical>
                return pdPASS;
 8002804:	2301      	movs	r3, #1
 8002806:	e069      	b.n	80028dc <xQueueReceive+0x16c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <xQueueReceive+0xa6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800280e:	f001 fad3 	bl	8003db8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002812:	2300      	movs	r3, #0
 8002814:	e062      	b.n	80028dc <xQueueReceive+0x16c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <xQueueReceive+0xba>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fe3d 	bl	80034a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002826:	2301      	movs	r3, #1
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800282a:	f001 fac5 	bl	8003db8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800282e:	f000 fc23 	bl	8003078 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002832:	f001 fa91 	bl	8003d58 <vPortEnterCritical>
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800283c:	b25b      	sxtb	r3, r3
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002842:	d103      	bne.n	800284c <xQueueReceive+0xdc>
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002852:	b25b      	sxtb	r3, r3
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002858:	d103      	bne.n	8002862 <xQueueReceive+0xf2>
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002862:	f001 faa9 	bl	8003db8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002866:	1d3a      	adds	r2, r7, #4
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fe2c 	bl	80034cc <xTaskCheckForTimeOut>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d123      	bne.n	80028c2 <xQueueReceive+0x152>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800287a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287c:	f000 fa16 	bl	8002cac <prvIsQueueEmpty>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d017      	beq.n	80028b6 <xQueueReceive+0x146>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	3324      	adds	r3, #36	; 0x24
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fd80 	bl	8003394 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002896:	f000 f9b7 	bl	8002c08 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800289a:	f000 fbfb 	bl	8003094 <xTaskResumeAll>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d194      	bne.n	80027ce <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <xQueueReceive+0x174>)
 80028a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	e78b      	b.n	80027ce <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b8:	f000 f9a6 	bl	8002c08 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028bc:	f000 fbea 	bl	8003094 <xTaskResumeAll>
 80028c0:	e785      	b.n	80027ce <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c4:	f000 f9a0 	bl	8002c08 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028c8:	f000 fbe4 	bl	8003094 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ce:	f000 f9ed 	bl	8002cac <prvIsQueueEmpty>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f43f af7a 	beq.w	80027ce <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80028da:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3730      	adds	r7, #48	; 0x30
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	e000ed04 	.word	0xe000ed04

080028e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	; 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	61bb      	str	r3, [r7, #24]
    }
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	617b      	str	r3, [r7, #20]
    }
 8002934:	bf00      	nop
 8002936:	e7fe      	b.n	8002936 <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002938:	f001 fa0e 	bl	8003d58 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d019      	beq.n	800297c <xQueueSemaphoreTake+0x94>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <xQueueSemaphoreTake+0x7a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002958:	f001 f854 	bl	8003a04 <pvTaskIncrementMutexHeldCount>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <xQueueSemaphoreTake+0x8c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	3310      	adds	r3, #16
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fd34 	bl	80033dc <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002974:	f001 fa20 	bl	8003db8 <vPortExitCritical>
                return pdPASS;
 8002978:	2301      	movs	r3, #1
 800297a:	e097      	b.n	8002aac <xQueueSemaphoreTake+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d111      	bne.n	80029a6 <xQueueSemaphoreTake+0xbe>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <xQueueSemaphoreTake+0xb6>
        __asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	613b      	str	r3, [r7, #16]
    }
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueSemaphoreTake+0xb4>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800299e:	f001 fa0b 	bl	8003db8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e082      	b.n	8002aac <xQueueSemaphoreTake+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d106      	bne.n	80029ba <xQueueSemaphoreTake+0xd2>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029ac:	f107 0308 	add.w	r3, r7, #8
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fd75 	bl	80034a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029b6:	2301      	movs	r3, #1
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029ba:	f001 f9fd 	bl	8003db8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029be:	f000 fb5b 	bl	8003078 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029c2:	f001 f9c9 	bl	8003d58 <vPortEnterCritical>
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d2:	d103      	bne.n	80029dc <xQueueSemaphoreTake+0xf4>
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e8:	d103      	bne.n	80029f2 <xQueueSemaphoreTake+0x10a>
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f2:	f001 f9e1 	bl	8003db8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029f6:	463a      	mov	r2, r7
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fd64 	bl	80034cc <xTaskCheckForTimeOut>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d132      	bne.n	8002a70 <xQueueSemaphoreTake+0x188>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a0c:	f000 f94e 	bl	8002cac <prvIsQueueEmpty>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d026      	beq.n	8002a64 <xQueueSemaphoreTake+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <xQueueSemaphoreTake+0x14a>
                        {
                            taskENTER_CRITICAL();
 8002a1e:	f001 f99b 	bl	8003d58 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fe6e 	bl	8003708 <xTaskPriorityInherit>
 8002a2c:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 8002a2e:	f001 f9c3 	bl	8003db8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	3324      	adds	r3, #36	; 0x24
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fcaa 	bl	8003394 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a42:	f000 f8e1 	bl	8002c08 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a46:	f000 fb25 	bl	8003094 <xTaskResumeAll>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f af73 	bne.w	8002938 <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <xQueueSemaphoreTake+0x1cc>)
 8002a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	e769      	b.n	8002938 <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a66:	f000 f8cf 	bl	8002c08 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a6a:	f000 fb13 	bl	8003094 <xTaskResumeAll>
 8002a6e:	e763      	b.n	8002938 <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a72:	f000 f8c9 	bl	8002c08 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a76:	f000 fb0d 	bl	8003094 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a7c:	f000 f916 	bl	8002cac <prvIsQueueEmpty>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f43f af58 	beq.w	8002938 <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <xQueueSemaphoreTake+0x1c2>
                        {
                            taskENTER_CRITICAL();
 8002a8e:	f001 f963 	bl	8003d58 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a94:	f000 f810 	bl	8002ab8 <prvGetDisinheritPriorityAfterTimeout>
 8002a98:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	69f9      	ldr	r1, [r7, #28]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 ff21 	bl	80038e8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8002aa6:	f001 f987 	bl	8003db8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002aaa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3730      	adds	r7, #48	; 0x30
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	e000ed04 	.word	0xe000ed04

08002ab8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1c3 0305 	rsb	r3, r3, #5
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e001      	b.n	8002ada <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002ada:	68fb      	ldr	r3, [r7, #12]
    }
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10d      	bne.n	8002b22 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d14d      	bne.n	8002baa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fe6e 	bl	80037f4 <xTaskPriorityDisinherit>
 8002b18:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	e043      	b.n	8002baa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d119      	bne.n	8002b5c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6858      	ldr	r0, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	461a      	mov	r2, r3
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	f001 fc1a 	bl	800436c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	441a      	add	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d32b      	bcc.n	8002baa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	e026      	b.n	8002baa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68d8      	ldr	r0, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	461a      	mov	r2, r3
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	f001 fc00 	bl	800436c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	425b      	negs	r3, r3
 8002b76:	441a      	add	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d207      	bcs.n	8002b98 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	425b      	negs	r3, r3
 8002b92:	441a      	add	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d105      	bne.n	8002baa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002bb2:	697b      	ldr	r3, [r7, #20]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	441a      	add	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d303      	bcc.n	8002bf0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68d9      	ldr	r1, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f001 fbb6 	bl	800436c <memcpy>
    }
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c10:	f001 f8a2 	bl	8003d58 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c1a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c1c:	e011      	b.n	8002c42 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d012      	beq.n	8002c4c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3324      	adds	r3, #36	; 0x24
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fbd6 	bl	80033dc <xTaskRemoveFromEventList>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002c36:	f000 fcaf 	bl	8003598 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	dce9      	bgt.n	8002c1e <prvUnlockQueue+0x16>
 8002c4a:	e000      	b.n	8002c4e <prvUnlockQueue+0x46>
                        break;
 8002c4c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	22ff      	movs	r2, #255	; 0xff
 8002c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002c56:	f001 f8af 	bl	8003db8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c5a:	f001 f87d 	bl	8003d58 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c64:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c66:	e011      	b.n	8002c8c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d012      	beq.n	8002c96 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3310      	adds	r3, #16
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fbb1 	bl	80033dc <xTaskRemoveFromEventList>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c80:	f000 fc8a 	bl	8003598 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c84:	7bbb      	ldrb	r3, [r7, #14]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	dce9      	bgt.n	8002c68 <prvUnlockQueue+0x60>
 8002c94:	e000      	b.n	8002c98 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c96:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	22ff      	movs	r2, #255	; 0xff
 8002c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ca0:	f001 f88a 	bl	8003db8 <vPortExitCritical>
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002cb4:	f001 f850 	bl	8003d58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e001      	b.n	8002cca <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cca:	f001 f875 	bl	8003db8 <vPortExitCritical>

    return xReturn;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ce0:	f001 f83a 	bl	8003d58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d102      	bne.n	8002cf6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e001      	b.n	8002cfa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cfa:	f001 f85d 	bl	8003db8 <vPortExitCritical>

    return xReturn;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08c      	sub	sp, #48	; 0x30
 8002d0c:	af04      	add	r7, sp, #16
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 f8fd 	bl	8003f1c <pvPortMalloc>
 8002d22:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00e      	beq.n	8002d48 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d2a:	2058      	movs	r0, #88	; 0x58
 8002d2c:	f001 f8f6 	bl	8003f1c <pvPortMalloc>
 8002d30:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3e:	e005      	b.n	8002d4c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d40:	6978      	ldr	r0, [r7, #20]
 8002d42:	f001 f9cb 	bl	80040dc <vPortFree>
 8002d46:	e001      	b.n	8002d4c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d013      	beq.n	8002d7a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	2300      	movs	r3, #0
 8002d56:	9303      	str	r3, [sp, #12]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	9302      	str	r3, [sp, #8]
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f80e 	bl	8002d8a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d6e:	69f8      	ldr	r0, [r7, #28]
 8002d70:	f000 f8a2 	bl	8002eb8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d74:	2301      	movs	r3, #1
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e002      	b.n	8002d80 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d7e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d80:	69bb      	ldr	r3, [r7, #24]
    }
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b088      	sub	sp, #32
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	461a      	mov	r2, r3
 8002da2:	21a5      	movs	r1, #165	; 0xa5
 8002da4:	f001 faf0 	bl	8004388 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002db2:	3b01      	subs	r3, #1
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f023 0307 	bic.w	r3, r3, #7
 8002dc0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	617b      	str	r3, [r7, #20]
    }
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01f      	beq.n	8002e28 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	e012      	b.n	8002e14 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	7819      	ldrb	r1, [r3, #0]
 8002df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3334      	adds	r3, #52	; 0x34
 8002dfe:	460a      	mov	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b09      	cmp	r3, #9
 8002e18:	d9e9      	bls.n	8002dee <prvInitialiseNewTask+0x64>
 8002e1a:	e000      	b.n	8002e1e <prvInitialiseNewTask+0x94>
            {
                break;
 8002e1c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e26:	e003      	b.n	8002e30 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d901      	bls.n	8002e3a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e36:	2304      	movs	r3, #4
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e44:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	2200      	movs	r2, #0
 8002e4a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fa4d 	bl	80022f0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	3318      	adds	r3, #24
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fa48 	bl	80022f0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e64:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	f1c3 0205 	rsb	r2, r3, #5
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	3350      	adds	r3, #80	; 0x50
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 fa82 	bl	8004388 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	3354      	adds	r3, #84	; 0x54
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 fa7b 	bl	8004388 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	69b8      	ldr	r0, [r7, #24]
 8002e98:	f000 fe2e 	bl	8003af8 <pxPortInitialiseStack>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eae:	bf00      	nop
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ec0:	f000 ff4a 	bl	8003d58 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ec4:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <prvAddNewTaskToReadyList+0xa8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <prvAddNewTaskToReadyList+0xa8>)
 8002ecc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ece:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <prvAddNewTaskToReadyList+0xac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <prvAddNewTaskToReadyList+0xac>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002edc:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <prvAddNewTaskToReadyList+0xa8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d110      	bne.n	8002f06 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ee4:	f000 fb76 	bl	80035d4 <prvInitialiseTaskLists>
 8002ee8:	e00d      	b.n	8002f06 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <prvAddNewTaskToReadyList+0xb0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <prvAddNewTaskToReadyList+0xac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d802      	bhi.n	8002f06 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f00:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <prvAddNewTaskToReadyList+0xac>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <prvAddNewTaskToReadyList+0xb4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <prvAddNewTaskToReadyList+0xb4>)
 8002f0e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <prvAddNewTaskToReadyList+0xb4>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <prvAddNewTaskToReadyList+0xb8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <prvAddNewTaskToReadyList+0xb8>)
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <prvAddNewTaskToReadyList+0xbc>)
 8002f38:	441a      	add	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4610      	mov	r0, r2
 8002f42:	f7ff f9e2 	bl	800230a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f46:	f000 ff37 	bl	8003db8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <prvAddNewTaskToReadyList+0xb0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <prvAddNewTaskToReadyList+0xac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200002bc 	.word	0x200002bc
 8002f64:	200001e4 	.word	0x200001e4
 8002f68:	200002c8 	.word	0x200002c8
 8002f6c:	200002d8 	.word	0x200002d8
 8002f70:	200002c4 	.word	0x200002c4
 8002f74:	200001e8 	.word	0x200001e8

08002f78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d017      	beq.n	8002fba <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <vTaskDelay+0x60>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <vTaskDelay+0x30>
        __asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	60bb      	str	r3, [r7, #8]
    }
 8002fa4:	bf00      	nop
 8002fa6:	e7fe      	b.n	8002fa6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002fa8:	f000 f866 	bl	8003078 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fac:	2100      	movs	r1, #0
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fd3c 	bl	8003a2c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002fb4:	f000 f86e 	bl	8003094 <xTaskResumeAll>
 8002fb8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <vTaskDelay+0x64>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200002e4 	.word	0x200002e4
 8002fdc:	e000ed04 	.word	0xe000ed04

08002fe0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <vTaskStartScheduler+0x7c>)
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2282      	movs	r2, #130	; 0x82
 8002ff2:	491b      	ldr	r1, [pc, #108]	; (8003060 <vTaskStartScheduler+0x80>)
 8002ff4:	481b      	ldr	r0, [pc, #108]	; (8003064 <vTaskStartScheduler+0x84>)
 8002ff6:	f7ff fe87 	bl	8002d08 <xTaskCreate>
 8002ffa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d116      	bne.n	8003030 <vTaskStartScheduler+0x50>
        __asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	60bb      	str	r3, [r7, #8]
    }
 8003014:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <vTaskStartScheduler+0x88>)
 8003018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800301c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <vTaskStartScheduler+0x8c>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <vTaskStartScheduler+0x90>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800302a:	f000 fdf3 	bl	8003c14 <xPortStartScheduler>
 800302e:	e00e      	b.n	800304e <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003036:	d10a      	bne.n	800304e <vTaskStartScheduler+0x6e>
        __asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	607b      	str	r3, [r7, #4]
    }
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <vTaskStartScheduler+0x94>)
 8003050:	681b      	ldr	r3, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200002e0 	.word	0x200002e0
 8003060:	080058a4 	.word	0x080058a4
 8003064:	080035b1 	.word	0x080035b1
 8003068:	200002dc 	.word	0x200002dc
 800306c:	200002c8 	.word	0x200002c8
 8003070:	200002c0 	.word	0x200002c0
 8003074:	2000000c 	.word	0x2000000c

08003078 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <vTaskSuspendAll+0x18>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a03      	ldr	r2, [pc, #12]	; (8003090 <vTaskSuspendAll+0x18>)
 8003084:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	200002e4 	.word	0x200002e4

08003094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030a2:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <xTaskResumeAll+0xfc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <xTaskResumeAll+0x2c>
        __asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	603b      	str	r3, [r7, #0]
    }
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030c0:	f000 fe4a 	bl	8003d58 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <xTaskResumeAll+0xfc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	4a31      	ldr	r2, [pc, #196]	; (8003190 <xTaskResumeAll+0xfc>)
 80030cc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <xTaskResumeAll+0xfc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d155      	bne.n	8003182 <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <xTaskResumeAll+0x100>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d051      	beq.n	8003182 <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030de:	e02e      	b.n	800313e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <xTaskResumeAll+0x104>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3318      	adds	r3, #24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f969 	bl	80023c4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3304      	adds	r3, #4
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f964 	bl	80023c4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	2201      	movs	r2, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <xTaskResumeAll+0x108>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	4a24      	ldr	r2, [pc, #144]	; (800319c <xTaskResumeAll+0x108>)
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4a21      	ldr	r2, [pc, #132]	; (80031a0 <xTaskResumeAll+0x10c>)
 800311c:	441a      	add	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3304      	adds	r3, #4
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f7ff f8f0 	bl	800230a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <xTaskResumeAll+0x110>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	429a      	cmp	r2, r3
 8003136:	d302      	bcc.n	800313e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <xTaskResumeAll+0x114>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <xTaskResumeAll+0x104>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1cc      	bne.n	80030e0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800314c:	f000 fac0 	bl	80036d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <xTaskResumeAll+0x118>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d010      	beq.n	800317e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800315c:	f000 f828 	bl	80031b0 <xTaskIncrementTick>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <xTaskResumeAll+0x114>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	3b01      	subs	r3, #1
 8003170:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f1      	bne.n	800315c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <xTaskResumeAll+0x118>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <xTaskResumeAll+0x114>)
 8003180:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003182:	f000 fe19 	bl	8003db8 <vPortExitCritical>

    return xAlreadyYielded;
 8003186:	687b      	ldr	r3, [r7, #4]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	200002e4 	.word	0x200002e4
 8003194:	200002bc 	.word	0x200002bc
 8003198:	2000027c 	.word	0x2000027c
 800319c:	200002c4 	.word	0x200002c4
 80031a0:	200001e8 	.word	0x200001e8
 80031a4:	200001e4 	.word	0x200001e4
 80031a8:	200002d0 	.word	0x200002d0
 80031ac:	200002cc 	.word	0x200002cc

080031b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ba:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <xTaskIncrementTick+0x108>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d16f      	bne.n	80032a2 <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031c2:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <xTaskIncrementTick+0x10c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031ca:	4a3c      	ldr	r2, [pc, #240]	; (80032bc <xTaskIncrementTick+0x10c>)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d120      	bne.n	8003218 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80031d6:	4b3a      	ldr	r3, [pc, #232]	; (80032c0 <xTaskIncrementTick+0x110>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <xTaskIncrementTick+0x46>
        __asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	603b      	str	r3, [r7, #0]
    }
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xTaskIncrementTick+0x44>
 80031f6:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <xTaskIncrementTick+0x110>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <xTaskIncrementTick+0x114>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <xTaskIncrementTick+0x110>)
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4a2f      	ldr	r2, [pc, #188]	; (80032c4 <xTaskIncrementTick+0x114>)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <xTaskIncrementTick+0x118>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4a2d      	ldr	r2, [pc, #180]	; (80032c8 <xTaskIncrementTick+0x118>)
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	f000 fa5c 	bl	80036d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003218:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <xTaskIncrementTick+0x11c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	429a      	cmp	r2, r3
 8003220:	d344      	bcc.n	80032ac <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <xTaskIncrementTick+0x110>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800322c:	4b27      	ldr	r3, [pc, #156]	; (80032cc <xTaskIncrementTick+0x11c>)
 800322e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003232:	601a      	str	r2, [r3, #0]
                    break;
 8003234:	e03a      	b.n	80032ac <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <xTaskIncrementTick+0x110>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d203      	bcs.n	8003256 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <xTaskIncrementTick+0x11c>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003254:	e02a      	b.n	80032ac <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	3304      	adds	r3, #4
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff f8b2 	bl	80023c4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	3318      	adds	r3, #24
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f8a9 	bl	80023c4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	2201      	movs	r2, #1
 8003278:	409a      	lsls	r2, r3
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <xTaskIncrementTick+0x120>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <xTaskIncrementTick+0x120>)
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <xTaskIncrementTick+0x124>)
 8003292:	441a      	add	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	3304      	adds	r3, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f7ff f835 	bl	800230a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032a0:	e7bf      	b.n	8003222 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <xTaskIncrementTick+0x128>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <xTaskIncrementTick+0x128>)
 80032aa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80032ac:	697b      	ldr	r3, [r7, #20]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200002e4 	.word	0x200002e4
 80032bc:	200002c0 	.word	0x200002c0
 80032c0:	20000274 	.word	0x20000274
 80032c4:	20000278 	.word	0x20000278
 80032c8:	200002d4 	.word	0x200002d4
 80032cc:	200002dc 	.word	0x200002dc
 80032d0:	200002c4 	.word	0x200002c4
 80032d4:	200001e8 	.word	0x200001e8
 80032d8:	200002cc 	.word	0x200002cc

080032dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032e2:	4b27      	ldr	r3, [pc, #156]	; (8003380 <vTaskSwitchContext+0xa4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <vTaskSwitchContext+0xa8>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80032f0:	e03f      	b.n	8003372 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <vTaskSwitchContext+0xa8>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <vTaskSwitchContext+0xac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003306:	7afb      	ldrb	r3, [r7, #11]
 8003308:	f1c3 031f 	rsb	r3, r3, #31
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	491f      	ldr	r1, [pc, #124]	; (800338c <vTaskSwitchContext+0xb0>)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	607b      	str	r3, [r7, #4]
    }
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <vTaskSwitchContext+0x5a>
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <vTaskSwitchContext+0xb0>)
 8003344:	4413      	add	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	3308      	adds	r3, #8
 800335a:	429a      	cmp	r2, r3
 800335c:	d104      	bne.n	8003368 <vTaskSwitchContext+0x8c>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a08      	ldr	r2, [pc, #32]	; (8003390 <vTaskSwitchContext+0xb4>)
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200002e4 	.word	0x200002e4
 8003384:	200002d0 	.word	0x200002d0
 8003388:	200002c4 	.word	0x200002c4
 800338c:	200001e8 	.word	0x200001e8
 8003390:	200001e4 	.word	0x200001e4

08003394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	60fb      	str	r3, [r7, #12]
    }
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <vTaskPlaceOnEventList+0x44>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3318      	adds	r3, #24
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fe ffc5 	bl	8002352 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033c8:	2101      	movs	r1, #1
 80033ca:	6838      	ldr	r0, [r7, #0]
 80033cc:	f000 fb2e 	bl	8003a2c <prvAddCurrentTaskToDelayedList>
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	200001e4 	.word	0x200001e4

080033dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	60fb      	str	r3, [r7, #12]
    }
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	3318      	adds	r3, #24
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe ffd9 	bl	80023c4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003412:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <xTaskRemoveFromEventList+0xac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11c      	bne.n	8003454 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	3304      	adds	r3, #4
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe ffd0 	bl	80023c4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	2201      	movs	r2, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	4b17      	ldr	r3, [pc, #92]	; (800348c <xTaskRemoveFromEventList+0xb0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4313      	orrs	r3, r2
 8003432:	4a16      	ldr	r2, [pc, #88]	; (800348c <xTaskRemoveFromEventList+0xb0>)
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4a13      	ldr	r2, [pc, #76]	; (8003490 <xTaskRemoveFromEventList+0xb4>)
 8003444:	441a      	add	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3304      	adds	r3, #4
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f7fe ff5c 	bl	800230a <vListInsertEnd>
 8003452:	e005      	b.n	8003460 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	3318      	adds	r3, #24
 8003458:	4619      	mov	r1, r3
 800345a:	480e      	ldr	r0, [pc, #56]	; (8003494 <xTaskRemoveFromEventList+0xb8>)
 800345c:	f7fe ff55 	bl	800230a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <xTaskRemoveFromEventList+0xbc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	429a      	cmp	r2, r3
 800346c:	d905      	bls.n	800347a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800346e:	2301      	movs	r3, #1
 8003470:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <xTaskRemoveFromEventList+0xc0>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e001      	b.n	800347e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800347e:	697b      	ldr	r3, [r7, #20]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	200002e4 	.word	0x200002e4
 800348c:	200002c4 	.word	0x200002c4
 8003490:	200001e8 	.word	0x200001e8
 8003494:	2000027c 	.word	0x2000027c
 8003498:	200001e4 	.word	0x200001e4
 800349c:	200002d0 	.word	0x200002d0

080034a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <vTaskInternalSetTimeOutState+0x24>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <vTaskInternalSetTimeOutState+0x28>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	200002d4 	.word	0x200002d4
 80034c8:	200002c0 	.word	0x200002c0

080034cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	613b      	str	r3, [r7, #16]
    }
 80034ee:	bf00      	nop
 80034f0:	e7fe      	b.n	80034f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	60fb      	str	r3, [r7, #12]
    }
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800350e:	f000 fc23 	bl	8003d58 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003512:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <xTaskCheckForTimeOut+0xc4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800352a:	d102      	bne.n	8003532 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	e026      	b.n	8003580 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <xTaskCheckForTimeOut+0xc8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d00a      	beq.n	8003554 <xTaskCheckForTimeOut+0x88>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	429a      	cmp	r2, r3
 8003546:	d305      	bcc.n	8003554 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003548:	2301      	movs	r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e015      	b.n	8003580 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	429a      	cmp	r2, r3
 800355c:	d20b      	bcs.n	8003576 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	1ad2      	subs	r2, r2, r3
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ff98 	bl	80034a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	e004      	b.n	8003580 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800357c:	2301      	movs	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003580:	f000 fc1a 	bl	8003db8 <vPortExitCritical>

    return xReturn;
 8003584:	69fb      	ldr	r3, [r7, #28]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200002c0 	.word	0x200002c0
 8003594:	200002d4 	.word	0x200002d4

08003598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <vTaskMissedYield+0x14>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	200002d0 	.word	0x200002d0

080035b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80035b8:	f000 f84c 	bl	8003654 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <prvIdleTask+0x20>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80035cc:	e7f4      	b.n	80035b8 <prvIdleTask+0x8>
 80035ce:	bf00      	nop
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	e00c      	b.n	80035fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <prvInitialiseTaskLists+0x60>)
 80035ec:	4413      	add	r3, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fe5e 	bl	80022b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3301      	adds	r3, #1
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d9ef      	bls.n	80035e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <prvInitialiseTaskLists+0x64>)
 8003602:	f7fe fe55 	bl	80022b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <prvInitialiseTaskLists+0x68>)
 8003608:	f7fe fe52 	bl	80022b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800360c:	480c      	ldr	r0, [pc, #48]	; (8003640 <prvInitialiseTaskLists+0x6c>)
 800360e:	f7fe fe4f 	bl	80022b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003612:	480c      	ldr	r0, [pc, #48]	; (8003644 <prvInitialiseTaskLists+0x70>)
 8003614:	f7fe fe4c 	bl	80022b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003618:	480b      	ldr	r0, [pc, #44]	; (8003648 <prvInitialiseTaskLists+0x74>)
 800361a:	f7fe fe49 	bl	80022b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <prvInitialiseTaskLists+0x78>)
 8003620:	4a05      	ldr	r2, [pc, #20]	; (8003638 <prvInitialiseTaskLists+0x64>)
 8003622:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <prvInitialiseTaskLists+0x7c>)
 8003626:	4a05      	ldr	r2, [pc, #20]	; (800363c <prvInitialiseTaskLists+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200001e8 	.word	0x200001e8
 8003638:	2000024c 	.word	0x2000024c
 800363c:	20000260 	.word	0x20000260
 8003640:	2000027c 	.word	0x2000027c
 8003644:	20000290 	.word	0x20000290
 8003648:	200002a8 	.word	0x200002a8
 800364c:	20000274 	.word	0x20000274
 8003650:	20000278 	.word	0x20000278

08003654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800365a:	e019      	b.n	8003690 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800365c:	f000 fb7c 	bl	8003d58 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <prvCheckTasksWaitingTermination+0x50>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fea9 	bl	80023c4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <prvCheckTasksWaitingTermination+0x54>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <prvCheckTasksWaitingTermination+0x54>)
 800367a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3b01      	subs	r3, #1
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 8003684:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003686:	f000 fb97 	bl	8003db8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f810 	bl	80036b0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e1      	bne.n	800365c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000290 	.word	0x20000290
 80036a8:	200002bc 	.word	0x200002bc
 80036ac:	200002a4 	.word	0x200002a4

080036b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fd0d 	bl	80040dc <vPortFree>
                vPortFree( pxTCB );
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fd0a 	bl	80040dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <prvResetNextTaskUnblockTime+0x30>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <prvResetNextTaskUnblockTime+0x34>)
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036e6:	e005      	b.n	80036f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <prvResetNextTaskUnblockTime+0x30>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <prvResetNextTaskUnblockTime+0x34>)
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000274 	.word	0x20000274
 8003704:	200002dc 	.word	0x200002dc

08003708 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d05e      	beq.n	80037dc <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003722:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <xTaskPriorityInherit+0xe0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	429a      	cmp	r2, r3
 800372a:	d24e      	bcs.n	80037ca <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	db06      	blt.n	8003742 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003734:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <xTaskPriorityInherit+0xe0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f1c3 0205 	rsb	r2, r3, #5
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	6959      	ldr	r1, [r3, #20]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4a26      	ldr	r2, [pc, #152]	; (80037ec <xTaskPriorityInherit+0xe4>)
 8003754:	4413      	add	r3, r2
 8003756:	4299      	cmp	r1, r3
 8003758:	d12f      	bne.n	80037ba <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3304      	adds	r3, #4
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fe30 	bl	80023c4 <uxListRemove>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	2201      	movs	r2, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43da      	mvns	r2, r3
 8003776:	4b1e      	ldr	r3, [pc, #120]	; (80037f0 <xTaskPriorityInherit+0xe8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4013      	ands	r3, r2
 800377c:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <xTaskPriorityInherit+0xe8>)
 800377e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003780:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <xTaskPriorityInherit+0xe0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <xTaskPriorityInherit+0xe8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <xTaskPriorityInherit+0xe8>)
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4a10      	ldr	r2, [pc, #64]	; (80037ec <xTaskPriorityInherit+0xe4>)
 80037aa:	441a      	add	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f7fe fda9 	bl	800230a <vListInsertEnd>
 80037b8:	e004      	b.n	80037c4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <xTaskPriorityInherit+0xe0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e008      	b.n	80037dc <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <xTaskPriorityInherit+0xe0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d201      	bcs.n	80037dc <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80037d8:	2301      	movs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80037dc:	68fb      	ldr	r3, [r7, #12]
    }
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200001e4 	.word	0x200001e4
 80037ec:	200001e8 	.word	0x200001e8
 80037f0:	200002c4 	.word	0x200002c4

080037f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d063      	beq.n	80038d2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800380a:	4b34      	ldr	r3, [pc, #208]	; (80038dc <xTaskPriorityDisinherit+0xe8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d00a      	beq.n	800382a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	60fb      	str	r3, [r7, #12]
    }
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	60bb      	str	r3, [r7, #8]
    }
 8003844:	bf00      	nop
 8003846:	e7fe      	b.n	8003846 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	429a      	cmp	r2, r3
 800385c:	d039      	beq.n	80038d2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d135      	bne.n	80038d2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fdaa 	bl	80023c4 <uxListRemove>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	2201      	movs	r2, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43da      	mvns	r2, r3
 8003882:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <xTaskPriorityDisinherit+0xec>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4013      	ands	r3, r2
 8003888:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <xTaskPriorityDisinherit+0xec>)
 800388a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f1c3 0205 	rsb	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <xTaskPriorityDisinherit+0xec>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <xTaskPriorityDisinherit+0xec>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <xTaskPriorityDisinherit+0xf0>)
 80038c0:	441a      	add	r2, r3
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7fe fd1e 	bl	800230a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80038ce:	2301      	movs	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80038d2:	697b      	ldr	r3, [r7, #20]
    }
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200001e4 	.word	0x200001e4
 80038e0:	200002c4 	.word	0x200002c4
 80038e4:	200001e8 	.word	0x200001e8

080038e8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d077      	beq.n	80039f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	60fb      	str	r3, [r7, #12]
    }
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d902      	bls.n	800392e <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	e002      	b.n	8003934 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003932:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	429a      	cmp	r2, r3
 800393c:	d058      	beq.n	80039f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	429a      	cmp	r2, r3
 8003946:	d153      	bne.n	80039f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	429a      	cmp	r2, r3
 8003950:	d10a      	bne.n	8003968 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	60bb      	str	r3, [r7, #8]
    }
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db04      	blt.n	8003986 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f1c3 0205 	rsb	r2, r3, #5
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	6959      	ldr	r1, [r3, #20]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003996:	4413      	add	r3, r2
 8003998:	4299      	cmp	r1, r3
 800399a:	d129      	bne.n	80039f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	3304      	adds	r3, #4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fd0f 	bl	80023c4 <uxListRemove>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	2201      	movs	r2, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4013      	ands	r3, r2
 80039be:	4a10      	ldr	r2, [pc, #64]	; (8003a00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80039c0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	2201      	movs	r2, #1
 80039c8:	409a      	lsls	r2, r3
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4a06      	ldr	r2, [pc, #24]	; (80039fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80039e2:	441a      	add	r2, r3
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f7fe fc8d 	bl	800230a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80039f0:	bf00      	nop
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200001e4 	.word	0x200001e4
 80039fc:	200001e8 	.word	0x200001e8
 8003a00:	200002c4 	.word	0x200002c4

08003a04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a16:	3201      	adds	r2, #1
 8003a18:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8003a1a:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
    }
 8003a1e:	4618      	mov	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	200001e4 	.word	0x200001e4

08003a2c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a3c:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe fcbe 	bl	80023c4 <uxListRemove>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a4e:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	2201      	movs	r2, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4013      	ands	r3, r2
 8003a62:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a64:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6c:	d10a      	bne.n	8003a84 <prvAddCurrentTaskToDelayedList+0x58>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a74:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	481a      	ldr	r0, [pc, #104]	; (8003ae8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003a7e:	f7fe fc44 	bl	800230a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a82:	e026      	b.n	8003ad2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d209      	bcs.n	8003ab0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f7fe fc52 	bl	8002352 <vListInsert>
}
 8003aae:	e010      	b.n	8003ad2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7fe fc48 	bl	8002352 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d202      	bcs.n	8003ad2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003acc:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6013      	str	r3, [r2, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200002c0 	.word	0x200002c0
 8003ae0:	200001e4 	.word	0x200001e4
 8003ae4:	200002c4 	.word	0x200002c4
 8003ae8:	200002a8 	.word	0x200002a8
 8003aec:	20000278 	.word	0x20000278
 8003af0:	20000274 	.word	0x20000274
 8003af4:	200002dc 	.word	0x200002dc

08003af8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3b04      	subs	r3, #4
 8003b08:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3b04      	subs	r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 0201 	bic.w	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3b04      	subs	r3, #4
 8003b26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b28:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <pxPortInitialiseStack+0x64>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3b14      	subs	r3, #20
 8003b32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3b04      	subs	r3, #4
 8003b3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f06f 0202 	mvn.w	r2, #2
 8003b46:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3b20      	subs	r3, #32
 8003b4c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	08003b61 	.word	0x08003b61

08003b60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <prvTaskExitError+0x54>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b72:	d00a      	beq.n	8003b8a <prvTaskExitError+0x2a>
        __asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	60fb      	str	r3, [r7, #12]
    }
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <prvTaskExitError+0x28>
        __asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	60bb      	str	r3, [r7, #8]
    }
 8003b9c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b9e:	bf00      	nop
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0fc      	beq.n	8003ba0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	20000010 	.word	0x20000010
	...

08003bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <pxCurrentTCBConst2>)
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	6808      	ldr	r0, [r1, #0]
 8003bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bca:	f380 8809 	msr	PSP, r0
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	f380 8811 	msr	BASEPRI, r0
 8003bda:	4770      	bx	lr
 8003bdc:	f3af 8000 	nop.w

08003be0 <pxCurrentTCBConst2>:
 8003be0:	200001e4 	.word	0x200001e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop

08003be8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003be8:	4808      	ldr	r0, [pc, #32]	; (8003c0c <prvPortStartFirstTask+0x24>)
 8003bea:	6800      	ldr	r0, [r0, #0]
 8003bec:	6800      	ldr	r0, [r0, #0]
 8003bee:	f380 8808 	msr	MSP, r0
 8003bf2:	f04f 0000 	mov.w	r0, #0
 8003bf6:	f380 8814 	msr	CONTROL, r0
 8003bfa:	b662      	cpsie	i
 8003bfc:	b661      	cpsie	f
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	df00      	svc	0
 8003c08:	bf00      	nop
 8003c0a:	0000      	.short	0x0000
 8003c0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop

08003c14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c1a:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <xPortStartScheduler+0x120>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a46      	ldr	r2, [pc, #280]	; (8003d38 <xPortStartScheduler+0x124>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d10a      	bne.n	8003c3a <xPortStartScheduler+0x26>
        __asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	613b      	str	r3, [r7, #16]
    }
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <xPortStartScheduler+0x120>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a3f      	ldr	r2, [pc, #252]	; (8003d3c <xPortStartScheduler+0x128>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10a      	bne.n	8003c5a <xPortStartScheduler+0x46>
        __asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	60fb      	str	r3, [r7, #12]
    }
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c5a:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <xPortStartScheduler+0x12c>)
 8003c5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	22ff      	movs	r2, #255	; 0xff
 8003c6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <xPortStartScheduler+0x130>)
 8003c80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c82:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <xPortStartScheduler+0x134>)
 8003c84:	2207      	movs	r2, #7
 8003c86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c88:	e009      	b.n	8003c9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003c8a:	4b2f      	ldr	r3, [pc, #188]	; (8003d48 <xPortStartScheduler+0x134>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	4a2d      	ldr	r2, [pc, #180]	; (8003d48 <xPortStartScheduler+0x134>)
 8003c92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d0ef      	beq.n	8003c8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003caa:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <xPortStartScheduler+0x134>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1c3 0307 	rsb	r3, r3, #7
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d00a      	beq.n	8003ccc <xPortStartScheduler+0xb8>
        __asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	60bb      	str	r3, [r7, #8]
    }
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ccc:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <xPortStartScheduler+0x134>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <xPortStartScheduler+0x134>)
 8003cd4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <xPortStartScheduler+0x134>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cde:	4a1a      	ldr	r2, [pc, #104]	; (8003d48 <xPortStartScheduler+0x134>)
 8003ce0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003cea:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <xPortStartScheduler+0x138>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <xPortStartScheduler+0x138>)
 8003cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <xPortStartScheduler+0x138>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <xPortStartScheduler+0x138>)
 8003cfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003d02:	f000 f8db 	bl	8003ebc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <xPortStartScheduler+0x13c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003d0c:	f000 f8fa 	bl	8003f04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d10:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <xPortStartScheduler+0x140>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0f      	ldr	r2, [pc, #60]	; (8003d54 <xPortStartScheduler+0x140>)
 8003d16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003d1c:	f7ff ff64 	bl	8003be8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d20:	f7ff fadc 	bl	80032dc <vTaskSwitchContext>
    prvTaskExitError();
 8003d24:	f7ff ff1c 	bl	8003b60 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	e000ed00 	.word	0xe000ed00
 8003d38:	410fc271 	.word	0x410fc271
 8003d3c:	410fc270 	.word	0x410fc270
 8003d40:	e000e400 	.word	0xe000e400
 8003d44:	200002e8 	.word	0x200002e8
 8003d48:	200002ec 	.word	0x200002ec
 8003d4c:	e000ed20 	.word	0xe000ed20
 8003d50:	20000010 	.word	0x20000010
 8003d54:	e000ef34 	.word	0xe000ef34

08003d58 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
        __asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	607b      	str	r3, [r7, #4]
    }
 8003d70:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <vPortEnterCritical+0x58>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3301      	adds	r3, #1
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <vPortEnterCritical+0x58>)
 8003d7a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <vPortEnterCritical+0x58>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10f      	bne.n	8003da4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <vPortEnterCritical+0x5c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <vPortEnterCritical+0x4c>
        __asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	603b      	str	r3, [r7, #0]
    }
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <vPortEnterCritical+0x4a>
    }
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	20000010 	.word	0x20000010
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <vPortExitCritical+0x50>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <vPortExitCritical+0x24>
        __asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	607b      	str	r3, [r7, #4]
    }
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <vPortExitCritical+0x50>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <vPortExitCritical+0x50>)
 8003de4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <vPortExitCritical+0x50>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <vPortExitCritical+0x42>
 8003dee:	2300      	movs	r3, #0
 8003df0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003df8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000010 	.word	0x20000010
 8003e0c:	00000000 	.word	0x00000000

08003e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e10:	f3ef 8009 	mrs	r0, PSP
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <pxCurrentTCBConst>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	f01e 0f10 	tst.w	lr, #16
 8003e20:	bf08      	it	eq
 8003e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2a:	6010      	str	r0, [r2, #0]
 8003e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e34:	f380 8811 	msr	BASEPRI, r0
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f7ff fa4c 	bl	80032dc <vTaskSwitchContext>
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	f380 8811 	msr	BASEPRI, r0
 8003e4c:	bc09      	pop	{r0, r3}
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	6808      	ldr	r0, [r1, #0]
 8003e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e56:	f01e 0f10 	tst.w	lr, #16
 8003e5a:	bf08      	it	eq
 8003e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e60:	f380 8809 	msr	PSP, r0
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	f3af 8000 	nop.w

08003e70 <pxCurrentTCBConst>:
 8003e70:	200001e4 	.word	0x200001e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop

08003e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	607b      	str	r3, [r7, #4]
    }
 8003e90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e92:	f7ff f98d 	bl	80031b0 <xTaskIncrementTick>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <SysTick_Handler+0x40>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f383 8811 	msr	BASEPRI, r3
    }
 8003eae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	e000ed04 	.word	0xe000ed04

08003ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <vPortSetupTimerInterrupt+0x34>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <vPortSetupTimerInterrupt+0x38>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <vPortSetupTimerInterrupt+0x3c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <vPortSetupTimerInterrupt+0x40>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	099b      	lsrs	r3, r3, #6
 8003ed8:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <vPortSetupTimerInterrupt+0x44>)
 8003eda:	3b01      	subs	r3, #1
 8003edc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <vPortSetupTimerInterrupt+0x34>)
 8003ee0:	2207      	movs	r2, #7
 8003ee2:	601a      	str	r2, [r3, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000e010 	.word	0xe000e010
 8003ef4:	e000e018 	.word	0xe000e018
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	10624dd3 	.word	0x10624dd3
 8003f00:	e000e014 	.word	0xe000e014

08003f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f14 <vPortEnableVFP+0x10>
 8003f08:	6801      	ldr	r1, [r0, #0]
 8003f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f0e:	6001      	str	r1, [r0, #0]
 8003f10:	4770      	bx	lr
 8003f12:	0000      	.short	0x0000
 8003f14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop

08003f1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003f28:	f7ff f8a6 	bl	8003078 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f2c:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <pvPortMalloc+0x1a8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f34:	f000 f934 	bl	80041a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f38:	4b63      	ldr	r3, [pc, #396]	; (80040c8 <pvPortMalloc+0x1ac>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f040 80a7 	bne.w	8004094 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02d      	beq.n	8003fa8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d227      	bcs.n	8003fa8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003f58:	2208      	movs	r2, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d021      	beq.n	8003fae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f023 0307 	bic.w	r3, r3, #7
 8003f70:	3308      	adds	r3, #8
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d214      	bcs.n	8003fa2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f023 0307 	bic.w	r3, r3, #7
 8003f7e:	3308      	adds	r3, #8
 8003f80:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d010      	beq.n	8003fae <pvPortMalloc+0x92>
        __asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	617b      	str	r3, [r7, #20]
    }
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fa6:	e002      	b.n	8003fae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	e000      	b.n	8003fb0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d06e      	beq.n	8004094 <pvPortMalloc+0x178>
 8003fb6:	4b45      	ldr	r3, [pc, #276]	; (80040cc <pvPortMalloc+0x1b0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d869      	bhi.n	8004094 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003fc0:	4b43      	ldr	r3, [pc, #268]	; (80040d0 <pvPortMalloc+0x1b4>)
 8003fc2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003fc4:	4b42      	ldr	r3, [pc, #264]	; (80040d0 <pvPortMalloc+0x1b4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fca:	e004      	b.n	8003fd6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d903      	bls.n	8003fe8 <pvPortMalloc+0xcc>
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f1      	bne.n	8003fcc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003fe8:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <pvPortMalloc+0x1a8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d050      	beq.n	8004094 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	4413      	add	r3, r2
 8003ffa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	2308      	movs	r3, #8
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	429a      	cmp	r2, r3
 8004012:	d91f      	bls.n	8004054 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <pvPortMalloc+0x120>
        __asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	613b      	str	r3, [r7, #16]
    }
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800404e:	69b8      	ldr	r0, [r7, #24]
 8004050:	f000 f908 	bl	8004264 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <pvPortMalloc+0x1b0>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <pvPortMalloc+0x1b0>)
 8004060:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <pvPortMalloc+0x1b0>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <pvPortMalloc+0x1b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d203      	bcs.n	8004076 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <pvPortMalloc+0x1b0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <pvPortMalloc+0x1b8>)
 8004074:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <pvPortMalloc+0x1ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	431a      	orrs	r2, r3
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <pvPortMalloc+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3301      	adds	r3, #1
 8004090:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <pvPortMalloc+0x1bc>)
 8004092:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004094:	f7fe fffe 	bl	8003094 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <pvPortMalloc+0x19c>
        __asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60fb      	str	r3, [r7, #12]
    }
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80040b8:	69fb      	ldr	r3, [r7, #28]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3728      	adds	r7, #40	; 0x28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20012ef8 	.word	0x20012ef8
 80040c8:	20012f0c 	.word	0x20012f0c
 80040cc:	20012efc 	.word	0x20012efc
 80040d0:	20012ef0 	.word	0x20012ef0
 80040d4:	20012f00 	.word	0x20012f00
 80040d8:	20012f04 	.word	0x20012f04

080040dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d04d      	beq.n	800418a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80040ee:	2308      	movs	r3, #8
 80040f0:	425b      	negs	r3, r3
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4413      	add	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4b24      	ldr	r3, [pc, #144]	; (8004194 <vPortFree+0xb8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <vPortFree+0x44>
        __asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60fb      	str	r3, [r7, #12]
    }
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <vPortFree+0x62>
        __asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60bb      	str	r3, [r7, #8]
    }
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	4b14      	ldr	r3, [pc, #80]	; (8004194 <vPortFree+0xb8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01e      	beq.n	800418a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11a      	bne.n	800418a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <vPortFree+0xb8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	43db      	mvns	r3, r3
 800415e:	401a      	ands	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004164:	f7fe ff88 	bl	8003078 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <vPortFree+0xbc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4413      	add	r3, r2
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <vPortFree+0xbc>)
 8004174:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004176:	6938      	ldr	r0, [r7, #16]
 8004178:	f000 f874 	bl	8004264 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <vPortFree+0xc0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	4a06      	ldr	r2, [pc, #24]	; (800419c <vPortFree+0xc0>)
 8004184:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004186:	f7fe ff85 	bl	8003094 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20012f0c 	.word	0x20012f0c
 8004198:	20012efc 	.word	0x20012efc
 800419c:	20012f08 	.word	0x20012f08

080041a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80041aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <prvHeapInit+0xac>)
 80041ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3307      	adds	r3, #7
 80041be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	4a1f      	ldr	r2, [pc, #124]	; (800424c <prvHeapInit+0xac>)
 80041d0:	4413      	add	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041d8:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <prvHeapInit+0xb0>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041de:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <prvHeapInit+0xb0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041ec:	2208      	movs	r2, #8
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a15      	ldr	r2, [pc, #84]	; (8004254 <prvHeapInit+0xb4>)
 8004200:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <prvHeapInit+0xb4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <prvHeapInit+0xb4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	1ad2      	subs	r2, r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <prvHeapInit+0xb4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <prvHeapInit+0xb8>)
 800422e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <prvHeapInit+0xbc>)
 8004236:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <prvHeapInit+0xc0>)
 800423a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	200002f0 	.word	0x200002f0
 8004250:	20012ef0 	.word	0x20012ef0
 8004254:	20012ef8 	.word	0x20012ef8
 8004258:	20012f00 	.word	0x20012f00
 800425c:	20012efc 	.word	0x20012efc
 8004260:	20012f0c 	.word	0x20012f0c

08004264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <prvInsertBlockIntoFreeList+0xac>)
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e002      	b.n	8004278 <prvInsertBlockIntoFreeList+0x14>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	d8f7      	bhi.n	8004272 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4413      	add	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d108      	bne.n	80042a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	441a      	add	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	441a      	add	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d118      	bne.n	80042ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <prvInsertBlockIntoFreeList+0xb0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d00d      	beq.n	80042e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e008      	b.n	80042f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <prvInsertBlockIntoFreeList+0xb0>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e003      	b.n	80042f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d002      	beq.n	8004302 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20012ef0 	.word	0x20012ef0
 8004314:	20012ef8 	.word	0x20012ef8

08004318 <__errno>:
 8004318:	4b01      	ldr	r3, [pc, #4]	; (8004320 <__errno+0x8>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000014 	.word	0x20000014

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4d0d      	ldr	r5, [pc, #52]	; (800435c <__libc_init_array+0x38>)
 8004328:	4c0d      	ldr	r4, [pc, #52]	; (8004360 <__libc_init_array+0x3c>)
 800432a:	1b64      	subs	r4, r4, r5
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	2600      	movs	r6, #0
 8004330:	42a6      	cmp	r6, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	4d0b      	ldr	r5, [pc, #44]	; (8004364 <__libc_init_array+0x40>)
 8004336:	4c0c      	ldr	r4, [pc, #48]	; (8004368 <__libc_init_array+0x44>)
 8004338:	f001 fa5a 	bl	80057f0 <_init>
 800433c:	1b64      	subs	r4, r4, r5
 800433e:	10a4      	asrs	r4, r4, #2
 8004340:	2600      	movs	r6, #0
 8004342:	42a6      	cmp	r6, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f855 3b04 	ldr.w	r3, [r5], #4
 800434c:	4798      	blx	r3
 800434e:	3601      	adds	r6, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f855 3b04 	ldr.w	r3, [r5], #4
 8004356:	4798      	blx	r3
 8004358:	3601      	adds	r6, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	08005a14 	.word	0x08005a14
 8004360:	08005a14 	.word	0x08005a14
 8004364:	08005a14 	.word	0x08005a14
 8004368:	08005a18 	.word	0x08005a18

0800436c <memcpy>:
 800436c:	440a      	add	r2, r1
 800436e:	4291      	cmp	r1, r2
 8004370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004374:	d100      	bne.n	8004378 <memcpy+0xc>
 8004376:	4770      	bx	lr
 8004378:	b510      	push	{r4, lr}
 800437a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800437e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004382:	4291      	cmp	r1, r2
 8004384:	d1f9      	bne.n	800437a <memcpy+0xe>
 8004386:	bd10      	pop	{r4, pc}

08004388 <memset>:
 8004388:	4402      	add	r2, r0
 800438a:	4603      	mov	r3, r0
 800438c:	4293      	cmp	r3, r2
 800438e:	d100      	bne.n	8004392 <memset+0xa>
 8004390:	4770      	bx	lr
 8004392:	f803 1b01 	strb.w	r1, [r3], #1
 8004396:	e7f9      	b.n	800438c <memset+0x4>

08004398 <iprintf>:
 8004398:	b40f      	push	{r0, r1, r2, r3}
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <iprintf+0x2c>)
 800439c:	b513      	push	{r0, r1, r4, lr}
 800439e:	681c      	ldr	r4, [r3, #0]
 80043a0:	b124      	cbz	r4, 80043ac <iprintf+0x14>
 80043a2:	69a3      	ldr	r3, [r4, #24]
 80043a4:	b913      	cbnz	r3, 80043ac <iprintf+0x14>
 80043a6:	4620      	mov	r0, r4
 80043a8:	f000 f8e2 	bl	8004570 <__sinit>
 80043ac:	ab05      	add	r3, sp, #20
 80043ae:	9a04      	ldr	r2, [sp, #16]
 80043b0:	68a1      	ldr	r1, [r4, #8]
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	4620      	mov	r0, r4
 80043b6:	f000 fbfb 	bl	8004bb0 <_vfiprintf_r>
 80043ba:	b002      	add	sp, #8
 80043bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c0:	b004      	add	sp, #16
 80043c2:	4770      	bx	lr
 80043c4:	20000014 	.word	0x20000014

080043c8 <rand>:
 80043c8:	4b16      	ldr	r3, [pc, #88]	; (8004424 <rand+0x5c>)
 80043ca:	b510      	push	{r4, lr}
 80043cc:	681c      	ldr	r4, [r3, #0]
 80043ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043d0:	b9b3      	cbnz	r3, 8004400 <rand+0x38>
 80043d2:	2018      	movs	r0, #24
 80043d4:	f000 f97e 	bl	80046d4 <malloc>
 80043d8:	63a0      	str	r0, [r4, #56]	; 0x38
 80043da:	b928      	cbnz	r0, 80043e8 <rand+0x20>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <rand+0x60>)
 80043e0:	4812      	ldr	r0, [pc, #72]	; (800442c <rand+0x64>)
 80043e2:	214e      	movs	r1, #78	; 0x4e
 80043e4:	f000 f84e 	bl	8004484 <__assert_func>
 80043e8:	4a11      	ldr	r2, [pc, #68]	; (8004430 <rand+0x68>)
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <rand+0x6c>)
 80043ec:	e9c0 2300 	strd	r2, r3, [r0]
 80043f0:	4b11      	ldr	r3, [pc, #68]	; (8004438 <rand+0x70>)
 80043f2:	6083      	str	r3, [r0, #8]
 80043f4:	230b      	movs	r3, #11
 80043f6:	8183      	strh	r3, [r0, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	2300      	movs	r3, #0
 80043fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004400:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004402:	4a0e      	ldr	r2, [pc, #56]	; (800443c <rand+0x74>)
 8004404:	6920      	ldr	r0, [r4, #16]
 8004406:	6963      	ldr	r3, [r4, #20]
 8004408:	490d      	ldr	r1, [pc, #52]	; (8004440 <rand+0x78>)
 800440a:	4342      	muls	r2, r0
 800440c:	fb01 2203 	mla	r2, r1, r3, r2
 8004410:	fba0 0101 	umull	r0, r1, r0, r1
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	eb42 0001 	adc.w	r0, r2, r1
 800441a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800441e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004422:	bd10      	pop	{r4, pc}
 8004424:	20000014 	.word	0x20000014
 8004428:	080058c8 	.word	0x080058c8
 800442c:	080058df 	.word	0x080058df
 8004430:	abcd330e 	.word	0xabcd330e
 8004434:	e66d1234 	.word	0xe66d1234
 8004438:	0005deec 	.word	0x0005deec
 800443c:	5851f42d 	.word	0x5851f42d
 8004440:	4c957f2d 	.word	0x4c957f2d

08004444 <siprintf>:
 8004444:	b40e      	push	{r1, r2, r3}
 8004446:	b500      	push	{lr}
 8004448:	b09c      	sub	sp, #112	; 0x70
 800444a:	ab1d      	add	r3, sp, #116	; 0x74
 800444c:	9002      	str	r0, [sp, #8]
 800444e:	9006      	str	r0, [sp, #24]
 8004450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004454:	4809      	ldr	r0, [pc, #36]	; (800447c <siprintf+0x38>)
 8004456:	9107      	str	r1, [sp, #28]
 8004458:	9104      	str	r1, [sp, #16]
 800445a:	4909      	ldr	r1, [pc, #36]	; (8004480 <siprintf+0x3c>)
 800445c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004460:	9105      	str	r1, [sp, #20]
 8004462:	6800      	ldr	r0, [r0, #0]
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	a902      	add	r1, sp, #8
 8004468:	f000 fa78 	bl	800495c <_svfiprintf_r>
 800446c:	9b02      	ldr	r3, [sp, #8]
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	b01c      	add	sp, #112	; 0x70
 8004474:	f85d eb04 	ldr.w	lr, [sp], #4
 8004478:	b003      	add	sp, #12
 800447a:	4770      	bx	lr
 800447c:	20000014 	.word	0x20000014
 8004480:	ffff0208 	.word	0xffff0208

08004484 <__assert_func>:
 8004484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004486:	4614      	mov	r4, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <__assert_func+0x2c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4605      	mov	r5, r0
 8004490:	68d8      	ldr	r0, [r3, #12]
 8004492:	b14c      	cbz	r4, 80044a8 <__assert_func+0x24>
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <__assert_func+0x30>)
 8004496:	9100      	str	r1, [sp, #0]
 8004498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800449c:	4906      	ldr	r1, [pc, #24]	; (80044b8 <__assert_func+0x34>)
 800449e:	462b      	mov	r3, r5
 80044a0:	f000 f8e4 	bl	800466c <fiprintf>
 80044a4:	f000 ff6e 	bl	8005384 <abort>
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <__assert_func+0x38>)
 80044aa:	461c      	mov	r4, r3
 80044ac:	e7f3      	b.n	8004496 <__assert_func+0x12>
 80044ae:	bf00      	nop
 80044b0:	20000014 	.word	0x20000014
 80044b4:	0800593a 	.word	0x0800593a
 80044b8:	08005947 	.word	0x08005947
 80044bc:	08005975 	.word	0x08005975

080044c0 <std>:
 80044c0:	2300      	movs	r3, #0
 80044c2:	b510      	push	{r4, lr}
 80044c4:	4604      	mov	r4, r0
 80044c6:	e9c0 3300 	strd	r3, r3, [r0]
 80044ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044ce:	6083      	str	r3, [r0, #8]
 80044d0:	8181      	strh	r1, [r0, #12]
 80044d2:	6643      	str	r3, [r0, #100]	; 0x64
 80044d4:	81c2      	strh	r2, [r0, #14]
 80044d6:	6183      	str	r3, [r0, #24]
 80044d8:	4619      	mov	r1, r3
 80044da:	2208      	movs	r2, #8
 80044dc:	305c      	adds	r0, #92	; 0x5c
 80044de:	f7ff ff53 	bl	8004388 <memset>
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <std+0x38>)
 80044e4:	6263      	str	r3, [r4, #36]	; 0x24
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <std+0x3c>)
 80044e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <std+0x40>)
 80044ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <std+0x44>)
 80044f0:	6224      	str	r4, [r4, #32]
 80044f2:	6323      	str	r3, [r4, #48]	; 0x30
 80044f4:	bd10      	pop	{r4, pc}
 80044f6:	bf00      	nop
 80044f8:	08005159 	.word	0x08005159
 80044fc:	0800517b 	.word	0x0800517b
 8004500:	080051b3 	.word	0x080051b3
 8004504:	080051d7 	.word	0x080051d7

08004508 <_cleanup_r>:
 8004508:	4901      	ldr	r1, [pc, #4]	; (8004510 <_cleanup_r+0x8>)
 800450a:	f000 b8c1 	b.w	8004690 <_fwalk_reent>
 800450e:	bf00      	nop
 8004510:	080054c1 	.word	0x080054c1

08004514 <__sfmoreglue>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	2268      	movs	r2, #104	; 0x68
 8004518:	1e4d      	subs	r5, r1, #1
 800451a:	4355      	muls	r5, r2
 800451c:	460e      	mov	r6, r1
 800451e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004522:	f000 f94b 	bl	80047bc <_malloc_r>
 8004526:	4604      	mov	r4, r0
 8004528:	b140      	cbz	r0, 800453c <__sfmoreglue+0x28>
 800452a:	2100      	movs	r1, #0
 800452c:	e9c0 1600 	strd	r1, r6, [r0]
 8004530:	300c      	adds	r0, #12
 8004532:	60a0      	str	r0, [r4, #8]
 8004534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004538:	f7ff ff26 	bl	8004388 <memset>
 800453c:	4620      	mov	r0, r4
 800453e:	bd70      	pop	{r4, r5, r6, pc}

08004540 <__sfp_lock_acquire>:
 8004540:	4801      	ldr	r0, [pc, #4]	; (8004548 <__sfp_lock_acquire+0x8>)
 8004542:	f000 b8c5 	b.w	80046d0 <__retarget_lock_acquire_recursive>
 8004546:	bf00      	nop
 8004548:	20012f11 	.word	0x20012f11

0800454c <__sfp_lock_release>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__sfp_lock_release+0x8>)
 800454e:	f000 b8c0 	b.w	80046d2 <__retarget_lock_release_recursive>
 8004552:	bf00      	nop
 8004554:	20012f11 	.word	0x20012f11

08004558 <__sinit_lock_acquire>:
 8004558:	4801      	ldr	r0, [pc, #4]	; (8004560 <__sinit_lock_acquire+0x8>)
 800455a:	f000 b8b9 	b.w	80046d0 <__retarget_lock_acquire_recursive>
 800455e:	bf00      	nop
 8004560:	20012f12 	.word	0x20012f12

08004564 <__sinit_lock_release>:
 8004564:	4801      	ldr	r0, [pc, #4]	; (800456c <__sinit_lock_release+0x8>)
 8004566:	f000 b8b4 	b.w	80046d2 <__retarget_lock_release_recursive>
 800456a:	bf00      	nop
 800456c:	20012f12 	.word	0x20012f12

08004570 <__sinit>:
 8004570:	b510      	push	{r4, lr}
 8004572:	4604      	mov	r4, r0
 8004574:	f7ff fff0 	bl	8004558 <__sinit_lock_acquire>
 8004578:	69a3      	ldr	r3, [r4, #24]
 800457a:	b11b      	cbz	r3, 8004584 <__sinit+0x14>
 800457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004580:	f7ff bff0 	b.w	8004564 <__sinit_lock_release>
 8004584:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004588:	6523      	str	r3, [r4, #80]	; 0x50
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <__sinit+0x68>)
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <__sinit+0x6c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	62a2      	str	r2, [r4, #40]	; 0x28
 8004592:	42a3      	cmp	r3, r4
 8004594:	bf04      	itt	eq
 8004596:	2301      	moveq	r3, #1
 8004598:	61a3      	streq	r3, [r4, #24]
 800459a:	4620      	mov	r0, r4
 800459c:	f000 f820 	bl	80045e0 <__sfp>
 80045a0:	6060      	str	r0, [r4, #4]
 80045a2:	4620      	mov	r0, r4
 80045a4:	f000 f81c 	bl	80045e0 <__sfp>
 80045a8:	60a0      	str	r0, [r4, #8]
 80045aa:	4620      	mov	r0, r4
 80045ac:	f000 f818 	bl	80045e0 <__sfp>
 80045b0:	2200      	movs	r2, #0
 80045b2:	60e0      	str	r0, [r4, #12]
 80045b4:	2104      	movs	r1, #4
 80045b6:	6860      	ldr	r0, [r4, #4]
 80045b8:	f7ff ff82 	bl	80044c0 <std>
 80045bc:	68a0      	ldr	r0, [r4, #8]
 80045be:	2201      	movs	r2, #1
 80045c0:	2109      	movs	r1, #9
 80045c2:	f7ff ff7d 	bl	80044c0 <std>
 80045c6:	68e0      	ldr	r0, [r4, #12]
 80045c8:	2202      	movs	r2, #2
 80045ca:	2112      	movs	r1, #18
 80045cc:	f7ff ff78 	bl	80044c0 <std>
 80045d0:	2301      	movs	r3, #1
 80045d2:	61a3      	str	r3, [r4, #24]
 80045d4:	e7d2      	b.n	800457c <__sinit+0xc>
 80045d6:	bf00      	nop
 80045d8:	080058c4 	.word	0x080058c4
 80045dc:	08004509 	.word	0x08004509

080045e0 <__sfp>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	4607      	mov	r7, r0
 80045e4:	f7ff ffac 	bl	8004540 <__sfp_lock_acquire>
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <__sfp+0x84>)
 80045ea:	681e      	ldr	r6, [r3, #0]
 80045ec:	69b3      	ldr	r3, [r6, #24]
 80045ee:	b913      	cbnz	r3, 80045f6 <__sfp+0x16>
 80045f0:	4630      	mov	r0, r6
 80045f2:	f7ff ffbd 	bl	8004570 <__sinit>
 80045f6:	3648      	adds	r6, #72	; 0x48
 80045f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	d503      	bpl.n	8004608 <__sfp+0x28>
 8004600:	6833      	ldr	r3, [r6, #0]
 8004602:	b30b      	cbz	r3, 8004648 <__sfp+0x68>
 8004604:	6836      	ldr	r6, [r6, #0]
 8004606:	e7f7      	b.n	80045f8 <__sfp+0x18>
 8004608:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800460c:	b9d5      	cbnz	r5, 8004644 <__sfp+0x64>
 800460e:	4b16      	ldr	r3, [pc, #88]	; (8004668 <__sfp+0x88>)
 8004610:	60e3      	str	r3, [r4, #12]
 8004612:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004616:	6665      	str	r5, [r4, #100]	; 0x64
 8004618:	f000 f859 	bl	80046ce <__retarget_lock_init_recursive>
 800461c:	f7ff ff96 	bl	800454c <__sfp_lock_release>
 8004620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004628:	6025      	str	r5, [r4, #0]
 800462a:	61a5      	str	r5, [r4, #24]
 800462c:	2208      	movs	r2, #8
 800462e:	4629      	mov	r1, r5
 8004630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004634:	f7ff fea8 	bl	8004388 <memset>
 8004638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800463c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004640:	4620      	mov	r0, r4
 8004642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004644:	3468      	adds	r4, #104	; 0x68
 8004646:	e7d9      	b.n	80045fc <__sfp+0x1c>
 8004648:	2104      	movs	r1, #4
 800464a:	4638      	mov	r0, r7
 800464c:	f7ff ff62 	bl	8004514 <__sfmoreglue>
 8004650:	4604      	mov	r4, r0
 8004652:	6030      	str	r0, [r6, #0]
 8004654:	2800      	cmp	r0, #0
 8004656:	d1d5      	bne.n	8004604 <__sfp+0x24>
 8004658:	f7ff ff78 	bl	800454c <__sfp_lock_release>
 800465c:	230c      	movs	r3, #12
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	e7ee      	b.n	8004640 <__sfp+0x60>
 8004662:	bf00      	nop
 8004664:	080058c4 	.word	0x080058c4
 8004668:	ffff0001 	.word	0xffff0001

0800466c <fiprintf>:
 800466c:	b40e      	push	{r1, r2, r3}
 800466e:	b503      	push	{r0, r1, lr}
 8004670:	4601      	mov	r1, r0
 8004672:	ab03      	add	r3, sp, #12
 8004674:	4805      	ldr	r0, [pc, #20]	; (800468c <fiprintf+0x20>)
 8004676:	f853 2b04 	ldr.w	r2, [r3], #4
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	f000 fa97 	bl	8004bb0 <_vfiprintf_r>
 8004682:	b002      	add	sp, #8
 8004684:	f85d eb04 	ldr.w	lr, [sp], #4
 8004688:	b003      	add	sp, #12
 800468a:	4770      	bx	lr
 800468c:	20000014 	.word	0x20000014

08004690 <_fwalk_reent>:
 8004690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004694:	4606      	mov	r6, r0
 8004696:	4688      	mov	r8, r1
 8004698:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800469c:	2700      	movs	r7, #0
 800469e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046a2:	f1b9 0901 	subs.w	r9, r9, #1
 80046a6:	d505      	bpl.n	80046b4 <_fwalk_reent+0x24>
 80046a8:	6824      	ldr	r4, [r4, #0]
 80046aa:	2c00      	cmp	r4, #0
 80046ac:	d1f7      	bne.n	800469e <_fwalk_reent+0xe>
 80046ae:	4638      	mov	r0, r7
 80046b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046b4:	89ab      	ldrh	r3, [r5, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d907      	bls.n	80046ca <_fwalk_reent+0x3a>
 80046ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046be:	3301      	adds	r3, #1
 80046c0:	d003      	beq.n	80046ca <_fwalk_reent+0x3a>
 80046c2:	4629      	mov	r1, r5
 80046c4:	4630      	mov	r0, r6
 80046c6:	47c0      	blx	r8
 80046c8:	4307      	orrs	r7, r0
 80046ca:	3568      	adds	r5, #104	; 0x68
 80046cc:	e7e9      	b.n	80046a2 <_fwalk_reent+0x12>

080046ce <__retarget_lock_init_recursive>:
 80046ce:	4770      	bx	lr

080046d0 <__retarget_lock_acquire_recursive>:
 80046d0:	4770      	bx	lr

080046d2 <__retarget_lock_release_recursive>:
 80046d2:	4770      	bx	lr

080046d4 <malloc>:
 80046d4:	4b02      	ldr	r3, [pc, #8]	; (80046e0 <malloc+0xc>)
 80046d6:	4601      	mov	r1, r0
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	f000 b86f 	b.w	80047bc <_malloc_r>
 80046de:	bf00      	nop
 80046e0:	20000014 	.word	0x20000014

080046e4 <_free_r>:
 80046e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046e6:	2900      	cmp	r1, #0
 80046e8:	d044      	beq.n	8004774 <_free_r+0x90>
 80046ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ee:	9001      	str	r0, [sp, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f1a1 0404 	sub.w	r4, r1, #4
 80046f6:	bfb8      	it	lt
 80046f8:	18e4      	addlt	r4, r4, r3
 80046fa:	f000 ffaf 	bl	800565c <__malloc_lock>
 80046fe:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <_free_r+0x94>)
 8004700:	9801      	ldr	r0, [sp, #4]
 8004702:	6813      	ldr	r3, [r2, #0]
 8004704:	b933      	cbnz	r3, 8004714 <_free_r+0x30>
 8004706:	6063      	str	r3, [r4, #4]
 8004708:	6014      	str	r4, [r2, #0]
 800470a:	b003      	add	sp, #12
 800470c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004710:	f000 bfaa 	b.w	8005668 <__malloc_unlock>
 8004714:	42a3      	cmp	r3, r4
 8004716:	d908      	bls.n	800472a <_free_r+0x46>
 8004718:	6825      	ldr	r5, [r4, #0]
 800471a:	1961      	adds	r1, r4, r5
 800471c:	428b      	cmp	r3, r1
 800471e:	bf01      	itttt	eq
 8004720:	6819      	ldreq	r1, [r3, #0]
 8004722:	685b      	ldreq	r3, [r3, #4]
 8004724:	1949      	addeq	r1, r1, r5
 8004726:	6021      	streq	r1, [r4, #0]
 8004728:	e7ed      	b.n	8004706 <_free_r+0x22>
 800472a:	461a      	mov	r2, r3
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	b10b      	cbz	r3, 8004734 <_free_r+0x50>
 8004730:	42a3      	cmp	r3, r4
 8004732:	d9fa      	bls.n	800472a <_free_r+0x46>
 8004734:	6811      	ldr	r1, [r2, #0]
 8004736:	1855      	adds	r5, r2, r1
 8004738:	42a5      	cmp	r5, r4
 800473a:	d10b      	bne.n	8004754 <_free_r+0x70>
 800473c:	6824      	ldr	r4, [r4, #0]
 800473e:	4421      	add	r1, r4
 8004740:	1854      	adds	r4, r2, r1
 8004742:	42a3      	cmp	r3, r4
 8004744:	6011      	str	r1, [r2, #0]
 8004746:	d1e0      	bne.n	800470a <_free_r+0x26>
 8004748:	681c      	ldr	r4, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	6053      	str	r3, [r2, #4]
 800474e:	4421      	add	r1, r4
 8004750:	6011      	str	r1, [r2, #0]
 8004752:	e7da      	b.n	800470a <_free_r+0x26>
 8004754:	d902      	bls.n	800475c <_free_r+0x78>
 8004756:	230c      	movs	r3, #12
 8004758:	6003      	str	r3, [r0, #0]
 800475a:	e7d6      	b.n	800470a <_free_r+0x26>
 800475c:	6825      	ldr	r5, [r4, #0]
 800475e:	1961      	adds	r1, r4, r5
 8004760:	428b      	cmp	r3, r1
 8004762:	bf04      	itt	eq
 8004764:	6819      	ldreq	r1, [r3, #0]
 8004766:	685b      	ldreq	r3, [r3, #4]
 8004768:	6063      	str	r3, [r4, #4]
 800476a:	bf04      	itt	eq
 800476c:	1949      	addeq	r1, r1, r5
 800476e:	6021      	streq	r1, [r4, #0]
 8004770:	6054      	str	r4, [r2, #4]
 8004772:	e7ca      	b.n	800470a <_free_r+0x26>
 8004774:	b003      	add	sp, #12
 8004776:	bd30      	pop	{r4, r5, pc}
 8004778:	20012f14 	.word	0x20012f14

0800477c <sbrk_aligned>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	4e0e      	ldr	r6, [pc, #56]	; (80047b8 <sbrk_aligned+0x3c>)
 8004780:	460c      	mov	r4, r1
 8004782:	6831      	ldr	r1, [r6, #0]
 8004784:	4605      	mov	r5, r0
 8004786:	b911      	cbnz	r1, 800478e <sbrk_aligned+0x12>
 8004788:	f000 fcd6 	bl	8005138 <_sbrk_r>
 800478c:	6030      	str	r0, [r6, #0]
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	f000 fcd1 	bl	8005138 <_sbrk_r>
 8004796:	1c43      	adds	r3, r0, #1
 8004798:	d00a      	beq.n	80047b0 <sbrk_aligned+0x34>
 800479a:	1cc4      	adds	r4, r0, #3
 800479c:	f024 0403 	bic.w	r4, r4, #3
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	d007      	beq.n	80047b4 <sbrk_aligned+0x38>
 80047a4:	1a21      	subs	r1, r4, r0
 80047a6:	4628      	mov	r0, r5
 80047a8:	f000 fcc6 	bl	8005138 <_sbrk_r>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d101      	bne.n	80047b4 <sbrk_aligned+0x38>
 80047b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80047b4:	4620      	mov	r0, r4
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	20012f18 	.word	0x20012f18

080047bc <_malloc_r>:
 80047bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c0:	1ccd      	adds	r5, r1, #3
 80047c2:	f025 0503 	bic.w	r5, r5, #3
 80047c6:	3508      	adds	r5, #8
 80047c8:	2d0c      	cmp	r5, #12
 80047ca:	bf38      	it	cc
 80047cc:	250c      	movcc	r5, #12
 80047ce:	2d00      	cmp	r5, #0
 80047d0:	4607      	mov	r7, r0
 80047d2:	db01      	blt.n	80047d8 <_malloc_r+0x1c>
 80047d4:	42a9      	cmp	r1, r5
 80047d6:	d905      	bls.n	80047e4 <_malloc_r+0x28>
 80047d8:	230c      	movs	r3, #12
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	2600      	movs	r6, #0
 80047de:	4630      	mov	r0, r6
 80047e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e4:	4e2e      	ldr	r6, [pc, #184]	; (80048a0 <_malloc_r+0xe4>)
 80047e6:	f000 ff39 	bl	800565c <__malloc_lock>
 80047ea:	6833      	ldr	r3, [r6, #0]
 80047ec:	461c      	mov	r4, r3
 80047ee:	bb34      	cbnz	r4, 800483e <_malloc_r+0x82>
 80047f0:	4629      	mov	r1, r5
 80047f2:	4638      	mov	r0, r7
 80047f4:	f7ff ffc2 	bl	800477c <sbrk_aligned>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	4604      	mov	r4, r0
 80047fc:	d14d      	bne.n	800489a <_malloc_r+0xde>
 80047fe:	6834      	ldr	r4, [r6, #0]
 8004800:	4626      	mov	r6, r4
 8004802:	2e00      	cmp	r6, #0
 8004804:	d140      	bne.n	8004888 <_malloc_r+0xcc>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	4631      	mov	r1, r6
 800480a:	4638      	mov	r0, r7
 800480c:	eb04 0803 	add.w	r8, r4, r3
 8004810:	f000 fc92 	bl	8005138 <_sbrk_r>
 8004814:	4580      	cmp	r8, r0
 8004816:	d13a      	bne.n	800488e <_malloc_r+0xd2>
 8004818:	6821      	ldr	r1, [r4, #0]
 800481a:	3503      	adds	r5, #3
 800481c:	1a6d      	subs	r5, r5, r1
 800481e:	f025 0503 	bic.w	r5, r5, #3
 8004822:	3508      	adds	r5, #8
 8004824:	2d0c      	cmp	r5, #12
 8004826:	bf38      	it	cc
 8004828:	250c      	movcc	r5, #12
 800482a:	4629      	mov	r1, r5
 800482c:	4638      	mov	r0, r7
 800482e:	f7ff ffa5 	bl	800477c <sbrk_aligned>
 8004832:	3001      	adds	r0, #1
 8004834:	d02b      	beq.n	800488e <_malloc_r+0xd2>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	442b      	add	r3, r5
 800483a:	6023      	str	r3, [r4, #0]
 800483c:	e00e      	b.n	800485c <_malloc_r+0xa0>
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	1b52      	subs	r2, r2, r5
 8004842:	d41e      	bmi.n	8004882 <_malloc_r+0xc6>
 8004844:	2a0b      	cmp	r2, #11
 8004846:	d916      	bls.n	8004876 <_malloc_r+0xba>
 8004848:	1961      	adds	r1, r4, r5
 800484a:	42a3      	cmp	r3, r4
 800484c:	6025      	str	r5, [r4, #0]
 800484e:	bf18      	it	ne
 8004850:	6059      	strne	r1, [r3, #4]
 8004852:	6863      	ldr	r3, [r4, #4]
 8004854:	bf08      	it	eq
 8004856:	6031      	streq	r1, [r6, #0]
 8004858:	5162      	str	r2, [r4, r5]
 800485a:	604b      	str	r3, [r1, #4]
 800485c:	4638      	mov	r0, r7
 800485e:	f104 060b 	add.w	r6, r4, #11
 8004862:	f000 ff01 	bl	8005668 <__malloc_unlock>
 8004866:	f026 0607 	bic.w	r6, r6, #7
 800486a:	1d23      	adds	r3, r4, #4
 800486c:	1af2      	subs	r2, r6, r3
 800486e:	d0b6      	beq.n	80047de <_malloc_r+0x22>
 8004870:	1b9b      	subs	r3, r3, r6
 8004872:	50a3      	str	r3, [r4, r2]
 8004874:	e7b3      	b.n	80047de <_malloc_r+0x22>
 8004876:	6862      	ldr	r2, [r4, #4]
 8004878:	42a3      	cmp	r3, r4
 800487a:	bf0c      	ite	eq
 800487c:	6032      	streq	r2, [r6, #0]
 800487e:	605a      	strne	r2, [r3, #4]
 8004880:	e7ec      	b.n	800485c <_malloc_r+0xa0>
 8004882:	4623      	mov	r3, r4
 8004884:	6864      	ldr	r4, [r4, #4]
 8004886:	e7b2      	b.n	80047ee <_malloc_r+0x32>
 8004888:	4634      	mov	r4, r6
 800488a:	6876      	ldr	r6, [r6, #4]
 800488c:	e7b9      	b.n	8004802 <_malloc_r+0x46>
 800488e:	230c      	movs	r3, #12
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	4638      	mov	r0, r7
 8004894:	f000 fee8 	bl	8005668 <__malloc_unlock>
 8004898:	e7a1      	b.n	80047de <_malloc_r+0x22>
 800489a:	6025      	str	r5, [r4, #0]
 800489c:	e7de      	b.n	800485c <_malloc_r+0xa0>
 800489e:	bf00      	nop
 80048a0:	20012f14 	.word	0x20012f14

080048a4 <__ssputs_r>:
 80048a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a8:	688e      	ldr	r6, [r1, #8]
 80048aa:	429e      	cmp	r6, r3
 80048ac:	4682      	mov	sl, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	4690      	mov	r8, r2
 80048b2:	461f      	mov	r7, r3
 80048b4:	d838      	bhi.n	8004928 <__ssputs_r+0x84>
 80048b6:	898a      	ldrh	r2, [r1, #12]
 80048b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048bc:	d032      	beq.n	8004924 <__ssputs_r+0x80>
 80048be:	6825      	ldr	r5, [r4, #0]
 80048c0:	6909      	ldr	r1, [r1, #16]
 80048c2:	eba5 0901 	sub.w	r9, r5, r1
 80048c6:	6965      	ldr	r5, [r4, #20]
 80048c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048d0:	3301      	adds	r3, #1
 80048d2:	444b      	add	r3, r9
 80048d4:	106d      	asrs	r5, r5, #1
 80048d6:	429d      	cmp	r5, r3
 80048d8:	bf38      	it	cc
 80048da:	461d      	movcc	r5, r3
 80048dc:	0553      	lsls	r3, r2, #21
 80048de:	d531      	bpl.n	8004944 <__ssputs_r+0xa0>
 80048e0:	4629      	mov	r1, r5
 80048e2:	f7ff ff6b 	bl	80047bc <_malloc_r>
 80048e6:	4606      	mov	r6, r0
 80048e8:	b950      	cbnz	r0, 8004900 <__ssputs_r+0x5c>
 80048ea:	230c      	movs	r3, #12
 80048ec:	f8ca 3000 	str.w	r3, [sl]
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f6:	81a3      	strh	r3, [r4, #12]
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004900:	6921      	ldr	r1, [r4, #16]
 8004902:	464a      	mov	r2, r9
 8004904:	f7ff fd32 	bl	800436c <memcpy>
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	6126      	str	r6, [r4, #16]
 8004916:	6165      	str	r5, [r4, #20]
 8004918:	444e      	add	r6, r9
 800491a:	eba5 0509 	sub.w	r5, r5, r9
 800491e:	6026      	str	r6, [r4, #0]
 8004920:	60a5      	str	r5, [r4, #8]
 8004922:	463e      	mov	r6, r7
 8004924:	42be      	cmp	r6, r7
 8004926:	d900      	bls.n	800492a <__ssputs_r+0x86>
 8004928:	463e      	mov	r6, r7
 800492a:	6820      	ldr	r0, [r4, #0]
 800492c:	4632      	mov	r2, r6
 800492e:	4641      	mov	r1, r8
 8004930:	f000 fe7a 	bl	8005628 <memmove>
 8004934:	68a3      	ldr	r3, [r4, #8]
 8004936:	1b9b      	subs	r3, r3, r6
 8004938:	60a3      	str	r3, [r4, #8]
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	4433      	add	r3, r6
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	2000      	movs	r0, #0
 8004942:	e7db      	b.n	80048fc <__ssputs_r+0x58>
 8004944:	462a      	mov	r2, r5
 8004946:	f000 fe95 	bl	8005674 <_realloc_r>
 800494a:	4606      	mov	r6, r0
 800494c:	2800      	cmp	r0, #0
 800494e:	d1e1      	bne.n	8004914 <__ssputs_r+0x70>
 8004950:	6921      	ldr	r1, [r4, #16]
 8004952:	4650      	mov	r0, sl
 8004954:	f7ff fec6 	bl	80046e4 <_free_r>
 8004958:	e7c7      	b.n	80048ea <__ssputs_r+0x46>
	...

0800495c <_svfiprintf_r>:
 800495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004960:	4698      	mov	r8, r3
 8004962:	898b      	ldrh	r3, [r1, #12]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	b09d      	sub	sp, #116	; 0x74
 8004968:	4607      	mov	r7, r0
 800496a:	460d      	mov	r5, r1
 800496c:	4614      	mov	r4, r2
 800496e:	d50e      	bpl.n	800498e <_svfiprintf_r+0x32>
 8004970:	690b      	ldr	r3, [r1, #16]
 8004972:	b963      	cbnz	r3, 800498e <_svfiprintf_r+0x32>
 8004974:	2140      	movs	r1, #64	; 0x40
 8004976:	f7ff ff21 	bl	80047bc <_malloc_r>
 800497a:	6028      	str	r0, [r5, #0]
 800497c:	6128      	str	r0, [r5, #16]
 800497e:	b920      	cbnz	r0, 800498a <_svfiprintf_r+0x2e>
 8004980:	230c      	movs	r3, #12
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004988:	e0d1      	b.n	8004b2e <_svfiprintf_r+0x1d2>
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	616b      	str	r3, [r5, #20]
 800498e:	2300      	movs	r3, #0
 8004990:	9309      	str	r3, [sp, #36]	; 0x24
 8004992:	2320      	movs	r3, #32
 8004994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004998:	f8cd 800c 	str.w	r8, [sp, #12]
 800499c:	2330      	movs	r3, #48	; 0x30
 800499e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b48 <_svfiprintf_r+0x1ec>
 80049a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049a6:	f04f 0901 	mov.w	r9, #1
 80049aa:	4623      	mov	r3, r4
 80049ac:	469a      	mov	sl, r3
 80049ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049b2:	b10a      	cbz	r2, 80049b8 <_svfiprintf_r+0x5c>
 80049b4:	2a25      	cmp	r2, #37	; 0x25
 80049b6:	d1f9      	bne.n	80049ac <_svfiprintf_r+0x50>
 80049b8:	ebba 0b04 	subs.w	fp, sl, r4
 80049bc:	d00b      	beq.n	80049d6 <_svfiprintf_r+0x7a>
 80049be:	465b      	mov	r3, fp
 80049c0:	4622      	mov	r2, r4
 80049c2:	4629      	mov	r1, r5
 80049c4:	4638      	mov	r0, r7
 80049c6:	f7ff ff6d 	bl	80048a4 <__ssputs_r>
 80049ca:	3001      	adds	r0, #1
 80049cc:	f000 80aa 	beq.w	8004b24 <_svfiprintf_r+0x1c8>
 80049d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049d2:	445a      	add	r2, fp
 80049d4:	9209      	str	r2, [sp, #36]	; 0x24
 80049d6:	f89a 3000 	ldrb.w	r3, [sl]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80a2 	beq.w	8004b24 <_svfiprintf_r+0x1c8>
 80049e0:	2300      	movs	r3, #0
 80049e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ea:	f10a 0a01 	add.w	sl, sl, #1
 80049ee:	9304      	str	r3, [sp, #16]
 80049f0:	9307      	str	r3, [sp, #28]
 80049f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049f6:	931a      	str	r3, [sp, #104]	; 0x68
 80049f8:	4654      	mov	r4, sl
 80049fa:	2205      	movs	r2, #5
 80049fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a00:	4851      	ldr	r0, [pc, #324]	; (8004b48 <_svfiprintf_r+0x1ec>)
 8004a02:	f7fb fbe5 	bl	80001d0 <memchr>
 8004a06:	9a04      	ldr	r2, [sp, #16]
 8004a08:	b9d8      	cbnz	r0, 8004a42 <_svfiprintf_r+0xe6>
 8004a0a:	06d0      	lsls	r0, r2, #27
 8004a0c:	bf44      	itt	mi
 8004a0e:	2320      	movmi	r3, #32
 8004a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a14:	0711      	lsls	r1, r2, #28
 8004a16:	bf44      	itt	mi
 8004a18:	232b      	movmi	r3, #43	; 0x2b
 8004a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a22:	2b2a      	cmp	r3, #42	; 0x2a
 8004a24:	d015      	beq.n	8004a52 <_svfiprintf_r+0xf6>
 8004a26:	9a07      	ldr	r2, [sp, #28]
 8004a28:	4654      	mov	r4, sl
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f04f 0c0a 	mov.w	ip, #10
 8004a30:	4621      	mov	r1, r4
 8004a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a36:	3b30      	subs	r3, #48	; 0x30
 8004a38:	2b09      	cmp	r3, #9
 8004a3a:	d94e      	bls.n	8004ada <_svfiprintf_r+0x17e>
 8004a3c:	b1b0      	cbz	r0, 8004a6c <_svfiprintf_r+0x110>
 8004a3e:	9207      	str	r2, [sp, #28]
 8004a40:	e014      	b.n	8004a6c <_svfiprintf_r+0x110>
 8004a42:	eba0 0308 	sub.w	r3, r0, r8
 8004a46:	fa09 f303 	lsl.w	r3, r9, r3
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	9304      	str	r3, [sp, #16]
 8004a4e:	46a2      	mov	sl, r4
 8004a50:	e7d2      	b.n	80049f8 <_svfiprintf_r+0x9c>
 8004a52:	9b03      	ldr	r3, [sp, #12]
 8004a54:	1d19      	adds	r1, r3, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	9103      	str	r1, [sp, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bfbb      	ittet	lt
 8004a5e:	425b      	neglt	r3, r3
 8004a60:	f042 0202 	orrlt.w	r2, r2, #2
 8004a64:	9307      	strge	r3, [sp, #28]
 8004a66:	9307      	strlt	r3, [sp, #28]
 8004a68:	bfb8      	it	lt
 8004a6a:	9204      	strlt	r2, [sp, #16]
 8004a6c:	7823      	ldrb	r3, [r4, #0]
 8004a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a70:	d10c      	bne.n	8004a8c <_svfiprintf_r+0x130>
 8004a72:	7863      	ldrb	r3, [r4, #1]
 8004a74:	2b2a      	cmp	r3, #42	; 0x2a
 8004a76:	d135      	bne.n	8004ae4 <_svfiprintf_r+0x188>
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	1d1a      	adds	r2, r3, #4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	9203      	str	r2, [sp, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bfb8      	it	lt
 8004a84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a88:	3402      	adds	r4, #2
 8004a8a:	9305      	str	r3, [sp, #20]
 8004a8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b58 <_svfiprintf_r+0x1fc>
 8004a90:	7821      	ldrb	r1, [r4, #0]
 8004a92:	2203      	movs	r2, #3
 8004a94:	4650      	mov	r0, sl
 8004a96:	f7fb fb9b 	bl	80001d0 <memchr>
 8004a9a:	b140      	cbz	r0, 8004aae <_svfiprintf_r+0x152>
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	eba0 000a 	sub.w	r0, r0, sl
 8004aa2:	fa03 f000 	lsl.w	r0, r3, r0
 8004aa6:	9b04      	ldr	r3, [sp, #16]
 8004aa8:	4303      	orrs	r3, r0
 8004aaa:	3401      	adds	r4, #1
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab2:	4826      	ldr	r0, [pc, #152]	; (8004b4c <_svfiprintf_r+0x1f0>)
 8004ab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ab8:	2206      	movs	r2, #6
 8004aba:	f7fb fb89 	bl	80001d0 <memchr>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d038      	beq.n	8004b34 <_svfiprintf_r+0x1d8>
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <_svfiprintf_r+0x1f4>)
 8004ac4:	bb1b      	cbnz	r3, 8004b0e <_svfiprintf_r+0x1b2>
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	3307      	adds	r3, #7
 8004aca:	f023 0307 	bic.w	r3, r3, #7
 8004ace:	3308      	adds	r3, #8
 8004ad0:	9303      	str	r3, [sp, #12]
 8004ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad4:	4433      	add	r3, r6
 8004ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ad8:	e767      	b.n	80049aa <_svfiprintf_r+0x4e>
 8004ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ade:	460c      	mov	r4, r1
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	e7a5      	b.n	8004a30 <_svfiprintf_r+0xd4>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	3401      	adds	r4, #1
 8004ae8:	9305      	str	r3, [sp, #20]
 8004aea:	4619      	mov	r1, r3
 8004aec:	f04f 0c0a 	mov.w	ip, #10
 8004af0:	4620      	mov	r0, r4
 8004af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004af6:	3a30      	subs	r2, #48	; 0x30
 8004af8:	2a09      	cmp	r2, #9
 8004afa:	d903      	bls.n	8004b04 <_svfiprintf_r+0x1a8>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0c5      	beq.n	8004a8c <_svfiprintf_r+0x130>
 8004b00:	9105      	str	r1, [sp, #20]
 8004b02:	e7c3      	b.n	8004a8c <_svfiprintf_r+0x130>
 8004b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b08:	4604      	mov	r4, r0
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e7f0      	b.n	8004af0 <_svfiprintf_r+0x194>
 8004b0e:	ab03      	add	r3, sp, #12
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	462a      	mov	r2, r5
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <_svfiprintf_r+0x1f8>)
 8004b16:	a904      	add	r1, sp, #16
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f3af 8000 	nop.w
 8004b1e:	1c42      	adds	r2, r0, #1
 8004b20:	4606      	mov	r6, r0
 8004b22:	d1d6      	bne.n	8004ad2 <_svfiprintf_r+0x176>
 8004b24:	89ab      	ldrh	r3, [r5, #12]
 8004b26:	065b      	lsls	r3, r3, #25
 8004b28:	f53f af2c 	bmi.w	8004984 <_svfiprintf_r+0x28>
 8004b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b2e:	b01d      	add	sp, #116	; 0x74
 8004b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b34:	ab03      	add	r3, sp, #12
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	462a      	mov	r2, r5
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <_svfiprintf_r+0x1f8>)
 8004b3c:	a904      	add	r1, sp, #16
 8004b3e:	4638      	mov	r0, r7
 8004b40:	f000 f9d4 	bl	8004eec <_printf_i>
 8004b44:	e7eb      	b.n	8004b1e <_svfiprintf_r+0x1c2>
 8004b46:	bf00      	nop
 8004b48:	080059d8 	.word	0x080059d8
 8004b4c:	080059e2 	.word	0x080059e2
 8004b50:	00000000 	.word	0x00000000
 8004b54:	080048a5 	.word	0x080048a5
 8004b58:	080059de 	.word	0x080059de

08004b5c <__sfputc_r>:
 8004b5c:	6893      	ldr	r3, [r2, #8]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	b410      	push	{r4}
 8004b64:	6093      	str	r3, [r2, #8]
 8004b66:	da08      	bge.n	8004b7a <__sfputc_r+0x1e>
 8004b68:	6994      	ldr	r4, [r2, #24]
 8004b6a:	42a3      	cmp	r3, r4
 8004b6c:	db01      	blt.n	8004b72 <__sfputc_r+0x16>
 8004b6e:	290a      	cmp	r1, #10
 8004b70:	d103      	bne.n	8004b7a <__sfputc_r+0x1e>
 8004b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b76:	f000 bb33 	b.w	80051e0 <__swbuf_r>
 8004b7a:	6813      	ldr	r3, [r2, #0]
 8004b7c:	1c58      	adds	r0, r3, #1
 8004b7e:	6010      	str	r0, [r2, #0]
 8004b80:	7019      	strb	r1, [r3, #0]
 8004b82:	4608      	mov	r0, r1
 8004b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <__sfputs_r>:
 8004b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8c:	4606      	mov	r6, r0
 8004b8e:	460f      	mov	r7, r1
 8004b90:	4614      	mov	r4, r2
 8004b92:	18d5      	adds	r5, r2, r3
 8004b94:	42ac      	cmp	r4, r5
 8004b96:	d101      	bne.n	8004b9c <__sfputs_r+0x12>
 8004b98:	2000      	movs	r0, #0
 8004b9a:	e007      	b.n	8004bac <__sfputs_r+0x22>
 8004b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba0:	463a      	mov	r2, r7
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7ff ffda 	bl	8004b5c <__sfputc_r>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d1f3      	bne.n	8004b94 <__sfputs_r+0xa>
 8004bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bb0 <_vfiprintf_r>:
 8004bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	460d      	mov	r5, r1
 8004bb6:	b09d      	sub	sp, #116	; 0x74
 8004bb8:	4614      	mov	r4, r2
 8004bba:	4698      	mov	r8, r3
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	b118      	cbz	r0, 8004bc8 <_vfiprintf_r+0x18>
 8004bc0:	6983      	ldr	r3, [r0, #24]
 8004bc2:	b90b      	cbnz	r3, 8004bc8 <_vfiprintf_r+0x18>
 8004bc4:	f7ff fcd4 	bl	8004570 <__sinit>
 8004bc8:	4b89      	ldr	r3, [pc, #548]	; (8004df0 <_vfiprintf_r+0x240>)
 8004bca:	429d      	cmp	r5, r3
 8004bcc:	d11b      	bne.n	8004c06 <_vfiprintf_r+0x56>
 8004bce:	6875      	ldr	r5, [r6, #4]
 8004bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bd2:	07d9      	lsls	r1, r3, #31
 8004bd4:	d405      	bmi.n	8004be2 <_vfiprintf_r+0x32>
 8004bd6:	89ab      	ldrh	r3, [r5, #12]
 8004bd8:	059a      	lsls	r2, r3, #22
 8004bda:	d402      	bmi.n	8004be2 <_vfiprintf_r+0x32>
 8004bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bde:	f7ff fd77 	bl	80046d0 <__retarget_lock_acquire_recursive>
 8004be2:	89ab      	ldrh	r3, [r5, #12]
 8004be4:	071b      	lsls	r3, r3, #28
 8004be6:	d501      	bpl.n	8004bec <_vfiprintf_r+0x3c>
 8004be8:	692b      	ldr	r3, [r5, #16]
 8004bea:	b9eb      	cbnz	r3, 8004c28 <_vfiprintf_r+0x78>
 8004bec:	4629      	mov	r1, r5
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f000 fb5a 	bl	80052a8 <__swsetup_r>
 8004bf4:	b1c0      	cbz	r0, 8004c28 <_vfiprintf_r+0x78>
 8004bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bf8:	07dc      	lsls	r4, r3, #31
 8004bfa:	d50e      	bpl.n	8004c1a <_vfiprintf_r+0x6a>
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c00:	b01d      	add	sp, #116	; 0x74
 8004c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c06:	4b7b      	ldr	r3, [pc, #492]	; (8004df4 <_vfiprintf_r+0x244>)
 8004c08:	429d      	cmp	r5, r3
 8004c0a:	d101      	bne.n	8004c10 <_vfiprintf_r+0x60>
 8004c0c:	68b5      	ldr	r5, [r6, #8]
 8004c0e:	e7df      	b.n	8004bd0 <_vfiprintf_r+0x20>
 8004c10:	4b79      	ldr	r3, [pc, #484]	; (8004df8 <_vfiprintf_r+0x248>)
 8004c12:	429d      	cmp	r5, r3
 8004c14:	bf08      	it	eq
 8004c16:	68f5      	ldreq	r5, [r6, #12]
 8004c18:	e7da      	b.n	8004bd0 <_vfiprintf_r+0x20>
 8004c1a:	89ab      	ldrh	r3, [r5, #12]
 8004c1c:	0598      	lsls	r0, r3, #22
 8004c1e:	d4ed      	bmi.n	8004bfc <_vfiprintf_r+0x4c>
 8004c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c22:	f7ff fd56 	bl	80046d2 <__retarget_lock_release_recursive>
 8004c26:	e7e9      	b.n	8004bfc <_vfiprintf_r+0x4c>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2c:	2320      	movs	r3, #32
 8004c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c36:	2330      	movs	r3, #48	; 0x30
 8004c38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004dfc <_vfiprintf_r+0x24c>
 8004c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c40:	f04f 0901 	mov.w	r9, #1
 8004c44:	4623      	mov	r3, r4
 8004c46:	469a      	mov	sl, r3
 8004c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c4c:	b10a      	cbz	r2, 8004c52 <_vfiprintf_r+0xa2>
 8004c4e:	2a25      	cmp	r2, #37	; 0x25
 8004c50:	d1f9      	bne.n	8004c46 <_vfiprintf_r+0x96>
 8004c52:	ebba 0b04 	subs.w	fp, sl, r4
 8004c56:	d00b      	beq.n	8004c70 <_vfiprintf_r+0xc0>
 8004c58:	465b      	mov	r3, fp
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f7ff ff93 	bl	8004b8a <__sfputs_r>
 8004c64:	3001      	adds	r0, #1
 8004c66:	f000 80aa 	beq.w	8004dbe <_vfiprintf_r+0x20e>
 8004c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c6c:	445a      	add	r2, fp
 8004c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8004c70:	f89a 3000 	ldrb.w	r3, [sl]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80a2 	beq.w	8004dbe <_vfiprintf_r+0x20e>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c84:	f10a 0a01 	add.w	sl, sl, #1
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	9307      	str	r3, [sp, #28]
 8004c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c90:	931a      	str	r3, [sp, #104]	; 0x68
 8004c92:	4654      	mov	r4, sl
 8004c94:	2205      	movs	r2, #5
 8004c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c9a:	4858      	ldr	r0, [pc, #352]	; (8004dfc <_vfiprintf_r+0x24c>)
 8004c9c:	f7fb fa98 	bl	80001d0 <memchr>
 8004ca0:	9a04      	ldr	r2, [sp, #16]
 8004ca2:	b9d8      	cbnz	r0, 8004cdc <_vfiprintf_r+0x12c>
 8004ca4:	06d1      	lsls	r1, r2, #27
 8004ca6:	bf44      	itt	mi
 8004ca8:	2320      	movmi	r3, #32
 8004caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cae:	0713      	lsls	r3, r2, #28
 8004cb0:	bf44      	itt	mi
 8004cb2:	232b      	movmi	r3, #43	; 0x2b
 8004cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004cbe:	d015      	beq.n	8004cec <_vfiprintf_r+0x13c>
 8004cc0:	9a07      	ldr	r2, [sp, #28]
 8004cc2:	4654      	mov	r4, sl
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f04f 0c0a 	mov.w	ip, #10
 8004cca:	4621      	mov	r1, r4
 8004ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd0:	3b30      	subs	r3, #48	; 0x30
 8004cd2:	2b09      	cmp	r3, #9
 8004cd4:	d94e      	bls.n	8004d74 <_vfiprintf_r+0x1c4>
 8004cd6:	b1b0      	cbz	r0, 8004d06 <_vfiprintf_r+0x156>
 8004cd8:	9207      	str	r2, [sp, #28]
 8004cda:	e014      	b.n	8004d06 <_vfiprintf_r+0x156>
 8004cdc:	eba0 0308 	sub.w	r3, r0, r8
 8004ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	46a2      	mov	sl, r4
 8004cea:	e7d2      	b.n	8004c92 <_vfiprintf_r+0xe2>
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	1d19      	adds	r1, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	9103      	str	r1, [sp, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bfbb      	ittet	lt
 8004cf8:	425b      	neglt	r3, r3
 8004cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8004cfe:	9307      	strge	r3, [sp, #28]
 8004d00:	9307      	strlt	r3, [sp, #28]
 8004d02:	bfb8      	it	lt
 8004d04:	9204      	strlt	r2, [sp, #16]
 8004d06:	7823      	ldrb	r3, [r4, #0]
 8004d08:	2b2e      	cmp	r3, #46	; 0x2e
 8004d0a:	d10c      	bne.n	8004d26 <_vfiprintf_r+0x176>
 8004d0c:	7863      	ldrb	r3, [r4, #1]
 8004d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d10:	d135      	bne.n	8004d7e <_vfiprintf_r+0x1ce>
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	1d1a      	adds	r2, r3, #4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	9203      	str	r2, [sp, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bfb8      	it	lt
 8004d1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d22:	3402      	adds	r4, #2
 8004d24:	9305      	str	r3, [sp, #20]
 8004d26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e0c <_vfiprintf_r+0x25c>
 8004d2a:	7821      	ldrb	r1, [r4, #0]
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	4650      	mov	r0, sl
 8004d30:	f7fb fa4e 	bl	80001d0 <memchr>
 8004d34:	b140      	cbz	r0, 8004d48 <_vfiprintf_r+0x198>
 8004d36:	2340      	movs	r3, #64	; 0x40
 8004d38:	eba0 000a 	sub.w	r0, r0, sl
 8004d3c:	fa03 f000 	lsl.w	r0, r3, r0
 8004d40:	9b04      	ldr	r3, [sp, #16]
 8004d42:	4303      	orrs	r3, r0
 8004d44:	3401      	adds	r4, #1
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4c:	482c      	ldr	r0, [pc, #176]	; (8004e00 <_vfiprintf_r+0x250>)
 8004d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d52:	2206      	movs	r2, #6
 8004d54:	f7fb fa3c 	bl	80001d0 <memchr>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d03f      	beq.n	8004ddc <_vfiprintf_r+0x22c>
 8004d5c:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <_vfiprintf_r+0x254>)
 8004d5e:	bb1b      	cbnz	r3, 8004da8 <_vfiprintf_r+0x1f8>
 8004d60:	9b03      	ldr	r3, [sp, #12]
 8004d62:	3307      	adds	r3, #7
 8004d64:	f023 0307 	bic.w	r3, r3, #7
 8004d68:	3308      	adds	r3, #8
 8004d6a:	9303      	str	r3, [sp, #12]
 8004d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d6e:	443b      	add	r3, r7
 8004d70:	9309      	str	r3, [sp, #36]	; 0x24
 8004d72:	e767      	b.n	8004c44 <_vfiprintf_r+0x94>
 8004d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d78:	460c      	mov	r4, r1
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	e7a5      	b.n	8004cca <_vfiprintf_r+0x11a>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	3401      	adds	r4, #1
 8004d82:	9305      	str	r3, [sp, #20]
 8004d84:	4619      	mov	r1, r3
 8004d86:	f04f 0c0a 	mov.w	ip, #10
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d90:	3a30      	subs	r2, #48	; 0x30
 8004d92:	2a09      	cmp	r2, #9
 8004d94:	d903      	bls.n	8004d9e <_vfiprintf_r+0x1ee>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0c5      	beq.n	8004d26 <_vfiprintf_r+0x176>
 8004d9a:	9105      	str	r1, [sp, #20]
 8004d9c:	e7c3      	b.n	8004d26 <_vfiprintf_r+0x176>
 8004d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da2:	4604      	mov	r4, r0
 8004da4:	2301      	movs	r3, #1
 8004da6:	e7f0      	b.n	8004d8a <_vfiprintf_r+0x1da>
 8004da8:	ab03      	add	r3, sp, #12
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	462a      	mov	r2, r5
 8004dae:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <_vfiprintf_r+0x258>)
 8004db0:	a904      	add	r1, sp, #16
 8004db2:	4630      	mov	r0, r6
 8004db4:	f3af 8000 	nop.w
 8004db8:	4607      	mov	r7, r0
 8004dba:	1c78      	adds	r0, r7, #1
 8004dbc:	d1d6      	bne.n	8004d6c <_vfiprintf_r+0x1bc>
 8004dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dc0:	07d9      	lsls	r1, r3, #31
 8004dc2:	d405      	bmi.n	8004dd0 <_vfiprintf_r+0x220>
 8004dc4:	89ab      	ldrh	r3, [r5, #12]
 8004dc6:	059a      	lsls	r2, r3, #22
 8004dc8:	d402      	bmi.n	8004dd0 <_vfiprintf_r+0x220>
 8004dca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dcc:	f7ff fc81 	bl	80046d2 <__retarget_lock_release_recursive>
 8004dd0:	89ab      	ldrh	r3, [r5, #12]
 8004dd2:	065b      	lsls	r3, r3, #25
 8004dd4:	f53f af12 	bmi.w	8004bfc <_vfiprintf_r+0x4c>
 8004dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dda:	e711      	b.n	8004c00 <_vfiprintf_r+0x50>
 8004ddc:	ab03      	add	r3, sp, #12
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	462a      	mov	r2, r5
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <_vfiprintf_r+0x258>)
 8004de4:	a904      	add	r1, sp, #16
 8004de6:	4630      	mov	r0, r6
 8004de8:	f000 f880 	bl	8004eec <_printf_i>
 8004dec:	e7e4      	b.n	8004db8 <_vfiprintf_r+0x208>
 8004dee:	bf00      	nop
 8004df0:	08005998 	.word	0x08005998
 8004df4:	080059b8 	.word	0x080059b8
 8004df8:	08005978 	.word	0x08005978
 8004dfc:	080059d8 	.word	0x080059d8
 8004e00:	080059e2 	.word	0x080059e2
 8004e04:	00000000 	.word	0x00000000
 8004e08:	08004b8b 	.word	0x08004b8b
 8004e0c:	080059de 	.word	0x080059de

08004e10 <_printf_common>:
 8004e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	4616      	mov	r6, r2
 8004e16:	4699      	mov	r9, r3
 8004e18:	688a      	ldr	r2, [r1, #8]
 8004e1a:	690b      	ldr	r3, [r1, #16]
 8004e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e20:	4293      	cmp	r3, r2
 8004e22:	bfb8      	it	lt
 8004e24:	4613      	movlt	r3, r2
 8004e26:	6033      	str	r3, [r6, #0]
 8004e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e2c:	4607      	mov	r7, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	b10a      	cbz	r2, 8004e36 <_printf_common+0x26>
 8004e32:	3301      	adds	r3, #1
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	0699      	lsls	r1, r3, #26
 8004e3a:	bf42      	ittt	mi
 8004e3c:	6833      	ldrmi	r3, [r6, #0]
 8004e3e:	3302      	addmi	r3, #2
 8004e40:	6033      	strmi	r3, [r6, #0]
 8004e42:	6825      	ldr	r5, [r4, #0]
 8004e44:	f015 0506 	ands.w	r5, r5, #6
 8004e48:	d106      	bne.n	8004e58 <_printf_common+0x48>
 8004e4a:	f104 0a19 	add.w	sl, r4, #25
 8004e4e:	68e3      	ldr	r3, [r4, #12]
 8004e50:	6832      	ldr	r2, [r6, #0]
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	42ab      	cmp	r3, r5
 8004e56:	dc26      	bgt.n	8004ea6 <_printf_common+0x96>
 8004e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e5c:	1e13      	subs	r3, r2, #0
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	bf18      	it	ne
 8004e62:	2301      	movne	r3, #1
 8004e64:	0692      	lsls	r2, r2, #26
 8004e66:	d42b      	bmi.n	8004ec0 <_printf_common+0xb0>
 8004e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	4638      	mov	r0, r7
 8004e70:	47c0      	blx	r8
 8004e72:	3001      	adds	r0, #1
 8004e74:	d01e      	beq.n	8004eb4 <_printf_common+0xa4>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	68e5      	ldr	r5, [r4, #12]
 8004e7a:	6832      	ldr	r2, [r6, #0]
 8004e7c:	f003 0306 	and.w	r3, r3, #6
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	bf08      	it	eq
 8004e84:	1aad      	subeq	r5, r5, r2
 8004e86:	68a3      	ldr	r3, [r4, #8]
 8004e88:	6922      	ldr	r2, [r4, #16]
 8004e8a:	bf0c      	ite	eq
 8004e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e90:	2500      	movne	r5, #0
 8004e92:	4293      	cmp	r3, r2
 8004e94:	bfc4      	itt	gt
 8004e96:	1a9b      	subgt	r3, r3, r2
 8004e98:	18ed      	addgt	r5, r5, r3
 8004e9a:	2600      	movs	r6, #0
 8004e9c:	341a      	adds	r4, #26
 8004e9e:	42b5      	cmp	r5, r6
 8004ea0:	d11a      	bne.n	8004ed8 <_printf_common+0xc8>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e008      	b.n	8004eb8 <_printf_common+0xa8>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4652      	mov	r2, sl
 8004eaa:	4649      	mov	r1, r9
 8004eac:	4638      	mov	r0, r7
 8004eae:	47c0      	blx	r8
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d103      	bne.n	8004ebc <_printf_common+0xac>
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	e7c6      	b.n	8004e4e <_printf_common+0x3e>
 8004ec0:	18e1      	adds	r1, r4, r3
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	2030      	movs	r0, #48	; 0x30
 8004ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eca:	4422      	add	r2, r4
 8004ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	e7c7      	b.n	8004e68 <_printf_common+0x58>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4622      	mov	r2, r4
 8004edc:	4649      	mov	r1, r9
 8004ede:	4638      	mov	r0, r7
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d0e6      	beq.n	8004eb4 <_printf_common+0xa4>
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7d9      	b.n	8004e9e <_printf_common+0x8e>
	...

08004eec <_printf_i>:
 8004eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	7e0f      	ldrb	r7, [r1, #24]
 8004ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ef4:	2f78      	cmp	r7, #120	; 0x78
 8004ef6:	4691      	mov	r9, r2
 8004ef8:	4680      	mov	r8, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	469a      	mov	sl, r3
 8004efe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f02:	d807      	bhi.n	8004f14 <_printf_i+0x28>
 8004f04:	2f62      	cmp	r7, #98	; 0x62
 8004f06:	d80a      	bhi.n	8004f1e <_printf_i+0x32>
 8004f08:	2f00      	cmp	r7, #0
 8004f0a:	f000 80d8 	beq.w	80050be <_printf_i+0x1d2>
 8004f0e:	2f58      	cmp	r7, #88	; 0x58
 8004f10:	f000 80a3 	beq.w	800505a <_printf_i+0x16e>
 8004f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f1c:	e03a      	b.n	8004f94 <_printf_i+0xa8>
 8004f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f22:	2b15      	cmp	r3, #21
 8004f24:	d8f6      	bhi.n	8004f14 <_printf_i+0x28>
 8004f26:	a101      	add	r1, pc, #4	; (adr r1, 8004f2c <_printf_i+0x40>)
 8004f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f2c:	08004f85 	.word	0x08004f85
 8004f30:	08004f99 	.word	0x08004f99
 8004f34:	08004f15 	.word	0x08004f15
 8004f38:	08004f15 	.word	0x08004f15
 8004f3c:	08004f15 	.word	0x08004f15
 8004f40:	08004f15 	.word	0x08004f15
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	08004f15 	.word	0x08004f15
 8004f4c:	08004f15 	.word	0x08004f15
 8004f50:	08004f15 	.word	0x08004f15
 8004f54:	08004f15 	.word	0x08004f15
 8004f58:	080050a5 	.word	0x080050a5
 8004f5c:	08004fc9 	.word	0x08004fc9
 8004f60:	08005087 	.word	0x08005087
 8004f64:	08004f15 	.word	0x08004f15
 8004f68:	08004f15 	.word	0x08004f15
 8004f6c:	080050c7 	.word	0x080050c7
 8004f70:	08004f15 	.word	0x08004f15
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004f15 	.word	0x08004f15
 8004f7c:	08004f15 	.word	0x08004f15
 8004f80:	0800508f 	.word	0x0800508f
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	1d1a      	adds	r2, r3, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	602a      	str	r2, [r5, #0]
 8004f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0a3      	b.n	80050e0 <_printf_i+0x1f4>
 8004f98:	6820      	ldr	r0, [r4, #0]
 8004f9a:	6829      	ldr	r1, [r5, #0]
 8004f9c:	0606      	lsls	r6, r0, #24
 8004f9e:	f101 0304 	add.w	r3, r1, #4
 8004fa2:	d50a      	bpl.n	8004fba <_printf_i+0xce>
 8004fa4:	680e      	ldr	r6, [r1, #0]
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	2e00      	cmp	r6, #0
 8004faa:	da03      	bge.n	8004fb4 <_printf_i+0xc8>
 8004fac:	232d      	movs	r3, #45	; 0x2d
 8004fae:	4276      	negs	r6, r6
 8004fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb4:	485e      	ldr	r0, [pc, #376]	; (8005130 <_printf_i+0x244>)
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	e019      	b.n	8004fee <_printf_i+0x102>
 8004fba:	680e      	ldr	r6, [r1, #0]
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fc2:	bf18      	it	ne
 8004fc4:	b236      	sxthne	r6, r6
 8004fc6:	e7ef      	b.n	8004fa8 <_printf_i+0xbc>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	1d19      	adds	r1, r3, #4
 8004fce:	6029      	str	r1, [r5, #0]
 8004fd0:	0601      	lsls	r1, r0, #24
 8004fd2:	d501      	bpl.n	8004fd8 <_printf_i+0xec>
 8004fd4:	681e      	ldr	r6, [r3, #0]
 8004fd6:	e002      	b.n	8004fde <_printf_i+0xf2>
 8004fd8:	0646      	lsls	r6, r0, #25
 8004fda:	d5fb      	bpl.n	8004fd4 <_printf_i+0xe8>
 8004fdc:	881e      	ldrh	r6, [r3, #0]
 8004fde:	4854      	ldr	r0, [pc, #336]	; (8005130 <_printf_i+0x244>)
 8004fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2308      	moveq	r3, #8
 8004fe6:	230a      	movne	r3, #10
 8004fe8:	2100      	movs	r1, #0
 8004fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fee:	6865      	ldr	r5, [r4, #4]
 8004ff0:	60a5      	str	r5, [r4, #8]
 8004ff2:	2d00      	cmp	r5, #0
 8004ff4:	bfa2      	ittt	ge
 8004ff6:	6821      	ldrge	r1, [r4, #0]
 8004ff8:	f021 0104 	bicge.w	r1, r1, #4
 8004ffc:	6021      	strge	r1, [r4, #0]
 8004ffe:	b90e      	cbnz	r6, 8005004 <_printf_i+0x118>
 8005000:	2d00      	cmp	r5, #0
 8005002:	d04d      	beq.n	80050a0 <_printf_i+0x1b4>
 8005004:	4615      	mov	r5, r2
 8005006:	fbb6 f1f3 	udiv	r1, r6, r3
 800500a:	fb03 6711 	mls	r7, r3, r1, r6
 800500e:	5dc7      	ldrb	r7, [r0, r7]
 8005010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005014:	4637      	mov	r7, r6
 8005016:	42bb      	cmp	r3, r7
 8005018:	460e      	mov	r6, r1
 800501a:	d9f4      	bls.n	8005006 <_printf_i+0x11a>
 800501c:	2b08      	cmp	r3, #8
 800501e:	d10b      	bne.n	8005038 <_printf_i+0x14c>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	07de      	lsls	r6, r3, #31
 8005024:	d508      	bpl.n	8005038 <_printf_i+0x14c>
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	6861      	ldr	r1, [r4, #4]
 800502a:	4299      	cmp	r1, r3
 800502c:	bfde      	ittt	le
 800502e:	2330      	movle	r3, #48	; 0x30
 8005030:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005034:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005038:	1b52      	subs	r2, r2, r5
 800503a:	6122      	str	r2, [r4, #16]
 800503c:	f8cd a000 	str.w	sl, [sp]
 8005040:	464b      	mov	r3, r9
 8005042:	aa03      	add	r2, sp, #12
 8005044:	4621      	mov	r1, r4
 8005046:	4640      	mov	r0, r8
 8005048:	f7ff fee2 	bl	8004e10 <_printf_common>
 800504c:	3001      	adds	r0, #1
 800504e:	d14c      	bne.n	80050ea <_printf_i+0x1fe>
 8005050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005054:	b004      	add	sp, #16
 8005056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505a:	4835      	ldr	r0, [pc, #212]	; (8005130 <_printf_i+0x244>)
 800505c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005060:	6829      	ldr	r1, [r5, #0]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f851 6b04 	ldr.w	r6, [r1], #4
 8005068:	6029      	str	r1, [r5, #0]
 800506a:	061d      	lsls	r5, r3, #24
 800506c:	d514      	bpl.n	8005098 <_printf_i+0x1ac>
 800506e:	07df      	lsls	r7, r3, #31
 8005070:	bf44      	itt	mi
 8005072:	f043 0320 	orrmi.w	r3, r3, #32
 8005076:	6023      	strmi	r3, [r4, #0]
 8005078:	b91e      	cbnz	r6, 8005082 <_printf_i+0x196>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	f023 0320 	bic.w	r3, r3, #32
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	2310      	movs	r3, #16
 8005084:	e7b0      	b.n	8004fe8 <_printf_i+0xfc>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	f043 0320 	orr.w	r3, r3, #32
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	2378      	movs	r3, #120	; 0x78
 8005090:	4828      	ldr	r0, [pc, #160]	; (8005134 <_printf_i+0x248>)
 8005092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005096:	e7e3      	b.n	8005060 <_printf_i+0x174>
 8005098:	0659      	lsls	r1, r3, #25
 800509a:	bf48      	it	mi
 800509c:	b2b6      	uxthmi	r6, r6
 800509e:	e7e6      	b.n	800506e <_printf_i+0x182>
 80050a0:	4615      	mov	r5, r2
 80050a2:	e7bb      	b.n	800501c <_printf_i+0x130>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	6826      	ldr	r6, [r4, #0]
 80050a8:	6961      	ldr	r1, [r4, #20]
 80050aa:	1d18      	adds	r0, r3, #4
 80050ac:	6028      	str	r0, [r5, #0]
 80050ae:	0635      	lsls	r5, r6, #24
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	d501      	bpl.n	80050b8 <_printf_i+0x1cc>
 80050b4:	6019      	str	r1, [r3, #0]
 80050b6:	e002      	b.n	80050be <_printf_i+0x1d2>
 80050b8:	0670      	lsls	r0, r6, #25
 80050ba:	d5fb      	bpl.n	80050b4 <_printf_i+0x1c8>
 80050bc:	8019      	strh	r1, [r3, #0]
 80050be:	2300      	movs	r3, #0
 80050c0:	6123      	str	r3, [r4, #16]
 80050c2:	4615      	mov	r5, r2
 80050c4:	e7ba      	b.n	800503c <_printf_i+0x150>
 80050c6:	682b      	ldr	r3, [r5, #0]
 80050c8:	1d1a      	adds	r2, r3, #4
 80050ca:	602a      	str	r2, [r5, #0]
 80050cc:	681d      	ldr	r5, [r3, #0]
 80050ce:	6862      	ldr	r2, [r4, #4]
 80050d0:	2100      	movs	r1, #0
 80050d2:	4628      	mov	r0, r5
 80050d4:	f7fb f87c 	bl	80001d0 <memchr>
 80050d8:	b108      	cbz	r0, 80050de <_printf_i+0x1f2>
 80050da:	1b40      	subs	r0, r0, r5
 80050dc:	6060      	str	r0, [r4, #4]
 80050de:	6863      	ldr	r3, [r4, #4]
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	2300      	movs	r3, #0
 80050e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e8:	e7a8      	b.n	800503c <_printf_i+0x150>
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	462a      	mov	r2, r5
 80050ee:	4649      	mov	r1, r9
 80050f0:	4640      	mov	r0, r8
 80050f2:	47d0      	blx	sl
 80050f4:	3001      	adds	r0, #1
 80050f6:	d0ab      	beq.n	8005050 <_printf_i+0x164>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	079b      	lsls	r3, r3, #30
 80050fc:	d413      	bmi.n	8005126 <_printf_i+0x23a>
 80050fe:	68e0      	ldr	r0, [r4, #12]
 8005100:	9b03      	ldr	r3, [sp, #12]
 8005102:	4298      	cmp	r0, r3
 8005104:	bfb8      	it	lt
 8005106:	4618      	movlt	r0, r3
 8005108:	e7a4      	b.n	8005054 <_printf_i+0x168>
 800510a:	2301      	movs	r3, #1
 800510c:	4632      	mov	r2, r6
 800510e:	4649      	mov	r1, r9
 8005110:	4640      	mov	r0, r8
 8005112:	47d0      	blx	sl
 8005114:	3001      	adds	r0, #1
 8005116:	d09b      	beq.n	8005050 <_printf_i+0x164>
 8005118:	3501      	adds	r5, #1
 800511a:	68e3      	ldr	r3, [r4, #12]
 800511c:	9903      	ldr	r1, [sp, #12]
 800511e:	1a5b      	subs	r3, r3, r1
 8005120:	42ab      	cmp	r3, r5
 8005122:	dcf2      	bgt.n	800510a <_printf_i+0x21e>
 8005124:	e7eb      	b.n	80050fe <_printf_i+0x212>
 8005126:	2500      	movs	r5, #0
 8005128:	f104 0619 	add.w	r6, r4, #25
 800512c:	e7f5      	b.n	800511a <_printf_i+0x22e>
 800512e:	bf00      	nop
 8005130:	080059e9 	.word	0x080059e9
 8005134:	080059fa 	.word	0x080059fa

08005138 <_sbrk_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	4d06      	ldr	r5, [pc, #24]	; (8005154 <_sbrk_r+0x1c>)
 800513c:	2300      	movs	r3, #0
 800513e:	4604      	mov	r4, r0
 8005140:	4608      	mov	r0, r1
 8005142:	602b      	str	r3, [r5, #0]
 8005144:	f000 fb46 	bl	80057d4 <_sbrk>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_sbrk_r+0x1a>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_sbrk_r+0x1a>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	20012f1c 	.word	0x20012f1c

08005158 <__sread>:
 8005158:	b510      	push	{r4, lr}
 800515a:	460c      	mov	r4, r1
 800515c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005160:	f000 fab8 	bl	80056d4 <_read_r>
 8005164:	2800      	cmp	r0, #0
 8005166:	bfab      	itete	ge
 8005168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800516a:	89a3      	ldrhlt	r3, [r4, #12]
 800516c:	181b      	addge	r3, r3, r0
 800516e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005172:	bfac      	ite	ge
 8005174:	6563      	strge	r3, [r4, #84]	; 0x54
 8005176:	81a3      	strhlt	r3, [r4, #12]
 8005178:	bd10      	pop	{r4, pc}

0800517a <__swrite>:
 800517a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517e:	461f      	mov	r7, r3
 8005180:	898b      	ldrh	r3, [r1, #12]
 8005182:	05db      	lsls	r3, r3, #23
 8005184:	4605      	mov	r5, r0
 8005186:	460c      	mov	r4, r1
 8005188:	4616      	mov	r6, r2
 800518a:	d505      	bpl.n	8005198 <__swrite+0x1e>
 800518c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005190:	2302      	movs	r3, #2
 8005192:	2200      	movs	r2, #0
 8005194:	f000 f9d0 	bl	8005538 <_lseek_r>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800519e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	4632      	mov	r2, r6
 80051a6:	463b      	mov	r3, r7
 80051a8:	4628      	mov	r0, r5
 80051aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ae:	f000 b869 	b.w	8005284 <_write_r>

080051b2 <__sseek>:
 80051b2:	b510      	push	{r4, lr}
 80051b4:	460c      	mov	r4, r1
 80051b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ba:	f000 f9bd 	bl	8005538 <_lseek_r>
 80051be:	1c43      	adds	r3, r0, #1
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	bf15      	itete	ne
 80051c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80051c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051ce:	81a3      	strheq	r3, [r4, #12]
 80051d0:	bf18      	it	ne
 80051d2:	81a3      	strhne	r3, [r4, #12]
 80051d4:	bd10      	pop	{r4, pc}

080051d6 <__sclose>:
 80051d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051da:	f000 b8db 	b.w	8005394 <_close_r>
	...

080051e0 <__swbuf_r>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	460e      	mov	r6, r1
 80051e4:	4614      	mov	r4, r2
 80051e6:	4605      	mov	r5, r0
 80051e8:	b118      	cbz	r0, 80051f2 <__swbuf_r+0x12>
 80051ea:	6983      	ldr	r3, [r0, #24]
 80051ec:	b90b      	cbnz	r3, 80051f2 <__swbuf_r+0x12>
 80051ee:	f7ff f9bf 	bl	8004570 <__sinit>
 80051f2:	4b21      	ldr	r3, [pc, #132]	; (8005278 <__swbuf_r+0x98>)
 80051f4:	429c      	cmp	r4, r3
 80051f6:	d12b      	bne.n	8005250 <__swbuf_r+0x70>
 80051f8:	686c      	ldr	r4, [r5, #4]
 80051fa:	69a3      	ldr	r3, [r4, #24]
 80051fc:	60a3      	str	r3, [r4, #8]
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	071a      	lsls	r2, r3, #28
 8005202:	d52f      	bpl.n	8005264 <__swbuf_r+0x84>
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	b36b      	cbz	r3, 8005264 <__swbuf_r+0x84>
 8005208:	6923      	ldr	r3, [r4, #16]
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	1ac0      	subs	r0, r0, r3
 800520e:	6963      	ldr	r3, [r4, #20]
 8005210:	b2f6      	uxtb	r6, r6
 8005212:	4283      	cmp	r3, r0
 8005214:	4637      	mov	r7, r6
 8005216:	dc04      	bgt.n	8005222 <__swbuf_r+0x42>
 8005218:	4621      	mov	r1, r4
 800521a:	4628      	mov	r0, r5
 800521c:	f000 f950 	bl	80054c0 <_fflush_r>
 8005220:	bb30      	cbnz	r0, 8005270 <__swbuf_r+0x90>
 8005222:	68a3      	ldr	r3, [r4, #8]
 8005224:	3b01      	subs	r3, #1
 8005226:	60a3      	str	r3, [r4, #8]
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	6022      	str	r2, [r4, #0]
 800522e:	701e      	strb	r6, [r3, #0]
 8005230:	6963      	ldr	r3, [r4, #20]
 8005232:	3001      	adds	r0, #1
 8005234:	4283      	cmp	r3, r0
 8005236:	d004      	beq.n	8005242 <__swbuf_r+0x62>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	07db      	lsls	r3, r3, #31
 800523c:	d506      	bpl.n	800524c <__swbuf_r+0x6c>
 800523e:	2e0a      	cmp	r6, #10
 8005240:	d104      	bne.n	800524c <__swbuf_r+0x6c>
 8005242:	4621      	mov	r1, r4
 8005244:	4628      	mov	r0, r5
 8005246:	f000 f93b 	bl	80054c0 <_fflush_r>
 800524a:	b988      	cbnz	r0, 8005270 <__swbuf_r+0x90>
 800524c:	4638      	mov	r0, r7
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <__swbuf_r+0x9c>)
 8005252:	429c      	cmp	r4, r3
 8005254:	d101      	bne.n	800525a <__swbuf_r+0x7a>
 8005256:	68ac      	ldr	r4, [r5, #8]
 8005258:	e7cf      	b.n	80051fa <__swbuf_r+0x1a>
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <__swbuf_r+0xa0>)
 800525c:	429c      	cmp	r4, r3
 800525e:	bf08      	it	eq
 8005260:	68ec      	ldreq	r4, [r5, #12]
 8005262:	e7ca      	b.n	80051fa <__swbuf_r+0x1a>
 8005264:	4621      	mov	r1, r4
 8005266:	4628      	mov	r0, r5
 8005268:	f000 f81e 	bl	80052a8 <__swsetup_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	d0cb      	beq.n	8005208 <__swbuf_r+0x28>
 8005270:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005274:	e7ea      	b.n	800524c <__swbuf_r+0x6c>
 8005276:	bf00      	nop
 8005278:	08005998 	.word	0x08005998
 800527c:	080059b8 	.word	0x080059b8
 8005280:	08005978 	.word	0x08005978

08005284 <_write_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d07      	ldr	r5, [pc, #28]	; (80052a4 <_write_r+0x20>)
 8005288:	4604      	mov	r4, r0
 800528a:	4608      	mov	r0, r1
 800528c:	4611      	mov	r1, r2
 800528e:	2200      	movs	r2, #0
 8005290:	602a      	str	r2, [r5, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	f7fb fd41 	bl	8000d1a <_write>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_write_r+0x1e>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_write_r+0x1e>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20012f1c 	.word	0x20012f1c

080052a8 <__swsetup_r>:
 80052a8:	4b32      	ldr	r3, [pc, #200]	; (8005374 <__swsetup_r+0xcc>)
 80052aa:	b570      	push	{r4, r5, r6, lr}
 80052ac:	681d      	ldr	r5, [r3, #0]
 80052ae:	4606      	mov	r6, r0
 80052b0:	460c      	mov	r4, r1
 80052b2:	b125      	cbz	r5, 80052be <__swsetup_r+0x16>
 80052b4:	69ab      	ldr	r3, [r5, #24]
 80052b6:	b913      	cbnz	r3, 80052be <__swsetup_r+0x16>
 80052b8:	4628      	mov	r0, r5
 80052ba:	f7ff f959 	bl	8004570 <__sinit>
 80052be:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <__swsetup_r+0xd0>)
 80052c0:	429c      	cmp	r4, r3
 80052c2:	d10f      	bne.n	80052e4 <__swsetup_r+0x3c>
 80052c4:	686c      	ldr	r4, [r5, #4]
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052cc:	0719      	lsls	r1, r3, #28
 80052ce:	d42c      	bmi.n	800532a <__swsetup_r+0x82>
 80052d0:	06dd      	lsls	r5, r3, #27
 80052d2:	d411      	bmi.n	80052f8 <__swsetup_r+0x50>
 80052d4:	2309      	movs	r3, #9
 80052d6:	6033      	str	r3, [r6, #0]
 80052d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e2:	e03e      	b.n	8005362 <__swsetup_r+0xba>
 80052e4:	4b25      	ldr	r3, [pc, #148]	; (800537c <__swsetup_r+0xd4>)
 80052e6:	429c      	cmp	r4, r3
 80052e8:	d101      	bne.n	80052ee <__swsetup_r+0x46>
 80052ea:	68ac      	ldr	r4, [r5, #8]
 80052ec:	e7eb      	b.n	80052c6 <__swsetup_r+0x1e>
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <__swsetup_r+0xd8>)
 80052f0:	429c      	cmp	r4, r3
 80052f2:	bf08      	it	eq
 80052f4:	68ec      	ldreq	r4, [r5, #12]
 80052f6:	e7e6      	b.n	80052c6 <__swsetup_r+0x1e>
 80052f8:	0758      	lsls	r0, r3, #29
 80052fa:	d512      	bpl.n	8005322 <__swsetup_r+0x7a>
 80052fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052fe:	b141      	cbz	r1, 8005312 <__swsetup_r+0x6a>
 8005300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005304:	4299      	cmp	r1, r3
 8005306:	d002      	beq.n	800530e <__swsetup_r+0x66>
 8005308:	4630      	mov	r0, r6
 800530a:	f7ff f9eb 	bl	80046e4 <_free_r>
 800530e:	2300      	movs	r3, #0
 8005310:	6363      	str	r3, [r4, #52]	; 0x34
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005318:	81a3      	strh	r3, [r4, #12]
 800531a:	2300      	movs	r3, #0
 800531c:	6063      	str	r3, [r4, #4]
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	89a3      	ldrh	r3, [r4, #12]
 8005324:	f043 0308 	orr.w	r3, r3, #8
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	b94b      	cbnz	r3, 8005342 <__swsetup_r+0x9a>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005338:	d003      	beq.n	8005342 <__swsetup_r+0x9a>
 800533a:	4621      	mov	r1, r4
 800533c:	4630      	mov	r0, r6
 800533e:	f000 f933 	bl	80055a8 <__smakebuf_r>
 8005342:	89a0      	ldrh	r0, [r4, #12]
 8005344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005348:	f010 0301 	ands.w	r3, r0, #1
 800534c:	d00a      	beq.n	8005364 <__swsetup_r+0xbc>
 800534e:	2300      	movs	r3, #0
 8005350:	60a3      	str	r3, [r4, #8]
 8005352:	6963      	ldr	r3, [r4, #20]
 8005354:	425b      	negs	r3, r3
 8005356:	61a3      	str	r3, [r4, #24]
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	b943      	cbnz	r3, 800536e <__swsetup_r+0xc6>
 800535c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005360:	d1ba      	bne.n	80052d8 <__swsetup_r+0x30>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	0781      	lsls	r1, r0, #30
 8005366:	bf58      	it	pl
 8005368:	6963      	ldrpl	r3, [r4, #20]
 800536a:	60a3      	str	r3, [r4, #8]
 800536c:	e7f4      	b.n	8005358 <__swsetup_r+0xb0>
 800536e:	2000      	movs	r0, #0
 8005370:	e7f7      	b.n	8005362 <__swsetup_r+0xba>
 8005372:	bf00      	nop
 8005374:	20000014 	.word	0x20000014
 8005378:	08005998 	.word	0x08005998
 800537c:	080059b8 	.word	0x080059b8
 8005380:	08005978 	.word	0x08005978

08005384 <abort>:
 8005384:	b508      	push	{r3, lr}
 8005386:	2006      	movs	r0, #6
 8005388:	f000 f9de 	bl	8005748 <raise>
 800538c:	2001      	movs	r0, #1
 800538e:	f7fb fc9d 	bl	8000ccc <_exit>
	...

08005394 <_close_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4d06      	ldr	r5, [pc, #24]	; (80053b0 <_close_r+0x1c>)
 8005398:	2300      	movs	r3, #0
 800539a:	4604      	mov	r4, r0
 800539c:	4608      	mov	r0, r1
 800539e:	602b      	str	r3, [r5, #0]
 80053a0:	f7fb fcd7 	bl	8000d52 <_close>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d102      	bne.n	80053ae <_close_r+0x1a>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	b103      	cbz	r3, 80053ae <_close_r+0x1a>
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
 80053b0:	20012f1c 	.word	0x20012f1c

080053b4 <__sflush_r>:
 80053b4:	898a      	ldrh	r2, [r1, #12]
 80053b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ba:	4605      	mov	r5, r0
 80053bc:	0710      	lsls	r0, r2, #28
 80053be:	460c      	mov	r4, r1
 80053c0:	d458      	bmi.n	8005474 <__sflush_r+0xc0>
 80053c2:	684b      	ldr	r3, [r1, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	dc05      	bgt.n	80053d4 <__sflush_r+0x20>
 80053c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dc02      	bgt.n	80053d4 <__sflush_r+0x20>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d0f9      	beq.n	80053ce <__sflush_r+0x1a>
 80053da:	2300      	movs	r3, #0
 80053dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053e0:	682f      	ldr	r7, [r5, #0]
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	d032      	beq.n	800544c <__sflush_r+0x98>
 80053e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	075a      	lsls	r2, r3, #29
 80053ec:	d505      	bpl.n	80053fa <__sflush_r+0x46>
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	1ac0      	subs	r0, r0, r3
 80053f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053f4:	b10b      	cbz	r3, 80053fa <__sflush_r+0x46>
 80053f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053f8:	1ac0      	subs	r0, r0, r3
 80053fa:	2300      	movs	r3, #0
 80053fc:	4602      	mov	r2, r0
 80053fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005400:	6a21      	ldr	r1, [r4, #32]
 8005402:	4628      	mov	r0, r5
 8005404:	47b0      	blx	r6
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	d106      	bne.n	800541a <__sflush_r+0x66>
 800540c:	6829      	ldr	r1, [r5, #0]
 800540e:	291d      	cmp	r1, #29
 8005410:	d82c      	bhi.n	800546c <__sflush_r+0xb8>
 8005412:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <__sflush_r+0x108>)
 8005414:	40ca      	lsrs	r2, r1
 8005416:	07d6      	lsls	r6, r2, #31
 8005418:	d528      	bpl.n	800546c <__sflush_r+0xb8>
 800541a:	2200      	movs	r2, #0
 800541c:	6062      	str	r2, [r4, #4]
 800541e:	04d9      	lsls	r1, r3, #19
 8005420:	6922      	ldr	r2, [r4, #16]
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	d504      	bpl.n	8005430 <__sflush_r+0x7c>
 8005426:	1c42      	adds	r2, r0, #1
 8005428:	d101      	bne.n	800542e <__sflush_r+0x7a>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	b903      	cbnz	r3, 8005430 <__sflush_r+0x7c>
 800542e:	6560      	str	r0, [r4, #84]	; 0x54
 8005430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005432:	602f      	str	r7, [r5, #0]
 8005434:	2900      	cmp	r1, #0
 8005436:	d0ca      	beq.n	80053ce <__sflush_r+0x1a>
 8005438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800543c:	4299      	cmp	r1, r3
 800543e:	d002      	beq.n	8005446 <__sflush_r+0x92>
 8005440:	4628      	mov	r0, r5
 8005442:	f7ff f94f 	bl	80046e4 <_free_r>
 8005446:	2000      	movs	r0, #0
 8005448:	6360      	str	r0, [r4, #52]	; 0x34
 800544a:	e7c1      	b.n	80053d0 <__sflush_r+0x1c>
 800544c:	6a21      	ldr	r1, [r4, #32]
 800544e:	2301      	movs	r3, #1
 8005450:	4628      	mov	r0, r5
 8005452:	47b0      	blx	r6
 8005454:	1c41      	adds	r1, r0, #1
 8005456:	d1c7      	bne.n	80053e8 <__sflush_r+0x34>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0c4      	beq.n	80053e8 <__sflush_r+0x34>
 800545e:	2b1d      	cmp	r3, #29
 8005460:	d001      	beq.n	8005466 <__sflush_r+0xb2>
 8005462:	2b16      	cmp	r3, #22
 8005464:	d101      	bne.n	800546a <__sflush_r+0xb6>
 8005466:	602f      	str	r7, [r5, #0]
 8005468:	e7b1      	b.n	80053ce <__sflush_r+0x1a>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	e7ad      	b.n	80053d0 <__sflush_r+0x1c>
 8005474:	690f      	ldr	r7, [r1, #16]
 8005476:	2f00      	cmp	r7, #0
 8005478:	d0a9      	beq.n	80053ce <__sflush_r+0x1a>
 800547a:	0793      	lsls	r3, r2, #30
 800547c:	680e      	ldr	r6, [r1, #0]
 800547e:	bf08      	it	eq
 8005480:	694b      	ldreq	r3, [r1, #20]
 8005482:	600f      	str	r7, [r1, #0]
 8005484:	bf18      	it	ne
 8005486:	2300      	movne	r3, #0
 8005488:	eba6 0807 	sub.w	r8, r6, r7
 800548c:	608b      	str	r3, [r1, #8]
 800548e:	f1b8 0f00 	cmp.w	r8, #0
 8005492:	dd9c      	ble.n	80053ce <__sflush_r+0x1a>
 8005494:	6a21      	ldr	r1, [r4, #32]
 8005496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005498:	4643      	mov	r3, r8
 800549a:	463a      	mov	r2, r7
 800549c:	4628      	mov	r0, r5
 800549e:	47b0      	blx	r6
 80054a0:	2800      	cmp	r0, #0
 80054a2:	dc06      	bgt.n	80054b2 <__sflush_r+0xfe>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054b0:	e78e      	b.n	80053d0 <__sflush_r+0x1c>
 80054b2:	4407      	add	r7, r0
 80054b4:	eba8 0800 	sub.w	r8, r8, r0
 80054b8:	e7e9      	b.n	800548e <__sflush_r+0xda>
 80054ba:	bf00      	nop
 80054bc:	20400001 	.word	0x20400001

080054c0 <_fflush_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	690b      	ldr	r3, [r1, #16]
 80054c4:	4605      	mov	r5, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	b913      	cbnz	r3, 80054d0 <_fflush_r+0x10>
 80054ca:	2500      	movs	r5, #0
 80054cc:	4628      	mov	r0, r5
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	b118      	cbz	r0, 80054da <_fflush_r+0x1a>
 80054d2:	6983      	ldr	r3, [r0, #24]
 80054d4:	b90b      	cbnz	r3, 80054da <_fflush_r+0x1a>
 80054d6:	f7ff f84b 	bl	8004570 <__sinit>
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <_fflush_r+0x6c>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	d11b      	bne.n	8005518 <_fflush_r+0x58>
 80054e0:	686c      	ldr	r4, [r5, #4]
 80054e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0ef      	beq.n	80054ca <_fflush_r+0xa>
 80054ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054ec:	07d0      	lsls	r0, r2, #31
 80054ee:	d404      	bmi.n	80054fa <_fflush_r+0x3a>
 80054f0:	0599      	lsls	r1, r3, #22
 80054f2:	d402      	bmi.n	80054fa <_fflush_r+0x3a>
 80054f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054f6:	f7ff f8eb 	bl	80046d0 <__retarget_lock_acquire_recursive>
 80054fa:	4628      	mov	r0, r5
 80054fc:	4621      	mov	r1, r4
 80054fe:	f7ff ff59 	bl	80053b4 <__sflush_r>
 8005502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005504:	07da      	lsls	r2, r3, #31
 8005506:	4605      	mov	r5, r0
 8005508:	d4e0      	bmi.n	80054cc <_fflush_r+0xc>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	059b      	lsls	r3, r3, #22
 800550e:	d4dd      	bmi.n	80054cc <_fflush_r+0xc>
 8005510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005512:	f7ff f8de 	bl	80046d2 <__retarget_lock_release_recursive>
 8005516:	e7d9      	b.n	80054cc <_fflush_r+0xc>
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <_fflush_r+0x70>)
 800551a:	429c      	cmp	r4, r3
 800551c:	d101      	bne.n	8005522 <_fflush_r+0x62>
 800551e:	68ac      	ldr	r4, [r5, #8]
 8005520:	e7df      	b.n	80054e2 <_fflush_r+0x22>
 8005522:	4b04      	ldr	r3, [pc, #16]	; (8005534 <_fflush_r+0x74>)
 8005524:	429c      	cmp	r4, r3
 8005526:	bf08      	it	eq
 8005528:	68ec      	ldreq	r4, [r5, #12]
 800552a:	e7da      	b.n	80054e2 <_fflush_r+0x22>
 800552c:	08005998 	.word	0x08005998
 8005530:	080059b8 	.word	0x080059b8
 8005534:	08005978 	.word	0x08005978

08005538 <_lseek_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d07      	ldr	r5, [pc, #28]	; (8005558 <_lseek_r+0x20>)
 800553c:	4604      	mov	r4, r0
 800553e:	4608      	mov	r0, r1
 8005540:	4611      	mov	r1, r2
 8005542:	2200      	movs	r2, #0
 8005544:	602a      	str	r2, [r5, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	f7fb fc2a 	bl	8000da0 <_lseek>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_lseek_r+0x1e>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_lseek_r+0x1e>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	20012f1c 	.word	0x20012f1c

0800555c <__swhatbuf_r>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	460e      	mov	r6, r1
 8005560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005564:	2900      	cmp	r1, #0
 8005566:	b096      	sub	sp, #88	; 0x58
 8005568:	4614      	mov	r4, r2
 800556a:	461d      	mov	r5, r3
 800556c:	da08      	bge.n	8005580 <__swhatbuf_r+0x24>
 800556e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	602a      	str	r2, [r5, #0]
 8005576:	061a      	lsls	r2, r3, #24
 8005578:	d410      	bmi.n	800559c <__swhatbuf_r+0x40>
 800557a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557e:	e00e      	b.n	800559e <__swhatbuf_r+0x42>
 8005580:	466a      	mov	r2, sp
 8005582:	f000 f8fd 	bl	8005780 <_fstat_r>
 8005586:	2800      	cmp	r0, #0
 8005588:	dbf1      	blt.n	800556e <__swhatbuf_r+0x12>
 800558a:	9a01      	ldr	r2, [sp, #4]
 800558c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005590:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005594:	425a      	negs	r2, r3
 8005596:	415a      	adcs	r2, r3
 8005598:	602a      	str	r2, [r5, #0]
 800559a:	e7ee      	b.n	800557a <__swhatbuf_r+0x1e>
 800559c:	2340      	movs	r3, #64	; 0x40
 800559e:	2000      	movs	r0, #0
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	b016      	add	sp, #88	; 0x58
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080055a8 <__smakebuf_r>:
 80055a8:	898b      	ldrh	r3, [r1, #12]
 80055aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055ac:	079d      	lsls	r5, r3, #30
 80055ae:	4606      	mov	r6, r0
 80055b0:	460c      	mov	r4, r1
 80055b2:	d507      	bpl.n	80055c4 <__smakebuf_r+0x1c>
 80055b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	6123      	str	r3, [r4, #16]
 80055bc:	2301      	movs	r3, #1
 80055be:	6163      	str	r3, [r4, #20]
 80055c0:	b002      	add	sp, #8
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	ab01      	add	r3, sp, #4
 80055c6:	466a      	mov	r2, sp
 80055c8:	f7ff ffc8 	bl	800555c <__swhatbuf_r>
 80055cc:	9900      	ldr	r1, [sp, #0]
 80055ce:	4605      	mov	r5, r0
 80055d0:	4630      	mov	r0, r6
 80055d2:	f7ff f8f3 	bl	80047bc <_malloc_r>
 80055d6:	b948      	cbnz	r0, 80055ec <__smakebuf_r+0x44>
 80055d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055dc:	059a      	lsls	r2, r3, #22
 80055de:	d4ef      	bmi.n	80055c0 <__smakebuf_r+0x18>
 80055e0:	f023 0303 	bic.w	r3, r3, #3
 80055e4:	f043 0302 	orr.w	r3, r3, #2
 80055e8:	81a3      	strh	r3, [r4, #12]
 80055ea:	e7e3      	b.n	80055b4 <__smakebuf_r+0xc>
 80055ec:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <__smakebuf_r+0x7c>)
 80055ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	6020      	str	r0, [r4, #0]
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	9b00      	ldr	r3, [sp, #0]
 80055fc:	6163      	str	r3, [r4, #20]
 80055fe:	9b01      	ldr	r3, [sp, #4]
 8005600:	6120      	str	r0, [r4, #16]
 8005602:	b15b      	cbz	r3, 800561c <__smakebuf_r+0x74>
 8005604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005608:	4630      	mov	r0, r6
 800560a:	f000 f8cb 	bl	80057a4 <_isatty_r>
 800560e:	b128      	cbz	r0, 800561c <__smakebuf_r+0x74>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	89a0      	ldrh	r0, [r4, #12]
 800561e:	4305      	orrs	r5, r0
 8005620:	81a5      	strh	r5, [r4, #12]
 8005622:	e7cd      	b.n	80055c0 <__smakebuf_r+0x18>
 8005624:	08004509 	.word	0x08004509

08005628 <memmove>:
 8005628:	4288      	cmp	r0, r1
 800562a:	b510      	push	{r4, lr}
 800562c:	eb01 0402 	add.w	r4, r1, r2
 8005630:	d902      	bls.n	8005638 <memmove+0x10>
 8005632:	4284      	cmp	r4, r0
 8005634:	4623      	mov	r3, r4
 8005636:	d807      	bhi.n	8005648 <memmove+0x20>
 8005638:	1e43      	subs	r3, r0, #1
 800563a:	42a1      	cmp	r1, r4
 800563c:	d008      	beq.n	8005650 <memmove+0x28>
 800563e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005646:	e7f8      	b.n	800563a <memmove+0x12>
 8005648:	4402      	add	r2, r0
 800564a:	4601      	mov	r1, r0
 800564c:	428a      	cmp	r2, r1
 800564e:	d100      	bne.n	8005652 <memmove+0x2a>
 8005650:	bd10      	pop	{r4, pc}
 8005652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800565a:	e7f7      	b.n	800564c <memmove+0x24>

0800565c <__malloc_lock>:
 800565c:	4801      	ldr	r0, [pc, #4]	; (8005664 <__malloc_lock+0x8>)
 800565e:	f7ff b837 	b.w	80046d0 <__retarget_lock_acquire_recursive>
 8005662:	bf00      	nop
 8005664:	20012f10 	.word	0x20012f10

08005668 <__malloc_unlock>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__malloc_unlock+0x8>)
 800566a:	f7ff b832 	b.w	80046d2 <__retarget_lock_release_recursive>
 800566e:	bf00      	nop
 8005670:	20012f10 	.word	0x20012f10

08005674 <_realloc_r>:
 8005674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005678:	4680      	mov	r8, r0
 800567a:	4614      	mov	r4, r2
 800567c:	460e      	mov	r6, r1
 800567e:	b921      	cbnz	r1, 800568a <_realloc_r+0x16>
 8005680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005684:	4611      	mov	r1, r2
 8005686:	f7ff b899 	b.w	80047bc <_malloc_r>
 800568a:	b92a      	cbnz	r2, 8005698 <_realloc_r+0x24>
 800568c:	f7ff f82a 	bl	80046e4 <_free_r>
 8005690:	4625      	mov	r5, r4
 8005692:	4628      	mov	r0, r5
 8005694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005698:	f000 f894 	bl	80057c4 <_malloc_usable_size_r>
 800569c:	4284      	cmp	r4, r0
 800569e:	4607      	mov	r7, r0
 80056a0:	d802      	bhi.n	80056a8 <_realloc_r+0x34>
 80056a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056a6:	d812      	bhi.n	80056ce <_realloc_r+0x5a>
 80056a8:	4621      	mov	r1, r4
 80056aa:	4640      	mov	r0, r8
 80056ac:	f7ff f886 	bl	80047bc <_malloc_r>
 80056b0:	4605      	mov	r5, r0
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d0ed      	beq.n	8005692 <_realloc_r+0x1e>
 80056b6:	42bc      	cmp	r4, r7
 80056b8:	4622      	mov	r2, r4
 80056ba:	4631      	mov	r1, r6
 80056bc:	bf28      	it	cs
 80056be:	463a      	movcs	r2, r7
 80056c0:	f7fe fe54 	bl	800436c <memcpy>
 80056c4:	4631      	mov	r1, r6
 80056c6:	4640      	mov	r0, r8
 80056c8:	f7ff f80c 	bl	80046e4 <_free_r>
 80056cc:	e7e1      	b.n	8005692 <_realloc_r+0x1e>
 80056ce:	4635      	mov	r5, r6
 80056d0:	e7df      	b.n	8005692 <_realloc_r+0x1e>
	...

080056d4 <_read_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	; (80056f4 <_read_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fb fafc 	bl	8000ce0 <_read>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_read_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_read_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	20012f1c 	.word	0x20012f1c

080056f8 <_raise_r>:
 80056f8:	291f      	cmp	r1, #31
 80056fa:	b538      	push	{r3, r4, r5, lr}
 80056fc:	4604      	mov	r4, r0
 80056fe:	460d      	mov	r5, r1
 8005700:	d904      	bls.n	800570c <_raise_r+0x14>
 8005702:	2316      	movs	r3, #22
 8005704:	6003      	str	r3, [r0, #0]
 8005706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800570e:	b112      	cbz	r2, 8005716 <_raise_r+0x1e>
 8005710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005714:	b94b      	cbnz	r3, 800572a <_raise_r+0x32>
 8005716:	4620      	mov	r0, r4
 8005718:	f000 f830 	bl	800577c <_getpid_r>
 800571c:	462a      	mov	r2, r5
 800571e:	4601      	mov	r1, r0
 8005720:	4620      	mov	r0, r4
 8005722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005726:	f000 b817 	b.w	8005758 <_kill_r>
 800572a:	2b01      	cmp	r3, #1
 800572c:	d00a      	beq.n	8005744 <_raise_r+0x4c>
 800572e:	1c59      	adds	r1, r3, #1
 8005730:	d103      	bne.n	800573a <_raise_r+0x42>
 8005732:	2316      	movs	r3, #22
 8005734:	6003      	str	r3, [r0, #0]
 8005736:	2001      	movs	r0, #1
 8005738:	e7e7      	b.n	800570a <_raise_r+0x12>
 800573a:	2400      	movs	r4, #0
 800573c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005740:	4628      	mov	r0, r5
 8005742:	4798      	blx	r3
 8005744:	2000      	movs	r0, #0
 8005746:	e7e0      	b.n	800570a <_raise_r+0x12>

08005748 <raise>:
 8005748:	4b02      	ldr	r3, [pc, #8]	; (8005754 <raise+0xc>)
 800574a:	4601      	mov	r1, r0
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	f7ff bfd3 	b.w	80056f8 <_raise_r>
 8005752:	bf00      	nop
 8005754:	20000014 	.word	0x20000014

08005758 <_kill_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d07      	ldr	r5, [pc, #28]	; (8005778 <_kill_r+0x20>)
 800575c:	2300      	movs	r3, #0
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	4611      	mov	r1, r2
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	f7fb faa1 	bl	8000cac <_kill>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	d102      	bne.n	8005774 <_kill_r+0x1c>
 800576e:	682b      	ldr	r3, [r5, #0]
 8005770:	b103      	cbz	r3, 8005774 <_kill_r+0x1c>
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	bd38      	pop	{r3, r4, r5, pc}
 8005776:	bf00      	nop
 8005778:	20012f1c 	.word	0x20012f1c

0800577c <_getpid_r>:
 800577c:	f7fb ba8e 	b.w	8000c9c <_getpid>

08005780 <_fstat_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d07      	ldr	r5, [pc, #28]	; (80057a0 <_fstat_r+0x20>)
 8005784:	2300      	movs	r3, #0
 8005786:	4604      	mov	r4, r0
 8005788:	4608      	mov	r0, r1
 800578a:	4611      	mov	r1, r2
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	f7fb faec 	bl	8000d6a <_fstat>
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	d102      	bne.n	800579c <_fstat_r+0x1c>
 8005796:	682b      	ldr	r3, [r5, #0]
 8005798:	b103      	cbz	r3, 800579c <_fstat_r+0x1c>
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	bd38      	pop	{r3, r4, r5, pc}
 800579e:	bf00      	nop
 80057a0:	20012f1c 	.word	0x20012f1c

080057a4 <_isatty_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4d06      	ldr	r5, [pc, #24]	; (80057c0 <_isatty_r+0x1c>)
 80057a8:	2300      	movs	r3, #0
 80057aa:	4604      	mov	r4, r0
 80057ac:	4608      	mov	r0, r1
 80057ae:	602b      	str	r3, [r5, #0]
 80057b0:	f7fb faeb 	bl	8000d8a <_isatty>
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d102      	bne.n	80057be <_isatty_r+0x1a>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	b103      	cbz	r3, 80057be <_isatty_r+0x1a>
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	20012f1c 	.word	0x20012f1c

080057c4 <_malloc_usable_size_r>:
 80057c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c8:	1f18      	subs	r0, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfbc      	itt	lt
 80057ce:	580b      	ldrlt	r3, [r1, r0]
 80057d0:	18c0      	addlt	r0, r0, r3
 80057d2:	4770      	bx	lr

080057d4 <_sbrk>:
 80057d4:	4a04      	ldr	r2, [pc, #16]	; (80057e8 <_sbrk+0x14>)
 80057d6:	6811      	ldr	r1, [r2, #0]
 80057d8:	4603      	mov	r3, r0
 80057da:	b909      	cbnz	r1, 80057e0 <_sbrk+0xc>
 80057dc:	4903      	ldr	r1, [pc, #12]	; (80057ec <_sbrk+0x18>)
 80057de:	6011      	str	r1, [r2, #0]
 80057e0:	6810      	ldr	r0, [r2, #0]
 80057e2:	4403      	add	r3, r0
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4770      	bx	lr
 80057e8:	20012f20 	.word	0x20012f20
 80057ec:	20012f28 	.word	0x20012f28

080057f0 <_init>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	bf00      	nop
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr

080057fc <_fini>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	bf00      	nop
 8005800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005802:	bc08      	pop	{r3}
 8005804:	469e      	mov	lr, r3
 8005806:	4770      	bx	lr
