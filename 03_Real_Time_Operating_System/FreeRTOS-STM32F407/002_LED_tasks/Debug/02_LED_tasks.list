
02_LED_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006868  08006868  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006870  08006870  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013480  20000014  0800688c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013494  0800688c  00023494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018140  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fec  00000000  00000000  00038184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022aba  00000000  00000000  0003d578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a62  00000000  00000000  00060032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6b20  00000000  00000000  00074a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b5b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb8  00000000  00000000  0014b608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006728 	.word	0x08006728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006728 	.word	0x08006728

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200133ec 	.word	0x200133ec

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb6b 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f867 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8cf 	bl	800070c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(500000);

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <main+0xc0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2a      	ldr	r2, [pc, #168]	; (800061c <main+0xc0>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	22c8      	movs	r2, #200	; 0xc8
 8000588:	4925      	ldr	r1, [pc, #148]	; (8000620 <main+0xc4>)
 800058a:	4826      	ldr	r0, [pc, #152]	; (8000624 <main+0xc8>)
 800058c:	f002 fb8e 	bl	8002cac <xTaskCreate>
 8000590:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00a      	beq.n	80005ae <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005aa:	bf00      	nop
 80005ac:	e7fe      	b.n	80005ac <main+0x50>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	22c8      	movs	r2, #200	; 0xc8
 80005bc:	491a      	ldr	r1, [pc, #104]	; (8000628 <main+0xcc>)
 80005be:	481b      	ldr	r0, [pc, #108]	; (800062c <main+0xd0>)
 80005c0:	f002 fb74 	bl	8002cac <xTaskCreate>
 80005c4:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00a      	beq.n	80005e2 <main+0x86>
        __asm volatile
 80005cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	617b      	str	r3, [r7, #20]
    }
 80005de:	bf00      	nop
 80005e0:	e7fe      	b.n	80005e0 <main+0x84>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2302      	movs	r3, #2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	22c8      	movs	r2, #200	; 0xc8
 80005ee:	4910      	ldr	r1, [pc, #64]	; (8000630 <main+0xd4>)
 80005f0:	4810      	ldr	r0, [pc, #64]	; (8000634 <main+0xd8>)
 80005f2:	f002 fb5b 	bl	8002cac <xTaskCreate>
 80005f6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d00a      	beq.n	8000614 <main+0xb8>
        __asm volatile
 80005fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000602:	f383 8811 	msr	BASEPRI, r3
 8000606:	f3bf 8f6f 	isb	sy
 800060a:	f3bf 8f4f 	dsb	sy
 800060e:	613b      	str	r3, [r7, #16]
    }
 8000610:	bf00      	nop
 8000612:	e7fe      	b.n	8000612 <main+0xb6>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000614:	f002 fca0 	bl	8002f58 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0xbc>
 800061a:	bf00      	nop
 800061c:	e0001000 	.word	0xe0001000
 8000620:	08006740 	.word	0x08006740
 8000624:	080009c9 	.word	0x080009c9
 8000628:	08006750 	.word	0x08006750
 800062c:	08000a21 	.word	0x08000a21
 8000630:	08006760 	.word	0x08006760
 8000634:	080009f5 	.word	0x080009f5

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 f866 	bl	8006718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006ac:	2332      	movs	r3, #50	; 0x32
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fdd5 	bl	800126c <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f9d2 	bl	8000a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f836 	bl	800175c <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f9bb 	bl	8000a70 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
 8000726:	4ba2      	ldr	r3, [pc, #648]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4aa1      	ldr	r2, [pc, #644]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b9f      	ldr	r3, [pc, #636]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	4b9b      	ldr	r3, [pc, #620]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a9a      	ldr	r2, [pc, #616]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b98      	ldr	r3, [pc, #608]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b94      	ldr	r3, [pc, #592]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a93      	ldr	r2, [pc, #588]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b91      	ldr	r3, [pc, #580]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b8d      	ldr	r3, [pc, #564]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a8c      	ldr	r2, [pc, #560]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b8a      	ldr	r3, [pc, #552]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b86      	ldr	r3, [pc, #536]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a85      	ldr	r2, [pc, #532]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b83      	ldr	r3, [pc, #524]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b7f      	ldr	r3, [pc, #508]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a7e      	ldr	r2, [pc, #504]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b7c      	ldr	r3, [pc, #496]	; (80009b0 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	4879      	ldr	r0, [pc, #484]	; (80009b4 <MX_GPIO_Init+0x2a8>)
 80007d0:	f000 fd18 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2101      	movs	r1, #1
 80007d8:	4877      	ldr	r0, [pc, #476]	; (80009b8 <MX_GPIO_Init+0x2ac>)
 80007da:	f000 fd13 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007de:	2200      	movs	r2, #0
 80007e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007e4:	4875      	ldr	r0, [pc, #468]	; (80009bc <MX_GPIO_Init+0x2b0>)
 80007e6:	f000 fd0d 	bl	8001204 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ea:	2308      	movs	r3, #8
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	486c      	ldr	r0, [pc, #432]	; (80009b4 <MX_GPIO_Init+0x2a8>)
 8000802:	f000 fb63 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000806:	2301      	movs	r3, #1
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4866      	ldr	r0, [pc, #408]	; (80009b8 <MX_GPIO_Init+0x2ac>)
 800081e:	f000 fb55 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000822:	2308      	movs	r3, #8
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000832:	2305      	movs	r3, #5
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	485e      	ldr	r0, [pc, #376]	; (80009b8 <MX_GPIO_Init+0x2ac>)
 800083e:	f000 fb45 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	485a      	ldr	r0, [pc, #360]	; (80009c0 <MX_GPIO_Init+0x2b4>)
 8000858:	f000 fb38 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800085c:	2310      	movs	r3, #16
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800086c:	2306      	movs	r3, #6
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4852      	ldr	r0, [pc, #328]	; (80009c0 <MX_GPIO_Init+0x2b4>)
 8000878:	f000 fb28 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800087c:	23e0      	movs	r3, #224	; 0xe0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088c:	2305      	movs	r3, #5
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	484a      	ldr	r0, [pc, #296]	; (80009c0 <MX_GPIO_Init+0x2b4>)
 8000898:	f000 fb18 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800089c:	2304      	movs	r3, #4
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4845      	ldr	r0, [pc, #276]	; (80009c4 <MX_GPIO_Init+0x2b8>)
 80008b0:	f000 fb0c 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c6:	2305      	movs	r3, #5
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	483c      	ldr	r0, [pc, #240]	; (80009c4 <MX_GPIO_Init+0x2b8>)
 80008d2:	f000 fafb 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4833      	ldr	r0, [pc, #204]	; (80009bc <MX_GPIO_Init+0x2b0>)
 80008f0:	f000 faec 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008f4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000906:	2306      	movs	r3, #6
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4829      	ldr	r0, [pc, #164]	; (80009b8 <MX_GPIO_Init+0x2ac>)
 8000912:	f000 fadb 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4825      	ldr	r0, [pc, #148]	; (80009c0 <MX_GPIO_Init+0x2b4>)
 800092c:	f000 face 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000930:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000942:	230a      	movs	r3, #10
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	481c      	ldr	r0, [pc, #112]	; (80009c0 <MX_GPIO_Init+0x2b4>)
 800094e:	f000 fabd 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000952:	2320      	movs	r3, #32
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4815      	ldr	r0, [pc, #84]	; (80009bc <MX_GPIO_Init+0x2b0>)
 8000966:	f000 fab1 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800096a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000970:	2312      	movs	r3, #18
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000974:	2301      	movs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800097c:	2304      	movs	r3, #4
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <MX_GPIO_Init+0x2b8>)
 8000988:	f000 faa0 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800098c:	2302      	movs	r3, #2
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000990:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0x2a8>)
 80009a2:	f000 fa93 	bl	8000ecc <HAL_GPIO_Init>

}
 80009a6:	bf00      	nop
 80009a8:	3730      	adds	r7, #48	; 0x30
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020400 	.word	0x40020400

080009c8 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <led_green_handler+0x24>)
 80009d2:	f005 fdf1 	bl	80065b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <led_green_handler+0x28>)
 80009dc:	f000 fc2b 	bl	8001236 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e4:	f000 f96c 	bl	8000cc0 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e8:	e7f2      	b.n	80009d0 <led_green_handler+0x8>
 80009ea:	bf00      	nop
 80009ec:	08006770 	.word	0x08006770
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <led_orange_handler+0x24>)
 80009fe:	f005 fddb 	bl	80065b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <led_orange_handler+0x28>)
 8000a08:	f000 fc15 	bl	8001236 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000a0c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a10:	f000 f956 	bl	8000cc0 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a14:	e7f2      	b.n	80009fc <led_orange_handler+0x8>
 8000a16:	bf00      	nop
 8000a18:	08006784 	.word	0x08006784
 8000a1c:	40020c00 	.word	0x40020c00

08000a20 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a28:	4806      	ldr	r0, [pc, #24]	; (8000a44 <led_red_handler+0x24>)
 8000a2a:	f005 fdc5 	bl	80065b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <led_red_handler+0x28>)
 8000a34:	f000 fbff 	bl	8001236 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000a38:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a3c:	f000 f940 	bl	8000cc0 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a40:	e7f2      	b.n	8000a28 <led_red_handler+0x8>
 8000a42:	bf00      	nop
 8000a44:	08006798 	.word	0x08006798
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5e:	f000 f90f 	bl	8000c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40001000 	.word	0x40001000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000abe:	f003 fba3 	bl	8004208 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	2036      	movs	r0, #54	; 0x36
 8000ae6:	f000 f9c7 	bl	8000e78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aea:	2036      	movs	r0, #54	; 0x36
 8000aec:	f000 f9e0 	bl	8000eb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <HAL_InitTick+0xa4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <HAL_InitTick+0xa4>)
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_InitTick+0xa4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b0c:	f107 0210 	add.w	r2, r7, #16
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f808 	bl	8001b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b1c:	f000 fff2 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8000b20:	4603      	mov	r3, r0
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <HAL_InitTick+0xa8>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	0c9b      	lsrs	r3, r3, #18
 8000b30:	3b01      	subs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_InitTick+0xac>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <HAL_InitTick+0xb0>)
 8000b38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_InitTick+0xac>)
 8000b3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b40:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_InitTick+0xac>)
 8000b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b46:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_InitTick+0xac>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_InitTick+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <HAL_InitTick+0xac>)
 8000b56:	f001 f81b 	bl	8001b90 <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d104      	bne.n	8000b6a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_InitTick+0xac>)
 8000b62:	f001 f86f 	bl	8001c44 <HAL_TIM_Base_Start_IT>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3730      	adds	r7, #48	; 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	20013360 	.word	0x20013360
 8000b80:	40001000 	.word	0x40001000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM6_DAC_IRQHandler+0x10>)
 8000bb6:	f001 f8b5 	bl	8001d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20013360 	.word	0x20013360

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bee:	490e      	ldr	r1, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c04:	4c0b      	ldr	r4, [pc, #44]	; (8000c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c12:	f7ff ffd7 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f005 fd3f 	bl	8006698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fc9f 	bl	800055c <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c2c:	08006878 	.word	0x08006878
  ldr r2, =_sbss
 8000c30:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c34:	20013494 	.word	0x20013494

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8fc 	bl	8000e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff ff30 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff ff06 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	200133a8 	.word	0x200133a8

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	200133a8 	.word	0x200133a8

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffde 	bl	8000ca8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff4c 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8a:	f7ff ff61 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	6978      	ldr	r0, [r7, #20]
 8000e96:	f7ff ffb1 	bl	8000dfc <NVIC_EncodePriority>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff80 	bl	8000da8 <__NVIC_SetPriority>
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff54 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e16b      	b.n	80011c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 815a 	bne.w	80011ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80b4 	beq.w	80011ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b60      	ldr	r3, [pc, #384]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a5f      	ldr	r2, [pc, #380]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a5b      	ldr	r2, [pc, #364]	; (80011dc <HAL_GPIO_Init+0x310>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a52      	ldr	r2, [pc, #328]	; (80011e0 <HAL_GPIO_Init+0x314>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d02b      	beq.n	80010f2 <HAL_GPIO_Init+0x226>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a51      	ldr	r2, [pc, #324]	; (80011e4 <HAL_GPIO_Init+0x318>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x222>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a50      	ldr	r2, [pc, #320]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x21e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <HAL_GPIO_Init+0x320>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x21a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4e      	ldr	r2, [pc, #312]	; (80011f0 <HAL_GPIO_Init+0x324>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x216>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4d      	ldr	r2, [pc, #308]	; (80011f4 <HAL_GPIO_Init+0x328>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x212>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4c      	ldr	r2, [pc, #304]	; (80011f8 <HAL_GPIO_Init+0x32c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x20e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4b      	ldr	r2, [pc, #300]	; (80011fc <HAL_GPIO_Init+0x330>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x20a>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00e      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010d6:	2308      	movs	r3, #8
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	; (80011dc <HAL_GPIO_Init+0x310>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <HAL_GPIO_Init+0x334>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001136:	4a32      	ldr	r2, [pc, #200]	; (8001200 <HAL_GPIO_Init+0x334>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800113c:	4b30      	ldr	r3, [pc, #192]	; (8001200 <HAL_GPIO_Init+0x334>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001160:	4a27      	ldr	r2, [pc, #156]	; (8001200 <HAL_GPIO_Init+0x334>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_GPIO_Init+0x334>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118a:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <HAL_GPIO_Init+0x334>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_GPIO_Init+0x334>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b4:	4a12      	ldr	r2, [pc, #72]	; (8001200 <HAL_GPIO_Init+0x334>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f ae90 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40021c00 	.word	0x40021c00
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001248:	887a      	ldrh	r2, [r7, #2]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	041a      	lsls	r2, r3, #16
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43d9      	mvns	r1, r3
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	400b      	ands	r3, r1
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e264      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d075      	beq.n	8001376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128a:	4ba3      	ldr	r3, [pc, #652]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d00c      	beq.n	80012b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4ba0      	ldr	r3, [pc, #640]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d112      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a2:	4b9d      	ldr	r3, [pc, #628]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ae:	d10b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	4b99      	ldr	r3, [pc, #612]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d05b      	beq.n	8001374 <HAL_RCC_OscConfig+0x108>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d157      	bne.n	8001374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e23f      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x74>
 80012d2:	4b91      	ldr	r3, [pc, #580]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a90      	ldr	r2, [pc, #576]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e01d      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a8a      	ldr	r2, [pc, #552]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e00b      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 8001304:	4b84      	ldr	r3, [pc, #528]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a83      	ldr	r2, [pc, #524]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a80      	ldr	r2, [pc, #512]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fcc0 	bl	8000ca8 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fcbc 	bl	8000ca8 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e204      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0xc0>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fcac 	bl	8000ca8 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fca8 	bl	8000ca8 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1f0      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0xe8>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d063      	beq.n	800144a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001382:	4b65      	ldr	r3, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001396:	2b08      	cmp	r3, #8
 8001398:	d11c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e1c4      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4952      	ldr	r1, [pc, #328]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	e03a      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013dc:	4b4f      	ldr	r3, [pc, #316]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fc61 	bl	8000ca8 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fc5d 	bl	8000ca8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1a5      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4940      	ldr	r1, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fc40 	bl	8000ca8 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff fc3c 	bl	8000ca8 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e184      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d030      	beq.n	80014b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d016      	beq.n	800148c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fc20 	bl	8000ca8 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fc1c 	bl	8000ca8 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e164      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x200>
 800148a:	e015      	b.n	80014b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fc09 	bl	8000ca8 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff fc05 	bl	8000ca8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e14d      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a0 	beq.w	8001606 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d121      	bne.n	8001546 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff fbcb 	bl	8000ca8 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e011      	b.n	800153a <HAL_RCC_OscConfig+0x2ce>
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	42470000 	.word	0x42470000
 8001520:	42470e80 	.word	0x42470e80
 8001524:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001528:	f7ff fbbe 	bl	8000ca8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e106      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b85      	ldr	r3, [pc, #532]	; (8001750 <HAL_RCC_OscConfig+0x4e4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x2f0>
 800154e:	4b81      	ldr	r3, [pc, #516]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a80      	ldr	r2, [pc, #512]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x312>
 8001564:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a7a      	ldr	r2, [pc, #488]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	; 0x70
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800157e:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a74      	ldr	r2, [pc, #464]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a71      	ldr	r2, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fb83 	bl	8000ca8 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fb7f 	bl	8000ca8 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0c5      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b65      	ldr	r3, [pc, #404]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x33a>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb6d 	bl	8000ca8 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff fb69 	bl	8000ca8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0af      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b56      	ldr	r3, [pc, #344]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a55      	ldr	r2, [pc, #340]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 809b 	beq.w	8001746 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d05c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d141      	bne.n	80016a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb3d 	bl	8000ca8 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fb39 	bl	8000ca8 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e081      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	019b      	lsls	r3, r3, #6
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	3b01      	subs	r3, #1
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	4937      	ldr	r1, [pc, #220]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb12 	bl	8000ca8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb0e 	bl	8000ca8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e056      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x41c>
 80016a6:	e04e      	b.n	8001746 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fafb 	bl	8000ca8 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff faf7 	bl	8000ca8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e03f      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x44a>
 80016d4:	e037      	b.n	8001746 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e032      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d028      	beq.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d121      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d11a      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001718:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171a:	4293      	cmp	r3, r2
 800171c:	d111      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40007000 	.word	0x40007000
 8001754:	40023800 	.word	0x40023800
 8001758:	42470060 	.word	0x42470060

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0cc      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d90c      	bls.n	8001798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d044      	beq.n	800187c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d119      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d003      	beq.n	800181a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	2b03      	cmp	r3, #3
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e06f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e067      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0203 	bic.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4934      	ldr	r1, [pc, #208]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800184c:	f7ff fa2c 	bl	8000ca8 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	e00a      	b.n	800186a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001854:	f7ff fa28 	bl	8000ca8 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e04f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 020c 	and.w	r2, r3, #12
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	429a      	cmp	r2, r3
 800187a:	d1eb      	bne.n	8001854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d20c      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f8e4 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00
 8001918:	40023800 	.word	0x40023800
 800191c:	08006834 	.word	0x08006834
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001940:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d00d      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x40>
 800194c:	2b08      	cmp	r3, #8
 800194e:	f200 80bd 	bhi.w	8001acc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x34>
 8001956:	2b04      	cmp	r3, #4
 8001958:	d003      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x3a>
 800195a:	e0b7      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800195e:	60bb      	str	r3, [r7, #8]
       break;
 8001960:	e0b7      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001962:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001964:	60bb      	str	r3, [r7, #8]
      break;
 8001966:	e0b4      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d04d      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	461a      	mov	r2, r3
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	ea02 0800 	and.w	r8, r2, r0
 8001996:	ea03 0901 	and.w	r9, r3, r1
 800199a:	4640      	mov	r0, r8
 800199c:	4649      	mov	r1, r9
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	014b      	lsls	r3, r1, #5
 80019a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019ac:	0142      	lsls	r2, r0, #5
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	ebb0 0008 	subs.w	r0, r0, r8
 80019b6:	eb61 0109 	sbc.w	r1, r1, r9
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	018b      	lsls	r3, r1, #6
 80019c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019c8:	0182      	lsls	r2, r0, #6
 80019ca:	1a12      	subs	r2, r2, r0
 80019cc:	eb63 0301 	sbc.w	r3, r3, r1
 80019d0:	f04f 0000 	mov.w	r0, #0
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	00d9      	lsls	r1, r3, #3
 80019da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019de:	00d0      	lsls	r0, r2, #3
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	eb12 0208 	adds.w	r2, r2, r8
 80019e8:	eb43 0309 	adc.w	r3, r3, r9
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	0259      	lsls	r1, r3, #9
 80019f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019fa:	0250      	lsls	r0, r2, #9
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	f7fe fc2a 	bl	8000264 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e04a      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	461a      	mov	r2, r3
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	ea02 0400 	and.w	r4, r2, r0
 8001a32:	ea03 0501 	and.w	r5, r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	014b      	lsls	r3, r1, #5
 8001a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a48:	0142      	lsls	r2, r0, #5
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	1b00      	subs	r0, r0, r4
 8001a50:	eb61 0105 	sbc.w	r1, r1, r5
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	018b      	lsls	r3, r1, #6
 8001a5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a62:	0182      	lsls	r2, r0, #6
 8001a64:	1a12      	subs	r2, r2, r0
 8001a66:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	00d9      	lsls	r1, r3, #3
 8001a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a78:	00d0      	lsls	r0, r2, #3
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	1912      	adds	r2, r2, r4
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	0299      	lsls	r1, r3, #10
 8001a8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a92:	0290      	lsls	r0, r2, #10
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	f7fe fbde 	bl	8000264 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	3301      	adds	r3, #1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	60bb      	str	r3, [r7, #8]
      break;
 8001aca:	e002      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ace:	60bb      	str	r3, [r7, #8]
      break;
 8001ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	007a1200 	.word	0x007a1200

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08006844 	.word	0x08006844

08001b2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	220f      	movs	r2, #15
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_RCC_GetClockConfig+0x60>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0207 	and.w	r2, r3, #7
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e041      	b.n	8001c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f839 	bl	8001c2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 f9d8 	bl	8001f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d001      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e04e      	b.n	8001cfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d022      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c86:	d01d      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_TIM_Base_Start_IT+0xc8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d018      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d013      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00e      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d004      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d010      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	e007      	b.n	8001cf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40010400 	.word	0x40010400
 8001d1c:	40014000 	.word	0x40014000
 8001d20:	40001800 	.word	0x40001800

08001d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d122      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d11b      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0202 	mvn.w	r2, #2
 8001d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8ee 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8e0 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8f1 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d122      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0204 	mvn.w	r2, #4
 8001da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8c4 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8b6 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8c7 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d122      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d11b      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0208 	mvn.w	r2, #8
 8001df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f89a 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f88c 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f89d 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d122      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d11b      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0210 	mvn.w	r2, #16
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2208      	movs	r2, #8
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f870 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f862 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f873 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0201 	mvn.w	r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fdd2 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	2b80      	cmp	r3, #128	; 0x80
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f902 	bl	80020d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b40      	cmp	r3, #64	; 0x40
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f838 	bl	8001f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0220 	mvn.w	r2, #32
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8cc 	bl	80020c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a40      	ldr	r2, [pc, #256]	; (8002098 <TIM_Base_SetConfig+0x114>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa2:	d00f      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <TIM_Base_SetConfig+0x118>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00b      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3c      	ldr	r2, [pc, #240]	; (80020a0 <TIM_Base_SetConfig+0x11c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <TIM_Base_SetConfig+0x120>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <TIM_Base_SetConfig+0x124>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d108      	bne.n	8001fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <TIM_Base_SetConfig+0x114>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d027      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	; (800209c <TIM_Base_SetConfig+0x118>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d023      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	; (80020a0 <TIM_Base_SetConfig+0x11c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <TIM_Base_SetConfig+0x120>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <TIM_Base_SetConfig+0x124>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d017      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a28      	ldr	r2, [pc, #160]	; (80020ac <TIM_Base_SetConfig+0x128>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <TIM_Base_SetConfig+0x12c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <TIM_Base_SetConfig+0x130>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <TIM_Base_SetConfig+0x134>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <TIM_Base_SetConfig+0x138>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <TIM_Base_SetConfig+0x13c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d108      	bne.n	8002048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <TIM_Base_SetConfig+0x114>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0xf8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <TIM_Base_SetConfig+0x124>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d103      	bne.n	8002084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	615a      	str	r2, [r3, #20]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40010000 	.word	0x40010000
 800209c:	40000400 	.word	0x40000400
 80020a0:	40000800 	.word	0x40000800
 80020a4:	40000c00 	.word	0x40000c00
 80020a8:	40010400 	.word	0x40010400
 80020ac:	40014000 	.word	0x40014000
 80020b0:	40014400 	.word	0x40014400
 80020b4:	40014800 	.word	0x40014800
 80020b8:	40001800 	.word	0x40001800
 80020bc:	40001c00 	.word	0x40001c00
 80020c0:	40002000 	.word	0x40002000

080020c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f103 0208 	add.w	r2, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002104:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f103 0208 	add.w	r2, r3, #8
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f103 0208 	add.w	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a4:	d103      	bne.n	80021ae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e00c      	b.n	80021c8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3308      	adds	r3, #8
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e002      	b.n	80021bc <vListInsert+0x2e>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d2f6      	bcs.n	80021b6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	601a      	str	r2, [r3, #0]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6892      	ldr	r2, [r2, #8]
 8002216:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6852      	ldr	r2, [r2, #4]
 8002220:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d103      	bne.n	8002234 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	1e5a      	subs	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10a      	bne.n	800227e <xQueueGenericReset+0x2a>
        __asm volatile
 8002268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	60bb      	str	r3, [r7, #8]
    }
 800227a:	bf00      	nop
 800227c:	e7fe      	b.n	800227c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800227e:	f002 f841 	bl	8004304 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	68f9      	ldr	r1, [r7, #12]
 800228c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	441a      	add	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	3b01      	subs	r3, #1
 80022b0:	68f9      	ldr	r1, [r7, #12]
 80022b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	441a      	add	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	22ff      	movs	r2, #255	; 0xff
 80022ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00f      	beq.n	80022fc <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3310      	adds	r3, #16
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f8a1 	bl	8003428 <xTaskRemoveFromEventList>
 80022e6:	e009      	b.n	80022fc <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3310      	adds	r3, #16
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fefd 	bl	80020ec <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3324      	adds	r3, #36	; 0x24
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fef8 	bl	80020ec <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80022fc:	f002 f832 	bl	8004364 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800230a:	b580      	push	{r7, lr}
 800230c:	b08c      	sub	sp, #48	; 0x30
 800230e:	af02      	add	r7, sp, #8
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	4613      	mov	r3, r2
 8002316:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10a      	bne.n	8002334 <xQueueGenericCreate+0x2a>
        __asm volatile
 800231e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002322:	f383 8811 	msr	BASEPRI, r3
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	61bb      	str	r3, [r7, #24]
    }
 8002330:	bf00      	nop
 8002332:	e7fe      	b.n	8002332 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	fb02 f303 	mul.w	r3, r2, r3
 800233c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <xQueueGenericCreate+0x48>
 8002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	429a      	cmp	r2, r3
 8002350:	d101      	bne.n	8002356 <xQueueGenericCreate+0x4c>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <xQueueGenericCreate+0x4e>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <xQueueGenericCreate+0x68>
        __asm volatile
 800235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002360:	f383 8811 	msr	BASEPRI, r3
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	617b      	str	r3, [r7, #20]
    }
 800236e:	bf00      	nop
 8002370:	e7fe      	b.n	8002370 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002378:	d90a      	bls.n	8002390 <xQueueGenericCreate+0x86>
        __asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	613b      	str	r3, [r7, #16]
    }
 800238c:	bf00      	nop
 800238e:	e7fe      	b.n	800238e <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	3350      	adds	r3, #80	; 0x50
 8002394:	4618      	mov	r0, r3
 8002396:	f002 f8e1 	bl	800455c <pvPortMalloc>
 800239a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00d      	beq.n	80023be <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3350      	adds	r3, #80	; 0x50
 80023aa:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f805 	bl	80023c8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023be:	6a3b      	ldr	r3, [r7, #32]
    }
 80023c0:	4618      	mov	r0, r3
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e002      	b.n	80023ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023f6:	2101      	movs	r1, #1
 80023f8:	69b8      	ldr	r0, [r7, #24]
 80023fa:	f7ff ff2b 	bl	8002254 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	2073      	movs	r0, #115	; 0x73
 800240e:	f003 fa7f 	bl	8005910 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b090      	sub	sp, #64	; 0x40
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <xQueueGenericSend+0x32>
        __asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800244a:	bf00      	nop
 800244c:	e7fe      	b.n	800244c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <xQueueGenericSend+0x40>
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <xQueueGenericSend+0x44>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <xQueueGenericSend+0x46>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xQueueGenericSend+0x60>
        __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d103      	bne.n	800248a <xQueueGenericSend+0x6e>
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <xQueueGenericSend+0x72>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <xQueueGenericSend+0x74>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <xQueueGenericSend+0x8e>
        __asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	623b      	str	r3, [r7, #32]
    }
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024aa:	f001 f957 	bl	800375c <xTaskGetSchedulerState>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <xQueueGenericSend+0x9e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <xQueueGenericSend+0xa2>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <xQueueGenericSend+0xa4>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <xQueueGenericSend+0xbe>
        __asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	61fb      	str	r3, [r7, #28]
    }
 80024d6:	bf00      	nop
 80024d8:	e7fe      	b.n	80024d8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024da:	f001 ff13 	bl	8004304 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <xQueueGenericSend+0xd4>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d11f      	bne.n	8002530 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 ff74 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	460b      	mov	r3, r1
 8002502:	4601      	mov	r1, r0
 8002504:	205a      	movs	r0, #90	; 0x5a
 8002506:	f003 fa79 	bl	80059fc <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002510:	f000 fa56 	bl	80029c0 <prvCopyDataToQueue>
 8002514:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	3324      	adds	r3, #36	; 0x24
 8002522:	4618      	mov	r0, r3
 8002524:	f000 ff80 	bl	8003428 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002528:	f001 ff1c 	bl	8004364 <vPortExitCritical>
                return pdPASS;
 800252c:	2301      	movs	r3, #1
 800252e:	e07d      	b.n	800262c <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d110      	bne.n	8002558 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002536:	f001 ff15 	bl	8004364 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	4618      	mov	r0, r3
 800253e:	f003 ff4f 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	460b      	mov	r3, r1
 800254c:	4601      	mov	r1, r0
 800254e:	205a      	movs	r0, #90	; 0x5a
 8002550:	f003 fa54 	bl	80059fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002554:	2300      	movs	r3, #0
 8002556:	e069      	b.n	800262c <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4618      	mov	r0, r3
 8002564:	f000 ffc6 	bl	80034f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002568:	2301      	movs	r3, #1
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800256c:	f001 fefa 	bl	8004364 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002570:	f000 fd54 	bl	800301c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002574:	f001 fec6 	bl	8004304 <vPortEnterCritical>
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800257e:	b25b      	sxtb	r3, r3
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002584:	d103      	bne.n	800258e <xQueueGenericSend+0x172>
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002594:	b25b      	sxtb	r3, r3
 8002596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800259a:	d103      	bne.n	80025a4 <xQueueGenericSend+0x188>
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025a4:	f001 fede 	bl	8004364 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025a8:	1d3a      	adds	r2, r7, #4
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 ffb5 	bl	8003520 <xTaskCheckForTimeOut>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d124      	bne.n	8002606 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025be:	f000 faf7 	bl	8002bb0 <prvIsQueueFull>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d018      	beq.n	80025fa <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	3310      	adds	r3, #16
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fed7 	bl	8003384 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80025d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d8:	f000 fa82 	bl	8002ae0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80025dc:	f000 fd2c 	bl	8003038 <xTaskResumeAll>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f47f af79 	bne.w	80024da <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <xQueueGenericSend+0x218>)
 80025ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	e76f      	b.n	80024da <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80025fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025fc:	f000 fa70 	bl	8002ae0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002600:	f000 fd1a 	bl	8003038 <xTaskResumeAll>
 8002604:	e769      	b.n	80024da <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002608:	f000 fa6a 	bl	8002ae0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800260c:	f000 fd14 	bl	8003038 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002612:	4618      	mov	r0, r3
 8002614:	f003 fee4 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	460b      	mov	r3, r1
 8002622:	4601      	mov	r1, r0
 8002624:	205a      	movs	r0, #90	; 0x5a
 8002626:	f003 f9e9 	bl	80059fc <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800262a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800262c:	4618      	mov	r0, r3
 800262e:	3738      	adds	r7, #56	; 0x38
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	e000ed04 	.word	0xe000ed04

08002638 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b090      	sub	sp, #64	; 0x40
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002662:	bf00      	nop
 8002664:	e7fe      	b.n	8002664 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <xQueueGenericSendFromISR+0x3c>
 800266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <xQueueGenericSendFromISR+0x40>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <xQueueGenericSendFromISR+0x42>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002682:	f383 8811 	msr	BASEPRI, r3
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002690:	bf00      	nop
 8002692:	e7fe      	b.n	8002692 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d103      	bne.n	80026a2 <xQueueGenericSendFromISR+0x6a>
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <xQueueGenericSendFromISR+0x6e>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <xQueueGenericSendFromISR+0x70>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10a      	bne.n	80026c2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	623b      	str	r3, [r7, #32]
    }
 80026be:	bf00      	nop
 80026c0:	e7fe      	b.n	80026c0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026c2:	f001 ff0b 	bl	80044dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80026c6:	f3ef 8211 	mrs	r2, BASEPRI
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	61fa      	str	r2, [r7, #28]
 80026dc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80026de:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d302      	bcc.n	80026f4 <xQueueGenericSendFromISR+0xbc>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d148      	bne.n	8002786 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fe6a 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 800270c:	4601      	mov	r1, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	461a      	mov	r2, r3
 8002712:	2060      	movs	r0, #96	; 0x60
 8002714:	f003 f8a2 	bl	800585c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800271e:	f000 f94f 	bl	80029c0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002722:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800272a:	d112      	bne.n	8002752 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b00      	cmp	r3, #0
 8002732:	d025      	beq.n	8002780 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	3324      	adds	r3, #36	; 0x24
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fe75 	bl	8003428 <xTaskRemoveFromEventList>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01d      	beq.n	8002780 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01a      	beq.n	8002780 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e016      	b.n	8002780 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002752:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002756:	2b7f      	cmp	r3, #127	; 0x7f
 8002758:	d10a      	bne.n	8002770 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800275a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	617b      	str	r3, [r7, #20]
    }
 800276c:	bf00      	nop
 800276e:	e7fe      	b.n	800276e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002770:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002774:	3301      	adds	r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	b25a      	sxtb	r2, r3
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002780:	2301      	movs	r3, #1
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002784:	e00b      	b.n	800279e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	4618      	mov	r0, r3
 800278a:	f003 fe29 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 800278e:	4601      	mov	r1, r0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	461a      	mov	r2, r3
 8002794:	2060      	movs	r0, #96	; 0x60
 8002796:	f003 f861 	bl	800585c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800279a:	2300      	movs	r3, #0
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80027a8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3740      	adds	r7, #64	; 0x40
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b08f      	sub	sp, #60	; 0x3c
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <xQueueReceive+0x30>
        __asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	623b      	str	r3, [r7, #32]
    }
 80027e0:	bf00      	nop
 80027e2:	e7fe      	b.n	80027e2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <xQueueReceive+0x3e>
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <xQueueReceive+0x42>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <xQueueReceive+0x44>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <xQueueReceive+0x5e>
        __asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	61fb      	str	r3, [r7, #28]
    }
 800280e:	bf00      	nop
 8002810:	e7fe      	b.n	8002810 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002812:	f000 ffa3 	bl	800375c <xTaskGetSchedulerState>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <xQueueReceive+0x6e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <xQueueReceive+0x72>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <xQueueReceive+0x74>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <xQueueReceive+0x8e>
        __asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	61bb      	str	r3, [r7, #24]
    }
 800283e:	bf00      	nop
 8002840:	e7fe      	b.n	8002840 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002842:	f001 fd5f 	bl	8004304 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	2b00      	cmp	r3, #0
 8002850:	d024      	beq.n	800289c <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002856:	f000 f91d 	bl	8002a94 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fdbf 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 8002862:	4604      	mov	r4, r0
 8002864:	2000      	movs	r0, #0
 8002866:	f003 fdbb 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 800286a:	4602      	mov	r2, r0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2101      	movs	r1, #1
 8002870:	9100      	str	r1, [sp, #0]
 8002872:	4621      	mov	r1, r4
 8002874:	205c      	movs	r0, #92	; 0x5c
 8002876:	f003 f8c1 	bl	80059fc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	3310      	adds	r3, #16
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fdca 	bl	8003428 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002894:	f001 fd66 	bl	8004364 <vPortExitCritical>
                return pdPASS;
 8002898:	2301      	movs	r3, #1
 800289a:	e08a      	b.n	80029b2 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d113      	bne.n	80028ca <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028a2:	f001 fd5f 	bl	8004364 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fd99 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 80028ae:	4604      	mov	r4, r0
 80028b0:	2000      	movs	r0, #0
 80028b2:	f003 fd95 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2101      	movs	r1, #1
 80028bc:	9100      	str	r1, [sp, #0]
 80028be:	4621      	mov	r1, r4
 80028c0:	205c      	movs	r0, #92	; 0x5c
 80028c2:	f003 f89b 	bl	80059fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e073      	b.n	80029b2 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fe0d 	bl	80034f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028da:	2301      	movs	r3, #1
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028de:	f001 fd41 	bl	8004364 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028e2:	f000 fb9b 	bl	800301c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028e6:	f001 fd0d 	bl	8004304 <vPortEnterCritical>
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f6:	d103      	bne.n	8002900 <xQueueReceive+0x14c>
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002906:	b25b      	sxtb	r3, r3
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800290c:	d103      	bne.n	8002916 <xQueueReceive+0x162>
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002916:	f001 fd25 	bl	8004364 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800291a:	1d3a      	adds	r2, r7, #4
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fdfc 	bl	8003520 <xTaskCheckForTimeOut>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d124      	bne.n	8002978 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800292e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002930:	f000 f928 	bl	8002b84 <prvIsQueueEmpty>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d018      	beq.n	800296c <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	3324      	adds	r3, #36	; 0x24
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fd1e 	bl	8003384 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294a:	f000 f8c9 	bl	8002ae0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800294e:	f000 fb73 	bl	8003038 <xTaskResumeAll>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f af74 	bne.w	8002842 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <xQueueReceive+0x208>)
 800295c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	e76a      	b.n	8002842 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800296c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800296e:	f000 f8b7 	bl	8002ae0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002972:	f000 fb61 	bl	8003038 <xTaskResumeAll>
 8002976:	e764      	b.n	8002842 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800297a:	f000 f8b1 	bl	8002ae0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800297e:	f000 fb5b 	bl	8003038 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002984:	f000 f8fe 	bl	8002b84 <prvIsQueueEmpty>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	f43f af59 	beq.w	8002842 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fd24 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 8002998:	4604      	mov	r4, r0
 800299a:	2000      	movs	r0, #0
 800299c:	f003 fd20 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 80029a0:	4602      	mov	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2101      	movs	r1, #1
 80029a6:	9100      	str	r1, [sp, #0]
 80029a8:	4621      	mov	r1, r4
 80029aa:	205c      	movs	r0, #92	; 0x5c
 80029ac:	f003 f826 	bl	80059fc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80029b0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3734      	adds	r7, #52	; 0x34
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd90      	pop	{r4, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000ed04 	.word	0xe000ed04

080029c0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d14d      	bne.n	8002a82 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fed4 	bl	8003798 <xTaskPriorityDisinherit>
 80029f0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	e043      	b.n	8002a82 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d119      	bne.n	8002a34 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6858      	ldr	r0, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	f003 fe76 	bl	80066fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	441a      	add	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d32b      	bcc.n	8002a82 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	e026      	b.n	8002a82 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68d8      	ldr	r0, [r3, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	f003 fe5c 	bl	80066fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	425b      	negs	r3, r3
 8002a4e:	441a      	add	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d207      	bcs.n	8002a70 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	425b      	negs	r3, r3
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d105      	bne.n	8002a82 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a8a:	697b      	ldr	r3, [r7, #20]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	441a      	add	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d303      	bcc.n	8002ac8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68d9      	ldr	r1, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f003 fe12 	bl	80066fc <memcpy>
    }
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ae8:	f001 fc0c 	bl	8004304 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002af2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002af4:	e011      	b.n	8002b1a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3324      	adds	r3, #36	; 0x24
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fc90 	bl	8003428 <xTaskRemoveFromEventList>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b0e:	f000 fd6d 	bl	80035ec <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	dce9      	bgt.n	8002af6 <prvUnlockQueue+0x16>
 8002b22:	e000      	b.n	8002b26 <prvUnlockQueue+0x46>
                        break;
 8002b24:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	22ff      	movs	r2, #255	; 0xff
 8002b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b2e:	f001 fc19 	bl	8004364 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b32:	f001 fbe7 	bl	8004304 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b3c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b3e:	e011      	b.n	8002b64 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fc6b 	bl	8003428 <xTaskRemoveFromEventList>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b58:	f000 fd48 	bl	80035ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b5c:	7bbb      	ldrb	r3, [r7, #14]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	dce9      	bgt.n	8002b40 <prvUnlockQueue+0x60>
 8002b6c:	e000      	b.n	8002b70 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b6e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	22ff      	movs	r2, #255	; 0xff
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b78:	f001 fbf4 	bl	8004364 <vPortExitCritical>
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b8c:	f001 fbba 	bl	8004304 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e001      	b.n	8002ba2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ba2:	f001 fbdf 	bl	8004364 <vPortExitCritical>

    return xReturn;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bb8:	f001 fba4 	bl	8004304 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d102      	bne.n	8002bce <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e001      	b.n	8002bd2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bd2:	f001 fbc7 	bl	8004364 <vPortExitCritical>

    return xReturn;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e01e      	b.n	8002c2e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bf0:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <vQueueAddToRegistry+0x60>)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d115      	bne.n	8002c28 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bfc:	4910      	ldr	r1, [pc, #64]	; (8002c40 <vQueueAddToRegistry+0x60>)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c06:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <vQueueAddToRegistry+0x60>)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fbe3 	bl	80063e0 <SEGGER_SYSVIEW_ShrinkId>
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2071      	movs	r0, #113	; 0x71
 8002c22:	f002 fe1b 	bl	800585c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c26:	e006      	b.n	8002c36 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b07      	cmp	r3, #7
 8002c32:	d9dd      	bls.n	8002bf0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200133ac 	.word	0x200133ac

08002c44 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c54:	f001 fb56 	bl	8004304 <vPortEnterCritical>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c64:	d103      	bne.n	8002c6e <vQueueWaitForMessageRestricted+0x2a>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7a:	d103      	bne.n	8002c84 <vQueueWaitForMessageRestricted+0x40>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c84:	f001 fb6e 	bl	8004364 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	3324      	adds	r3, #36	; 0x24
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fb97 	bl	80033cc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7ff ff1e 	bl	8002ae0 <prvUnlockQueue>
    }
 8002ca4:	bf00      	nop
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af04      	add	r7, sp, #16
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fc4b 	bl	800455c <pvPortMalloc>
 8002cc6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00e      	beq.n	8002cec <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cce:	2058      	movs	r0, #88	; 0x58
 8002cd0:	f001 fc44 	bl	800455c <pvPortMalloc>
 8002cd4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce2:	e005      	b.n	8002cf0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ce4:	6978      	ldr	r0, [r7, #20]
 8002ce6:	f001 fd19 	bl	800471c <vPortFree>
 8002cea:	e001      	b.n	8002cf0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d013      	beq.n	8002d1e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cf6:	88fa      	ldrh	r2, [r7, #6]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9303      	str	r3, [sp, #12]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	9302      	str	r3, [sp, #8]
 8002d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f80e 	bl	8002d2e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d12:	69f8      	ldr	r0, [r7, #28]
 8002d14:	f000 f8a2 	bl	8002e5c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	e002      	b.n	8002d24 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d22:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d24:	69bb      	ldr	r3, [r7, #24]
    }
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b088      	sub	sp, #32
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	461a      	mov	r2, r3
 8002d46:	21a5      	movs	r1, #165	; 0xa5
 8002d48:	f003 fce6 	bl	8006718 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d56:	3b01      	subs	r3, #1
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f023 0307 	bic.w	r3, r3, #7
 8002d64:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	617b      	str	r3, [r7, #20]
    }
 8002d82:	bf00      	nop
 8002d84:	e7fe      	b.n	8002d84 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01f      	beq.n	8002dcc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	e012      	b.n	8002db8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	7819      	ldrb	r1, [r3, #0]
 8002d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3334      	adds	r3, #52	; 0x34
 8002da2:	460a      	mov	r2, r1
 8002da4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	d9e9      	bls.n	8002d92 <prvInitialiseNewTask+0x64>
 8002dbe:	e000      	b.n	8002dc2 <prvInitialiseNewTask+0x94>
            {
                break;
 8002dc0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002dca:	e003      	b.n	8002dd4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d901      	bls.n	8002dde <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	2200      	movs	r2, #0
 8002dee:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	3304      	adds	r3, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff f999 	bl	800212c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f994 	bl	800212c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e08:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	f1c3 0205 	rsb	r2, r3, #5
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	3350      	adds	r3, #80	; 0x50
 8002e1e:	2204      	movs	r2, #4
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fc78 	bl	8006718 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	3354      	adds	r3, #84	; 0x54
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 fc71 	bl	8006718 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	68f9      	ldr	r1, [r7, #12]
 8002e3a:	69b8      	ldr	r0, [r7, #24]
 8002e3c:	f001 f8b6 	bl	8003fac <pxPortInitialiseStack>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e52:	bf00      	nop
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e5c:	b5b0      	push	{r4, r5, r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e64:	f001 fa4e 	bl	8004304 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e68:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <prvAddNewTaskToReadyList+0xe4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <prvAddNewTaskToReadyList+0xe4>)
 8002e70:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <prvAddNewTaskToReadyList+0xe8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e7a:	4a32      	ldr	r2, [pc, #200]	; (8002f44 <prvAddNewTaskToReadyList+0xe8>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e80:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <prvAddNewTaskToReadyList+0xe4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d110      	bne.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e88:	f000 fbce 	bl	8003628 <prvInitialiseTaskLists>
 8002e8c:	e00d      	b.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <prvAddNewTaskToReadyList+0xec>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <prvAddNewTaskToReadyList+0xe8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d802      	bhi.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <prvAddNewTaskToReadyList+0xe8>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002eaa:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <prvAddNewTaskToReadyList+0xf0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <prvAddNewTaskToReadyList+0xf0>)
 8002eb2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <prvAddNewTaskToReadyList+0xf0>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <prvAddNewTaskToReadyList+0x94>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 f965 	bl	8006194 <SEGGER_SYSVIEW_OnTaskCreate>
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	461d      	mov	r5, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461c      	mov	r4, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	1ae3      	subs	r3, r4, r3
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	462b      	mov	r3, r5
 8002eec:	f001 fd34 	bl	8004958 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 f9d2 	bl	800629c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	2201      	movs	r2, #1
 8002efe:	409a      	lsls	r2, r3
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <prvAddNewTaskToReadyList+0xf4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <prvAddNewTaskToReadyList+0xf4>)
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <prvAddNewTaskToReadyList+0xf8>)
 8002f18:	441a      	add	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f7ff f910 	bl	8002146 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f26:	f001 fa1d 	bl	8004364 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <prvAddNewTaskToReadyList+0xec>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <prvAddNewTaskToReadyList+0xe8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000108 	.word	0x20000108
 8002f44:	20000030 	.word	0x20000030
 8002f48:	20000114 	.word	0x20000114
 8002f4c:	20000124 	.word	0x20000124
 8002f50:	20000110 	.word	0x20000110
 8002f54:	20000034 	.word	0x20000034

08002f58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f5e:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <vTaskStartScheduler+0xa4>)
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	2300      	movs	r3, #0
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2300      	movs	r3, #0
 8002f68:	2282      	movs	r2, #130	; 0x82
 8002f6a:	4925      	ldr	r1, [pc, #148]	; (8003000 <vTaskStartScheduler+0xa8>)
 8002f6c:	4825      	ldr	r0, [pc, #148]	; (8003004 <vTaskStartScheduler+0xac>)
 8002f6e:	f7ff fe9d 	bl	8002cac <xTaskCreate>
 8002f72:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002f7a:	f000 fd05 	bl	8003988 <xTimerCreateTimerTask>
 8002f7e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d124      	bne.n	8002fd0 <vTaskStartScheduler+0x78>
        __asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	60bb      	str	r3, [r7, #8]
    }
 8002f98:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <vTaskStartScheduler+0xb0>)
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fa0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	; (800300c <vTaskStartScheduler+0xb4>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <vTaskStartScheduler+0xb8>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <vTaskStartScheduler+0xbc>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <vTaskStartScheduler+0xa4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d102      	bne.n	8002fc0 <vTaskStartScheduler+0x68>
 8002fba:	f003 f8cf 	bl	800615c <SEGGER_SYSVIEW_OnIdle>
 8002fbe:	e004      	b.n	8002fca <vTaskStartScheduler+0x72>
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <vTaskStartScheduler+0xbc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 f927 	bl	8006218 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002fca:	f001 f87b 	bl	80040c4 <xPortStartScheduler>
 8002fce:	e00e      	b.n	8002fee <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd6:	d10a      	bne.n	8002fee <vTaskStartScheduler+0x96>
        __asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	607b      	str	r3, [r7, #4]
    }
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <vTaskStartScheduler+0xc0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000012c 	.word	0x2000012c
 8003000:	080067ac 	.word	0x080067ac
 8003004:	08003605 	.word	0x08003605
 8003008:	20000128 	.word	0x20000128
 800300c:	20000114 	.word	0x20000114
 8003010:	2000010c 	.word	0x2000010c
 8003014:	20000030 	.word	0x20000030
 8003018:	2000000c 	.word	0x2000000c

0800301c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <vTaskSuspendAll+0x18>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	4a03      	ldr	r2, [pc, #12]	; (8003034 <vTaskSuspendAll+0x18>)
 8003028:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000130 	.word	0x20000130

08003038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <xTaskResumeAll+0x104>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <xTaskResumeAll+0x2c>
        __asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	603b      	str	r3, [r7, #0]
    }
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003064:	f001 f94e 	bl	8004304 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003068:	4b34      	ldr	r3, [pc, #208]	; (800313c <xTaskResumeAll+0x104>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	4a33      	ldr	r2, [pc, #204]	; (800313c <xTaskResumeAll+0x104>)
 8003070:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003072:	4b32      	ldr	r3, [pc, #200]	; (800313c <xTaskResumeAll+0x104>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d159      	bne.n	800312e <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800307a:	4b31      	ldr	r3, [pc, #196]	; (8003140 <xTaskResumeAll+0x108>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d055      	beq.n	800312e <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003082:	e032      	b.n	80030ea <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003084:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <xTaskResumeAll+0x10c>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3318      	adds	r3, #24
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff f8b5 	bl	8002200 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f8b0 	bl	8002200 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 f8fa 	bl	800629c <SEGGER_SYSVIEW_OnTaskStartReady>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	2201      	movs	r2, #1
 80030ae:	409a      	lsls	r2, r3
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <xTaskResumeAll+0x110>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	4a24      	ldr	r2, [pc, #144]	; (8003148 <xTaskResumeAll+0x110>)
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4a21      	ldr	r2, [pc, #132]	; (800314c <xTaskResumeAll+0x114>)
 80030c8:	441a      	add	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3304      	adds	r3, #4
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f7ff f838 	bl	8002146 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <xTaskResumeAll+0x118>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d302      	bcc.n	80030ea <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <xTaskResumeAll+0x11c>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <xTaskResumeAll+0x10c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1c8      	bne.n	8003084 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030f8:	f000 fb14 	bl	8003724 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <xTaskResumeAll+0x120>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d010      	beq.n	800312a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003108:	f000 f838 	bl	800317c <xTaskIncrementTick>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xTaskResumeAll+0x11c>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	3b01      	subs	r3, #1
 800311c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f1      	bne.n	8003108 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <xTaskResumeAll+0x120>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <xTaskResumeAll+0x11c>)
 800312c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800312e:	f001 f919 	bl	8004364 <vPortExitCritical>

    return xAlreadyYielded;
 8003132:	687b      	ldr	r3, [r7, #4]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000130 	.word	0x20000130
 8003140:	20000108 	.word	0x20000108
 8003144:	200000c8 	.word	0x200000c8
 8003148:	20000110 	.word	0x20000110
 800314c:	20000034 	.word	0x20000034
 8003150:	20000030 	.word	0x20000030
 8003154:	2000011c 	.word	0x2000011c
 8003158:	20000118 	.word	0x20000118

0800315c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <xTaskGetTickCount+0x1c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003168:	687b      	ldr	r3, [r7, #4]
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	2000010c 	.word	0x2000010c

0800317c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <xTaskIncrementTick+0x110>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d173      	bne.n	8003276 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800318e:	4b40      	ldr	r3, [pc, #256]	; (8003290 <xTaskIncrementTick+0x114>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003196:	4a3e      	ldr	r2, [pc, #248]	; (8003290 <xTaskIncrementTick+0x114>)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d120      	bne.n	80031e4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80031a2:	4b3c      	ldr	r3, [pc, #240]	; (8003294 <xTaskIncrementTick+0x118>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <xTaskIncrementTick+0x46>
        __asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	603b      	str	r3, [r7, #0]
    }
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <xTaskIncrementTick+0x44>
 80031c2:	4b34      	ldr	r3, [pc, #208]	; (8003294 <xTaskIncrementTick+0x118>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	4b33      	ldr	r3, [pc, #204]	; (8003298 <xTaskIncrementTick+0x11c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a31      	ldr	r2, [pc, #196]	; (8003294 <xTaskIncrementTick+0x118>)
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4a31      	ldr	r2, [pc, #196]	; (8003298 <xTaskIncrementTick+0x11c>)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <xTaskIncrementTick+0x120>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	4a2f      	ldr	r2, [pc, #188]	; (800329c <xTaskIncrementTick+0x120>)
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	f000 faa0 	bl	8003724 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <xTaskIncrementTick+0x124>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d348      	bcc.n	8003280 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <xTaskIncrementTick+0x118>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f8:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <xTaskIncrementTick+0x124>)
 80031fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031fe:	601a      	str	r2, [r3, #0]
                    break;
 8003200:	e03e      	b.n	8003280 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <xTaskIncrementTick+0x118>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	429a      	cmp	r2, r3
 8003218:	d203      	bcs.n	8003222 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800321a:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <xTaskIncrementTick+0x124>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003220:	e02e      	b.n	8003280 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3304      	adds	r3, #4
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe ffea 	bl	8002200 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3318      	adds	r3, #24
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe ffe1 	bl	8002200 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 f82b 	bl	800629c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	2201      	movs	r2, #1
 800324c:	409a      	lsls	r2, r3
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <xTaskIncrementTick+0x128>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <xTaskIncrementTick+0x128>)
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <xTaskIncrementTick+0x12c>)
 8003266:	441a      	add	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	3304      	adds	r3, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7fe ff69 	bl	8002146 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003274:	e7bb      	b.n	80031ee <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <xTaskIncrementTick+0x130>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <xTaskIncrementTick+0x130>)
 800327e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003280:	697b      	ldr	r3, [r7, #20]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000130 	.word	0x20000130
 8003290:	2000010c 	.word	0x2000010c
 8003294:	200000c0 	.word	0x200000c0
 8003298:	200000c4 	.word	0x200000c4
 800329c:	20000120 	.word	0x20000120
 80032a0:	20000128 	.word	0x20000128
 80032a4:	20000110 	.word	0x20000110
 80032a8:	20000034 	.word	0x20000034
 80032ac:	20000118 	.word	0x20000118

080032b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032b6:	4b2d      	ldr	r3, [pc, #180]	; (800336c <vTaskSwitchContext+0xbc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032be:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <vTaskSwitchContext+0xc0>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80032c4:	e04d      	b.n	8003362 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <vTaskSwitchContext+0xc0>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <vTaskSwitchContext+0xc4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032da:	7afb      	ldrb	r3, [r7, #11]
 80032dc:	f1c3 031f 	rsb	r3, r3, #31
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	4925      	ldr	r1, [pc, #148]	; (8003378 <vTaskSwitchContext+0xc8>)
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <vTaskSwitchContext+0x5c>
        __asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	607b      	str	r3, [r7, #4]
    }
 8003308:	bf00      	nop
 800330a:	e7fe      	b.n	800330a <vTaskSwitchContext+0x5a>
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4a18      	ldr	r2, [pc, #96]	; (8003378 <vTaskSwitchContext+0xc8>)
 8003318:	4413      	add	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	3308      	adds	r3, #8
 800332e:	429a      	cmp	r2, r3
 8003330:	d104      	bne.n	800333c <vTaskSwitchContext+0x8c>
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <vTaskSwitchContext+0xcc>)
 8003344:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <vTaskSwitchContext+0xcc>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <vTaskSwitchContext+0xd0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d102      	bne.n	8003358 <vTaskSwitchContext+0xa8>
 8003352:	f002 ff03 	bl	800615c <SEGGER_SYSVIEW_OnIdle>
}
 8003356:	e004      	b.n	8003362 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <vTaskSwitchContext+0xcc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f002 ff5b 	bl	8006218 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000130 	.word	0x20000130
 8003370:	2000011c 	.word	0x2000011c
 8003374:	20000110 	.word	0x20000110
 8003378:	20000034 	.word	0x20000034
 800337c:	20000030 	.word	0x20000030
 8003380:	2000012c 	.word	0x2000012c

08003384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	60fb      	str	r3, [r7, #12]
    }
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033aa:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <vTaskPlaceOnEventList+0x44>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3318      	adds	r3, #24
 80033b0:	4619      	mov	r1, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fe feeb 	bl	800218e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033b8:	2101      	movs	r1, #1
 80033ba:	6838      	ldr	r0, [r7, #0]
 80033bc:	f000 fa6c 	bl	8003898 <prvAddCurrentTaskToDelayedList>
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000030 	.word	0x20000030

080033cc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	617b      	str	r3, [r7, #20]
    }
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <vTaskPlaceOnEventListRestricted+0x58>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3318      	adds	r3, #24
 80033fa:	4619      	mov	r1, r3
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7fe fea2 	bl	8002146 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800340c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800340e:	2024      	movs	r0, #36	; 0x24
 8003410:	f002 f9ca 	bl	80057a8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	68b8      	ldr	r0, [r7, #8]
 8003418:	f000 fa3e 	bl	8003898 <prvAddCurrentTaskToDelayedList>
    }
 800341c:	bf00      	nop
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000030 	.word	0x20000030

08003428 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	60fb      	str	r3, [r7, #12]
    }
 8003450:	bf00      	nop
 8003452:	e7fe      	b.n	8003452 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	3318      	adds	r3, #24
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fed1 	bl	8002200 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800345e:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <xTaskRemoveFromEventList+0xb4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d120      	bne.n	80034a8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	3304      	adds	r3, #4
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fec8 	bl	8002200 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4618      	mov	r0, r3
 8003474:	f002 ff12 	bl	800629c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	2201      	movs	r2, #1
 800347e:	409a      	lsls	r2, r3
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <xTaskRemoveFromEventList+0xb8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4313      	orrs	r3, r2
 8003486:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <xTaskRemoveFromEventList+0xb8>)
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <xTaskRemoveFromEventList+0xbc>)
 8003498:	441a      	add	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	3304      	adds	r3, #4
 800349e:	4619      	mov	r1, r3
 80034a0:	4610      	mov	r0, r2
 80034a2:	f7fe fe50 	bl	8002146 <vListInsertEnd>
 80034a6:	e005      	b.n	80034b4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	3318      	adds	r3, #24
 80034ac:	4619      	mov	r1, r3
 80034ae:	480e      	ldr	r0, [pc, #56]	; (80034e8 <xTaskRemoveFromEventList+0xc0>)
 80034b0:	f7fe fe49 	bl	8002146 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <xTaskRemoveFromEventList+0xc4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	429a      	cmp	r2, r3
 80034c0:	d905      	bls.n	80034ce <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80034c2:	2301      	movs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <xTaskRemoveFromEventList+0xc8>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	e001      	b.n	80034d2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80034d2:	697b      	ldr	r3, [r7, #20]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000130 	.word	0x20000130
 80034e0:	20000110 	.word	0x20000110
 80034e4:	20000034 	.word	0x20000034
 80034e8:	200000c8 	.word	0x200000c8
 80034ec:	20000030 	.word	0x20000030
 80034f0:	2000011c 	.word	0x2000011c

080034f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <vTaskInternalSetTimeOutState+0x24>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <vTaskInternalSetTimeOutState+0x28>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	605a      	str	r2, [r3, #4]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	20000120 	.word	0x20000120
 800351c:	2000010c 	.word	0x2000010c

08003520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	613b      	str	r3, [r7, #16]
    }
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	60fb      	str	r3, [r7, #12]
    }
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003562:	f000 fecf 	bl	8004304 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003566:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <xTaskCheckForTimeOut+0xc4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357e:	d102      	bne.n	8003586 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	e026      	b.n	80035d4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <xTaskCheckForTimeOut+0xc8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d00a      	beq.n	80035a8 <xTaskCheckForTimeOut+0x88>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	429a      	cmp	r2, r3
 800359a:	d305      	bcc.n	80035a8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800359c:	2301      	movs	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e015      	b.n	80035d4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d20b      	bcs.n	80035ca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	1ad2      	subs	r2, r2, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ff98 	bl	80034f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	e004      	b.n	80035d4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80035d4:	f000 fec6 	bl	8004364 <vPortExitCritical>

    return xReturn;
 80035d8:	69fb      	ldr	r3, [r7, #28]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	2000010c 	.word	0x2000010c
 80035e8:	20000120 	.word	0x20000120

080035ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <vTaskMissedYield+0x14>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	2000011c 	.word	0x2000011c

08003604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800360c:	f000 f84c 	bl	80036a8 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <prvIdleTask+0x20>)
 8003612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003620:	e7f4      	b.n	800360c <prvIdleTask+0x8>
 8003622:	bf00      	nop
 8003624:	e000ed04 	.word	0xe000ed04

08003628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800362e:	2300      	movs	r3, #0
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	e00c      	b.n	800364e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <prvInitialiseTaskLists+0x60>)
 8003640:	4413      	add	r3, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe fd52 	bl	80020ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3301      	adds	r3, #1
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d9ef      	bls.n	8003634 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003654:	480d      	ldr	r0, [pc, #52]	; (800368c <prvInitialiseTaskLists+0x64>)
 8003656:	f7fe fd49 	bl	80020ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800365a:	480d      	ldr	r0, [pc, #52]	; (8003690 <prvInitialiseTaskLists+0x68>)
 800365c:	f7fe fd46 	bl	80020ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003660:	480c      	ldr	r0, [pc, #48]	; (8003694 <prvInitialiseTaskLists+0x6c>)
 8003662:	f7fe fd43 	bl	80020ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003666:	480c      	ldr	r0, [pc, #48]	; (8003698 <prvInitialiseTaskLists+0x70>)
 8003668:	f7fe fd40 	bl	80020ec <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800366c:	480b      	ldr	r0, [pc, #44]	; (800369c <prvInitialiseTaskLists+0x74>)
 800366e:	f7fe fd3d 	bl	80020ec <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <prvInitialiseTaskLists+0x78>)
 8003674:	4a05      	ldr	r2, [pc, #20]	; (800368c <prvInitialiseTaskLists+0x64>)
 8003676:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <prvInitialiseTaskLists+0x7c>)
 800367a:	4a05      	ldr	r2, [pc, #20]	; (8003690 <prvInitialiseTaskLists+0x68>)
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000034 	.word	0x20000034
 800368c:	20000098 	.word	0x20000098
 8003690:	200000ac 	.word	0x200000ac
 8003694:	200000c8 	.word	0x200000c8
 8003698:	200000dc 	.word	0x200000dc
 800369c:	200000f4 	.word	0x200000f4
 80036a0:	200000c0 	.word	0x200000c0
 80036a4:	200000c4 	.word	0x200000c4

080036a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ae:	e019      	b.n	80036e4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80036b0:	f000 fe28 	bl	8004304 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b4:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <prvCheckTasksWaitingTermination+0x50>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3304      	adds	r3, #4
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe fd9d 	bl	8002200 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <prvCheckTasksWaitingTermination+0x54>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	4a0b      	ldr	r2, [pc, #44]	; (80036fc <prvCheckTasksWaitingTermination+0x54>)
 80036ce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <prvCheckTasksWaitingTermination+0x58>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <prvCheckTasksWaitingTermination+0x58>)
 80036d8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80036da:	f000 fe43 	bl	8004364 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f810 	bl	8003704 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <prvCheckTasksWaitingTermination+0x58>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e1      	bne.n	80036b0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200000dc 	.word	0x200000dc
 80036fc:	20000108 	.word	0x20000108
 8003700:	200000f0 	.word	0x200000f0

08003704 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	4618      	mov	r0, r3
 8003712:	f001 f803 	bl	800471c <vPortFree>
                vPortFree( pxTCB );
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 f800 	bl	800471c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <prvResetNextTaskUnblockTime+0x30>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <prvResetNextTaskUnblockTime+0x34>)
 8003734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003738:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800373a:	e005      	b.n	8003748 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <prvResetNextTaskUnblockTime+0x30>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <prvResetNextTaskUnblockTime+0x34>)
 8003746:	6013      	str	r3, [r2, #0]
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	200000c0 	.word	0x200000c0
 8003758:	20000128 	.word	0x20000128

0800375c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <xTaskGetSchedulerState+0x34>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800376a:	2301      	movs	r3, #1
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	e008      	b.n	8003782 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <xTaskGetSchedulerState+0x38>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003778:	2302      	movs	r3, #2
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	e001      	b.n	8003782 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003782:	687b      	ldr	r3, [r7, #4]
    }
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20000114 	.word	0x20000114
 8003794:	20000130 	.word	0x20000130

08003798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d068      	beq.n	8003880 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80037ae:	4b37      	ldr	r3, [pc, #220]	; (800388c <xTaskPriorityDisinherit+0xf4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d00a      	beq.n	80037ce <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	60fb      	str	r3, [r7, #12]
    }
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	60bb      	str	r3, [r7, #8]
    }
 80037e8:	bf00      	nop
 80037ea:	e7fe      	b.n	80037ea <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	429a      	cmp	r2, r3
 8003800:	d03e      	beq.n	8003880 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d13a      	bne.n	8003880 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	3304      	adds	r3, #4
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fcf6 	bl	8002200 <uxListRemove>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	2201      	movs	r2, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43da      	mvns	r2, r3
 8003826:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <xTaskPriorityDisinherit+0xf8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4013      	ands	r3, r2
 800382c:	4a18      	ldr	r2, [pc, #96]	; (8003890 <xTaskPriorityDisinherit+0xf8>)
 800382e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4619      	mov	r1, r3
 8003834:	204a      	movs	r0, #74	; 0x4a
 8003836:	f001 ffd5 	bl	80057e4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	f1c3 0205 	rsb	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	2201      	movs	r2, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <xTaskPriorityDisinherit+0xf8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <xTaskPriorityDisinherit+0xf8>)
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4a09      	ldr	r2, [pc, #36]	; (8003894 <xTaskPriorityDisinherit+0xfc>)
 800386e:	441a      	add	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f7fe fc65 	bl	8002146 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800387c:	2301      	movs	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003880:	697b      	ldr	r3, [r7, #20]
    }
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000030 	.word	0x20000030
 8003890:	20000110 	.word	0x20000110
 8003894:	20000034 	.word	0x20000034

08003898 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038a2:	4b32      	ldr	r3, [pc, #200]	; (800396c <prvAddCurrentTaskToDelayedList+0xd4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038a8:	4b31      	ldr	r3, [pc, #196]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fca6 	bl	8002200 <uxListRemove>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038ba:	4b2d      	ldr	r3, [pc, #180]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	2201      	movs	r2, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43da      	mvns	r2, r3
 80038c8:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <prvAddCurrentTaskToDelayedList+0xdc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4013      	ands	r3, r2
 80038ce:	4a29      	ldr	r2, [pc, #164]	; (8003974 <prvAddCurrentTaskToDelayedList+0xdc>)
 80038d0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d8:	d110      	bne.n	80038fc <prvAddCurrentTaskToDelayedList+0x64>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80038e0:	4b23      	ldr	r3, [pc, #140]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	211b      	movs	r1, #27
 80038e6:	4618      	mov	r0, r3
 80038e8:	f002 fd1a 	bl	8006320 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038ec:	4b20      	ldr	r3, [pc, #128]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4820      	ldr	r0, [pc, #128]	; (8003978 <prvAddCurrentTaskToDelayedList+0xe0>)
 80038f6:	f7fe fc26 	bl	8002146 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80038fa:	e032      	b.n	8003962 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	429a      	cmp	r2, r3
 8003912:	d20f      	bcs.n	8003934 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2104      	movs	r1, #4
 800391a:	4618      	mov	r0, r3
 800391c:	f002 fd00 	bl	8006320 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003920:	4b16      	ldr	r3, [pc, #88]	; (800397c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3304      	adds	r3, #4
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7fe fc2e 	bl	800218e <vListInsert>
}
 8003932:	e016      	b.n	8003962 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2104      	movs	r1, #4
 800393a:	4618      	mov	r0, r3
 800393c:	f002 fcf0 	bl	8006320 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3304      	adds	r3, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4610      	mov	r0, r2
 800394e:	f7fe fc1e 	bl	800218e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003952:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <prvAddCurrentTaskToDelayedList+0xec>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	429a      	cmp	r2, r3
 800395a:	d202      	bcs.n	8003962 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800395c:	4a09      	ldr	r2, [pc, #36]	; (8003984 <prvAddCurrentTaskToDelayedList+0xec>)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6013      	str	r3, [r2, #0]
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	2000010c 	.word	0x2000010c
 8003970:	20000030 	.word	0x20000030
 8003974:	20000110 	.word	0x20000110
 8003978:	200000f4 	.word	0x200000f4
 800397c:	200000c4 	.word	0x200000c4
 8003980:	200000c0 	.word	0x200000c0
 8003984:	20000128 	.word	0x20000128

08003988 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003992:	f000 fad5 	bl	8003f40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <xTimerCreateTimerTask+0x54>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <xTimerCreateTimerTask+0x58>)
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	2302      	movs	r3, #2
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2300      	movs	r3, #0
 80039a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039ac:	490d      	ldr	r1, [pc, #52]	; (80039e4 <xTimerCreateTimerTask+0x5c>)
 80039ae:	480e      	ldr	r0, [pc, #56]	; (80039e8 <xTimerCreateTimerTask+0x60>)
 80039b0:	f7ff f97c 	bl	8002cac <xTaskCreate>
 80039b4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	603b      	str	r3, [r7, #0]
    }
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039d2:	687b      	ldr	r3, [r7, #4]
    }
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000164 	.word	0x20000164
 80039e0:	20000168 	.word	0x20000168
 80039e4:	080067b4 	.word	0x080067b4
 80039e8:	08003b21 	.word	0x08003b21

080039ec <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	623b      	str	r3, [r7, #32]
    }
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <xTimerGenericCommand+0x98>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02a      	beq.n	8003a78 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	dc18      	bgt.n	8003a66 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a34:	f7ff fe92 	bl	800375c <xTaskGetSchedulerState>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d109      	bne.n	8003a52 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <xTimerGenericCommand+0x98>)
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f107 0114 	add.w	r1, r7, #20
 8003a46:	2300      	movs	r3, #0
 8003a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4a:	f7fe fce7 	bl	800241c <xQueueGenericSend>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003a50:	e012      	b.n	8003a78 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <xTimerGenericCommand+0x98>)
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	f107 0114 	add.w	r1, r7, #20
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f7fe fcdd 	bl	800241c <xQueueGenericSend>
 8003a62:	6278      	str	r0, [r7, #36]	; 0x24
 8003a64:	e008      	b.n	8003a78 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <xTimerGenericCommand+0x98>)
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	f107 0114 	add.w	r1, r7, #20
 8003a6e:	2300      	movs	r3, #0
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	f7fe fde1 	bl	8002638 <xQueueGenericSendFromISR>
 8003a76:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3728      	adds	r7, #40	; 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000164 	.word	0x20000164

08003a88 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a92:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <prvProcessExpiredTimer+0x94>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fbad 	bl	8002200 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d022      	beq.n	8003afa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	18d1      	adds	r1, r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	6978      	ldr	r0, [r7, #20]
 8003ac2:	f000 f8d1 	bl	8003c68 <prvInsertTimerInActiveList>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01f      	beq.n	8003b0c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003acc:	2300      	movs	r3, #0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff88 	bl	80039ec <xTimerGenericCommand>
 8003adc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d113      	bne.n	8003b0c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	60fb      	str	r3, [r7, #12]
    }
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	4798      	blx	r3
    }
 8003b14:	bf00      	nop
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	2000015c 	.word	0x2000015c

08003b20 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b28:	f107 0308 	add.w	r3, r7, #8
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f857 	bl	8003be0 <prvGetNextExpireTime>
 8003b32:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4619      	mov	r1, r3
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f803 	bl	8003b44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b3e:	f000 f8d5 	bl	8003cec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b42:	e7f1      	b.n	8003b28 <prvTimerTask+0x8>

08003b44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b4e:	f7ff fa65 	bl	800301c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f866 	bl	8003c28 <prvSampleTimeNow>
 8003b5c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d130      	bne.n	8003bc6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10a      	bne.n	8003b80 <prvProcessTimerOrBlockTask+0x3c>
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d806      	bhi.n	8003b80 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003b72:	f7ff fa61 	bl	8003038 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff85 	bl	8003a88 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b7e:	e024      	b.n	8003bca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <prvProcessTimerOrBlockTask+0x90>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <prvProcessTimerOrBlockTask+0x50>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <prvProcessTimerOrBlockTask+0x52>
 8003b94:	2300      	movs	r3, #0
 8003b96:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b98:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <prvProcessTimerOrBlockTask+0x94>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7ff f84d 	bl	8002c44 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003baa:	f7ff fa45 	bl	8003038 <xTaskResumeAll>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <prvProcessTimerOrBlockTask+0x98>)
 8003bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	f3bf 8f6f 	isb	sy
    }
 8003bc4:	e001      	b.n	8003bca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003bc6:	f7ff fa37 	bl	8003038 <xTaskResumeAll>
    }
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000160 	.word	0x20000160
 8003bd8:	20000164 	.word	0x20000164
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <prvGetNextExpireTime+0x44>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <prvGetNextExpireTime+0x16>
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	e000      	b.n	8003bf8 <prvGetNextExpireTime+0x18>
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <prvGetNextExpireTime+0x44>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e001      	b.n	8003c14 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c14:	68fb      	ldr	r3, [r7, #12]
    }
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	2000015c 	.word	0x2000015c

08003c28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c30:	f7ff fa94 	bl	800315c <xTaskGetTickCount>
 8003c34:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <prvSampleTimeNow+0x3c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d205      	bcs.n	8003c4c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c40:	f000 f91a 	bl	8003e78 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e002      	b.n	8003c52 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c52:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <prvSampleTimeNow+0x3c>)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003c58:	68fb      	ldr	r3, [r7, #12]
    }
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	2000016c 	.word	0x2000016c

08003c68 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d812      	bhi.n	8003cb4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	1ad2      	subs	r2, r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e01b      	b.n	8003cda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <prvInsertTimerInActiveList+0x7c>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f7fe fa6e 	bl	800218e <vListInsert>
 8003cb2:	e012      	b.n	8003cda <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d206      	bcs.n	8003cca <prvInsertTimerInActiveList+0x62>
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d302      	bcc.n	8003cca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e007      	b.n	8003cda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cca:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <prvInsertTimerInActiveList+0x80>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f7fe fa5a 	bl	800218e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003cda:	697b      	ldr	r3, [r7, #20]
    }
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000160 	.word	0x20000160
 8003ce8:	2000015c 	.word	0x2000015c

08003cec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08c      	sub	sp, #48	; 0x30
 8003cf0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cf2:	e0ae      	b.n	8003e52 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f2c0 80aa 	blt.w	8003e50 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe fa77 	bl	8002200 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff87 	bl	8003c28 <prvSampleTimeNow>
 8003d1a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	f200 8097 	bhi.w	8003e52 <prvProcessReceivedCommands+0x166>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <prvProcessReceivedCommands+0x40>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08003d55 	.word	0x08003d55
 8003d38:	08003dc9 	.word	0x08003dc9
 8003d3c:	08003ddd 	.word	0x08003ddd
 8003d40:	08003e27 	.word	0x08003e27
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d55 	.word	0x08003d55
 8003d4c:	08003dc9 	.word	0x08003dc9
 8003d50:	08003ddd 	.word	0x08003ddd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	18d1      	adds	r1, r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d74:	f7ff ff78 	bl	8003c68 <prvInsertTimerInActiveList>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d069      	beq.n	8003e52 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d84:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05e      	beq.n	8003e52 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	441a      	add	r2, r3
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	2100      	movs	r1, #0
 8003da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da6:	f7ff fe21 	bl	80039ec <xTimerGenericCommand>
 8003daa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d14f      	bne.n	8003e52 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61bb      	str	r3, [r7, #24]
    }
 8003dc4:	bf00      	nop
 8003dc6:	e7fe      	b.n	8003dc6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003dda:	e03a      	b.n	8003e52 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	617b      	str	r3, [r7, #20]
    }
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	18d1      	adds	r1, r2, r3
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e20:	f7ff ff22 	bl	8003c68 <prvInsertTimerInActiveList>
                        break;
 8003e24:	e015      	b.n	8003e52 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e36:	f000 fc71 	bl	800471c <vPortFree>
 8003e3a:	e00a      	b.n	8003e52 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e4e:	e000      	b.n	8003e52 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003e50:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <prvProcessReceivedCommands+0x188>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f107 0108 	add.w	r1, r7, #8
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fca9 	bl	80027b4 <xQueueReceive>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f47f af45 	bne.w	8003cf4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	3728      	adds	r7, #40	; 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000164 	.word	0x20000164

08003e78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e7e:	e048      	b.n	8003f12 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e80:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <prvSwitchTimerLists+0xc0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8a:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <prvSwitchTimerLists+0xc0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe f9b1 	bl	8002200 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02e      	beq.n	8003f12 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4413      	add	r3, r2
 8003ebc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d90e      	bls.n	8003ee4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ed2:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <prvSwitchTimerLists+0xc0>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f7fe f956 	bl	800218e <vListInsert>
 8003ee2:	e016      	b.n	8003f12 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	2100      	movs	r1, #0
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff fd7c 	bl	80039ec <xTimerGenericCommand>
 8003ef4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	603b      	str	r3, [r7, #0]
    }
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <prvSwitchTimerLists+0xc0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1b1      	bne.n	8003e80 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <prvSwitchTimerLists+0xc0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <prvSwitchTimerLists+0xc4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <prvSwitchTimerLists+0xc0>)
 8003f28:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f2a:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <prvSwitchTimerLists+0xc4>)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	6013      	str	r3, [r2, #0]
    }
 8003f30:	bf00      	nop
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	2000015c 	.word	0x2000015c
 8003f3c:	20000160 	.word	0x20000160

08003f40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f44:	f000 f9de 	bl	8004304 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <prvCheckForValidListAndQueue+0x54>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11d      	bne.n	8003f8c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f50:	4811      	ldr	r0, [pc, #68]	; (8003f98 <prvCheckForValidListAndQueue+0x58>)
 8003f52:	f7fe f8cb 	bl	80020ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f56:	4811      	ldr	r0, [pc, #68]	; (8003f9c <prvCheckForValidListAndQueue+0x5c>)
 8003f58:	f7fe f8c8 	bl	80020ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <prvCheckForValidListAndQueue+0x60>)
 8003f5e:	4a0e      	ldr	r2, [pc, #56]	; (8003f98 <prvCheckForValidListAndQueue+0x58>)
 8003f60:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <prvCheckForValidListAndQueue+0x64>)
 8003f64:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <prvCheckForValidListAndQueue+0x5c>)
 8003f66:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f68:	2200      	movs	r2, #0
 8003f6a:	210c      	movs	r1, #12
 8003f6c:	200a      	movs	r0, #10
 8003f6e:	f7fe f9cc 	bl	800230a <xQueueGenericCreate>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <prvCheckForValidListAndQueue+0x54>)
 8003f76:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <prvCheckForValidListAndQueue+0x54>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <prvCheckForValidListAndQueue+0x54>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4908      	ldr	r1, [pc, #32]	; (8003fa8 <prvCheckForValidListAndQueue+0x68>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fe2a 	bl	8002be0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f8c:	f000 f9ea 	bl	8004364 <vPortExitCritical>
    }
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000164 	.word	0x20000164
 8003f98:	20000134 	.word	0x20000134
 8003f9c:	20000148 	.word	0x20000148
 8003fa0:	2000015c 	.word	0x2000015c
 8003fa4:	20000160 	.word	0x20000160
 8003fa8:	080067bc 	.word	0x080067bc

08003fac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f023 0201 	bic.w	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3b04      	subs	r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <pxPortInitialiseStack+0x64>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b14      	subs	r3, #20
 8003fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3b04      	subs	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f06f 0202 	mvn.w	r2, #2
 8003ffa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b20      	subs	r3, #32
 8004000:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	08004015 	.word	0x08004015

08004014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <prvTaskExitError+0x54>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004026:	d00a      	beq.n	800403e <prvTaskExitError+0x2a>
        __asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	60fb      	str	r3, [r7, #12]
    }
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <prvTaskExitError+0x28>
        __asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	60bb      	str	r3, [r7, #8]
    }
 8004050:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004052:	bf00      	nop
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0fc      	beq.n	8004054 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	20000010 	.word	0x20000010
 800406c:	00000000 	.word	0x00000000

08004070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <pxCurrentTCBConst2>)
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	6808      	ldr	r0, [r1, #0]
 8004076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407a:	f380 8809 	msr	PSP, r0
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8811 	msr	BASEPRI, r0
 800408a:	4770      	bx	lr
 800408c:	f3af 8000 	nop.w

08004090 <pxCurrentTCBConst2>:
 8004090:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop

08004098 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004098:	4808      	ldr	r0, [pc, #32]	; (80040bc <prvPortStartFirstTask+0x24>)
 800409a:	6800      	ldr	r0, [r0, #0]
 800409c:	6800      	ldr	r0, [r0, #0]
 800409e:	f380 8808 	msr	MSP, r0
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8814 	msr	CONTROL, r0
 80040aa:	b662      	cpsie	i
 80040ac:	b661      	cpsie	f
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	df00      	svc	0
 80040b8:	bf00      	nop
 80040ba:	0000      	.short	0x0000
 80040bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop

080040c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040ca:	4b46      	ldr	r3, [pc, #280]	; (80041e4 <xPortStartScheduler+0x120>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a46      	ldr	r2, [pc, #280]	; (80041e8 <xPortStartScheduler+0x124>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10a      	bne.n	80040ea <xPortStartScheduler+0x26>
        __asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	613b      	str	r3, [r7, #16]
    }
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040ea:	4b3e      	ldr	r3, [pc, #248]	; (80041e4 <xPortStartScheduler+0x120>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a3f      	ldr	r2, [pc, #252]	; (80041ec <xPortStartScheduler+0x128>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10a      	bne.n	800410a <xPortStartScheduler+0x46>
        __asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	60fb      	str	r3, [r7, #12]
    }
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <xPortStartScheduler+0x12c>)
 800410c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <xPortStartScheduler+0x130>)
 8004130:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004132:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <xPortStartScheduler+0x134>)
 8004134:	2207      	movs	r2, #7
 8004136:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004138:	e009      	b.n	800414e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800413a:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <xPortStartScheduler+0x134>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3b01      	subs	r3, #1
 8004140:	4a2d      	ldr	r2, [pc, #180]	; (80041f8 <xPortStartScheduler+0x134>)
 8004142:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b80      	cmp	r3, #128	; 0x80
 8004158:	d0ef      	beq.n	800413a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800415a:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <xPortStartScheduler+0x134>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f1c3 0307 	rsb	r3, r3, #7
 8004162:	2b04      	cmp	r3, #4
 8004164:	d00a      	beq.n	800417c <xPortStartScheduler+0xb8>
        __asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60bb      	str	r3, [r7, #8]
    }
 8004178:	bf00      	nop
 800417a:	e7fe      	b.n	800417a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800417c:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <xPortStartScheduler+0x134>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <xPortStartScheduler+0x134>)
 8004184:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004186:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <xPortStartScheduler+0x134>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800418e:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <xPortStartScheduler+0x134>)
 8004190:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <xPortStartScheduler+0x138>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a17      	ldr	r2, [pc, #92]	; (80041fc <xPortStartScheduler+0x138>)
 80041a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <xPortStartScheduler+0x138>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <xPortStartScheduler+0x138>)
 80041ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041b2:	f000 f963 	bl	800447c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <xPortStartScheduler+0x13c>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041bc:	f000 f982 	bl	80044c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <xPortStartScheduler+0x140>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0f      	ldr	r2, [pc, #60]	; (8004204 <xPortStartScheduler+0x140>)
 80041c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041cc:	f7ff ff64 	bl	8004098 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041d0:	f7ff f86e 	bl	80032b0 <vTaskSwitchContext>
    prvTaskExitError();
 80041d4:	f7ff ff1e 	bl	8004014 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	e000ed00 	.word	0xe000ed00
 80041e8:	410fc271 	.word	0x410fc271
 80041ec:	410fc270 	.word	0x410fc270
 80041f0:	e000e400 	.word	0xe000e400
 80041f4:	20000170 	.word	0x20000170
 80041f8:	20000174 	.word	0x20000174
 80041fc:	e000ed20 	.word	0xe000ed20
 8004200:	20000010 	.word	0x20000010
 8004204:	e000ef34 	.word	0xe000ef34

08004208 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800420e:	4b37      	ldr	r3, [pc, #220]	; (80042ec <vInitPrioGroupValue+0xe4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a37      	ldr	r2, [pc, #220]	; (80042f0 <vInitPrioGroupValue+0xe8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10a      	bne.n	800422e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	613b      	str	r3, [r7, #16]
    }
 800422a:	bf00      	nop
 800422c:	e7fe      	b.n	800422c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800422e:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <vInitPrioGroupValue+0xe4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a30      	ldr	r2, [pc, #192]	; (80042f4 <vInitPrioGroupValue+0xec>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d10a      	bne.n	800424e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60fb      	str	r3, [r7, #12]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800424e:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <vInitPrioGroupValue+0xf0>)
 8004250:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	22ff      	movs	r2, #255	; 0xff
 800425e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <vInitPrioGroupValue+0xf4>)
 8004274:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <vInitPrioGroupValue+0xf8>)
 8004278:	2207      	movs	r2, #7
 800427a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800427c:	e009      	b.n	8004292 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <vInitPrioGroupValue+0xf8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3b01      	subs	r3, #1
 8004284:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <vInitPrioGroupValue+0xf8>)
 8004286:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	b2db      	uxtb	r3, r3
 8004290:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d0ef      	beq.n	800427e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800429e:	4b18      	ldr	r3, [pc, #96]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1c3 0307 	rsb	r3, r3, #7
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d00a      	beq.n	80042c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	60bb      	str	r3, [r7, #8]
    }
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042d2:	4a0b      	ldr	r2, [pc, #44]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000ed00 	.word	0xe000ed00
 80042f0:	410fc271 	.word	0x410fc271
 80042f4:	410fc270 	.word	0x410fc270
 80042f8:	e000e400 	.word	0xe000e400
 80042fc:	20000170 	.word	0x20000170
 8004300:	20000174 	.word	0x20000174

08004304 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
        __asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
    }
 800431c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <vPortEnterCritical+0x58>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a0d      	ldr	r2, [pc, #52]	; (800435c <vPortEnterCritical+0x58>)
 8004326:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <vPortEnterCritical+0x58>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10f      	bne.n	8004350 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <vPortEnterCritical+0x5c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <vPortEnterCritical+0x4c>
        __asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	603b      	str	r3, [r7, #0]
    }
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <vPortEnterCritical+0x4a>
    }
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	20000010 	.word	0x20000010
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <vPortExitCritical+0x50>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <vPortExitCritical+0x24>
        __asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	607b      	str	r3, [r7, #4]
    }
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <vPortExitCritical+0x50>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3b01      	subs	r3, #1
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <vPortExitCritical+0x50>)
 8004390:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <vPortExitCritical+0x50>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <vPortExitCritical+0x42>
 800439a:	2300      	movs	r3, #0
 800439c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f383 8811 	msr	BASEPRI, r3
    }
 80043a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000010 	.word	0x20000010
	...

080043c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043c0:	f3ef 8009 	mrs	r0, PSP
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <pxCurrentTCBConst>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	f01e 0f10 	tst.w	lr, #16
 80043d0:	bf08      	it	eq
 80043d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	6010      	str	r0, [r2, #0]
 80043dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043e4:	f380 8811 	msr	BASEPRI, r0
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f7fe ff5e 	bl	80032b0 <vTaskSwitchContext>
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f380 8811 	msr	BASEPRI, r0
 80043fc:	bc09      	pop	{r0, r3}
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	6808      	ldr	r0, [r1, #0]
 8004402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004406:	f01e 0f10 	tst.w	lr, #16
 800440a:	bf08      	it	eq
 800440c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004410:	f380 8809 	msr	PSP, r0
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w

08004420 <pxCurrentTCBConst>:
 8004420:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
        __asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
    }
 8004440:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004442:	f001 fe11 	bl	8006068 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004446:	f7fe fe99 	bl	800317c <xTaskIncrementTick>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d006      	beq.n	800445e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004450:	f001 fe68 	bl	8006124 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <SysTick_Handler+0x50>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e001      	b.n	8004462 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800445e:	f001 fe45 	bl	80060ec <SEGGER_SYSVIEW_RecordExitISR>
 8004462:	2300      	movs	r3, #0
 8004464:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f383 8811 	msr	BASEPRI, r3
    }
 800446c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <vPortSetupTimerInterrupt+0x38>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <vPortSetupTimerInterrupt+0x3c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <vPortSetupTimerInterrupt+0x40>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <vPortSetupTimerInterrupt+0x44>)
 800449a:	3b01      	subs	r3, #1
 800449c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e010 	.word	0xe000e010
 80044b4:	e000e018 	.word	0xe000e018
 80044b8:	20000000 	.word	0x20000000
 80044bc:	10624dd3 	.word	0x10624dd3
 80044c0:	e000e014 	.word	0xe000e014

080044c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80044c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044d4 <vPortEnableVFP+0x10>
 80044c8:	6801      	ldr	r1, [r0, #0]
 80044ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ce:	6001      	str	r1, [r0, #0]
 80044d0:	4770      	bx	lr
 80044d2:	0000      	.short	0x0000
 80044d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop

080044dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80044e2:	f3ef 8305 	mrs	r3, IPSR
 80044e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d914      	bls.n	8004518 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ee:	4a17      	ldr	r2, [pc, #92]	; (800454c <vPortValidateInterruptPriority+0x70>)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044f8:	4b15      	ldr	r3, [pc, #84]	; (8004550 <vPortValidateInterruptPriority+0x74>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	7afa      	ldrb	r2, [r7, #11]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d20a      	bcs.n	8004518 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	607b      	str	r3, [r7, #4]
    }
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004518:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <vPortValidateInterruptPriority+0x78>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <vPortValidateInterruptPriority+0x7c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d90a      	bls.n	800453e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	603b      	str	r3, [r7, #0]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <vPortValidateInterruptPriority+0x60>
    }
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000e3f0 	.word	0xe000e3f0
 8004550:	20000170 	.word	0x20000170
 8004554:	e000ed0c 	.word	0xe000ed0c
 8004558:	20000174 	.word	0x20000174

0800455c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	; 0x28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004568:	f7fe fd58 	bl	800301c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800456c:	4b65      	ldr	r3, [pc, #404]	; (8004704 <pvPortMalloc+0x1a8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004574:	f000 f934 	bl	80047e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004578:	4b63      	ldr	r3, [pc, #396]	; (8004708 <pvPortMalloc+0x1ac>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 80a7 	bne.w	80046d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d02d      	beq.n	80045e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800458c:	2208      	movs	r2, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	d227      	bcs.n	80045e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004598:	2208      	movs	r2, #8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d021      	beq.n	80045ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f023 0307 	bic.w	r3, r3, #7
 80045b0:	3308      	adds	r3, #8
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d214      	bcs.n	80045e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	3308      	adds	r3, #8
 80045c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <pvPortMalloc+0x92>
        __asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	617b      	str	r3, [r7, #20]
    }
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045e6:	e002      	b.n	80045ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	e000      	b.n	80045f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d06e      	beq.n	80046d4 <pvPortMalloc+0x178>
 80045f6:	4b45      	ldr	r3, [pc, #276]	; (800470c <pvPortMalloc+0x1b0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d869      	bhi.n	80046d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004600:	4b43      	ldr	r3, [pc, #268]	; (8004710 <pvPortMalloc+0x1b4>)
 8004602:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004604:	4b42      	ldr	r3, [pc, #264]	; (8004710 <pvPortMalloc+0x1b4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800460a:	e004      	b.n	8004616 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d903      	bls.n	8004628 <pvPortMalloc+0xcc>
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f1      	bne.n	800460c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <pvPortMalloc+0x1a8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	429a      	cmp	r2, r3
 8004630:	d050      	beq.n	80046d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2208      	movs	r2, #8
 8004638:	4413      	add	r3, r2
 800463a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	1ad2      	subs	r2, r2, r3
 800464c:	2308      	movs	r3, #8
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	429a      	cmp	r2, r3
 8004652:	d91f      	bls.n	8004694 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <pvPortMalloc+0x120>
        __asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	613b      	str	r3, [r7, #16]
    }
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	1ad2      	subs	r2, r2, r3
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800468e:	69b8      	ldr	r0, [r7, #24]
 8004690:	f000 f908 	bl	80048a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004694:	4b1d      	ldr	r3, [pc, #116]	; (800470c <pvPortMalloc+0x1b0>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	4a1b      	ldr	r2, [pc, #108]	; (800470c <pvPortMalloc+0x1b0>)
 80046a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <pvPortMalloc+0x1b0>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <pvPortMalloc+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d203      	bcs.n	80046b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046ae:	4b17      	ldr	r3, [pc, #92]	; (800470c <pvPortMalloc+0x1b0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a18      	ldr	r2, [pc, #96]	; (8004714 <pvPortMalloc+0x1b8>)
 80046b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	4b13      	ldr	r3, [pc, #76]	; (8004708 <pvPortMalloc+0x1ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	431a      	orrs	r2, r3
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <pvPortMalloc+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	4a11      	ldr	r2, [pc, #68]	; (8004718 <pvPortMalloc+0x1bc>)
 80046d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80046d4:	f7fe fcb0 	bl	8003038 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <pvPortMalloc+0x19c>
        __asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	60fb      	str	r3, [r7, #12]
    }
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80046f8:	69fb      	ldr	r3, [r7, #28]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3728      	adds	r7, #40	; 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20012d80 	.word	0x20012d80
 8004708:	20012d94 	.word	0x20012d94
 800470c:	20012d84 	.word	0x20012d84
 8004710:	20012d78 	.word	0x20012d78
 8004714:	20012d88 	.word	0x20012d88
 8004718:	20012d8c 	.word	0x20012d8c

0800471c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d04d      	beq.n	80047ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800472e:	2308      	movs	r3, #8
 8004730:	425b      	negs	r3, r3
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4413      	add	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <vPortFree+0xb8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4013      	ands	r3, r2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <vPortFree+0x44>
        __asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60fb      	str	r3, [r7, #12]
    }
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <vPortFree+0x62>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60bb      	str	r3, [r7, #8]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <vPortFree+0xb8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01e      	beq.n	80047ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d11a      	bne.n	80047ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <vPortFree+0xb8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80047a4:	f7fe fc3a 	bl	800301c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <vPortFree+0xbc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4413      	add	r3, r2
 80047b2:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <vPortFree+0xbc>)
 80047b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047b6:	6938      	ldr	r0, [r7, #16]
 80047b8:	f000 f874 	bl	80048a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80047bc:	4b07      	ldr	r3, [pc, #28]	; (80047dc <vPortFree+0xc0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	4a06      	ldr	r2, [pc, #24]	; (80047dc <vPortFree+0xc0>)
 80047c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80047c6:	f7fe fc37 	bl	8003038 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20012d94 	.word	0x20012d94
 80047d8:	20012d84 	.word	0x20012d84
 80047dc:	20012d90 	.word	0x20012d90

080047e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80047ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80047ec:	4b27      	ldr	r3, [pc, #156]	; (800488c <prvHeapInit+0xac>)
 80047ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00c      	beq.n	8004814 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3307      	adds	r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	4a1f      	ldr	r2, [pc, #124]	; (800488c <prvHeapInit+0xac>)
 8004810:	4413      	add	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004818:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <prvHeapInit+0xb0>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800481e:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <prvHeapInit+0xb0>)
 8004820:	2200      	movs	r2, #0
 8004822:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4413      	add	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800482c:	2208      	movs	r2, #8
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0307 	bic.w	r3, r3, #7
 800483a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <prvHeapInit+0xb4>)
 8004840:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <prvHeapInit+0xb4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <prvHeapInit+0xb4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <prvHeapInit+0xb4>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <prvHeapInit+0xb8>)
 800486e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a09      	ldr	r2, [pc, #36]	; (800489c <prvHeapInit+0xbc>)
 8004876:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <prvHeapInit+0xc0>)
 800487a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000178 	.word	0x20000178
 8004890:	20012d78 	.word	0x20012d78
 8004894:	20012d80 	.word	0x20012d80
 8004898:	20012d88 	.word	0x20012d88
 800489c:	20012d84 	.word	0x20012d84
 80048a0:	20012d94 	.word	0x20012d94

080048a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048ac:	4b28      	ldr	r3, [pc, #160]	; (8004950 <prvInsertBlockIntoFreeList+0xac>)
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e002      	b.n	80048b8 <prvInsertBlockIntoFreeList+0x14>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d8f7      	bhi.n	80048b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4413      	add	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d108      	bne.n	80048e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	441a      	add	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	441a      	add	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d118      	bne.n	800492c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <prvInsertBlockIntoFreeList+0xb0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d00d      	beq.n	8004922 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	441a      	add	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e008      	b.n	8004934 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <prvInsertBlockIntoFreeList+0xb0>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e003      	b.n	8004934 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d002      	beq.n	8004942 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20012d78 	.word	0x20012d78
 8004954:	20012d80 	.word	0x20012d80

08004958 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004966:	2205      	movs	r2, #5
 8004968:	492b      	ldr	r1, [pc, #172]	; (8004a18 <SYSVIEW_AddTask+0xc0>)
 800496a:	68b8      	ldr	r0, [r7, #8]
 800496c:	f001 feb8 	bl	80066e0 <memcmp>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d04b      	beq.n	8004a0e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004976:	4b29      	ldr	r3, [pc, #164]	; (8004a1c <SYSVIEW_AddTask+0xc4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b07      	cmp	r3, #7
 800497c:	d903      	bls.n	8004986 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800497e:	4828      	ldr	r0, [pc, #160]	; (8004a20 <SYSVIEW_AddTask+0xc8>)
 8004980:	f001 fe2e 	bl	80065e0 <SEGGER_SYSVIEW_Warn>
    return;
 8004984:	e044      	b.n	8004a10 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004986:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <SYSVIEW_AddTask+0xc4>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4926      	ldr	r1, [pc, #152]	; (8004a24 <SYSVIEW_AddTask+0xcc>)
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <SYSVIEW_AddTask+0xc4>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4921      	ldr	r1, [pc, #132]	; (8004a24 <SYSVIEW_AddTask+0xcc>)
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	3304      	adds	r3, #4
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80049b0:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <SYSVIEW_AddTask+0xc4>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	491b      	ldr	r1, [pc, #108]	; (8004a24 <SYSVIEW_AddTask+0xcc>)
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	3308      	adds	r3, #8
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <SYSVIEW_AddTask+0xc4>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4916      	ldr	r1, [pc, #88]	; (8004a24 <SYSVIEW_AddTask+0xcc>)
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	330c      	adds	r3, #12
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <SYSVIEW_AddTask+0xc4>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4910      	ldr	r1, [pc, #64]	; (8004a24 <SYSVIEW_AddTask+0xcc>)
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	3310      	adds	r3, #16
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <SYSVIEW_AddTask+0xc4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3301      	adds	r3, #1
 80049f8:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <SYSVIEW_AddTask+0xc4>)
 80049fa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f80e 	bl	8004a28 <SYSVIEW_SendTaskInfo>
 8004a0c:	e000      	b.n	8004a10 <SYSVIEW_AddTask+0xb8>
    return;
 8004a0e:	bf00      	nop

}
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	080067c4 	.word	0x080067c4
 8004a1c:	20012e38 	.word	0x20012e38
 8004a20:	080067cc 	.word	0x080067cc
 8004a24:	20012d98 	.word	0x20012d98

08004a28 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	2214      	movs	r2, #20
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 fe6a 	bl	8006718 <memset>
  TaskInfo.TaskID     = TaskID;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004a58:	f107 0314 	add.w	r3, r7, #20
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 f9d9 	bl	8005e14 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004a62:	bf00      	nop
 8004a64:	3728      	adds	r7, #40	; 0x28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <_DoInit+0x98>)
 8004a74:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2203      	movs	r2, #3
 8004a7a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2203      	movs	r2, #3
 8004a80:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <_DoInit+0x9c>)
 8004a86:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a20      	ldr	r2, [pc, #128]	; (8004b0c <_DoInit+0xa0>)
 8004a8c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a94:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <_DoInit+0x9c>)
 8004aac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a17      	ldr	r2, [pc, #92]	; (8004b10 <_DoInit+0xa4>)
 8004ab2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3307      	adds	r3, #7
 8004ad0:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <_DoInit+0xa8>)
 8004ad2:	6810      	ldr	r0, [r2, #0]
 8004ad4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ad6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a0e      	ldr	r2, [pc, #56]	; (8004b18 <_DoInit+0xac>)
 8004ade:	6810      	ldr	r0, [r2, #0]
 8004ae0:	6018      	str	r0, [r3, #0]
 8004ae2:	8891      	ldrh	r1, [r2, #4]
 8004ae4:	7992      	ldrb	r2, [r2, #6]
 8004ae6:	8099      	strh	r1, [r3, #4]
 8004ae8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004aea:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004af4:	f3bf 8f5f 	dmb	sy
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	200133ec 	.word	0x200133ec
 8004b08:	0800681c 	.word	0x0800681c
 8004b0c:	20012e3c 	.word	0x20012e3c
 8004b10:	2001323c 	.word	0x2001323c
 8004b14:	08006828 	.word	0x08006828
 8004b18:	0800682c 	.word	0x0800682c

08004b1c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	; 0x30
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004b28:	4b3e      	ldr	r3, [pc, #248]	; (8004c24 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b2a:	623b      	str	r3, [r7, #32]
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <SEGGER_RTT_ReadNoLock+0x1e>
 8004b36:	f7ff ff99 	bl	8004a6c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	4413      	add	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	3360      	adds	r3, #96	; 0x60
 8004b46:	4a37      	ldr	r2, [pc, #220]	; (8004c24 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d92b      	bls.n	8004bc0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4293      	cmp	r3, r2
 8004b78:	bf28      	it	cs
 8004b7a:	4613      	movcs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	4413      	add	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	6939      	ldr	r1, [r7, #16]
 8004b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b8e:	f001 fdb5 	bl	80066fc <memcpy>
    NumBytesRead += NumBytesRem;
 8004b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	4413      	add	r3, r2
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4413      	add	r3, r2
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d101      	bne.n	8004bc0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	bf28      	it	cs
 8004bd0:	4613      	movcs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d019      	beq.n	8004c0e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	4413      	add	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	6939      	ldr	r1, [r7, #16]
 8004be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bea:	f001 fd87 	bl	80066fc <memcpy>
    NumBytesRead += NumBytesRem;
 8004bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c18:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3730      	adds	r7, #48	; 0x30
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	200133ec 	.word	0x200133ec

08004c28 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00f      	beq.n	8004c5e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004c3e:	e002      	b.n	8004c46 <_EncodeStr+0x1e>
      Len++;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3301      	adds	r3, #1
 8004c44:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f6      	bne.n	8004c40 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d901      	bls.n	8004c5e <_EncodeStr+0x36>
      Len = Limit;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2bfe      	cmp	r3, #254	; 0xfe
 8004c62:	d806      	bhi.n	8004c72 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	60fa      	str	r2, [r7, #12]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e011      	b.n	8004c96 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	60fa      	str	r2, [r7, #12]
 8004c78:	22ff      	movs	r2, #255	; 0xff
 8004c7a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	60fa      	str	r2, [r7, #12]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	0a19      	lsrs	r1, r3, #8
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	60fa      	str	r2, [r7, #12]
 8004c92:	b2ca      	uxtb	r2, r1
 8004c94:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004c9a:	e00a      	b.n	8004cb2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	1c53      	adds	r3, r2, #1
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1c59      	adds	r1, r3, #1
 8004ca6:	60f9      	str	r1, [r7, #12]
 8004ca8:	7812      	ldrb	r2, [r2, #0]
 8004caa:	701a      	strb	r2, [r3, #0]
    n++;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d3f0      	bcc.n	8004c9c <_EncodeStr+0x74>
  }
  return pPayload;
 8004cba:	68fb      	ldr	r3, [r7, #12]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <_HandleIncomingPacket+0xe0>)
 8004ce8:	7e1b      	ldrb	r3, [r3, #24]
 8004cea:	4618      	mov	r0, r3
 8004cec:	1cfb      	adds	r3, r7, #3
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f7ff ff13 	bl	8004b1c <SEGGER_RTT_ReadNoLock>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	dd54      	ble.n	8004daa <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d032      	beq.n	8004d6c <_HandleIncomingPacket+0x8c>
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	dc42      	bgt.n	8004d90 <_HandleIncomingPacket+0xb0>
 8004d0a:	2b07      	cmp	r3, #7
 8004d0c:	dc16      	bgt.n	8004d3c <_HandleIncomingPacket+0x5c>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dd3e      	ble.n	8004d90 <_HandleIncomingPacket+0xb0>
 8004d12:	3b01      	subs	r3, #1
 8004d14:	2b06      	cmp	r3, #6
 8004d16:	d83b      	bhi.n	8004d90 <_HandleIncomingPacket+0xb0>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <_HandleIncomingPacket+0x40>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d43 	.word	0x08004d43
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d4f 	.word	0x08004d4f
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d5b 	.word	0x08004d5b
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d67 	.word	0x08004d67
 8004d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3e:	d036      	beq.n	8004dae <_HandleIncomingPacket+0xce>
 8004d40:	e026      	b.n	8004d90 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004d42:	f000 feed 	bl	8005b20 <SEGGER_SYSVIEW_Start>
      break;
 8004d46:	e037      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004d48:	f000 ffa4 	bl	8005c94 <SEGGER_SYSVIEW_Stop>
      break;
 8004d4c:	e034      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004d4e:	f001 f959 	bl	8006004 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004d52:	e031      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004d54:	f001 f942 	bl	8005fdc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004d58:	e02e      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004d5a:	f000 ffc1 	bl	8005ce0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004d5e:	e02b      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004d60:	f001 fbec 	bl	800653c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004d64:	e028      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004d66:	f001 fbcb 	bl	8006500 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004d6a:	e025      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <_HandleIncomingPacket+0xe0>)
 8004d6e:	7e1b      	ldrb	r3, [r3, #24]
 8004d70:	4618      	mov	r0, r3
 8004d72:	1cfb      	adds	r3, r7, #3
 8004d74:	2201      	movs	r2, #1
 8004d76:	4619      	mov	r1, r3
 8004d78:	f7ff fed0 	bl	8004b1c <SEGGER_RTT_ReadNoLock>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	dd15      	ble.n	8004db2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 fb39 	bl	8006400 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004d8e:	e010      	b.n	8004db2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	da0e      	bge.n	8004db6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <_HandleIncomingPacket+0xe0>)
 8004d9a:	7e1b      	ldrb	r3, [r3, #24]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	1cfb      	adds	r3, r7, #3
 8004da0:	2201      	movs	r2, #1
 8004da2:	4619      	mov	r1, r3
 8004da4:	f7ff feba 	bl	8004b1c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004da8:	e005      	b.n	8004db6 <_HandleIncomingPacket+0xd6>
    }
  }
 8004daa:	bf00      	nop
 8004dac:	e004      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
      break;
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
      break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <_HandleIncomingPacket+0xd8>
      break;
 8004db6:	bf00      	nop
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	2001324c 	.word	0x2001324c

08004dc4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	; 0x30
 8004dc8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004dca:	2301      	movs	r3, #1
 8004dcc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004dce:	1d3b      	adds	r3, r7, #4
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd8:	4b31      	ldr	r3, [pc, #196]	; (8004ea0 <_TrySendOverflowPacket+0xdc>)
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dde:	e00b      	b.n	8004df8 <_TrySendOverflowPacket+0x34>
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	1c59      	adds	r1, r3, #1
 8004de8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	09db      	lsrs	r3, r3, #7
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8004dfc:	d8f0      	bhi.n	8004de0 <_TrySendOverflowPacket+0x1c>
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e0e:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <_TrySendOverflowPacket+0xe0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e14:	4b22      	ldr	r3, [pc, #136]	; (8004ea0 <_TrySendOverflowPacket+0xdc>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	e00b      	b.n	8004e40 <_TrySendOverflowPacket+0x7c>
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	6279      	str	r1, [r7, #36]	; 0x24
 8004e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	09db      	lsrs	r3, r3, #7
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b7f      	cmp	r3, #127	; 0x7f
 8004e44:	d8f0      	bhi.n	8004e28 <_TrySendOverflowPacket+0x64>
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e4c:	6a3a      	ldr	r2, [r7, #32]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <_TrySendOverflowPacket+0xdc>)
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	1d3b      	adds	r3, r7, #4
 8004e66:	4619      	mov	r1, r3
 8004e68:	f7fb f9b2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <_TrySendOverflowPacket+0xdc>)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004e7c:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <_TrySendOverflowPacket+0xdc>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <_TrySendOverflowPacket+0xdc>)
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	e004      	b.n	8004e94 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <_TrySendOverflowPacket+0xdc>)
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	4a03      	ldr	r2, [pc, #12]	; (8004ea0 <_TrySendOverflowPacket+0xdc>)
 8004e92:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004e94:	693b      	ldr	r3, [r7, #16]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3730      	adds	r7, #48	; 0x30
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	2001324c 	.word	0x2001324c
 8004ea4:	e0001004 	.word	0xe0001004

08004ea8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004eb4:	4b6c      	ldr	r3, [pc, #432]	; (8005068 <_SendPacket+0x1c0>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d010      	beq.n	8004ede <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004ebc:	4b6a      	ldr	r3, [pc, #424]	; (8005068 <_SendPacket+0x1c0>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80a3 	beq.w	800500c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004ec6:	4b68      	ldr	r3, [pc, #416]	; (8005068 <_SendPacket+0x1c0>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d109      	bne.n	8004ee2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004ece:	f7ff ff79 	bl	8004dc4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004ed2:	4b65      	ldr	r3, [pc, #404]	; (8005068 <_SendPacket+0x1c0>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	f040 809a 	bne.w	8005010 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004edc:	e001      	b.n	8004ee2 <_SendPacket+0x3a>
    goto Send;
 8004ede:	bf00      	nop
 8004ee0:	e000      	b.n	8004ee4 <_SendPacket+0x3c>
Send:
 8004ee2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b1f      	cmp	r3, #31
 8004ee8:	d809      	bhi.n	8004efe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004eea:	4b5f      	ldr	r3, [pc, #380]	; (8005068 <_SendPacket+0x1c0>)
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f040 808b 	bne.w	8005014 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b17      	cmp	r3, #23
 8004f02:	d807      	bhi.n	8004f14 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e03d      	b.n	8004f90 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f20:	d912      	bls.n	8004f48 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	09da      	lsrs	r2, r3, #7
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	60fa      	str	r2, [r7, #12]
 8004f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e006      	b.n	8004f56 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5a:	d912      	bls.n	8004f82 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	09da      	lsrs	r2, r3, #7
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	3a01      	subs	r2, #1
 8004f74:	60fa      	str	r2, [r7, #12]
 8004f76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	e006      	b.n	8004f90 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004f90:	4b36      	ldr	r3, [pc, #216]	; (800506c <_SendPacket+0x1c4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004f96:	4b34      	ldr	r3, [pc, #208]	; (8005068 <_SendPacket+0x1c0>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	e00b      	b.n	8004fc2 <_SendPacket+0x11a>
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	1c59      	adds	r1, r3, #1
 8004fb2:	6279      	str	r1, [r7, #36]	; 0x24
 8004fb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	09db      	lsrs	r3, r3, #7
 8004fc0:	623b      	str	r3, [r7, #32]
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc6:	d8f0      	bhi.n	8004faa <_SendPacket+0x102>
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	627a      	str	r2, [r7, #36]	; 0x24
 8004fce:	6a3a      	ldr	r2, [r7, #32]
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004fd8:	4b23      	ldr	r3, [pc, #140]	; (8005068 <_SendPacket+0x1c0>)
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68f9      	ldr	r1, [r7, #12]
 8004fe8:	f7fb f8f2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004fec:	4603      	mov	r3, r0
 8004fee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ff6:	4a1c      	ldr	r2, [pc, #112]	; (8005068 <_SendPacket+0x1c0>)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	60d3      	str	r3, [r2, #12]
 8004ffc:	e00b      	b.n	8005016 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <_SendPacket+0x1c0>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	3301      	adds	r3, #1
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <_SendPacket+0x1c0>)
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e004      	b.n	8005016 <_SendPacket+0x16e>
    goto SendDone;
 800500c:	bf00      	nop
 800500e:	e002      	b.n	8005016 <_SendPacket+0x16e>
      goto SendDone;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <_SendPacket+0x16e>
      goto SendDone;
 8005014:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <_SendPacket+0x1c0>)
 8005018:	7e1b      	ldrb	r3, [r3, #24]
 800501a:	4619      	mov	r1, r3
 800501c:	4a14      	ldr	r2, [pc, #80]	; (8005070 <_SendPacket+0x1c8>)
 800501e:	460b      	mov	r3, r1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	440b      	add	r3, r1
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4413      	add	r3, r2
 8005028:	336c      	adds	r3, #108	; 0x6c
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <_SendPacket+0x1c0>)
 800502e:	7e1b      	ldrb	r3, [r3, #24]
 8005030:	4618      	mov	r0, r3
 8005032:	490f      	ldr	r1, [pc, #60]	; (8005070 <_SendPacket+0x1c8>)
 8005034:	4603      	mov	r3, r0
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4403      	add	r3, r0
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	440b      	add	r3, r1
 800503e:	3370      	adds	r3, #112	; 0x70
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d00b      	beq.n	800505e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <_SendPacket+0x1c0>)
 8005048:	789b      	ldrb	r3, [r3, #2]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <_SendPacket+0x1c0>)
 8005050:	2201      	movs	r2, #1
 8005052:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005054:	f7ff fe44 	bl	8004ce0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <_SendPacket+0x1c0>)
 800505a:	2200      	movs	r2, #0
 800505c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800505e:	bf00      	nop
 8005060:	3728      	adds	r7, #40	; 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	2001324c 	.word	0x2001324c
 800506c:	e0001004 	.word	0xe0001004
 8005070:	200133ec 	.word	0x200133ec

08005074 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d80a      	bhi.n	80050a4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	1c59      	adds	r1, r3, #1
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6051      	str	r1, [r2, #4]
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b80      	cmp	r3, #128	; 0x80
 80050aa:	d15a      	bne.n	8005162 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	e00b      	b.n	80050e6 <_StoreChar+0x72>
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	1c59      	adds	r1, r3, #1
 80050d6:	6279      	str	r1, [r7, #36]	; 0x24
 80050d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	09db      	lsrs	r3, r3, #7
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2b7f      	cmp	r3, #127	; 0x7f
 80050ea:	d8f0      	bhi.n	80050ce <_StoreChar+0x5a>
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	627a      	str	r2, [r7, #36]	; 0x24
 80050f2:	6a3a      	ldr	r2, [r7, #32]
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	61fb      	str	r3, [r7, #28]
 8005100:	2300      	movs	r3, #0
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e00b      	b.n	800511e <_StoreChar+0xaa>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	1c59      	adds	r1, r3, #1
 800510e:	61f9      	str	r1, [r7, #28]
 8005110:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	09db      	lsrs	r3, r3, #7
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b7f      	cmp	r3, #127	; 0x7f
 8005122:	d8f0      	bhi.n	8005106 <_StoreChar+0x92>
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	61fa      	str	r2, [r7, #28]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	221a      	movs	r2, #26
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff feb3 	bl	8004ea8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fdbe 	bl	8004cc8 <_PreparePacket>
 800514c:	4602      	mov	r2, r0
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
  }
}
 8005162:	bf00      	nop
 8005164:	3728      	adds	r7, #40	; 0x28
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800517e:	2301      	movs	r3, #1
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005182:	2301      	movs	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005186:	e007      	b.n	8005198 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005188:	6a3a      	ldr	r2, [r7, #32]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005190:	623b      	str	r3, [r7, #32]
    Width++;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	3301      	adds	r3, #1
 8005196:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d2f3      	bcs.n	8005188 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d901      	bls.n	80051ac <_PrintUnsigned+0x40>
    Width = NumDigits;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d11f      	bne.n	80051f6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01c      	beq.n	80051f6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <_PrintUnsigned+0x66>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <_PrintUnsigned+0x66>
        c = '0';
 80051cc:	2330      	movs	r3, #48	; 0x30
 80051ce:	76fb      	strb	r3, [r7, #27]
 80051d0:	e001      	b.n	80051d6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80051d2:	2320      	movs	r3, #32
 80051d4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051d6:	e007      	b.n	80051e8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	3b01      	subs	r3, #1
 80051dc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80051de:	7efb      	ldrb	r3, [r7, #27]
 80051e0:	4619      	mov	r1, r3
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff ff46 	bl	8005074 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <_PrintUnsigned+0x8a>
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3f0      	bcc.n	80051d8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d903      	bls.n	8005204 <_PrintUnsigned+0x98>
      NumDigits--;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	3b01      	subs	r3, #1
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	e009      	b.n	8005218 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d200      	bcs.n	8005218 <_PrintUnsigned+0xac>
        break;
 8005216:	e005      	b.n	8005224 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005222:	e7e8      	b.n	80051f6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800523c:	4a15      	ldr	r2, [pc, #84]	; (8005294 <_PrintUnsigned+0x128>)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	4619      	mov	r1, r3
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff ff14 	bl	8005074 <_StoreChar>
    Digit /= Base;
 800524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e3      	bne.n	8005224 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d011      	beq.n	800528a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00e      	beq.n	800528a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800526c:	e006      	b.n	800527c <_PrintUnsigned+0x110>
        FieldWidth--;
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	3b01      	subs	r3, #1
 8005272:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005274:	2120      	movs	r1, #32
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff fefc 	bl	8005074 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <_PrintUnsigned+0x11e>
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	429a      	cmp	r2, r3
 8005288:	d3f1      	bcc.n	800526e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800528a:	bf00      	nop
 800528c:	3728      	adds	r7, #40	; 0x28
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	08006858 	.word	0x08006858

08005298 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bfb8      	it	lt
 80052ac:	425b      	neglt	r3, r3
 80052ae:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80052b0:	2301      	movs	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80052b4:	e007      	b.n	80052c6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80052be:	613b      	str	r3, [r7, #16]
    Width++;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	3301      	adds	r3, #1
 80052c4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	daf3      	bge.n	80052b6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d901      	bls.n	80052da <_PrintInt+0x42>
    Width = NumDigits;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <_PrintInt+0x5e>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	db04      	blt.n	80052f0 <_PrintInt+0x58>
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <_PrintInt+0x5e>
    FieldWidth--;
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <_PrintInt+0x6e>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d016      	beq.n	8005334 <_PrintInt+0x9c>
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d111      	bne.n	8005334 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00e      	beq.n	8005334 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005316:	e006      	b.n	8005326 <_PrintInt+0x8e>
        FieldWidth--;
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	3b01      	subs	r3, #1
 800531c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800531e:	2120      	movs	r1, #32
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff fea7 	bl	8005074 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <_PrintInt+0x9c>
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	429a      	cmp	r2, r3
 8005332:	d3f1      	bcc.n	8005318 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	da07      	bge.n	800534a <_PrintInt+0xb2>
    v = -v;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	425b      	negs	r3, r3
 800533e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005340:	212d      	movs	r1, #45	; 0x2d
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff fe96 	bl	8005074 <_StoreChar>
 8005348:	e008      	b.n	800535c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005354:	212b      	movs	r1, #43	; 0x2b
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff fe8c 	bl	8005074 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d019      	beq.n	800539a <_PrintInt+0x102>
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d114      	bne.n	800539a <_PrintInt+0x102>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d111      	bne.n	800539a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00e      	beq.n	800539a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800537c:	e006      	b.n	800538c <_PrintInt+0xf4>
        FieldWidth--;
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	3b01      	subs	r3, #1
 8005382:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005384:	2130      	movs	r1, #48	; 0x30
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff fe74 	bl	8005074 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <_PrintInt+0x102>
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	429a      	cmp	r2, r3
 8005398:	d3f1      	bcc.n	800537e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff fedf 	bl	800516c <_PrintUnsigned>
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b098      	sub	sp, #96	; 0x60
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80053c4:	f3ef 8311 	mrs	r3, BASEPRI
 80053c8:	f04f 0120 	mov.w	r1, #32
 80053cc:	f381 8811 	msr	BASEPRI, r1
 80053d0:	633b      	str	r3, [r7, #48]	; 0x30
 80053d2:	48b7      	ldr	r0, [pc, #732]	; (80056b0 <_VPrintTarget+0x2f8>)
 80053d4:	f7ff fc78 	bl	8004cc8 <_PreparePacket>
 80053d8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80053da:	4bb5      	ldr	r3, [pc, #724]	; (80056b0 <_VPrintTarget+0x2f8>)
 80053dc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3301      	adds	r3, #1
 80053ea:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80053fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8183 	beq.w	800570e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800540c:	2b25      	cmp	r3, #37	; 0x25
 800540e:	f040 8170 	bne.w	80056f2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005412:	2300      	movs	r3, #0
 8005414:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005416:	2301      	movs	r3, #1
 8005418:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005422:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005426:	3b23      	subs	r3, #35	; 0x23
 8005428:	2b0d      	cmp	r3, #13
 800542a:	d83f      	bhi.n	80054ac <_VPrintTarget+0xf4>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <_VPrintTarget+0x7c>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	0800549d 	.word	0x0800549d
 8005438:	080054ad 	.word	0x080054ad
 800543c:	080054ad 	.word	0x080054ad
 8005440:	080054ad 	.word	0x080054ad
 8005444:	080054ad 	.word	0x080054ad
 8005448:	080054ad 	.word	0x080054ad
 800544c:	080054ad 	.word	0x080054ad
 8005450:	080054ad 	.word	0x080054ad
 8005454:	0800548d 	.word	0x0800548d
 8005458:	080054ad 	.word	0x080054ad
 800545c:	0800546d 	.word	0x0800546d
 8005460:	080054ad 	.word	0x080054ad
 8005464:	080054ad 	.word	0x080054ad
 8005468:	0800547d 	.word	0x0800547d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800546c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e01a      	b.n	80054b2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800547c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800547e:	f043 0302 	orr.w	r3, r3, #2
 8005482:	64bb      	str	r3, [r7, #72]	; 0x48
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	e012      	b.n	80054b2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800548c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	64bb      	str	r3, [r7, #72]	; 0x48
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	e00a      	b.n	80054b2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800549c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549e:	f043 0308 	orr.w	r3, r3, #8
 80054a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e002      	b.n	80054b2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80054ac:	2300      	movs	r3, #0
 80054ae:	653b      	str	r3, [r7, #80]	; 0x50
 80054b0:	bf00      	nop
        }
      } while (v);
 80054b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1b0      	bne.n	800541a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80054b8:	2300      	movs	r3, #0
 80054ba:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80054c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054c8:	2b2f      	cmp	r3, #47	; 0x2f
 80054ca:	d912      	bls.n	80054f2 <_VPrintTarget+0x13a>
 80054cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054d0:	2b39      	cmp	r3, #57	; 0x39
 80054d2:	d80e      	bhi.n	80054f2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80054da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	461a      	mov	r2, r3
 80054e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054ea:	4413      	add	r3, r2
 80054ec:	3b30      	subs	r3, #48	; 0x30
 80054ee:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80054f0:	e7e4      	b.n	80054bc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80054f2:	2300      	movs	r3, #0
 80054f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80054fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005502:	2b2e      	cmp	r3, #46	; 0x2e
 8005504:	d11d      	bne.n	8005542 <_VPrintTarget+0x18a>
        sFormat++;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3301      	adds	r3, #1
 800550a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005518:	2b2f      	cmp	r3, #47	; 0x2f
 800551a:	d912      	bls.n	8005542 <_VPrintTarget+0x18a>
 800551c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005520:	2b39      	cmp	r3, #57	; 0x39
 8005522:	d80e      	bhi.n	8005542 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800552a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	461a      	mov	r2, r3
 8005536:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800553a:	4413      	add	r3, r2
 800553c:	3b30      	subs	r3, #48	; 0x30
 800553e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005540:	e7e4      	b.n	800550c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800554a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800554e:	2b6c      	cmp	r3, #108	; 0x6c
 8005550:	d003      	beq.n	800555a <_VPrintTarget+0x1a2>
 8005552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005556:	2b68      	cmp	r3, #104	; 0x68
 8005558:	d107      	bne.n	800556a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005568:	e7ef      	b.n	800554a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800556a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800556e:	2b25      	cmp	r3, #37	; 0x25
 8005570:	f000 80b3 	beq.w	80056da <_VPrintTarget+0x322>
 8005574:	2b25      	cmp	r3, #37	; 0x25
 8005576:	f2c0 80b7 	blt.w	80056e8 <_VPrintTarget+0x330>
 800557a:	2b78      	cmp	r3, #120	; 0x78
 800557c:	f300 80b4 	bgt.w	80056e8 <_VPrintTarget+0x330>
 8005580:	2b58      	cmp	r3, #88	; 0x58
 8005582:	f2c0 80b1 	blt.w	80056e8 <_VPrintTarget+0x330>
 8005586:	3b58      	subs	r3, #88	; 0x58
 8005588:	2b20      	cmp	r3, #32
 800558a:	f200 80ad 	bhi.w	80056e8 <_VPrintTarget+0x330>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <_VPrintTarget+0x1dc>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	0800568b 	.word	0x0800568b
 8005598:	080056e9 	.word	0x080056e9
 800559c:	080056e9 	.word	0x080056e9
 80055a0:	080056e9 	.word	0x080056e9
 80055a4:	080056e9 	.word	0x080056e9
 80055a8:	080056e9 	.word	0x080056e9
 80055ac:	080056e9 	.word	0x080056e9
 80055b0:	080056e9 	.word	0x080056e9
 80055b4:	080056e9 	.word	0x080056e9
 80055b8:	080056e9 	.word	0x080056e9
 80055bc:	080056e9 	.word	0x080056e9
 80055c0:	08005619 	.word	0x08005619
 80055c4:	0800563f 	.word	0x0800563f
 80055c8:	080056e9 	.word	0x080056e9
 80055cc:	080056e9 	.word	0x080056e9
 80055d0:	080056e9 	.word	0x080056e9
 80055d4:	080056e9 	.word	0x080056e9
 80055d8:	080056e9 	.word	0x080056e9
 80055dc:	080056e9 	.word	0x080056e9
 80055e0:	080056e9 	.word	0x080056e9
 80055e4:	080056e9 	.word	0x080056e9
 80055e8:	080056e9 	.word	0x080056e9
 80055ec:	080056e9 	.word	0x080056e9
 80055f0:	080056e9 	.word	0x080056e9
 80055f4:	080056b5 	.word	0x080056b5
 80055f8:	080056e9 	.word	0x080056e9
 80055fc:	080056e9 	.word	0x080056e9
 8005600:	080056e9 	.word	0x080056e9
 8005604:	080056e9 	.word	0x080056e9
 8005608:	08005665 	.word	0x08005665
 800560c:	080056e9 	.word	0x080056e9
 8005610:	080056e9 	.word	0x080056e9
 8005614:	0800568b 	.word	0x0800568b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	1d19      	adds	r1, r3, #4
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800562c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fd1c 	bl	8005074 <_StoreChar>
        break;
 800563c:	e055      	b.n	80056ea <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	1d19      	adds	r1, r3, #4
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6011      	str	r1, [r2, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800564c:	f107 0014 	add.w	r0, r7, #20
 8005650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565a:	220a      	movs	r2, #10
 800565c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800565e:	f7ff fe1b 	bl	8005298 <_PrintInt>
        break;
 8005662:	e042      	b.n	80056ea <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	1d19      	adds	r1, r3, #4
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6011      	str	r1, [r2, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005672:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005674:	f107 0014 	add.w	r0, r7, #20
 8005678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005682:	220a      	movs	r2, #10
 8005684:	f7ff fd72 	bl	800516c <_PrintUnsigned>
        break;
 8005688:	e02f      	b.n	80056ea <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	1d19      	adds	r1, r3, #4
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6011      	str	r1, [r2, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005698:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800569a:	f107 0014 	add.w	r0, r7, #20
 800569e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a8:	2210      	movs	r2, #16
 80056aa:	f7ff fd5f 	bl	800516c <_PrintUnsigned>
        break;
 80056ae:	e01c      	b.n	80056ea <_VPrintTarget+0x332>
 80056b0:	2001327c 	.word	0x2001327c
      case 'p':
        v = va_arg(*pParamList, int);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	1d19      	adds	r1, r3, #4
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6011      	str	r1, [r2, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80056c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056c4:	f107 0014 	add.w	r0, r7, #20
 80056c8:	2300      	movs	r3, #0
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	2308      	movs	r3, #8
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2308      	movs	r3, #8
 80056d2:	2210      	movs	r2, #16
 80056d4:	f7ff fd4a 	bl	800516c <_PrintUnsigned>
        break;
 80056d8:	e007      	b.n	80056ea <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80056da:	f107 0314 	add.w	r3, r7, #20
 80056de:	2125      	movs	r1, #37	; 0x25
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fcc7 	bl	8005074 <_StoreChar>
        break;
 80056e6:	e000      	b.n	80056ea <_VPrintTarget+0x332>
      default:
        break;
 80056e8:	bf00      	nop
      }
      sFormat++;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3301      	adds	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e007      	b.n	8005702 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80056f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80056f6:	f107 0314 	add.w	r3, r7, #20
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff fcb9 	bl	8005074 <_StoreChar>
    }
  } while (*sFormat);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f47f ae72 	bne.w	80053f0 <_VPrintTarget+0x38>
 800570c:	e000      	b.n	8005710 <_VPrintTarget+0x358>
      break;
 800570e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	d041      	beq.n	800579a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	643b      	str	r3, [r7, #64]	; 0x40
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005726:	e00b      	b.n	8005740 <_VPrintTarget+0x388>
 8005728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572a:	b2da      	uxtb	r2, r3
 800572c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572e:	1c59      	adds	r1, r3, #1
 8005730:	6439      	str	r1, [r7, #64]	; 0x40
 8005732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573c:	09db      	lsrs	r3, r3, #7
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005742:	2b7f      	cmp	r3, #127	; 0x7f
 8005744:	d8f0      	bhi.n	8005728 <_VPrintTarget+0x370>
 8005746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	643a      	str	r2, [r7, #64]	; 0x40
 800574c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005754:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	63bb      	str	r3, [r7, #56]	; 0x38
 800575a:	2300      	movs	r3, #0
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
 800575e:	e00b      	b.n	8005778 <_VPrintTarget+0x3c0>
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	b2da      	uxtb	r2, r3
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	1c59      	adds	r1, r3, #1
 8005768:	63b9      	str	r1, [r7, #56]	; 0x38
 800576a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005774:	09db      	lsrs	r3, r3, #7
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	2b7f      	cmp	r3, #127	; 0x7f
 800577c:	d8f0      	bhi.n	8005760 <_VPrintTarget+0x3a8>
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	63ba      	str	r2, [r7, #56]	; 0x38
 8005784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	69b9      	ldr	r1, [r7, #24]
 8005792:	221a      	movs	r2, #26
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fb87 	bl	8004ea8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80057a0:	bf00      	nop
 80057a2:	3758      	adds	r7, #88	; 0x58
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057b0:	f3ef 8311 	mrs	r3, BASEPRI
 80057b4:	f04f 0120 	mov.w	r1, #32
 80057b8:	f381 8811 	msr	BASEPRI, r1
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4808      	ldr	r0, [pc, #32]	; (80057e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80057c0:	f7ff fa82 	bl	8004cc8 <_PreparePacket>
 80057c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	68b8      	ldr	r0, [r7, #8]
 80057cc:	f7ff fb6c 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f383 8811 	msr	BASEPRI, r3
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	2001327c 	.word	0x2001327c

080057e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057ee:	f3ef 8311 	mrs	r3, BASEPRI
 80057f2:	f04f 0120 	mov.w	r1, #32
 80057f6:	f381 8811 	msr	BASEPRI, r1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	4816      	ldr	r0, [pc, #88]	; (8005858 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80057fe:	f7ff fa63 	bl	8004cc8 <_PreparePacket>
 8005802:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	61bb      	str	r3, [r7, #24]
 8005810:	e00b      	b.n	800582a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	1c59      	adds	r1, r3, #1
 800581a:	61f9      	str	r1, [r7, #28]
 800581c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	09db      	lsrs	r3, r3, #7
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b7f      	cmp	r3, #127	; 0x7f
 800582e:	d8f0      	bhi.n	8005812 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	61fa      	str	r2, [r7, #28]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	6938      	ldr	r0, [r7, #16]
 8005846:	f7ff fb2f 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f383 8811 	msr	BASEPRI, r3
}
 8005850:	bf00      	nop
 8005852:	3720      	adds	r7, #32
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	2001327c 	.word	0x2001327c

0800585c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b08c      	sub	sp, #48	; 0x30
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005868:	f3ef 8311 	mrs	r3, BASEPRI
 800586c:	f04f 0120 	mov.w	r1, #32
 8005870:	f381 8811 	msr	BASEPRI, r1
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	4825      	ldr	r0, [pc, #148]	; (800590c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005878:	f7ff fa26 	bl	8004cc8 <_PreparePacket>
 800587c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	62bb      	str	r3, [r7, #40]	; 0x28
 800588a:	e00b      	b.n	80058a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	b2da      	uxtb	r2, r3
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	1c59      	adds	r1, r3, #1
 8005894:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	09db      	lsrs	r3, r3, #7
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2b7f      	cmp	r3, #127	; 0x7f
 80058a8:	d8f0      	bhi.n	800588c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	623b      	str	r3, [r7, #32]
 80058c2:	e00b      	b.n	80058dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	1c59      	adds	r1, r3, #1
 80058cc:	6279      	str	r1, [r7, #36]	; 0x24
 80058ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	09db      	lsrs	r3, r3, #7
 80058da:	623b      	str	r3, [r7, #32]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	2b7f      	cmp	r3, #127	; 0x7f
 80058e0:	d8f0      	bhi.n	80058c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	627a      	str	r2, [r7, #36]	; 0x24
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	69b8      	ldr	r0, [r7, #24]
 80058f8:	f7ff fad6 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f383 8811 	msr	BASEPRI, r3
}
 8005902:	bf00      	nop
 8005904:	3730      	adds	r7, #48	; 0x30
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	2001327c 	.word	0x2001327c

08005910 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b08e      	sub	sp, #56	; 0x38
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800591e:	f3ef 8311 	mrs	r3, BASEPRI
 8005922:	f04f 0120 	mov.w	r1, #32
 8005926:	f381 8811 	msr	BASEPRI, r1
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	4832      	ldr	r0, [pc, #200]	; (80059f8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800592e:	f7ff f9cb 	bl	8004cc8 <_PreparePacket>
 8005932:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	637b      	str	r3, [r7, #52]	; 0x34
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	633b      	str	r3, [r7, #48]	; 0x30
 8005940:	e00b      	b.n	800595a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	b2da      	uxtb	r2, r3
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	1c59      	adds	r1, r3, #1
 800594a:	6379      	str	r1, [r7, #52]	; 0x34
 800594c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	09db      	lsrs	r3, r3, #7
 8005958:	633b      	str	r3, [r7, #48]	; 0x30
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2b7f      	cmp	r3, #127	; 0x7f
 800595e:	d8f0      	bhi.n	8005942 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	637a      	str	r2, [r7, #52]	; 0x34
 8005966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
 8005978:	e00b      	b.n	8005992 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	b2da      	uxtb	r2, r3
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	1c59      	adds	r1, r3, #1
 8005982:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005984:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	09db      	lsrs	r3, r3, #7
 8005990:	62bb      	str	r3, [r7, #40]	; 0x28
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	2b7f      	cmp	r3, #127	; 0x7f
 8005996:	d8f0      	bhi.n	800597a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800599e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	623b      	str	r3, [r7, #32]
 80059b0:	e00b      	b.n	80059ca <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	1c59      	adds	r1, r3, #1
 80059ba:	6279      	str	r1, [r7, #36]	; 0x24
 80059bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	09db      	lsrs	r3, r3, #7
 80059c8:	623b      	str	r3, [r7, #32]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	2b7f      	cmp	r3, #127	; 0x7f
 80059ce:	d8f0      	bhi.n	80059b2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	627a      	str	r2, [r7, #36]	; 0x24
 80059d6:	6a3a      	ldr	r2, [r7, #32]
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	6979      	ldr	r1, [r7, #20]
 80059e4:	69b8      	ldr	r0, [r7, #24]
 80059e6:	f7ff fa5f 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f383 8811 	msr	BASEPRI, r3
}
 80059f0:	bf00      	nop
 80059f2:	3738      	adds	r7, #56	; 0x38
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	2001327c 	.word	0x2001327c

080059fc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b090      	sub	sp, #64	; 0x40
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a0e:	f04f 0120 	mov.w	r1, #32
 8005a12:	f381 8811 	msr	BASEPRI, r1
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	4840      	ldr	r0, [pc, #256]	; (8005b1c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005a1a:	f7ff f955 	bl	8004cc8 <_PreparePacket>
 8005a1e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a2c:	e00b      	b.n	8005a46 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a42:	09db      	lsrs	r3, r3, #7
 8005a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	2b7f      	cmp	r3, #127	; 0x7f
 8005a4a:	d8f0      	bhi.n	8005a2e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
 8005a64:	e00b      	b.n	8005a7e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	1c59      	adds	r1, r3, #1
 8005a6e:	6379      	str	r1, [r7, #52]	; 0x34
 8005a70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	09db      	lsrs	r3, r3, #7
 8005a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	2b7f      	cmp	r3, #127	; 0x7f
 8005a82:	d8f0      	bhi.n	8005a66 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	637a      	str	r2, [r7, #52]	; 0x34
 8005a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9c:	e00b      	b.n	8005ab6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	1c59      	adds	r1, r3, #1
 8005aa6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005aa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	09db      	lsrs	r3, r3, #7
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8005aba:	d8f0      	bhi.n	8005a9e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	e00b      	b.n	8005aee <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1c59      	adds	r1, r3, #1
 8005ade:	6279      	str	r1, [r7, #36]	; 0x24
 8005ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	09db      	lsrs	r3, r3, #7
 8005aec:	623b      	str	r3, [r7, #32]
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	2b7f      	cmp	r3, #127	; 0x7f
 8005af2:	d8f0      	bhi.n	8005ad6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	627a      	str	r2, [r7, #36]	; 0x24
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	6979      	ldr	r1, [r7, #20]
 8005b08:	69b8      	ldr	r0, [r7, #24]
 8005b0a:	f7ff f9cd 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f383 8811 	msr	BASEPRI, r3
}
 8005b14:	bf00      	nop
 8005b16:	3740      	adds	r7, #64	; 0x40
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	2001327c 	.word	0x2001327c

08005b20 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08c      	sub	sp, #48	; 0x30
 8005b24:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005b26:	4b58      	ldr	r3, [pc, #352]	; (8005c88 <SEGGER_SYSVIEW_Start+0x168>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b30:	f04f 0120 	mov.w	r1, #32
 8005b34:	f381 8811 	msr	BASEPRI, r1
 8005b38:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005b3a:	4b53      	ldr	r3, [pc, #332]	; (8005c88 <SEGGER_SYSVIEW_Start+0x168>)
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	220a      	movs	r2, #10
 8005b40:	4952      	ldr	r1, [pc, #328]	; (8005c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fa fb44 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005b4e:	200a      	movs	r0, #10
 8005b50:	f7ff fe2a 	bl	80057a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b54:	f3ef 8311 	mrs	r3, BASEPRI
 8005b58:	f04f 0120 	mov.w	r1, #32
 8005b5c:	f381 8811 	msr	BASEPRI, r1
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	484b      	ldr	r0, [pc, #300]	; (8005c90 <SEGGER_SYSVIEW_Start+0x170>)
 8005b64:	f7ff f8b0 	bl	8004cc8 <_PreparePacket>
 8005b68:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b72:	4b45      	ldr	r3, [pc, #276]	; (8005c88 <SEGGER_SYSVIEW_Start+0x168>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b78:	e00b      	b.n	8005b92 <SEGGER_SYSVIEW_Start+0x72>
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	1c59      	adds	r1, r3, #1
 8005b82:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	2b7f      	cmp	r3, #127	; 0x7f
 8005b96:	d8f0      	bhi.n	8005b7a <SEGGER_SYSVIEW_Start+0x5a>
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bac:	4b36      	ldr	r3, [pc, #216]	; (8005c88 <SEGGER_SYSVIEW_Start+0x168>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	623b      	str	r3, [r7, #32]
 8005bb2:	e00b      	b.n	8005bcc <SEGGER_SYSVIEW_Start+0xac>
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	1c59      	adds	r1, r3, #1
 8005bbc:	6279      	str	r1, [r7, #36]	; 0x24
 8005bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	09db      	lsrs	r3, r3, #7
 8005bca:	623b      	str	r3, [r7, #32]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd0:	d8f0      	bhi.n	8005bb4 <SEGGER_SYSVIEW_Start+0x94>
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	627a      	str	r2, [r7, #36]	; 0x24
 8005bd8:	6a3a      	ldr	r2, [r7, #32]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	61fb      	str	r3, [r7, #28]
 8005be6:	4b28      	ldr	r3, [pc, #160]	; (8005c88 <SEGGER_SYSVIEW_Start+0x168>)
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	e00b      	b.n	8005c06 <SEGGER_SYSVIEW_Start+0xe6>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	1c59      	adds	r1, r3, #1
 8005bf6:	61f9      	str	r1, [r7, #28]
 8005bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	09db      	lsrs	r3, r3, #7
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0a:	d8f0      	bhi.n	8005bee <SEGGER_SYSVIEW_Start+0xce>
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	61fa      	str	r2, [r7, #28]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	2300      	movs	r3, #0
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	e00b      	b.n	8005c3e <SEGGER_SYSVIEW_Start+0x11e>
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	1c59      	adds	r1, r3, #1
 8005c2e:	6179      	str	r1, [r7, #20]
 8005c30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	09db      	lsrs	r3, r3, #7
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b7f      	cmp	r3, #127	; 0x7f
 8005c42:	d8f0      	bhi.n	8005c26 <SEGGER_SYSVIEW_Start+0x106>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	617a      	str	r2, [r7, #20]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c54:	2218      	movs	r2, #24
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff f925 	bl	8004ea8 <_SendPacket>
      RECORD_END();
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c64:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <SEGGER_SYSVIEW_Start+0x168>)
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <SEGGER_SYSVIEW_Start+0x168>)
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005c72:	f000 f9c7 	bl	8006004 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005c76:	f000 f9b1 	bl	8005fdc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005c7a:	f000 fc5f 	bl	800653c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005c7e:	bf00      	nop
 8005c80:	3730      	adds	r7, #48	; 0x30
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	2001324c 	.word	0x2001324c
 8005c8c:	0800684c 	.word	0x0800684c
 8005c90:	2001327c 	.word	0x2001327c

08005c94 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c9e:	f04f 0120 	mov.w	r1, #32
 8005ca2:	f381 8811 	msr	BASEPRI, r1
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	480b      	ldr	r0, [pc, #44]	; (8005cd8 <SEGGER_SYSVIEW_Stop+0x44>)
 8005caa:	f7ff f80d 	bl	8004cc8 <_PreparePacket>
 8005cae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <SEGGER_SYSVIEW_Stop+0x48>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005cb8:	220b      	movs	r2, #11
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6838      	ldr	r0, [r7, #0]
 8005cbe:	f7ff f8f3 	bl	8004ea8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <SEGGER_SYSVIEW_Stop+0x48>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f383 8811 	msr	BASEPRI, r3
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	2001327c 	.word	0x2001327c
 8005cdc:	2001324c 	.word	0x2001324c

08005ce0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08c      	sub	sp, #48	; 0x30
 8005ce4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cea:	f04f 0120 	mov.w	r1, #32
 8005cee:	f381 8811 	msr	BASEPRI, r1
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	4845      	ldr	r0, [pc, #276]	; (8005e0c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005cf6:	f7fe ffe7 	bl	8004cc8 <_PreparePacket>
 8005cfa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d04:	4b42      	ldr	r3, [pc, #264]	; (8005e10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0a:	e00b      	b.n	8005d24 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	09db      	lsrs	r3, r3, #7
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	2b7f      	cmp	r3, #127	; 0x7f
 8005d28:	d8f0      	bhi.n	8005d0c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3e:	4b34      	ldr	r3, [pc, #208]	; (8005e10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	623b      	str	r3, [r7, #32]
 8005d44:	e00b      	b.n	8005d5e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	1c59      	adds	r1, r3, #1
 8005d4e:	6279      	str	r1, [r7, #36]	; 0x24
 8005d50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	09db      	lsrs	r3, r3, #7
 8005d5c:	623b      	str	r3, [r7, #32]
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	2b7f      	cmp	r3, #127	; 0x7f
 8005d62:	d8f0      	bhi.n	8005d46 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	627a      	str	r2, [r7, #36]	; 0x24
 8005d6a:	6a3a      	ldr	r2, [r7, #32]
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	e00b      	b.n	8005d98 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	61f9      	str	r1, [r7, #28]
 8005d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	09db      	lsrs	r3, r3, #7
 8005d96:	61bb      	str	r3, [r7, #24]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d9c:	d8f0      	bhi.n	8005d80 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	61fa      	str	r2, [r7, #28]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	2300      	movs	r3, #0
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	e00b      	b.n	8005dd0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	1c59      	adds	r1, r3, #1
 8005dc0:	6179      	str	r1, [r7, #20]
 8005dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	09db      	lsrs	r3, r3, #7
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd4:	d8f0      	bhi.n	8005db8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	617a      	str	r2, [r7, #20]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005de6:	2218      	movs	r2, #24
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	68b8      	ldr	r0, [r7, #8]
 8005dec:	f7ff f85c 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005df6:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005dfe:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	4798      	blx	r3
  }
}
 8005e04:	bf00      	nop
 8005e06:	3730      	adds	r7, #48	; 0x30
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	2001327c 	.word	0x2001327c
 8005e10:	2001324c 	.word	0x2001324c

08005e14 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b092      	sub	sp, #72	; 0x48
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e20:	f04f 0120 	mov.w	r1, #32
 8005e24:	f381 8811 	msr	BASEPRI, r1
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	486a      	ldr	r0, [pc, #424]	; (8005fd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005e2c:	f7fe ff4c 	bl	8004cc8 <_PreparePacket>
 8005e30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	647b      	str	r3, [r7, #68]	; 0x44
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b66      	ldr	r3, [pc, #408]	; (8005fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	643b      	str	r3, [r7, #64]	; 0x40
 8005e46:	e00b      	b.n	8005e60 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e4e:	1c59      	adds	r1, r3, #1
 8005e50:	6479      	str	r1, [r7, #68]	; 0x44
 8005e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e5c:	09db      	lsrs	r3, r3, #7
 8005e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e62:	2b7f      	cmp	r3, #127	; 0x7f
 8005e64:	d8f0      	bhi.n	8005e48 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	647a      	str	r2, [r7, #68]	; 0x44
 8005e6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e80:	e00b      	b.n	8005e9a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e88:	1c59      	adds	r1, r3, #1
 8005e8a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e96:	09db      	lsrs	r3, r3, #7
 8005e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9e:	d8f0      	bhi.n	8005e82 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7fe feb5 	bl	8004c28 <_EncodeStr>
 8005ebe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005ec0:	2209      	movs	r2, #9
 8005ec2:	68f9      	ldr	r1, [r7, #12]
 8005ec4:	6938      	ldr	r0, [r7, #16]
 8005ec6:	f7fe ffef 	bl	8004ea8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b40      	ldr	r3, [pc, #256]	; (8005fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ede:	e00b      	b.n	8005ef8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	6379      	str	r1, [r7, #52]	; 0x34
 8005eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	09db      	lsrs	r3, r3, #7
 8005ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	2b7f      	cmp	r3, #127	; 0x7f
 8005efc:	d8f0      	bhi.n	8005ee0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	637a      	str	r2, [r7, #52]	; 0x34
 8005f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f18:	e00b      	b.n	8005f32 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	1c59      	adds	r1, r3, #1
 8005f22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	09db      	lsrs	r3, r3, #7
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	2b7f      	cmp	r3, #127	; 0x7f
 8005f36:	d8f0      	bhi.n	8005f1a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	623b      	str	r3, [r7, #32]
 8005f52:	e00b      	b.n	8005f6c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	1c59      	adds	r1, r3, #1
 8005f5c:	6279      	str	r1, [r7, #36]	; 0x24
 8005f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	09db      	lsrs	r3, r3, #7
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f70:	d8f0      	bhi.n	8005f54 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	627a      	str	r2, [r7, #36]	; 0x24
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	2300      	movs	r3, #0
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e00b      	b.n	8005fa4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	1c59      	adds	r1, r3, #1
 8005f94:	61f9      	str	r1, [r7, #28]
 8005f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	09db      	lsrs	r3, r3, #7
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa8:	d8f0      	bhi.n	8005f8c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	61fa      	str	r2, [r7, #28]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005fba:	2215      	movs	r2, #21
 8005fbc:	68f9      	ldr	r1, [r7, #12]
 8005fbe:	6938      	ldr	r0, [r7, #16]
 8005fc0:	f7fe ff72 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f383 8811 	msr	BASEPRI, r3
}
 8005fca:	bf00      	nop
 8005fcc:	3748      	adds	r7, #72	; 0x48
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	2001327c 	.word	0x2001327c
 8005fd8:	2001324c 	.word	0x2001324c

08005fdc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005ff2:	4b03      	ldr	r3, [pc, #12]	; (8006000 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	4798      	blx	r3
  }
}
 8005ffa:	bf00      	nop
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	2001324c 	.word	0x2001324c

08006004 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006004:	b590      	push	{r4, r7, lr}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01a      	beq.n	8006048 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006012:	4b13      	ldr	r3, [pc, #76]	; (8006060 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800601c:	4b10      	ldr	r3, [pc, #64]	; (8006060 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4798      	blx	r3
 8006024:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006028:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800602a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	000a      	movs	r2, r1
 8006038:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800603a:	4613      	mov	r3, r2
 800603c:	461a      	mov	r2, r3
 800603e:	4621      	mov	r1, r4
 8006040:	200d      	movs	r0, #13
 8006042:	f7ff fc0b 	bl	800585c <SEGGER_SYSVIEW_RecordU32x2>
 8006046:	e006      	b.n	8006056 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4619      	mov	r1, r3
 800604e:	200c      	movs	r0, #12
 8006050:	f7ff fbc8 	bl	80057e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}
 800605e:	bf00      	nop
 8006060:	2001324c 	.word	0x2001324c
 8006064:	e0001004 	.word	0xe0001004

08006068 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800606e:	f3ef 8311 	mrs	r3, BASEPRI
 8006072:	f04f 0120 	mov.w	r1, #32
 8006076:	f381 8811 	msr	BASEPRI, r1
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	4819      	ldr	r0, [pc, #100]	; (80060e4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800607e:	f7fe fe23 	bl	8004cc8 <_PreparePacket>
 8006082:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006088:	4b17      	ldr	r3, [pc, #92]	; (80060e8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006090:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	e00b      	b.n	80060b4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	1c59      	adds	r1, r3, #1
 80060a4:	6179      	str	r1, [r7, #20]
 80060a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	09db      	lsrs	r3, r3, #7
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b7f      	cmp	r3, #127	; 0x7f
 80060b8:	d8f0      	bhi.n	800609c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	617a      	str	r2, [r7, #20]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80060ca:	2202      	movs	r2, #2
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	68b8      	ldr	r0, [r7, #8]
 80060d0:	f7fe feea 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f383 8811 	msr	BASEPRI, r3
}
 80060da:	bf00      	nop
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	2001327c 	.word	0x2001327c
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060f2:	f3ef 8311 	mrs	r3, BASEPRI
 80060f6:	f04f 0120 	mov.w	r1, #32
 80060fa:	f381 8811 	msr	BASEPRI, r1
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	4807      	ldr	r0, [pc, #28]	; (8006120 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006102:	f7fe fde1 	bl	8004cc8 <_PreparePacket>
 8006106:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006108:	2203      	movs	r2, #3
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6838      	ldr	r0, [r7, #0]
 800610e:	f7fe fecb 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f383 8811 	msr	BASEPRI, r3
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	2001327c 	.word	0x2001327c

08006124 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800612a:	f3ef 8311 	mrs	r3, BASEPRI
 800612e:	f04f 0120 	mov.w	r1, #32
 8006132:	f381 8811 	msr	BASEPRI, r1
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	4807      	ldr	r0, [pc, #28]	; (8006158 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800613a:	f7fe fdc5 	bl	8004cc8 <_PreparePacket>
 800613e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006140:	2212      	movs	r2, #18
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6838      	ldr	r0, [r7, #0]
 8006146:	f7fe feaf 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f383 8811 	msr	BASEPRI, r3
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	2001327c 	.word	0x2001327c

0800615c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006162:	f3ef 8311 	mrs	r3, BASEPRI
 8006166:	f04f 0120 	mov.w	r1, #32
 800616a:	f381 8811 	msr	BASEPRI, r1
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	4807      	ldr	r0, [pc, #28]	; (8006190 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006172:	f7fe fda9 	bl	8004cc8 <_PreparePacket>
 8006176:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006178:	2211      	movs	r2, #17
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6838      	ldr	r0, [r7, #0]
 800617e:	f7fe fe93 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f383 8811 	msr	BASEPRI, r3
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	2001327c 	.word	0x2001327c

08006194 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800619c:	f3ef 8311 	mrs	r3, BASEPRI
 80061a0:	f04f 0120 	mov.w	r1, #32
 80061a4:	f381 8811 	msr	BASEPRI, r1
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	4819      	ldr	r0, [pc, #100]	; (8006210 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80061ac:	f7fe fd8c 	bl	8004cc8 <_PreparePacket>
 80061b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061b6:	4b17      	ldr	r3, [pc, #92]	; (8006214 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	e00b      	b.n	80061e2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	1c59      	adds	r1, r3, #1
 80061d2:	61f9      	str	r1, [r7, #28]
 80061d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	09db      	lsrs	r3, r3, #7
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b7f      	cmp	r3, #127	; 0x7f
 80061e6:	d8f0      	bhi.n	80061ca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	61fa      	str	r2, [r7, #28]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80061f8:	2208      	movs	r2, #8
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	6938      	ldr	r0, [r7, #16]
 80061fe:	f7fe fe53 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f383 8811 	msr	BASEPRI, r3
}
 8006208:	bf00      	nop
 800620a:	3720      	adds	r7, #32
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	2001327c 	.word	0x2001327c
 8006214:	2001324c 	.word	0x2001324c

08006218 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006220:	f3ef 8311 	mrs	r3, BASEPRI
 8006224:	f04f 0120 	mov.w	r1, #32
 8006228:	f381 8811 	msr	BASEPRI, r1
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	4819      	ldr	r0, [pc, #100]	; (8006294 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006230:	f7fe fd4a 	bl	8004cc8 <_PreparePacket>
 8006234:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800623a:	4b17      	ldr	r3, [pc, #92]	; (8006298 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	e00b      	b.n	8006266 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	1c59      	adds	r1, r3, #1
 8006256:	61f9      	str	r1, [r7, #28]
 8006258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	09db      	lsrs	r3, r3, #7
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b7f      	cmp	r3, #127	; 0x7f
 800626a:	d8f0      	bhi.n	800624e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	61fa      	str	r2, [r7, #28]
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800627c:	2204      	movs	r2, #4
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	6938      	ldr	r0, [r7, #16]
 8006282:	f7fe fe11 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f383 8811 	msr	BASEPRI, r3
}
 800628c:	bf00      	nop
 800628e:	3720      	adds	r7, #32
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	2001327c 	.word	0x2001327c
 8006298:	2001324c 	.word	0x2001324c

0800629c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062a4:	f3ef 8311 	mrs	r3, BASEPRI
 80062a8:	f04f 0120 	mov.w	r1, #32
 80062ac:	f381 8811 	msr	BASEPRI, r1
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	4819      	ldr	r0, [pc, #100]	; (8006318 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80062b4:	f7fe fd08 	bl	8004cc8 <_PreparePacket>
 80062b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062be:	4b17      	ldr	r3, [pc, #92]	; (800631c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	e00b      	b.n	80062ea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	1c59      	adds	r1, r3, #1
 80062da:	61f9      	str	r1, [r7, #28]
 80062dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	09db      	lsrs	r3, r3, #7
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b7f      	cmp	r3, #127	; 0x7f
 80062ee:	d8f0      	bhi.n	80062d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	61fa      	str	r2, [r7, #28]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006300:	2206      	movs	r2, #6
 8006302:	68f9      	ldr	r1, [r7, #12]
 8006304:	6938      	ldr	r0, [r7, #16]
 8006306:	f7fe fdcf 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f383 8811 	msr	BASEPRI, r3
}
 8006310:	bf00      	nop
 8006312:	3720      	adds	r7, #32
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	2001327c 	.word	0x2001327c
 800631c:	2001324c 	.word	0x2001324c

08006320 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	; 0x28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800632a:	f3ef 8311 	mrs	r3, BASEPRI
 800632e:	f04f 0120 	mov.w	r1, #32
 8006332:	f381 8811 	msr	BASEPRI, r1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	4827      	ldr	r0, [pc, #156]	; (80063d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800633a:	f7fe fcc5 	bl	8004cc8 <_PreparePacket>
 800633e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006344:	4b25      	ldr	r3, [pc, #148]	; (80063dc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	623b      	str	r3, [r7, #32]
 8006356:	e00b      	b.n	8006370 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	6279      	str	r1, [r7, #36]	; 0x24
 8006362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	09db      	lsrs	r3, r3, #7
 800636e:	623b      	str	r3, [r7, #32]
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b7f      	cmp	r3, #127	; 0x7f
 8006374:	d8f0      	bhi.n	8006358 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	627a      	str	r2, [r7, #36]	; 0x24
 800637c:	6a3a      	ldr	r2, [r7, #32]
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	e00b      	b.n	80063a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	61f9      	str	r1, [r7, #28]
 800639a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	09db      	lsrs	r3, r3, #7
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2b7f      	cmp	r3, #127	; 0x7f
 80063ac:	d8f0      	bhi.n	8006390 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	61fa      	str	r2, [r7, #28]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80063be:	2207      	movs	r2, #7
 80063c0:	68f9      	ldr	r1, [r7, #12]
 80063c2:	6938      	ldr	r0, [r7, #16]
 80063c4:	f7fe fd70 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f383 8811 	msr	BASEPRI, r3
}
 80063ce:	bf00      	nop
 80063d0:	3728      	adds	r7, #40	; 0x28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	2001327c 	.word	0x2001327c
 80063dc:	2001324c 	.word	0x2001324c

080063e0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80063e8:	4b04      	ldr	r3, [pc, #16]	; (80063fc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	1ad3      	subs	r3, r2, r3
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	2001324c 	.word	0x2001324c

08006400 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800640a:	4b3b      	ldr	r3, [pc, #236]	; (80064f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d06d      	beq.n	80064ee <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006412:	4b39      	ldr	r3, [pc, #228]	; (80064f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006418:	2300      	movs	r3, #0
 800641a:	62bb      	str	r3, [r7, #40]	; 0x28
 800641c:	e008      	b.n	8006430 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d007      	beq.n	800643a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	3301      	adds	r3, #1
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006434:	429a      	cmp	r2, r3
 8006436:	d3f2      	bcc.n	800641e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006438:	e000      	b.n	800643c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800643a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d055      	beq.n	80064ee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006442:	f3ef 8311 	mrs	r3, BASEPRI
 8006446:	f04f 0120 	mov.w	r1, #32
 800644a:	f381 8811 	msr	BASEPRI, r1
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	482a      	ldr	r0, [pc, #168]	; (80064fc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006452:	f7fe fc39 	bl	8004cc8 <_PreparePacket>
 8006456:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	e00b      	b.n	800647e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	6279      	str	r1, [r7, #36]	; 0x24
 8006470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	09db      	lsrs	r3, r3, #7
 800647c:	623b      	str	r3, [r7, #32]
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	2b7f      	cmp	r3, #127	; 0x7f
 8006482:	d8f0      	bhi.n	8006466 <SEGGER_SYSVIEW_SendModule+0x66>
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	627a      	str	r2, [r7, #36]	; 0x24
 800648a:	6a3a      	ldr	r2, [r7, #32]
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	e00b      	b.n	80064b8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	61f9      	str	r1, [r7, #28]
 80064aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	09db      	lsrs	r3, r3, #7
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b7f      	cmp	r3, #127	; 0x7f
 80064bc:	d8f0      	bhi.n	80064a0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	61fa      	str	r2, [r7, #28]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2280      	movs	r2, #128	; 0x80
 80064d4:	4619      	mov	r1, r3
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7fe fba6 	bl	8004c28 <_EncodeStr>
 80064dc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80064de:	2216      	movs	r2, #22
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	6938      	ldr	r0, [r7, #16]
 80064e4:	f7fe fce0 	bl	8004ea8 <_SendPacket>
      RECORD_END();
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80064ee:	bf00      	nop
 80064f0:	3730      	adds	r7, #48	; 0x30
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20013274 	.word	0x20013274
 80064fc:	2001327c 	.word	0x2001327c

08006500 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00f      	beq.n	800652e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800650e:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f2      	bne.n	8006514 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20013274 	.word	0x20013274

0800653c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006542:	f3ef 8311 	mrs	r3, BASEPRI
 8006546:	f04f 0120 	mov.w	r1, #32
 800654a:	f381 8811 	msr	BASEPRI, r1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	4817      	ldr	r0, [pc, #92]	; (80065b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006552:	f7fe fbb9 	bl	8004cc8 <_PreparePacket>
 8006556:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	e00b      	b.n	8006580 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	b2da      	uxtb	r2, r3
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	1c59      	adds	r1, r3, #1
 8006570:	6179      	str	r1, [r7, #20]
 8006572:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	09db      	lsrs	r3, r3, #7
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b7f      	cmp	r3, #127	; 0x7f
 8006584:	d8f0      	bhi.n	8006568 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	617a      	str	r2, [r7, #20]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006596:	221b      	movs	r2, #27
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	68b8      	ldr	r0, [r7, #8]
 800659c:	f7fe fc84 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f383 8811 	msr	BASEPRI, r3
}
 80065a6:	bf00      	nop
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2001327c 	.word	0x2001327c
 80065b4:	20013278 	.word	0x20013278

080065b8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80065b8:	b40f      	push	{r0, r1, r2, r3}
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80065c0:	f107 0314 	add.w	r3, r7, #20
 80065c4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80065c6:	1d3b      	adds	r3, r7, #4
 80065c8:	461a      	mov	r2, r3
 80065ca:	2100      	movs	r1, #0
 80065cc:	6938      	ldr	r0, [r7, #16]
 80065ce:	f7fe fef3 	bl	80053b8 <_VPrintTarget>
  va_end(ParamList);
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065dc:	b004      	add	sp, #16
 80065de:	4770      	bx	lr

080065e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065e8:	f3ef 8311 	mrs	r3, BASEPRI
 80065ec:	f04f 0120 	mov.w	r1, #32
 80065f0:	f381 8811 	msr	BASEPRI, r1
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	4827      	ldr	r0, [pc, #156]	; (8006694 <SEGGER_SYSVIEW_Warn+0xb4>)
 80065f8:	f7fe fb66 	bl	8004cc8 <_PreparePacket>
 80065fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065fe:	2280      	movs	r2, #128	; 0x80
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	6938      	ldr	r0, [r7, #16]
 8006604:	f7fe fb10 	bl	8004c28 <_EncodeStr>
 8006608:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
 800660e:	2301      	movs	r3, #1
 8006610:	623b      	str	r3, [r7, #32]
 8006612:	e00b      	b.n	800662c <SEGGER_SYSVIEW_Warn+0x4c>
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	1c59      	adds	r1, r3, #1
 800661c:	6279      	str	r1, [r7, #36]	; 0x24
 800661e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	09db      	lsrs	r3, r3, #7
 800662a:	623b      	str	r3, [r7, #32]
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	2b7f      	cmp	r3, #127	; 0x7f
 8006630:	d8f0      	bhi.n	8006614 <SEGGER_SYSVIEW_Warn+0x34>
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	627a      	str	r2, [r7, #36]	; 0x24
 8006638:	6a3a      	ldr	r2, [r7, #32]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	e00b      	b.n	8006664 <SEGGER_SYSVIEW_Warn+0x84>
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	b2da      	uxtb	r2, r3
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	1c59      	adds	r1, r3, #1
 8006654:	61f9      	str	r1, [r7, #28]
 8006656:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	09db      	lsrs	r3, r3, #7
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b7f      	cmp	r3, #127	; 0x7f
 8006668:	d8f0      	bhi.n	800664c <SEGGER_SYSVIEW_Warn+0x6c>
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	61fa      	str	r2, [r7, #28]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800667a:	221a      	movs	r2, #26
 800667c:	68f9      	ldr	r1, [r7, #12]
 800667e:	6938      	ldr	r0, [r7, #16]
 8006680:	f7fe fc12 	bl	8004ea8 <_SendPacket>
  RECORD_END();
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f383 8811 	msr	BASEPRI, r3
}
 800668a:	bf00      	nop
 800668c:	3728      	adds	r7, #40	; 0x28
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	2001327c 	.word	0x2001327c

08006698 <__libc_init_array>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4d0d      	ldr	r5, [pc, #52]	; (80066d0 <__libc_init_array+0x38>)
 800669c:	4c0d      	ldr	r4, [pc, #52]	; (80066d4 <__libc_init_array+0x3c>)
 800669e:	1b64      	subs	r4, r4, r5
 80066a0:	10a4      	asrs	r4, r4, #2
 80066a2:	2600      	movs	r6, #0
 80066a4:	42a6      	cmp	r6, r4
 80066a6:	d109      	bne.n	80066bc <__libc_init_array+0x24>
 80066a8:	4d0b      	ldr	r5, [pc, #44]	; (80066d8 <__libc_init_array+0x40>)
 80066aa:	4c0c      	ldr	r4, [pc, #48]	; (80066dc <__libc_init_array+0x44>)
 80066ac:	f000 f83c 	bl	8006728 <_init>
 80066b0:	1b64      	subs	r4, r4, r5
 80066b2:	10a4      	asrs	r4, r4, #2
 80066b4:	2600      	movs	r6, #0
 80066b6:	42a6      	cmp	r6, r4
 80066b8:	d105      	bne.n	80066c6 <__libc_init_array+0x2e>
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c0:	4798      	blx	r3
 80066c2:	3601      	adds	r6, #1
 80066c4:	e7ee      	b.n	80066a4 <__libc_init_array+0xc>
 80066c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ca:	4798      	blx	r3
 80066cc:	3601      	adds	r6, #1
 80066ce:	e7f2      	b.n	80066b6 <__libc_init_array+0x1e>
 80066d0:	08006870 	.word	0x08006870
 80066d4:	08006870 	.word	0x08006870
 80066d8:	08006870 	.word	0x08006870
 80066dc:	08006874 	.word	0x08006874

080066e0 <memcmp>:
 80066e0:	b530      	push	{r4, r5, lr}
 80066e2:	3901      	subs	r1, #1
 80066e4:	2400      	movs	r4, #0
 80066e6:	42a2      	cmp	r2, r4
 80066e8:	d101      	bne.n	80066ee <memcmp+0xe>
 80066ea:	2000      	movs	r0, #0
 80066ec:	e005      	b.n	80066fa <memcmp+0x1a>
 80066ee:	5d03      	ldrb	r3, [r0, r4]
 80066f0:	3401      	adds	r4, #1
 80066f2:	5d0d      	ldrb	r5, [r1, r4]
 80066f4:	42ab      	cmp	r3, r5
 80066f6:	d0f6      	beq.n	80066e6 <memcmp+0x6>
 80066f8:	1b58      	subs	r0, r3, r5
 80066fa:	bd30      	pop	{r4, r5, pc}

080066fc <memcpy>:
 80066fc:	440a      	add	r2, r1
 80066fe:	4291      	cmp	r1, r2
 8006700:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006704:	d100      	bne.n	8006708 <memcpy+0xc>
 8006706:	4770      	bx	lr
 8006708:	b510      	push	{r4, lr}
 800670a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800670e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006712:	4291      	cmp	r1, r2
 8006714:	d1f9      	bne.n	800670a <memcpy+0xe>
 8006716:	bd10      	pop	{r4, pc}

08006718 <memset>:
 8006718:	4402      	add	r2, r0
 800671a:	4603      	mov	r3, r0
 800671c:	4293      	cmp	r3, r2
 800671e:	d100      	bne.n	8006722 <memset+0xa>
 8006720:	4770      	bx	lr
 8006722:	f803 1b01 	strb.w	r1, [r3], #1
 8006726:	e7f9      	b.n	800671c <memset+0x4>

08006728 <_init>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr

08006734 <_fini>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	bf00      	nop
 8006738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673a:	bc08      	pop	{r3}
 800673c:	469e      	mov	lr, r3
 800673e:	4770      	bx	lr
