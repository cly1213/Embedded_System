
009_Queue_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800926c  0800926c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800926c  0800926c  0001926c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009274  08009274  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009274  08009274  00019274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009278  08009278  00019278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800927c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00019318  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200193a4  200193a4  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000175f4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037f5  00000000  00000000  000376b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d8  00000000  00000000  0003c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250e5  00000000  00000000  0003d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019124  00000000  00000000  000626a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db6b4  00000000  00000000  0007b7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156e7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d3c  00000000  00000000  00156ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dc0 	.word	0x08008dc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08008dc0 	.word	0x08008dc0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e00e      	b.n	80005ce <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <led_effect_stop+0x3c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	2103      	movs	r1, #3
 80005c4:	f006 fade 	bl	8006b84 <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dded      	ble.n	80005b0 <led_effect_stop+0xc>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000130 	.word	0x20000130

080005e4 <led_effect>:

void led_effect(int n )
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005ec:	f7ff ffda 	bl	80005a4 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <led_effect+0x34>)
 80005f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005fa:	f005 fbc5 	bl	8005d88 <xTaskGetTickCount>
 80005fe:	4602      	mov	r2, r0
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4620      	mov	r0, r4
 800060c:	f006 faba 	bl	8006b84 <xTimerGenericCommand>

}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	20000130 	.word	0x20000130

0800061c <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <turn_off_all_leds+0x38>)
 8000628:	f001 ff1a 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <turn_off_all_leds+0x38>)
 8000634:	f001 ff14 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <turn_off_all_leds+0x38>)
 8000640:	f001 ff0e 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4802      	ldr	r0, [pc, #8]	; (8000654 <turn_off_all_leds+0x38>)
 800064c:	f001 ff08 	bl	8002460 <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020c00 	.word	0x40020c00

08000658 <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <turn_on_all_leds+0x38>)
 8000664:	f001 fefc 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <turn_on_all_leds+0x38>)
 8000670:	f001 fef6 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <turn_on_all_leds+0x38>)
 800067c:	f001 fef0 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <turn_on_all_leds+0x38>)
 8000688:	f001 feea 	bl	8002460 <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <turn_on_odd_leds+0x38>)
 80006a0:	f001 fede 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <turn_on_odd_leds+0x38>)
 80006ac:	f001 fed8 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <turn_on_odd_leds+0x38>)
 80006b8:	f001 fed2 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <turn_on_odd_leds+0x38>)
 80006c4:	f001 fecc 	bl	8002460 <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020c00 	.word	0x40020c00

080006d0 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <turn_on_even_leds+0x38>)
 80006dc:	f001 fec0 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <turn_on_even_leds+0x38>)
 80006e8:	f001 feba 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <turn_on_even_leds+0x38>)
 80006f4:	f001 feb4 	bl	8002460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <turn_on_even_leds+0x38>)
 8000700:	f001 feae 	bl	8002460 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020c00 	.word	0x40020c00

0800070c <LED_control>:

void LED_control( int value )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e014      	b.n	8000744 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 800071a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	b299      	uxth	r1, r3
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	fa42 f303 	asr.w	r3, r2, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <LED_control+0x48>)
 800073a:	f001 fe91 	bl	8002460 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b03      	cmp	r3, #3
 8000748:	dde7      	ble.n	800071a <LED_control+0xe>
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020c00 	.word	0x40020c00

08000758 <LED_effect1>:


void LED_effect1(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LED_effect1+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <LED_effect1+0x28>)
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LED_effect1+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <LED_effect1+0x1e>
 8000770:	f7ff ff54 	bl	800061c <turn_off_all_leds>
}
 8000774:	e001      	b.n	800077a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000776:	f7ff ff6f 	bl	8000658 <turn_on_all_leds>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <LED_effect2>:


void LED_effect2(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <LED_effect2+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <LED_effect2+0x28>)
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LED_effect2+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <LED_effect2+0x1e>
 800079c:	f7ff ff98 	bl	80006d0 <turn_on_even_leds>
}
 80007a0:	e001      	b.n	80007a6 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007a2:	f7ff ff77 	bl	8000694 <turn_on_odd_leds>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000004 	.word	0x20000004

080007b0 <LED_effect3>:

void LED_effect3(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <LED_effect3+0x2c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <LED_effect3+0x2c>)
 80007bc:	600a      	str	r2, [r1, #0]
 80007be:	425a      	negs	r2, r3
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	f002 0203 	and.w	r2, r2, #3
 80007c8:	bf58      	it	pl
 80007ca:	4253      	negpl	r3, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff9a 	bl	800070c <LED_control>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000a8 	.word	0x200000a8

080007e0 <LED_effect4>:


void LED_effect4(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <LED_effect4+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <LED_effect4+0x2c>)
 80007ec:	600a      	str	r2, [r1, #0]
 80007ee:	425a      	negs	r2, r3
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	f002 0203 	and.w	r2, r2, #3
 80007f8:	bf58      	it	pl
 80007fa:	4253      	negpl	r3, r2
 80007fc:	2208      	movs	r2, #8
 80007fe:	fa42 f303 	asr.w	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff82 	bl	800070c <LED_control>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000ac 	.word	0x200000ac

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f001 fad1 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f911 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f9e1 	bl	8000be4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000822:	f000 f98f 	bl	8000b44 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000826:	f000 f9b3 	bl	8000b90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x1cc>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2302      	movs	r3, #2
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	22fa      	movs	r2, #250	; 0xfa
 8000836:	496a      	ldr	r1, [pc, #424]	; (80009e0 <main+0x1d0>)
 8000838:	486a      	ldr	r0, [pc, #424]	; (80009e4 <main+0x1d4>)
 800083a:	f005 f863 	bl	8005904 <xTaskCreate>
 800083e:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00a      	beq.n	800085c <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000858:	bf00      	nop
 800085a:	e7fe      	b.n	800085a <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 800085c:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <main+0x1d8>)
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2300      	movs	r3, #0
 8000866:	22fa      	movs	r2, #250	; 0xfa
 8000868:	4960      	ldr	r1, [pc, #384]	; (80009ec <main+0x1dc>)
 800086a:	4861      	ldr	r0, [pc, #388]	; (80009f0 <main+0x1e0>)
 800086c:	f005 f84a 	bl	8005904 <xTaskCreate>
 8000870:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d00a      	beq.n	800088e <main+0x7e>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	61bb      	str	r3, [r7, #24]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <main+0x7c>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <main+0x1e4>)
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	2302      	movs	r3, #2
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	22fa      	movs	r2, #250	; 0xfa
 800089a:	4957      	ldr	r1, [pc, #348]	; (80009f8 <main+0x1e8>)
 800089c:	4857      	ldr	r0, [pc, #348]	; (80009fc <main+0x1ec>)
 800089e:	f005 f831 	bl	8005904 <xTaskCreate>
 80008a2:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d00a      	beq.n	80008c0 <main+0xb0>
        __asm volatile
 80008aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ae:	f383 8811 	msr	BASEPRI, r3
 80008b2:	f3bf 8f6f 	isb	sy
 80008b6:	f3bf 8f4f 	dsb	sy
 80008ba:	617b      	str	r3, [r7, #20]
    }
 80008bc:	bf00      	nop
 80008be:	e7fe      	b.n	80008be <main+0xae>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <main+0x1f0>)
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	2302      	movs	r3, #2
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	22fa      	movs	r2, #250	; 0xfa
 80008cc:	494d      	ldr	r1, [pc, #308]	; (8000a04 <main+0x1f4>)
 80008ce:	484e      	ldr	r0, [pc, #312]	; (8000a08 <main+0x1f8>)
 80008d0:	f005 f818 	bl	8005904 <xTaskCreate>
 80008d4:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d00a      	beq.n	80008f2 <main+0xe2>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	613b      	str	r3, [r7, #16]
    }
 80008ee:	bf00      	nop
 80008f0:	e7fe      	b.n	80008f0 <main+0xe0>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008f2:	4b46      	ldr	r3, [pc, #280]	; (8000a0c <main+0x1fc>)
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2302      	movs	r3, #2
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	22fa      	movs	r2, #250	; 0xfa
 80008fe:	4944      	ldr	r1, [pc, #272]	; (8000a10 <main+0x200>)
 8000900:	4844      	ldr	r0, [pc, #272]	; (8000a14 <main+0x204>)
 8000902:	f004 ffff 	bl	8005904 <xTaskCreate>
 8000906:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d00a      	beq.n	8000924 <main+0x114>
        __asm volatile
 800090e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000912:	f383 8811 	msr	BASEPRI, r3
 8000916:	f3bf 8f6f 	isb	sy
 800091a:	f3bf 8f4f 	dsb	sy
 800091e:	60fb      	str	r3, [r7, #12]
    }
 8000920:	bf00      	nop
 8000922:	e7fe      	b.n	8000922 <main+0x112>

	q_data = xQueueCreate (10, sizeof(char));
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	200a      	movs	r0, #10
 800092a:	f004 fa9f 	bl	8004e6c <xQueueGenericCreate>
 800092e:	4603      	mov	r3, r0
 8000930:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <main+0x208>)
 8000932:	6013      	str	r3, [r2, #0]

	configASSERT(q_data != NULL);
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <main+0x208>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10a      	bne.n	8000952 <main+0x142>
        __asm volatile
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	60bb      	str	r3, [r7, #8]
    }
 800094e:	bf00      	nop
 8000950:	e7fe      	b.n	8000950 <main+0x140>

	q_print = xQueueCreate (10, sizeof(size_t));
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	200a      	movs	r0, #10
 8000958:	f004 fa88 	bl	8004e6c <xQueueGenericCreate>
 800095c:	4603      	mov	r3, r0
 800095e:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <main+0x20c>)
 8000960:	6013      	str	r3, [r2, #0]

	configASSERT(q_print != NULL);
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <main+0x20c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10a      	bne.n	8000980 <main+0x170>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	607b      	str	r3, [r7, #4]
    }
 800097c:	bf00      	nop
 800097e:	e7fe      	b.n	800097e <main+0x16e>


	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
 8000984:	e013      	b.n	80009ae <main+0x19e>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	3301      	adds	r3, #1
 800098a:	461a      	mov	r2, r3
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <main+0x210>)
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000998:	4822      	ldr	r0, [pc, #136]	; (8000a24 <main+0x214>)
 800099a:	f006 f897 	bl	8006acc <xTimerCreate>
 800099e:	4602      	mov	r2, r0
 80009a0:	4921      	ldr	r1, [pc, #132]	; (8000a28 <main+0x218>)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	3301      	adds	r3, #1
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	dde8      	ble.n	8000986 <main+0x176>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <main+0x21c>)
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009c0:	481b      	ldr	r0, [pc, #108]	; (8000a30 <main+0x220>)
 80009c2:	f006 f883 	bl	8006acc <xTimerCreate>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <main+0x224>)
 80009ca:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	491a      	ldr	r1, [pc, #104]	; (8000a38 <main+0x228>)
 80009d0:	481a      	ldr	r0, [pc, #104]	; (8000a3c <main+0x22c>)
 80009d2:	f003 f996 	bl	8003d02 <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80009d6:	f005 f8db 	bl	8005b90 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009da:	e7fe      	b.n	80009da <main+0x1ca>
 80009dc:	20000118 	.word	0x20000118
 80009e0:	08008dd8 	.word	0x08008dd8
 80009e4:	08001545 	.word	0x08001545
 80009e8:	20000114 	.word	0x20000114
 80009ec:	08008de4 	.word	0x08008de4
 80009f0:	08001c4d 	.word	0x08001c4d
 80009f4:	2000011c 	.word	0x2000011c
 80009f8:	08008df0 	.word	0x08008df0
 80009fc:	08001c0d 	.word	0x08001c0d
 8000a00:	20000120 	.word	0x20000120
 8000a04:	08008dfc 	.word	0x08008dfc
 8000a08:	0800162d 	.word	0x0800162d
 8000a0c:	20000124 	.word	0x20000124
 8000a10:	08008e08 	.word	0x08008e08
 8000a14:	080017a1 	.word	0x080017a1
 8000a18:	20000128 	.word	0x20000128
 8000a1c:	2000012c 	.word	0x2000012c
 8000a20:	08000eb5 	.word	0x08000eb5
 8000a24:	08008e14 	.word	0x08008e14
 8000a28:	20000130 	.word	0x20000130
 8000a2c:	08000ea1 	.word	0x08000ea1
 8000a30:	08008e20 	.word	0x08008e20
 8000a34:	20000140 	.word	0x20000140
 8000a38:	20000144 	.word	0x20000144
 8000a3c:	200000d0 	.word	0x200000d0

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b098      	sub	sp, #96	; 0x60
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f007 f844 	bl	8007adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <SystemClock_Config+0x100>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a2a      	ldr	r2, [pc, #168]	; (8000b40 <SystemClock_Config+0x100>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <SystemClock_Config+0x100>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ac6:	2332      	movs	r3, #50	; 0x32
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fcdc 	bl	8002494 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ae2:	f000 fa75 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 ff3d 	bl	8002984 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b10:	f000 fa5e 	bl	8000fd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 f980 	bl	8002e28 <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b2e:	f000 fa4f 	bl	8000fd0 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3760      	adds	r7, #96	; 0x60
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <MX_RTC_Init+0x48>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b56:	227f      	movs	r2, #127	; 0x7f
 8000b58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b5c:	22ff      	movs	r2, #255	; 0xff
 8000b5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b74:	f002 fa3a 	bl	8002fec <HAL_RTC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b7e:	f000 fa27 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000b0 	.word	0x200000b0
 8000b8c:	40002800 	.word	0x40002800

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_USART2_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f002 ffbc 	bl	8003b44 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f9fd 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000d0 	.word	0x200000d0
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4ba2      	ldr	r3, [pc, #648]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4aa1      	ldr	r2, [pc, #644]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b9f      	ldr	r3, [pc, #636]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b9b      	ldr	r3, [pc, #620]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a9a      	ldr	r2, [pc, #616]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b98      	ldr	r3, [pc, #608]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b94      	ldr	r3, [pc, #592]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a93      	ldr	r2, [pc, #588]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b91      	ldr	r3, [pc, #580]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b8d      	ldr	r3, [pc, #564]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a8c      	ldr	r2, [pc, #560]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b8a      	ldr	r3, [pc, #552]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b86      	ldr	r3, [pc, #536]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a85      	ldr	r2, [pc, #532]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a7e      	ldr	r2, [pc, #504]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b7c      	ldr	r3, [pc, #496]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4879      	ldr	r0, [pc, #484]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000ca8:	f001 fbda 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4877      	ldr	r0, [pc, #476]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000cb2:	f001 fbd5 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000cbc:	4875      	ldr	r0, [pc, #468]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000cbe:	f001 fbcf 	bl	8002460 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	486c      	ldr	r0, [pc, #432]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000cda:	f001 fa25 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4866      	ldr	r0, [pc, #408]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000cf6:	f001 fa17 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	485e      	ldr	r0, [pc, #376]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000d16:	f001 fa07 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	485a      	ldr	r0, [pc, #360]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d30:	f001 f9fa 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d34:	2310      	movs	r3, #16
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d44:	2306      	movs	r3, #6
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4852      	ldr	r0, [pc, #328]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d50:	f001 f9ea 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d54:	23e0      	movs	r3, #224	; 0xe0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d64:	2305      	movs	r3, #5
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	484a      	ldr	r0, [pc, #296]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d70:	f001 f9da 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d74:	2304      	movs	r3, #4
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4845      	ldr	r0, [pc, #276]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000d88:	f001 f9ce 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	483c      	ldr	r0, [pc, #240]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000daa:	f001 f9bd 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dae:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000db2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4833      	ldr	r0, [pc, #204]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000dc8:	f001 f9ae 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dcc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dde:	2306      	movs	r3, #6
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4829      	ldr	r0, [pc, #164]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000dea:	f001 f99d 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4825      	ldr	r0, [pc, #148]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000e04:	f001 f990 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	481c      	ldr	r0, [pc, #112]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000e26:	f001 f97f 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000e3e:	f001 f973 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e54:	2304      	movs	r3, #4
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480f      	ldr	r0, [pc, #60]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000e60:	f001 f962 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000e7a:	f001 f955 	bl	8002128 <HAL_GPIO_Init>

}
 8000e7e:	bf00      	nop
 8000e80:	3730      	adds	r7, #48	; 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000ea8:	f000 f898 	bl	8000fdc <show_time_date_itm>

}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f006 f96a 	bl	8007196 <pvTimerGetTimerID>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60fb      	str	r3, [r7, #12]

	 switch(id)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d816      	bhi.n	8000efc <led_effect_callback+0x48>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <led_effect_callback+0x20>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000eeb 	.word	0x08000eeb
 8000edc:	08000ef1 	.word	0x08000ef1
 8000ee0:	08000ef7 	.word	0x08000ef7
	 {
	 case 1 :
		 LED_effect1();
 8000ee4:	f7ff fc38 	bl	8000758 <LED_effect1>
		 break;
 8000ee8:	e008      	b.n	8000efc <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000eea:	f7ff fc4b 	bl	8000784 <LED_effect2>
		 break;
 8000eee:	e005      	b.n	8000efc <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000ef0:	f7ff fc5e 	bl	80007b0 <LED_effect3>
		 break;
 8000ef4:	e002      	b.n	8000efc <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000ef6:	f7ff fc73 	bl	80007e0 <LED_effect4>
	 }


}
 8000efa:	e7ff      	b.n	8000efc <led_effect_callback+0x48>
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e002      	b.n	8000f18 <HAL_UART_RxCpltCallback+0x14>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f1e:	d3f8      	bcc.n	8000f12 <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 fc68 	bl	80057fa <xQueueIsQueueFullFromISR>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d107      	bne.n	8000f40 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	2200      	movs	r2, #0
 8000f38:	4919      	ldr	r1, [pc, #100]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f3a:	f004 f917 	bl	800516c <xQueueGenericSendFromISR>
 8000f3e:	e013      	b.n	8000f68 <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\n')
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d10e      	bne.n	8000f68 <HAL_UART_RxCpltCallback+0x64>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f107 010b 	add.w	r1, r7, #11
 8000f52:	2200      	movs	r2, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fa93 	bl	8005480 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_UART_RxCpltCallback+0x98>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2200      	movs	r2, #0
 8000f62:	490f      	ldr	r1, [pc, #60]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f64:	f004 f902 	bl	800516c <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b0a      	cmp	r3, #10
 8000f70:	d10a      	bne.n	8000f88 <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_UART_RxCpltCallback+0xa0>)
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	f005 fc08 	bl	8006798 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4905      	ldr	r1, [pc, #20]	; (8000fa0 <HAL_UART_RxCpltCallback+0x9c>)
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <HAL_UART_RxCpltCallback+0xa4>)
 8000f8e:	f002 feb8 	bl	8003d02 <HAL_UART_Receive_IT>


}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000128 	.word	0x20000128
 8000fa0:	20000144 	.word	0x20000144
 8000fa4:	20000114 	.word	0x20000114
 8000fa8:	200000d0 	.word	0x200000d0

08000fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fbe:	f000 ff1f 	bl	8001e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40001000 	.word	0x40001000

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fd76 	bl	8007adc <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2214      	movs	r2, #20
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fd70 	bl	8007adc <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	4815      	ldr	r0, [pc, #84]	; (8001058 <show_time_date_itm+0x7c>)
 8001004:	f002 f902 	bl	800320c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <show_time_date_itm+0x7c>)
 8001012:	f002 f9dd 	bl	80033d0 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <show_time_date_itm+0x44>
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <show_time_date_itm+0x80>)
 800101e:	e000      	b.n	8001022 <show_time_date_itm+0x46>
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <show_time_date_itm+0x84>)
 8001022:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	797b      	ldrb	r3, [r7, #5]
 800102a:	461a      	mov	r2, r3
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	4618      	mov	r0, r3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4603      	mov	r3, r0
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <show_time_date_itm+0x88>)
 8001038:	f006 fd58 	bl	8007aec <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 800103c:	7e7b      	ldrb	r3, [r7, #25]
 800103e:	4619      	mov	r1, r3
 8001040:	7ebb      	ldrb	r3, [r7, #26]
 8001042:	461a      	mov	r2, r3
 8001044:	7efb      	ldrb	r3, [r7, #27]
 8001046:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <show_time_date_itm+0x8c>)
 800104c:	f006 fd4e 	bl	8007aec <iprintf>

 }
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000b0 	.word	0x200000b0
 800105c:	08008e34 	.word	0x08008e34
 8001060:	08008e38 	.word	0x08008e38
 8001064:	08008e3c 	.word	0x08008e3c
 8001068:	08008e50 	.word	0x08008e50

0800106c <show_time_date>:

void show_time_date(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2204      	movs	r2, #4
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f006 fd2e 	bl	8007adc <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2214      	movs	r2, #20
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f006 fd28 	bl	8007adc <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	4821      	ldr	r0, [pc, #132]	; (8001118 <show_time_date+0xac>)
 8001094:	f002 f8ba 	bl	800320c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	481d      	ldr	r0, [pc, #116]	; (8001118 <show_time_date+0xac>)
 80010a2:	f002 f995 	bl	80033d0 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <show_time_date+0x44>
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <show_time_date+0xb0>)
 80010ae:	e000      	b.n	80010b2 <show_time_date+0x46>
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <show_time_date+0xb4>)
 80010b2:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	797b      	ldrb	r3, [r7, #5]
 80010ba:	461a      	mov	r2, r3
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	4619      	mov	r1, r3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	9101      	str	r1, [sp, #4]
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <show_time_date+0xb8>)
 80010cc:	4916      	ldr	r1, [pc, #88]	; (8001128 <show_time_date+0xbc>)
 80010ce:	4817      	ldr	r0, [pc, #92]	; (800112c <show_time_date+0xc0>)
 80010d0:	f006 fd24 	bl	8007b1c <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <show_time_date+0xc4>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	2300      	movs	r3, #0
 80010da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010de:	4915      	ldr	r1, [pc, #84]	; (8001134 <show_time_date+0xc8>)
 80010e0:	f003 ff46 	bl	8004f70 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80010e4:	7e7b      	ldrb	r3, [r7, #25]
 80010e6:	461a      	mov	r2, r3
 80010e8:	7ebb      	ldrb	r3, [r7, #26]
 80010ea:	4619      	mov	r1, r3
 80010ec:	7efb      	ldrb	r3, [r7, #27]
 80010ee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	460b      	mov	r3, r1
 80010f6:	4910      	ldr	r1, [pc, #64]	; (8001138 <show_time_date+0xcc>)
 80010f8:	4810      	ldr	r0, [pc, #64]	; (800113c <show_time_date+0xd0>)
 80010fa:	f006 fd0f 	bl	8007b1c <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <show_time_date+0xc4>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <show_time_date+0xd4>)
 800110a:	f003 ff31 	bl	8004f70 <xQueueGenericSend>
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000b0 	.word	0x200000b0
 800111c:	08008e34 	.word	0x08008e34
 8001120:	08008e38 	.word	0x08008e38
 8001124:	08008e60 	.word	0x08008e60
 8001128:	08008e74 	.word	0x08008e74
 800112c:	20000148 	.word	0x20000148
 8001130:	2000012c 	.word	0x2000012c
 8001134:	20000008 	.word	0x20000008
 8001138:	08008e50 	.word	0x08008e50
 800113c:	20000170 	.word	0x20000170
 8001140:	2000000c 	.word	0x2000000c

08001144 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 800115e:	2200      	movs	r2, #0
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <rtc_configure_time+0x2c>)
 8001164:	f001 ffb8 	bl	80030d8 <HAL_RTC_SetTime>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200000b0 	.word	0x200000b0

08001174 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <rtc_configure_date+0x1c>)
 8001182:	f002 f8a1 	bl	80032c8 <HAL_RTC_SetDate>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000b0 	.word	0x200000b0

08001194 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	if(time){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00d      	beq.n	80011c0 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b0c      	cmp	r3, #12
 80011aa:	d807      	bhi.n	80011bc <validate_rtc_information+0x28>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	2b3b      	cmp	r3, #59	; 0x3b
 80011b2:	d803      	bhi.n	80011bc <validate_rtc_information+0x28>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	789b      	ldrb	r3, [r3, #2]
 80011b8:	2b3b      	cmp	r3, #59	; 0x3b
 80011ba:	d901      	bls.n	80011c0 <validate_rtc_information+0x2c>
			return 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	e015      	b.n	80011ec <validate_rtc_information+0x58>
	}

	if(date){
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d011      	beq.n	80011ea <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	789b      	ldrb	r3, [r3, #2]
 80011ca:	2b1f      	cmp	r3, #31
 80011cc:	d80b      	bhi.n	80011e6 <validate_rtc_information+0x52>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	d807      	bhi.n	80011e6 <validate_rtc_information+0x52>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	78db      	ldrb	r3, [r3, #3]
 80011da:	2b63      	cmp	r3, #99	; 0x63
 80011dc:	d803      	bhi.n	80011e6 <validate_rtc_information+0x52>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d901      	bls.n	80011ea <validate_rtc_information+0x56>
			return 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <validate_rtc_information+0x58>
	}

	return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_RTC_MspInit+0x4c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d111      	bne.n	800128c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001268:	2302      	movs	r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800126c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001270:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fdd6 	bl	8002e28 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001282:	f7ff fea5 	bl	8000fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_RTC_MspInit+0x50>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40002800 	.word	0x40002800
 8001298:	42470e3c 	.word	0x42470e3c

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_UART_MspInit+0x94>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d133      	bne.n	8001326 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_UART_MspInit+0x98>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001306:	2307      	movs	r3, #7
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <HAL_UART_MspInit+0x9c>)
 8001312:	f000 ff09 	bl	8002128 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2106      	movs	r1, #6
 800131a:	2026      	movs	r0, #38	; 0x26
 800131c:	f000 fe48 	bl	8001fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001320:	2026      	movs	r0, #38	; 0x26
 8001322:	f000 fe61 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40004400 	.word	0x40004400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	2036      	movs	r0, #54	; 0x36
 8001352:	f000 fe2d 	bl	8001fb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001356:	2036      	movs	r0, #54	; 0x36
 8001358:	f000 fe46 	bl	8001fe8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_InitTick+0xa4>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_InitTick+0xa4>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6413      	str	r3, [r2, #64]	; 0x40
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_InitTick+0xa4>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001378:	f107 0210 	add.w	r2, r7, #16
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fd1e 	bl	8002dc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001388:	f001 fcf4 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 800138c:	4603      	mov	r3, r0
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <HAL_InitTick+0xa8>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9b      	lsrs	r3, r3, #18
 800139c:	3b01      	subs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_InitTick+0xac>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_InitTick+0xb0>)
 80013a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_InitTick+0xac>)
 80013a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_InitTick+0xac>)
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_InitTick+0xac>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_InitTick+0xac>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <HAL_InitTick+0xac>)
 80013c2:	f002 f911 	bl	80035e8 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d104      	bne.n	80013d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <HAL_InitTick+0xac>)
 80013ce:	f002 f965 	bl	800369c <HAL_TIM_Base_Start_IT>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3730      	adds	r7, #48	; 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	20000198 	.word	0x20000198
 80013ec:	40001000 	.word	0x40001000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <USART2_IRQHandler+0x10>)
 8001422:	f002 fc9f 	bl	8003d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200000d0 	.word	0x200000d0

08001430 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM6_DAC_IRQHandler+0x10>)
 8001436:	f002 f9a1 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000198 	.word	0x20000198

08001444 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e00a      	b.n	800146c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001456:	f3af 8000 	nop.w
 800145a:	4601      	mov	r1, r0
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	b2ca      	uxtb	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbf0      	blt.n	8001456 <_read+0x12>
	}

return len;
 8001474:	687b      	ldr	r3, [r7, #4]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	e009      	b.n	80014a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbf1      	blt.n	8001490 <_write+0x12>
	}
	return len;
 80014ac:	687b      	ldr	r3, [r7, #4]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_close>:

int _close(int file)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
	return -1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014de:	605a      	str	r2, [r3, #4]
	return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_isatty>:

int _isatty(int file)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
	return 1;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
	return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <menu_task+0xd0>)
 800154e:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <menu_task+0xd4>)
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	f107 0108 	add.w	r1, r7, #8
 8001558:	2300      	movs	r3, #0
 800155a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800155e:	f003 fd07 	bl	8004f70 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800156a:	9200      	str	r2, [sp, #0]
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2000      	movs	r0, #0
 8001572:	f004 ffb1 	bl	80064d8 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d133      	bne.n	80015ea <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	3b30      	subs	r3, #48	; 0x30
 8001588:	613b      	str	r3, [r7, #16]
			switch(option)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d035      	beq.n	80015fc <menu_task+0xb8>
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	2b02      	cmp	r3, #2
 8001594:	dc20      	bgt.n	80015d8 <menu_task+0x94>
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <menu_task+0x60>
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d00d      	beq.n	80015be <menu_task+0x7a>
 80015a2:	e019      	b.n	80015d8 <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <menu_task+0xd8>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <menu_task+0xdc>)
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	f005 f80e 	bl	80065d8 <xTaskGenericNotify>
					break;
 80015bc:	e01f      	b.n	80015fe <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <menu_task+0xd8>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <menu_task+0xe0>)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2300      	movs	r3, #0
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	f005 f801 	bl	80065d8 <xTaskGenericNotify>
					break;
 80015d6:	e012      	b.n	80015fe <menu_task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <menu_task+0xd4>)
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015e2:	4911      	ldr	r1, [pc, #68]	; (8001628 <menu_task+0xe4>)
 80015e4:	f003 fcc4 	bl	8004f70 <xQueueGenericSend>
					continue;
 80015e8:	e012      	b.n	8001610 <menu_task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <menu_task+0xd4>)
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <menu_task+0xe4>)
 80015f6:	f003 fcbb 	bl	8004f70 <xQueueGenericSend>
			continue;
 80015fa:	e009      	b.n	8001610 <menu_task+0xcc>
					break;
 80015fc:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2000      	movs	r0, #0
 800160c:	f004 ff64 	bl	80064d8 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001610:	e79e      	b.n	8001550 <menu_task+0xc>
 8001612:	bf00      	nop
 8001614:	08008ea4 	.word	0x08008ea4
 8001618:	2000012c 	.word	0x2000012c
 800161c:	20000145 	.word	0x20000145
 8001620:	20000120 	.word	0x20000120
 8001624:	20000124 	.word	0x20000124
 8001628:	20000014 	.word	0x20000014

0800162c <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af02      	add	r7, sp, #8
 8001632:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8001634:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <led_task+0x104>)
 8001636:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2300      	movs	r3, #0
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2000      	movs	r0, #0
 8001646:	f004 ff47 	bl	80064d8 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <led_task+0x108>)
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	f107 010c 	add.w	r1, r7, #12
 8001652:	2300      	movs	r3, #0
 8001654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001658:	f003 fc8a 	bl	8004f70 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001664:	9200      	str	r2, [sp, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	2000      	movs	r0, #0
 800166c:	f004 ff34 	bl	80064d8 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d843      	bhi.n	8001704 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	492e      	ldr	r1, [pc, #184]	; (8001738 <led_task+0x10c>)
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fda5 	bl	80001d0 <strcmp>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <led_task+0x66>
				led_effect_stop();
 800168c:	f7fe ff8a 	bl	80005a4 <led_effect_stop>
 8001690:	e040      	b.n	8001714 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	4929      	ldr	r1, [pc, #164]	; (800173c <led_task+0x110>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fd9a 	bl	80001d0 <strcmp>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d103      	bne.n	80016aa <led_task+0x7e>
				led_effect(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7fe ff9e 	bl	80005e4 <led_effect>
 80016a8:	e034      	b.n	8001714 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4924      	ldr	r1, [pc, #144]	; (8001740 <led_task+0x114>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fd8e 	bl	80001d0 <strcmp>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <led_task+0x96>
				led_effect(2);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f7fe ff92 	bl	80005e4 <led_effect>
 80016c0:	e028      	b.n	8001714 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	491f      	ldr	r1, [pc, #124]	; (8001744 <led_task+0x118>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fd82 	bl	80001d0 <strcmp>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <led_task+0xae>
				led_effect(3);
 80016d2:	2003      	movs	r0, #3
 80016d4:	f7fe ff86 	bl	80005e4 <led_effect>
 80016d8:	e01c      	b.n	8001714 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	491a      	ldr	r1, [pc, #104]	; (8001748 <led_task+0x11c>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fd76 	bl	80001d0 <strcmp>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d103      	bne.n	80016f2 <led_task+0xc6>
				led_effect(4);
 80016ea:	2004      	movs	r0, #4
 80016ec:	f7fe ff7a 	bl	80005e4 <led_effect>
 80016f0:	e010      	b.n	8001714 <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <led_task+0x108>)
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	2300      	movs	r3, #0
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016fc:	4913      	ldr	r1, [pc, #76]	; (800174c <led_task+0x120>)
 80016fe:	f003 fc37 	bl	8004f70 <xQueueGenericSend>
 8001702:	e007      	b.n	8001714 <led_task+0xe8>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <led_task+0x108>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800170e:	490f      	ldr	r1, [pc, #60]	; (800174c <led_task+0x120>)
 8001710:	f003 fc2e 	bl	8004f70 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <led_task+0x124>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <led_task+0x128>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	f004 ff56 	bl	80065d8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800172c:	e784      	b.n	8001638 <led_task+0xc>
 800172e:	bf00      	nop
 8001730:	08008f4c 	.word	0x08008f4c
 8001734:	2000012c 	.word	0x2000012c
 8001738:	08008fc4 	.word	0x08008fc4
 800173c:	08008fcc 	.word	0x08008fcc
 8001740:	08008fd0 	.word	0x08008fd0
 8001744:	08008fd4 	.word	0x08008fd4
 8001748:	08008fd8 	.word	0x08008fd8
 800174c:	20000014 	.word	0x20000014
 8001750:	20000145 	.word	0x20000145
 8001754:	20000118 	.word	0x20000118

08001758 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	dd0f      	ble.n	8001788 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3301      	adds	r3, #1
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3b30      	subs	r3, #48	; 0x30
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e003      	b.n	8001790 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3b30      	subs	r3, #48	; 0x30
 800178e:	60fb      	str	r3, [r7, #12]

	return value;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	b2db      	uxtb	r3, r3

}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <rtc_task>:

void rtc_task(void *param)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b09b      	sub	sp, #108	; 0x6c
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 80017a8:	4bb2      	ldr	r3, [pc, #712]	; (8001a74 <rtc_task+0x2d4>)
 80017aa:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 80017ac:	4bb2      	ldr	r3, [pc, #712]	; (8001a78 <rtc_task+0x2d8>)
 80017ae:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 80017b0:	4bb2      	ldr	r3, [pc, #712]	; (8001a7c <rtc_task+0x2dc>)
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 80017b4:	4bb2      	ldr	r3, [pc, #712]	; (8001a80 <rtc_task+0x2e0>)
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 80017b8:	4bb2      	ldr	r3, [pc, #712]	; (8001a84 <rtc_task+0x2e4>)
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 80017bc:	4bb2      	ldr	r3, [pc, #712]	; (8001a88 <rtc_task+0x2e8>)
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 80017c0:	4bb2      	ldr	r3, [pc, #712]	; (8001a8c <rtc_task+0x2ec>)
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80017c4:	4bb2      	ldr	r3, [pc, #712]	; (8001a90 <rtc_task+0x2f0>)
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 80017c8:	4bb2      	ldr	r3, [pc, #712]	; (8001a94 <rtc_task+0x2f4>)
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 80017cc:	4bb2      	ldr	r3, [pc, #712]	; (8001a98 <rtc_task+0x2f8>)
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 80017d0:	4bb2      	ldr	r3, [pc, #712]	; (8001a9c <rtc_task+0x2fc>)
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	2000      	movs	r0, #0
 80017e2:	f004 fe79 	bl	80064d8 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 80017e6:	4bae      	ldr	r3, [pc, #696]	; (8001aa0 <rtc_task+0x300>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80017ee:	2300      	movs	r3, #0
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f4:	f003 fbbc 	bl	8004f70 <xQueueGenericSend>
		show_time_date();
 80017f8:	f7ff fc38 	bl	800106c <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 80017fc:	4ba8      	ldr	r3, [pc, #672]	; (8001aa0 <rtc_task+0x300>)
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001804:	2300      	movs	r3, #0
 8001806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800180a:	f003 fbb1 	bl	8004f70 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 800180e:	bf00      	nop
 8001810:	e1e1      	b.n	8001bd6 <rtc_task+0x436>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800181a:	9200      	str	r2, [sp, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2000      	movs	r0, #0
 8001822:	f004 fe59 	bl	80064d8 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 800182a:	4b9e      	ldr	r3, [pc, #632]	; (8001aa4 <rtc_task+0x304>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	3b02      	subs	r3, #2
 8001830:	2b03      	cmp	r3, #3
 8001832:	f200 81d0 	bhi.w	8001bd6 <rtc_task+0x436>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <rtc_task+0x9c>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800184d 	.word	0x0800184d
 8001840:	080018ff 	.word	0x080018ff
 8001844:	080019ed 	.word	0x080019ed
 8001848:	08001b53 	.word	0x08001b53
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 800184c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d148      	bne.n	80018e6 <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 8001854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3b30      	subs	r3, #48	; 0x30
 800185a:	653b      	str	r3, [r7, #80]	; 0x50
 800185c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800185e:	2b03      	cmp	r3, #3
 8001860:	d835      	bhi.n	80018ce <rtc_task+0x12e>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <rtc_task+0xc8>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	08001879 	.word	0x08001879
 800186c:	08001893 	.word	0x08001893
 8001870:	080018ad 	.word	0x080018ad
 8001874:	080018c7 	.word	0x080018c7
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001878:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <rtc_task+0x304>)
 800187a:	2203      	movs	r2, #3
 800187c:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 800187e:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <rtc_task+0x300>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001886:	2300      	movs	r3, #0
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800188c:	f003 fb70 	bl	8004f70 <xQueueGenericSend>
							break;
 8001890:	e034      	b.n	80018fc <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 8001892:	4b84      	ldr	r3, [pc, #528]	; (8001aa4 <rtc_task+0x304>)
 8001894:	2204      	movs	r2, #4
 8001896:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001898:	4b81      	ldr	r3, [pc, #516]	; (8001aa0 <rtc_task+0x300>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80018a0:	2300      	movs	r3, #0
 80018a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018a6:	f003 fb63 	bl	8004f70 <xQueueGenericSend>
							break;
 80018aa:	e027      	b.n	80018fc <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 80018ac:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <rtc_task+0x304>)
 80018ae:	2205      	movs	r2, #5
 80018b0:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 80018b2:	4b7b      	ldr	r3, [pc, #492]	; (8001aa0 <rtc_task+0x300>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018ba:	2300      	movs	r3, #0
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c0:	f003 fb56 	bl	8004f70 <xQueueGenericSend>
							break;
 80018c4:	e01a      	b.n	80018fc <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 80018c6:	4b77      	ldr	r3, [pc, #476]	; (8001aa4 <rtc_task+0x304>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
							break;
 80018cc:	e016      	b.n	80018fc <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 80018ce:	4b75      	ldr	r3, [pc, #468]	; (8001aa4 <rtc_task+0x304>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018d4:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <rtc_task+0x300>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	2300      	movs	r3, #0
 80018da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018de:	4972      	ldr	r1, [pc, #456]	; (8001aa8 <rtc_task+0x308>)
 80018e0:	f003 fb46 	bl	8004f70 <xQueueGenericSend>
 80018e4:	e177      	b.n	8001bd6 <rtc_task+0x436>
						}

					}else{
						curr_state = sMainMenu;
 80018e6:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <rtc_task+0x304>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018ec:	4b6c      	ldr	r3, [pc, #432]	; (8001aa0 <rtc_task+0x300>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f6:	496c      	ldr	r1, [pc, #432]	; (8001aa8 <rtc_task+0x308>)
 80018f8:	f003 fb3a 	bl	8004f70 <xQueueGenericSend>
					}
					break;}
 80018fc:	e16b      	b.n	8001bd6 <rtc_task+0x436>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 80018fe:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <rtc_task+0x30c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d03b      	beq.n	800197e <rtc_task+0x1de>
 8001906:	2b02      	cmp	r3, #2
 8001908:	f300 8165 	bgt.w	8001bd6 <rtc_task+0x436>
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <rtc_task+0x176>
 8001910:	2b01      	cmp	r3, #1
 8001912:	d01a      	beq.n	800194a <rtc_task+0x1aa>
 8001914:	e15f      	b.n	8001bd6 <rtc_task+0x436>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 8001916:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff ff1a 	bl	8001758 <getnumber>
 8001924:	4603      	mov	r3, r0
 8001926:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 800192a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800192e:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 8001930:	4b5e      	ldr	r3, [pc, #376]	; (8001aac <rtc_task+0x30c>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 8001936:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <rtc_task+0x300>)
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800193e:	2300      	movs	r3, #0
 8001940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001944:	f003 fb14 	bl	8004f70 <xQueueGenericSend>
								break;}
 8001948:	e04f      	b.n	80019ea <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 800194a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800194c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4619      	mov	r1, r3
 8001952:	4610      	mov	r0, r2
 8001954:	f7ff ff00 	bl	8001758 <getnumber>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 800195e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001962:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 8001964:	4b51      	ldr	r3, [pc, #324]	; (8001aac <rtc_task+0x30c>)
 8001966:	2202      	movs	r2, #2
 8001968:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 800196a:	4b4d      	ldr	r3, [pc, #308]	; (8001aa0 <rtc_task+0x300>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001972:	2300      	movs	r3, #0
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001978:	f003 fafa 	bl	8004f70 <xQueueGenericSend>
								break;}
 800197c:	e035      	b.n	80019ea <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 800197e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f7ff fee6 	bl	8001758 <getnumber>
 800198c:	4603      	mov	r3, r0
 800198e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 8001992:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001996:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fbf8 	bl	8001194 <validate_rtc_information>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d110      	bne.n	80019cc <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fbc8 	bl	8001144 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <rtc_task+0x300>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019bc:	2300      	movs	r3, #0
 80019be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019c2:	f003 fad5 	bl	8004f70 <xQueueGenericSend>
									show_time_date();
 80019c6:	f7ff fb51 	bl	800106c <show_time_date>
 80019ca:	e007      	b.n	80019dc <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <rtc_task+0x300>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	2300      	movs	r3, #0
 80019d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019d6:	4934      	ldr	r1, [pc, #208]	; (8001aa8 <rtc_task+0x308>)
 80019d8:	f003 faca 	bl	8004f70 <xQueueGenericSend>

								curr_state = sMainMenu;
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <rtc_task+0x304>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 80019e2:	4b32      	ldr	r3, [pc, #200]	; (8001aac <rtc_task+0x30c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
								break;}
 80019e8:	bf00      	nop
						}

					break;}
 80019ea:	e0f4      	b.n	8001bd6 <rtc_task+0x436>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <rtc_task+0x30c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	f200 80f0 	bhi.w	8001bd6 <rtc_task+0x436>
 80019f6:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <rtc_task+0x25c>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a0d 	.word	0x08001a0d
 8001a00:	08001a41 	.word	0x08001a41
 8001a04:	08001ae5 	.word	0x08001ae5
 8001a08:	08001ab1 	.word	0x08001ab1
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8001a0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4610      	mov	r0, r2
 8001a16:	f7ff fe9f 	bl	8001758 <getnumber>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001a20:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001a24:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <rtc_task+0x30c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <rtc_task+0x300>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a34:	2300      	movs	r3, #0
 8001a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a3a:	f003 fa99 	bl	8004f70 <xQueueGenericSend>
								break;}
 8001a3e:	e087      	b.n	8001b50 <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001a40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff fe85 	bl	8001758 <getnumber>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001a54:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001a58:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <rtc_task+0x30c>)
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <rtc_task+0x300>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a6e:	f003 fa7f 	bl	8004f70 <xQueueGenericSend>
								break;}
 8001a72:	e06d      	b.n	8001b50 <rtc_task+0x3b0>
 8001a74:	08008fdc 	.word	0x08008fdc
 8001a78:	08009028 	.word	0x08009028
 8001a7c:	080090cc 	.word	0x080090cc
 8001a80:	080090e0 	.word	0x080090e0
 8001a84:	080090f8 	.word	0x080090f8
 8001a88:	08009110 	.word	0x08009110
 8001a8c:	08009124 	.word	0x08009124
 8001a90:	08009138 	.word	0x08009138
 8001a94:	08009150 	.word	0x08009150
 8001a98:	08009164 	.word	0x08009164
 8001a9c:	08009180 	.word	0x08009180
 8001aa0:	2000012c 	.word	0x2000012c
 8001aa4:	20000145 	.word	0x20000145
 8001aa8:	20000014 	.word	0x20000014
 8001aac:	200001e0 	.word	0x200001e0
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001ab0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4610      	mov	r0, r2
 8001aba:	f7ff fe4d 	bl	8001758 <getnumber>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001ac4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ac8:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001aca:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <rtc_task+0x454>)
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <rtc_task+0x458>)
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ade:	f003 fa47 	bl	8004f70 <xQueueGenericSend>
								break;}
 8001ae2:	e035      	b.n	8001b50 <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001ae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4619      	mov	r1, r3
 8001aec:	4610      	mov	r0, r2
 8001aee:	f7ff fe33 	bl	8001758 <getnumber>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001af8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001afc:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	4619      	mov	r1, r3
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff fb45 	bl	8001194 <validate_rtc_information>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d110      	bne.n	8001b32 <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fb2d 	bl	8001174 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <rtc_task+0x458>)
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b22:	2300      	movs	r3, #0
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b28:	f003 fa22 	bl	8004f70 <xQueueGenericSend>
									show_time_date();
 8001b2c:	f7ff fa9e 	bl	800106c <show_time_date>
 8001b30:	e007      	b.n	8001b42 <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <rtc_task+0x458>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b3c:	492f      	ldr	r1, [pc, #188]	; (8001bfc <rtc_task+0x45c>)
 8001b3e:	f003 fa17 	bl	8004f70 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001b42:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <rtc_task+0x460>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <rtc_task+0x454>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
								break;}
 8001b4e:	bf00      	nop
						}


					break;}
 8001b50:	e041      	b.n	8001bd6 <rtc_task+0x436>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d131      	bne.n	8001bbe <rtc_task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8001b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b79      	cmp	r3, #121	; 0x79
 8001b60:	d115      	bne.n	8001b8e <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <rtc_task+0x464>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f005 faec 	bl	8007144 <xTimerIsTimerActive>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d12d      	bne.n	8001bce <rtc_task+0x42e>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <rtc_task+0x464>)
 8001b74:	681c      	ldr	r4, [r3, #0]
 8001b76:	f004 f907 	bl	8005d88 <xTaskGetTickCount>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2300      	movs	r3, #0
 8001b84:	2101      	movs	r1, #1
 8001b86:	4620      	mov	r0, r4
 8001b88:	f004 fffc 	bl	8006b84 <xTimerGenericCommand>
 8001b8c:	e01f      	b.n	8001bce <rtc_task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 8001b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b6e      	cmp	r3, #110	; 0x6e
 8001b94:	d10a      	bne.n	8001bac <rtc_task+0x40c>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <rtc_task+0x464>)
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	f004 ffed 	bl	8006b84 <xTimerGenericCommand>
 8001baa:	e010      	b.n	8001bce <rtc_task+0x42e>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <rtc_task+0x458>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb6:	4911      	ldr	r1, [pc, #68]	; (8001bfc <rtc_task+0x45c>)
 8001bb8:	f003 f9da 	bl	8004f70 <xQueueGenericSend>
 8001bbc:	e007      	b.n	8001bce <rtc_task+0x42e>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <rtc_task+0x458>)
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <rtc_task+0x45c>)
 8001bca:	f003 f9d1 	bl	8004f70 <xQueueGenericSend>

					curr_state = sMainMenu;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <rtc_task+0x460>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
					break;}
 8001bd4:	bf00      	nop
		while(curr_state != sMainMenu){
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <rtc_task+0x460>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f ae19 	bne.w	8001812 <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <rtc_task+0x468>)
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2300      	movs	r3, #0
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	f004 fcf3 	bl	80065d8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001bf2:	e5ef      	b.n	80017d4 <rtc_task+0x34>
 8001bf4:	200001e0 	.word	0x200001e0
 8001bf8:	2000012c 	.word	0x2000012c
 8001bfc:	20000014 	.word	0x20000014
 8001c00:	20000145 	.word	0x20000145
 8001c04:	20000140 	.word	0x20000140
 8001c08:	20000118 	.word	0x20000118

08001c0c <print_task>:
}



void print_task(void *param)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <print_task+0x38>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f107 010c 	add.w	r1, r7, #12
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fb4d 	bl	80052c0 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001c26:	68fc      	ldr	r4, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fada 	bl	80001e4 <strlen>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c38:	4621      	mov	r1, r4
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <print_task+0x3c>)
 8001c3c:	f001 ffcf 	bl	8003bde <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001c40:	e7e8      	b.n	8001c14 <print_task+0x8>
 8001c42:	bf00      	nop
 8001c44:	2000012c 	.word	0x2000012c
 8001c48:	200000d0 	.word	0x200000d0

08001c4c <cmd_handler_task>:
}



void cmd_handler_task(void *param)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/*Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2000      	movs	r0, #0
 8001c62:	f004 fc39 	bl	80064d8 <xTaskGenericNotifyWait>
 8001c66:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d1f2      	bne.n	8001c54 <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f802 	bl	8001c7c <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c78:	e7ec      	b.n	8001c54 <cmd_handler_task+0x8>
	...

08001c7c <process_command>:

}


void process_command(command_t *cmd)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f835 	bl	8001cf4 <extract_command>

	switch(curr_state)
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <process_command+0x68>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	dc24      	bgt.n	8001cdc <process_command+0x60>
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	da18      	bge.n	8001cc8 <process_command+0x4c>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <process_command+0x24>
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d00a      	beq.n	8001cb4 <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001c9e:	e01d      	b.n	8001cdc <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <process_command+0x6c>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2303      	movs	r3, #3
 8001cac:	2100      	movs	r1, #0
 8001cae:	f004 fc93 	bl	80065d8 <xTaskGenericNotify>
		break;
 8001cb2:	e013      	b.n	8001cdc <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <process_command+0x70>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	f004 fc89 	bl	80065d8 <xTaskGenericNotify>
		break;
 8001cc6:	e009      	b.n	8001cdc <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <process_command+0x74>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	f004 fc7f 	bl	80065d8 <xTaskGenericNotify>
		break;
 8001cda:	bf00      	nop
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000145 	.word	0x20000145
 8001ce8:	20000118 	.word	0x20000118
 8001cec:	20000120 	.word	0x20000120
 8001cf0:	20000124 	.word	0x20000124

08001cf4 <extract_command>:


int extract_command(command_t *cmd)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <extract_command+0x70>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fc4c 	bl	800559e <uxQueueMessagesWaiting>
 8001d06:	4603      	mov	r3, r0
 8001d08:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <extract_command+0x22>
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d14:	e022      	b.n	8001d5c <extract_command+0x68>
	uint8_t i =0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <extract_command+0x70>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f107 010f 	add.w	r1, r7, #15
 8001d22:	2200      	movs	r2, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 facb 	bl	80052c0 <xQueueReceive>
 8001d2a:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d106      	bne.n	8001d40 <extract_command+0x4c>
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	75fa      	strb	r2, [r7, #23]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	7bf9      	ldrb	r1, [r7, #15]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b0a      	cmp	r3, #10
 8001d44:	d1e9      	bne.n	8001d1a <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	461a      	mov	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60da      	str	r2, [r3, #12]

	return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000128 	.word	0x20000128

08001d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d6e:	490e      	ldr	r1, [pc, #56]	; (8001da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d84:	4c0b      	ldr	r4, [pc, #44]	; (8001db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d92:	f7ff fbc5 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d96:	f005 fe6f 	bl	8007a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9a:	f7fe fd39 	bl	8000810 <main>
  bx  lr    
 8001d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001dac:	0800927c 	.word	0x0800927c
  ldr r2, =_sbss
 8001db0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001db4:	200193a4 	.word	0x200193a4

08001db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <HAL_Init+0x40>)
 8001dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_Init+0x40>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a07      	ldr	r2, [pc, #28]	; (8001dfc <HAL_Init+0x40>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f000 f8d8 	bl	8001f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff faa6 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df0:	f7ff fa02 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	2000001c 	.word	0x2000001c
 8001e24:	200001e4 	.word	0x200001e4

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200001e4 	.word	0x200001e4

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e72:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	60d3      	str	r3, [r2, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ff4c 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc2:	f7ff ff61 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 8001fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	6978      	ldr	r0, [r7, #20]
 8001fce:	f7ff ffb1 	bl	8001f34 <NVIC_EncodePriority>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff80 	bl	8001ee0 <__NVIC_SetPriority>
}
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff54 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002012:	f7ff ff09 	bl	8001e28 <HAL_GetTick>
 8002016:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d008      	beq.n	8002036 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e052      	b.n	80020dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0216 	bic.w	r2, r2, #22
 8002044:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002054:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d103      	bne.n	8002066 <HAL_DMA_Abort+0x62>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0208 	bic.w	r2, r2, #8
 8002074:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002086:	e013      	b.n	80020b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002088:	f7ff fece 	bl	8001e28 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b05      	cmp	r3, #5
 8002094:	d90c      	bls.n	80020b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2220      	movs	r2, #32
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2203      	movs	r2, #3
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e015      	b.n	80020dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1e4      	bne.n	8002088 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	223f      	movs	r2, #63	; 0x3f
 80020c4:	409a      	lsls	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d004      	beq.n	8002102 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00c      	b.n	800211c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2205      	movs	r2, #5
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0201 	bic.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	e16b      	b.n	800241c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002144:	2201      	movs	r2, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	429a      	cmp	r2, r3
 800215e:	f040 815a 	bne.w	8002416 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d005      	beq.n	800217a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002176:	2b02      	cmp	r3, #2
 8002178:	d130      	bne.n	80021dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b0:	2201      	movs	r2, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 0201 	and.w	r2, r3, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d017      	beq.n	8002218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d123      	bne.n	800226c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	220f      	movs	r2, #15
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	69b9      	ldr	r1, [r7, #24]
 8002268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0203 	and.w	r2, r3, #3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80b4 	beq.w	8002416 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b60      	ldr	r3, [pc, #384]	; (8002434 <HAL_GPIO_Init+0x30c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a5f      	ldr	r2, [pc, #380]	; (8002434 <HAL_GPIO_Init+0x30c>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_GPIO_Init+0x30c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ca:	4a5b      	ldr	r2, [pc, #364]	; (8002438 <HAL_GPIO_Init+0x310>)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_GPIO_Init+0x314>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d02b      	beq.n	800234e <HAL_GPIO_Init+0x226>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a51      	ldr	r2, [pc, #324]	; (8002440 <HAL_GPIO_Init+0x318>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d025      	beq.n	800234a <HAL_GPIO_Init+0x222>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a50      	ldr	r2, [pc, #320]	; (8002444 <HAL_GPIO_Init+0x31c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01f      	beq.n	8002346 <HAL_GPIO_Init+0x21e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4f      	ldr	r2, [pc, #316]	; (8002448 <HAL_GPIO_Init+0x320>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d019      	beq.n	8002342 <HAL_GPIO_Init+0x21a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4e      	ldr	r2, [pc, #312]	; (800244c <HAL_GPIO_Init+0x324>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x216>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4d      	ldr	r2, [pc, #308]	; (8002450 <HAL_GPIO_Init+0x328>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x212>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4c      	ldr	r2, [pc, #304]	; (8002454 <HAL_GPIO_Init+0x32c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x20e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4b      	ldr	r2, [pc, #300]	; (8002458 <HAL_GPIO_Init+0x330>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x20a>
 800232e:	2307      	movs	r3, #7
 8002330:	e00e      	b.n	8002350 <HAL_GPIO_Init+0x228>
 8002332:	2308      	movs	r3, #8
 8002334:	e00c      	b.n	8002350 <HAL_GPIO_Init+0x228>
 8002336:	2306      	movs	r3, #6
 8002338:	e00a      	b.n	8002350 <HAL_GPIO_Init+0x228>
 800233a:	2305      	movs	r3, #5
 800233c:	e008      	b.n	8002350 <HAL_GPIO_Init+0x228>
 800233e:	2304      	movs	r3, #4
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x228>
 8002342:	2303      	movs	r3, #3
 8002344:	e004      	b.n	8002350 <HAL_GPIO_Init+0x228>
 8002346:	2302      	movs	r3, #2
 8002348:	e002      	b.n	8002350 <HAL_GPIO_Init+0x228>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x228>
 800234e:	2300      	movs	r3, #0
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	f002 0203 	and.w	r2, r2, #3
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	4093      	lsls	r3, r2
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002360:	4935      	ldr	r1, [pc, #212]	; (8002438 <HAL_GPIO_Init+0x310>)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_GPIO_Init+0x334>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002392:	4a32      	ldr	r2, [pc, #200]	; (800245c <HAL_GPIO_Init+0x334>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002398:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_GPIO_Init+0x334>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <HAL_GPIO_Init+0x334>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <HAL_GPIO_Init+0x334>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e6:	4a1d      	ldr	r2, [pc, #116]	; (800245c <HAL_GPIO_Init+0x334>)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_GPIO_Init+0x334>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002410:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_GPIO_Init+0x334>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3301      	adds	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2b0f      	cmp	r3, #15
 8002420:	f67f ae90 	bls.w	8002144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40013800 	.word	0x40013800
 800243c:	40020000 	.word	0x40020000
 8002440:	40020400 	.word	0x40020400
 8002444:	40020800 	.word	0x40020800
 8002448:	40020c00 	.word	0x40020c00
 800244c:	40021000 	.word	0x40021000
 8002450:	40021400 	.word	0x40021400
 8002454:	40021800 	.word	0x40021800
 8002458:	40021c00 	.word	0x40021c00
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e267      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d075      	beq.n	800259e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	4b88      	ldr	r3, [pc, #544]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d00c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4b85      	ldr	r3, [pc, #532]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d112      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d6:	d10b      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	4b7e      	ldr	r3, [pc, #504]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05b      	beq.n	800259c <HAL_RCC_OscConfig+0x108>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d157      	bne.n	800259c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e242      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x74>
 80024fa:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a75      	ldr	r2, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x98>
 8002512:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6f      	ldr	r2, [pc, #444]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6d      	ldr	r3, [pc, #436]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6c      	ldr	r2, [pc, #432]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 800252c:	4b69      	ldr	r3, [pc, #420]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a68      	ldr	r2, [pc, #416]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a65      	ldr	r2, [pc, #404]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fc6c 	bl	8001e28 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff fc68 	bl	8001e28 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e207      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xc0>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fc58 	bl	8001e28 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fc54 	bl	8001e28 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1f3      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0xe8>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1c7      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4937      	ldr	r1, [pc, #220]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCC_OscConfig+0x244>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7ff fc0d 	bl	8001e28 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002612:	f7ff fc09 	bl	8001e28 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1a8      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4925      	ldr	r1, [pc, #148]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCC_OscConfig+0x244>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff fbec 	bl	8001e28 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002654:	f7ff fbe8 	bl	8001e28 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e187      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d036      	beq.n	80026ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_RCC_OscConfig+0x248>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7ff fbcc 	bl	8001e28 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff fbc8 	bl	8001e28 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e167      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x200>
 80026b2:	e01b      	b.n	80026ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_OscConfig+0x248>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7ff fbb5 	bl	8001e28 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	e00e      	b.n	80026e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c2:	f7ff fbb1 	bl	8001e28 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d907      	bls.n	80026e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e150      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
 80026d4:	40023800 	.word	0x40023800
 80026d8:	42470000 	.word	0x42470000
 80026dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ea      	bne.n	80026c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8097 	beq.w	8002828 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b81      	ldr	r3, [pc, #516]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b7d      	ldr	r3, [pc, #500]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a7c      	ldr	r2, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b7a      	ldr	r3, [pc, #488]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b77      	ldr	r3, [pc, #476]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002736:	4b74      	ldr	r3, [pc, #464]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a73      	ldr	r2, [pc, #460]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7ff fb71 	bl	8001e28 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7ff fb6d 	bl	8001e28 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e10c      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x2ea>
 8002770:	4b64      	ldr	r3, [pc, #400]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a63      	ldr	r2, [pc, #396]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	e01c      	b.n	80027b8 <HAL_RCC_OscConfig+0x324>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b05      	cmp	r3, #5
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x30c>
 8002786:	4b5f      	ldr	r3, [pc, #380]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	4a5e      	ldr	r2, [pc, #376]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
 8002792:	4b5c      	ldr	r3, [pc, #368]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a5b      	ldr	r2, [pc, #364]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0x324>
 80027a0:	4b58      	ldr	r3, [pc, #352]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a57      	ldr	r2, [pc, #348]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	4b55      	ldr	r3, [pc, #340]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a54      	ldr	r2, [pc, #336]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f023 0304 	bic.w	r3, r3, #4
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d015      	beq.n	80027ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7ff fb32 	bl	8001e28 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7ff fb2e 	bl	8001e28 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0cb      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ee      	beq.n	80027c8 <HAL_RCC_OscConfig+0x334>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7ff fb1c 	bl	8001e28 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7ff fb18 	bl	8001e28 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0b5      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1ee      	bne.n	80027f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a1 	beq.w	8002974 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002832:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b08      	cmp	r3, #8
 800283c:	d05c      	beq.n	80028f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d141      	bne.n	80028ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <HAL_RCC_OscConfig+0x478>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff faec 	bl	8001e28 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7ff fae8 	bl	8001e28 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e087      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	491b      	ldr	r1, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x478>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7ff fac1 	bl	8001e28 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7ff fabd 	bl	8001e28 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e05c      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x416>
 80028c8:	e054      	b.n	8002974 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCC_OscConfig+0x478>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7ff faaa 	bl	8001e28 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d8:	f7ff faa6 	bl	8001e28 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e045      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x444>
 80028f6:	e03d      	b.n	8002974 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e038      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
 8002904:	40023800 	.word	0x40023800
 8002908:	40007000 	.word	0x40007000
 800290c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x4ec>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d028      	beq.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d121      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d11a      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002948:	4293      	cmp	r3, r2
 800294a:	d111      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	3b01      	subs	r3, #1
 800295a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d107      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0cc      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d90c      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d044      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e06f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e067      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7ff f9d8 	bl	8001e28 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7ff f9d4 	bl	8001e28 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e04f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d20c      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fc06 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00
 8002b40:	40023800 	.word	0x40023800
 8002b44:	080091bc 	.word	0x080091bc
 8002b48:	20000010 	.word	0x20000010
 8002b4c:	20000018 	.word	0x20000018

08002b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b094      	sub	sp, #80	; 0x50
 8002b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b60:	2300      	movs	r3, #0
 8002b62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b68:	4b79      	ldr	r3, [pc, #484]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d00d      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x40>
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	f200 80e1 	bhi.w	8002d3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b82:	e0db      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b73      	ldr	r3, [pc, #460]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b88:	e0db      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8a:	4b73      	ldr	r3, [pc, #460]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8e:	e0d8      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b90:	4b6f      	ldr	r3, [pc, #444]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9a:	4b6d      	ldr	r3, [pc, #436]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba6:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	2200      	movs	r2, #0
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4621      	mov	r1, r4
 8002bdc:	1a51      	subs	r1, r2, r1
 8002bde:	6139      	str	r1, [r7, #16]
 8002be0:	4629      	mov	r1, r5
 8002be2:	eb63 0301 	sbc.w	r3, r3, r1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfe:	4651      	mov	r1, sl
 8002c00:	018a      	lsls	r2, r1, #6
 8002c02:	4651      	mov	r1, sl
 8002c04:	ebb2 0801 	subs.w	r8, r2, r1
 8002c08:	4659      	mov	r1, fp
 8002c0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c22:	4690      	mov	r8, r2
 8002c24:	4699      	mov	r9, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	eb18 0303 	adds.w	r3, r8, r3
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	462b      	mov	r3, r5
 8002c30:	eb49 0303 	adc.w	r3, r9, r3
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c42:	4629      	mov	r1, r5
 8002c44:	024b      	lsls	r3, r1, #9
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	024a      	lsls	r2, r1, #9
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c56:	2200      	movs	r2, #0
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c60:	f7fd fb1e 	bl	80002a0 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c6c:	e058      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	2200      	movs	r2, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	4611      	mov	r1, r2
 8002c7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c7e:	623b      	str	r3, [r7, #32]
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c88:	4642      	mov	r2, r8
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	f04f 0000 	mov.w	r0, #0
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	0159      	lsls	r1, r3, #5
 8002c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9a:	0150      	lsls	r0, r2, #5
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cc0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	00eb      	lsls	r3, r5, #3
 8002cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd6:	00e2      	lsls	r2, r4, #3
 8002cd8:	4614      	mov	r4, r2
 8002cda:	461d      	mov	r5, r3
 8002cdc:	4643      	mov	r3, r8
 8002cde:	18e3      	adds	r3, r4, r3
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	eb45 0303 	adc.w	r3, r5, r3
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	028b      	lsls	r3, r1, #10
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d00:	4621      	mov	r1, r4
 8002d02:	028a      	lsls	r2, r1, #10
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	61fa      	str	r2, [r7, #28]
 8002d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d14:	f7fd fac4 	bl	80002a0 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d3a:	e002      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3750      	adds	r7, #80	; 0x50
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	007a1200 	.word	0x007a1200

08002d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000010 	.word	0x20000010

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d78:	f7ff fff0 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0a9b      	lsrs	r3, r3, #10
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4903      	ldr	r1, [pc, #12]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	080091cc 	.word	0x080091cc

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002da0:	f7ff ffdc 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0b5b      	lsrs	r3, r3, #13
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	080091cc 	.word	0x080091cc

08002dc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	08db      	lsrs	r3, r3, #3
 8002dfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_RCC_GetClockConfig+0x60>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0207 	and.w	r2, r3, #7
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	601a      	str	r2, [r3, #0]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40023c00 	.word	0x40023c00

08002e28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d035      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e50:	4b62      	ldr	r3, [pc, #392]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e56:	f7fe ffe7 	bl	8001e28 <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e5e:	f7fe ffe3 	bl	8001e28 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0b0      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e70:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f0      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	019a      	lsls	r2, r3, #6
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	071b      	lsls	r3, r3, #28
 8002e88:	4955      	ldr	r1, [pc, #340]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e90:	4b52      	ldr	r3, [pc, #328]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e96:	f7fe ffc7 	bl	8001e28 <HAL_GetTick>
 8002e9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e9e:	f7fe ffc3 	bl	8001e28 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e090      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8083 	beq.w	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a43      	ldr	r2, [pc, #268]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a3e      	ldr	r2, [pc, #248]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe ff99 	bl	8001e28 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe ff95 	bl	8001e28 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e062      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f0c:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d02f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d028      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f40:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f4c:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f52:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d114      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe ff63 	bl	8001e28 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe ff5f 	bl	8001e28 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e02a      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ee      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f94:	d10d      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	490d      	ldr	r1, [pc, #52]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]
 8002fb0:	e005      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fbc:	6093      	str	r3, [r2, #8]
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fca:	4905      	ldr	r1, [pc, #20]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	42470068 	.word	0x42470068
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	42470e40 	.word	0x42470e40

08002fec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e066      	b.n	80030d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7f5b      	ldrb	r3, [r3, #29]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe f918 	bl	8001248 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	22ca      	movs	r2, #202	; 0xca
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2253      	movs	r2, #83	; 0x53
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa45 	bl	80034be <RTC_EnterInitMode>
 8003034:	4603      	mov	r3, r0
 8003036:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d12c      	bne.n	8003098 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800304c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003050:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68d2      	ldr	r2, [r2, #12]
 8003078:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6919      	ldr	r1, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	041a      	lsls	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fa4c 	bl	800352c <RTC_ExitInitMode>
 8003094:	4603      	mov	r3, r0
 8003096:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d113      	bne.n	80030c6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	22ff      	movs	r2, #255	; 0xff
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	7f1b      	ldrb	r3, [r3, #28]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_RTC_SetTime+0x1c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e087      	b.n	8003204 <HAL_RTC_SetTime+0x12c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2202      	movs	r2, #2
 80030fe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d126      	bne.n	8003154 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fa29 	bl	8003576 <RTC_ByteToBcd2>
 8003124:	4603      	mov	r3, r0
 8003126:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fa22 	bl	8003576 <RTC_ByteToBcd2>
 8003132:	4603      	mov	r3, r0
 8003134:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003136:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	789b      	ldrb	r3, [r3, #2]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fa1a 	bl	8003576 <RTC_ByteToBcd2>
 8003142:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003144:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	78db      	ldrb	r3, [r3, #3]
 800314c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e018      	b.n	8003186 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003174:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800317a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	22ca      	movs	r2, #202	; 0xca
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2253      	movs	r2, #83	; 0x53
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f991 	bl	80034be <RTC_EnterInitMode>
 800319c:	4603      	mov	r3, r0
 800319e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d120      	bne.n	80031e8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031b4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6899      	ldr	r1, [r3, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f9a4 	bl	800352c <RTC_ExitInitMode>
 80031e4:	4603      	mov	r3, r0
 80031e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d102      	bne.n	80031f4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	22ff      	movs	r2, #255	; 0xff
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	771a      	strb	r2, [r3, #28]

  return status;
 8003202:	7cfb      	ldrb	r3, [r7, #19]
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd90      	pop	{r4, r7, pc}

0800320c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800323e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003242:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	0d9b      	lsrs	r3, r3, #22
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d11a      	bne.n	80032be <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f98f 	bl	80035b0 <RTC_Bcd2ToByte>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f986 	bl	80035b0 <RTC_Bcd2ToByte>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	789b      	ldrb	r3, [r3, #2]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f97d 	bl	80035b0 <RTC_Bcd2ToByte>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	7f1b      	ldrb	r3, [r3, #28]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_RTC_SetDate+0x1c>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e071      	b.n	80033c8 <HAL_RTC_SetDate+0x100>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2202      	movs	r2, #2
 80032ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10e      	bne.n	8003314 <HAL_RTC_SetDate+0x4c>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	785b      	ldrb	r3, [r3, #1]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	f023 0310 	bic.w	r3, r3, #16
 800330a:	b2db      	uxtb	r3, r3
 800330c:	330a      	adds	r3, #10
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11c      	bne.n	8003354 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	78db      	ldrb	r3, [r3, #3]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f929 	bl	8003576 <RTC_ByteToBcd2>
 8003324:	4603      	mov	r3, r0
 8003326:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f922 	bl	8003576 <RTC_ByteToBcd2>
 8003332:	4603      	mov	r3, r0
 8003334:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003336:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	789b      	ldrb	r3, [r3, #2]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f91a 	bl	8003576 <RTC_ByteToBcd2>
 8003342:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003344:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e00e      	b.n	8003372 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	78db      	ldrb	r3, [r3, #3]
 8003358:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003360:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003366:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	22ca      	movs	r2, #202	; 0xca
 8003378:	625a      	str	r2, [r3, #36]	; 0x24
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2253      	movs	r2, #83	; 0x53
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f89b 	bl	80034be <RTC_EnterInitMode>
 8003388:	4603      	mov	r3, r0
 800338a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10c      	bne.n	80033ac <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800339c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f8c2 	bl	800352c <RTC_ExitInitMode>
 80033a8:	4603      	mov	r3, r0
 80033aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	22ff      	movs	r2, #255	; 0xff
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	771a      	strb	r2, [r3, #28]

  return status;
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}

080033d0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	0c1b      	lsrs	r3, r3, #16
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	0b5b      	lsrs	r3, r3, #13
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11a      	bne.n	8003464 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	78db      	ldrb	r3, [r3, #3]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f8bc 	bl	80035b0 <RTC_Bcd2ToByte>
 8003438:	4603      	mov	r3, r0
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	785b      	ldrb	r3, [r3, #1]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f8b3 	bl	80035b0 <RTC_Bcd2ToByte>
 800344a:	4603      	mov	r3, r0
 800344c:	461a      	mov	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	789b      	ldrb	r3, [r3, #2]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f8aa 	bl	80035b0 <RTC_Bcd2ToByte>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003488:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800348a:	f7fe fccd 	bl	8001e28 <HAL_GetTick>
 800348e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003490:	e009      	b.n	80034a6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003492:	f7fe fcc9 	bl	8001e28 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a0:	d901      	bls.n	80034a6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e007      	b.n	80034b6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ee      	beq.n	8003492 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d122      	bne.n	8003522 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ec:	f7fe fc9c 	bl	8001e28 <HAL_GetTick>
 80034f0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80034f2:	e00c      	b.n	800350e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034f4:	f7fe fc98 	bl	8001e28 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003502:	d904      	bls.n	800350e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2204      	movs	r2, #4
 8003508:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <RTC_EnterInitMode+0x64>
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d1e8      	bne.n	80034f4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003546:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ff89 	bl	800346e <HAL_RTC_WaitForSynchro>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2204      	movs	r2, #4
 8003566:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003584:	e005      	b.n	8003592 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	3301      	adds	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	3b0a      	subs	r3, #10
 8003590:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2b09      	cmp	r3, #9
 8003596:	d8f6      	bhi.n	8003586 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	b2da      	uxtb	r2, r3
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b2db      	uxtb	r3, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	0092      	lsls	r2, r2, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	4413      	add	r3, r2
 80035da:	b2db      	uxtb	r3, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e041      	b.n	800367e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f839 	bl	8003686 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f000 f9d8 	bl	80039dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d001      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e04e      	b.n	8003752 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a23      	ldr	r2, [pc, #140]	; (8003760 <HAL_TIM_Base_Start_IT+0xc4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d022      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036de:	d01d      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_TIM_Base_Start_IT+0xc8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d018      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <HAL_TIM_Base_Start_IT+0xcc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d013      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_TIM_Base_Start_IT+0xd0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <HAL_TIM_Base_Start_IT+0xd4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a19      	ldr	r2, [pc, #100]	; (8003774 <HAL_TIM_Base_Start_IT+0xd8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x80>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a18      	ldr	r2, [pc, #96]	; (8003778 <HAL_TIM_Base_Start_IT+0xdc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d010      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	e007      	b.n	8003750 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40010400 	.word	0x40010400
 8003774:	40014000 	.word	0x40014000
 8003778:	40001800 	.word	0x40001800

0800377c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0202 	mvn.w	r2, #2
 80037a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8ee 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8e0 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f8f1 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0204 	mvn.w	r2, #4
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8c4 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8b6 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8c7 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b08      	cmp	r3, #8
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b08      	cmp	r3, #8
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0208 	mvn.w	r2, #8
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2204      	movs	r2, #4
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f89a 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f88c 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f89d 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b10      	cmp	r3, #16
 800388c:	d122      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d11b      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0210 	mvn.w	r2, #16
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2208      	movs	r2, #8
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f870 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f862 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f873 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d107      	bne.n	8003900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0201 	mvn.w	r2, #1
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd fb56 	bl	8000fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f902 	bl	8003b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f838 	bl	80039c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b20      	cmp	r3, #32
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b20      	cmp	r3, #32
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0220 	mvn.w	r2, #32
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8cc 	bl	8003b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a40      	ldr	r2, [pc, #256]	; (8003af0 <TIM_Base_SetConfig+0x114>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fa:	d00f      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a3d      	ldr	r2, [pc, #244]	; (8003af4 <TIM_Base_SetConfig+0x118>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a3c      	ldr	r2, [pc, #240]	; (8003af8 <TIM_Base_SetConfig+0x11c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d007      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <TIM_Base_SetConfig+0x120>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a3a      	ldr	r2, [pc, #232]	; (8003b00 <TIM_Base_SetConfig+0x124>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d108      	bne.n	8003a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <TIM_Base_SetConfig+0x114>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d02b      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d027      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <TIM_Base_SetConfig+0x118>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d023      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2b      	ldr	r2, [pc, #172]	; (8003af8 <TIM_Base_SetConfig+0x11c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01f      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <TIM_Base_SetConfig+0x120>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01b      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <TIM_Base_SetConfig+0x124>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d017      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a28      	ldr	r2, [pc, #160]	; (8003b04 <TIM_Base_SetConfig+0x128>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <TIM_Base_SetConfig+0x12c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00f      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a26      	ldr	r2, [pc, #152]	; (8003b0c <TIM_Base_SetConfig+0x130>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a25      	ldr	r2, [pc, #148]	; (8003b10 <TIM_Base_SetConfig+0x134>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <TIM_Base_SetConfig+0x138>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a23      	ldr	r2, [pc, #140]	; (8003b18 <TIM_Base_SetConfig+0x13c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <TIM_Base_SetConfig+0x114>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_Base_SetConfig+0xf8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <TIM_Base_SetConfig+0x124>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d103      	bne.n	8003adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	615a      	str	r2, [r3, #20]
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800
 8003afc:	40000c00 	.word	0x40000c00
 8003b00:	40010400 	.word	0x40010400
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40014400 	.word	0x40014400
 8003b0c:	40014800 	.word	0x40014800
 8003b10:	40001800 	.word	0x40001800
 8003b14:	40001c00 	.word	0x40001c00
 8003b18:	40002000 	.word	0x40002000

08003b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e03f      	b.n	8003bd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fb96 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fddf 	bl	800474c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b08a      	sub	sp, #40	; 0x28
 8003be2:	af02      	add	r7, sp, #8
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d17c      	bne.n	8003cf8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_UART_Transmit+0x2c>
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e075      	b.n	8003cfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_UART_Transmit+0x3e>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e06e      	b.n	8003cfa <HAL_UART_Transmit+0x11c>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2221      	movs	r2, #33	; 0x21
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c32:	f7fe f8f9 	bl	8001e28 <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4c:	d108      	bne.n	8003c60 <HAL_UART_Transmit+0x82>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e003      	b.n	8003c68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c70:	e02a      	b.n	8003cc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2180      	movs	r1, #128	; 0x80
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fb1f 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e036      	b.n	8003cfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	e007      	b.n	8003cba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1cf      	bne.n	8003c72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2140      	movs	r1, #64	; 0x40
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 faef 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e006      	b.n	8003cfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e000      	b.n	8003cfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cf8:	2302      	movs	r3, #2
  }
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d11d      	bne.n	8003d58 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_UART_Receive_IT+0x26>
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e016      	b.n	8003d5a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Receive_IT+0x38>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e00f      	b.n	8003d5a <HAL_UART_Receive_IT+0x58>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fb24 	bl	800439c <UART_Start_Receive_IT>
 8003d54:	4603      	mov	r3, r0
 8003d56:	e000      	b.n	8003d5a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
  }
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b0ba      	sub	sp, #232	; 0xe8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HAL_UART_IRQHandler+0x66>
 8003db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fc07 	bl	80045d6 <UART_Receive_IT>
      return;
 8003dc8:	e256      	b.n	8004278 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80de 	beq.w	8003f90 <HAL_UART_IRQHandler+0x22c>
 8003dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d106      	bne.n	8003dee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80d1 	beq.w	8003f90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <HAL_UART_IRQHandler+0xae>
 8003dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f043 0201 	orr.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_UART_IRQHandler+0xd2>
 8003e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f043 0202 	orr.w	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_UART_IRQHandler+0xf6>
 8003e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f043 0204 	orr.w	r2, r3, #4
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <HAL_UART_IRQHandler+0x126>
 8003e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f043 0208 	orr.w	r2, r3, #8
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 81ed 	beq.w	800426e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x14e>
 8003ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fb92 	bl	80045d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <HAL_UART_IRQHandler+0x17a>
 8003ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d04f      	beq.n	8003f7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa9a 	bl	8004418 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d141      	bne.n	8003f76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1d9      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d013      	beq.n	8003f6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	4a7d      	ldr	r2, [pc, #500]	; (8004140 <HAL_UART_IRQHandler+0x3dc>)
 8003f4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe f8c6 	bl	80020e4 <HAL_DMA_Abort_IT>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	e00e      	b.n	8003f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f990 	bl	8004294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	e00a      	b.n	8003f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f98c 	bl	8004294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	e006      	b.n	8003f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f988 	bl	8004294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f8a:	e170      	b.n	800426e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	bf00      	nop
    return;
 8003f8e:	e16e      	b.n	800426e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f040 814a 	bne.w	800422e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8143 	beq.w	800422e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 813c 	beq.w	800422e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	f040 80b4 	bne.w	8004144 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8140 	beq.w	8004272 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	f080 8139 	bcs.w	8004272 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004006:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004012:	f000 8088 	beq.w	8004126 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800402c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800404e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800405a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1d9      	bne.n	8004016 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3314      	adds	r3, #20
 8004082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004086:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800408a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800408e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e1      	bne.n	8004062 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3314      	adds	r3, #20
 80040a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3314      	adds	r3, #20
 80040be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e3      	bne.n	800409e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f6:	f023 0310 	bic.w	r3, r3, #16
 80040fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004108:	65ba      	str	r2, [r7, #88]	; 0x58
 800410a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800410e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e3      	bne.n	80040e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd ff6f 	bl	8002004 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800412e:	b29b      	uxth	r3, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8b6 	bl	80042a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800413c:	e099      	b.n	8004272 <HAL_UART_IRQHandler+0x50e>
 800413e:	bf00      	nop
 8004140:	080044df 	.word	0x080044df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800414c:	b29b      	uxth	r3, r3
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 808b 	beq.w	8004276 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8086 	beq.w	8004276 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800417a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004180:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800418e:	647a      	str	r2, [r7, #68]	; 0x44
 8004190:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e3      	bne.n	800416a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	623b      	str	r3, [r7, #32]
   return(result);
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041c6:	633a      	str	r2, [r7, #48]	; 0x30
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e3      	bne.n	80041a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800420c:	61fa      	str	r2, [r7, #28]
 800420e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	69b9      	ldr	r1, [r7, #24]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	617b      	str	r3, [r7, #20]
   return(result);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e3      	bne.n	80041e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f83e 	bl	80042a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800422c:	e023      	b.n	8004276 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_UART_IRQHandler+0x4ea>
 800423a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f95d 	bl	8004506 <UART_Transmit_IT>
    return;
 800424c:	e014      	b.n	8004278 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00e      	beq.n	8004278 <HAL_UART_IRQHandler+0x514>
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f99d 	bl	80045a6 <UART_EndTransmit_IT>
    return;
 800426c:	e004      	b.n	8004278 <HAL_UART_IRQHandler+0x514>
    return;
 800426e:	bf00      	nop
 8004270:	e002      	b.n	8004278 <HAL_UART_IRQHandler+0x514>
      return;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <HAL_UART_IRQHandler+0x514>
      return;
 8004276:	bf00      	nop
  }
}
 8004278:	37e8      	adds	r7, #232	; 0xe8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop

08004280 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b090      	sub	sp, #64	; 0x40
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d0:	e050      	b.n	8004374 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d8:	d04c      	beq.n	8004374 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e0:	f7fd fda2 	bl	8001e28 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d241      	bcs.n	8004374 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004310:	637a      	str	r2, [r7, #52]	; 0x34
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e5      	bne.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	613b      	str	r3, [r7, #16]
   return(result);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	63bb      	str	r3, [r7, #56]	; 0x38
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004344:	623a      	str	r2, [r7, #32]
 8004346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	69f9      	ldr	r1, [r7, #28]
 800434a:	6a3a      	ldr	r2, [r7, #32]
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	61bb      	str	r3, [r7, #24]
   return(result);
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e5      	bne.n	8004324 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e00f      	b.n	8004394 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	429a      	cmp	r2, r3
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	429a      	cmp	r2, r3
 8004390:	d09f      	beq.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3740      	adds	r7, #64	; 0x40
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2222      	movs	r2, #34	; 0x22
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0220 	orr.w	r2, r2, #32
 8004408:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b095      	sub	sp, #84	; 0x54
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004440:	643a      	str	r2, [r7, #64]	; 0x40
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e5      	bne.n	8004420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	61fb      	str	r3, [r7, #28]
   return(result);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	64bb      	str	r3, [r7, #72]	; 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3314      	adds	r3, #20
 8004472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800447a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	2b01      	cmp	r3, #1
 800448e:	d119      	bne.n	80044c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f023 0310 	bic.w	r3, r3, #16
 80044a6:	647b      	str	r3, [r7, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b0:	61ba      	str	r2, [r7, #24]
 80044b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6979      	ldr	r1, [r7, #20]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	613b      	str	r3, [r7, #16]
   return(result);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044d2:	bf00      	nop
 80044d4:	3754      	adds	r7, #84	; 0x54
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fecb 	bl	8004294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b21      	cmp	r3, #33	; 0x21
 8004518:	d13e      	bne.n	8004598 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	d114      	bne.n	800454e <UART_Transmit_IT+0x48>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d110      	bne.n	800454e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004540:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]
 800454c:	e008      	b.n	8004560 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	1c59      	adds	r1, r3, #1
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6211      	str	r1, [r2, #32]
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29b      	uxth	r3, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4619      	mov	r1, r3
 800456e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10f      	bne.n	8004594 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004582:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004592:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff fe5a 	bl	8004280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08c      	sub	sp, #48	; 0x30
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b22      	cmp	r3, #34	; 0x22
 80045e8:	f040 80ab 	bne.w	8004742 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f4:	d117      	bne.n	8004626 <UART_Receive_IT+0x50>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d113      	bne.n	8004626 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004614:	b29a      	uxth	r2, r3
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	1c9a      	adds	r2, r3, #2
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	629a      	str	r2, [r3, #40]	; 0x28
 8004624:	e026      	b.n	8004674 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004638:	d007      	beq.n	800464a <UART_Receive_IT+0x74>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <UART_Receive_IT+0x82>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e008      	b.n	800466a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004664:	b2da      	uxtb	r2, r3
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29b      	uxth	r3, r3
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4619      	mov	r1, r3
 8004682:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004684:	2b00      	cmp	r3, #0
 8004686:	d15a      	bne.n	800473e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0220 	bic.w	r2, r2, #32
 8004696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d135      	bne.n	8004734 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	613b      	str	r3, [r7, #16]
   return(result);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f023 0310 	bic.w	r3, r3, #16
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ee:	623a      	str	r2, [r7, #32]
 80046f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	69f9      	ldr	r1, [r7, #28]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e5      	bne.n	80046ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b10      	cmp	r3, #16
 800470e:	d10a      	bne.n	8004726 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fdbb 	bl	80042a8 <HAL_UARTEx_RxEventCallback>
 8004732:	e002      	b.n	800473a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fc fbe5 	bl	8000f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e002      	b.n	8004744 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3730      	adds	r7, #48	; 0x30
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800474c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004750:	b0c0      	sub	sp, #256	; 0x100
 8004752:	af00      	add	r7, sp, #0
 8004754:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	68d9      	ldr	r1, [r3, #12]
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	ea40 0301 	orr.w	r3, r0, r1
 8004774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	431a      	orrs	r2, r3
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	431a      	orrs	r2, r3
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047a4:	f021 010c 	bic.w	r1, r1, #12
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047b2:	430b      	orrs	r3, r1
 80047b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	6999      	ldr	r1, [r3, #24]
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	ea40 0301 	orr.w	r3, r0, r1
 80047d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b8f      	ldr	r3, [pc, #572]	; (8004a18 <UART_SetConfig+0x2cc>)
 80047dc:	429a      	cmp	r2, r3
 80047de:	d005      	beq.n	80047ec <UART_SetConfig+0xa0>
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b8d      	ldr	r3, [pc, #564]	; (8004a1c <UART_SetConfig+0x2d0>)
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d104      	bne.n	80047f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047ec:	f7fe fad6 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 80047f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047f4:	e003      	b.n	80047fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f6:	f7fe fabd 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 80047fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004808:	f040 810c 	bne.w	8004a24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800480c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004810:	2200      	movs	r2, #0
 8004812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004816:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800481a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800481e:	4622      	mov	r2, r4
 8004820:	462b      	mov	r3, r5
 8004822:	1891      	adds	r1, r2, r2
 8004824:	65b9      	str	r1, [r7, #88]	; 0x58
 8004826:	415b      	adcs	r3, r3
 8004828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800482a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800482e:	4621      	mov	r1, r4
 8004830:	eb12 0801 	adds.w	r8, r2, r1
 8004834:	4629      	mov	r1, r5
 8004836:	eb43 0901 	adc.w	r9, r3, r1
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800484a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800484e:	4690      	mov	r8, r2
 8004850:	4699      	mov	r9, r3
 8004852:	4623      	mov	r3, r4
 8004854:	eb18 0303 	adds.w	r3, r8, r3
 8004858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800485c:	462b      	mov	r3, r5
 800485e:	eb49 0303 	adc.w	r3, r9, r3
 8004862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004872:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004876:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800487a:	460b      	mov	r3, r1
 800487c:	18db      	adds	r3, r3, r3
 800487e:	653b      	str	r3, [r7, #80]	; 0x50
 8004880:	4613      	mov	r3, r2
 8004882:	eb42 0303 	adc.w	r3, r2, r3
 8004886:	657b      	str	r3, [r7, #84]	; 0x54
 8004888:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800488c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004890:	f7fb fd06 	bl	80002a0 <__aeabi_uldivmod>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4b61      	ldr	r3, [pc, #388]	; (8004a20 <UART_SetConfig+0x2d4>)
 800489a:	fba3 2302 	umull	r2, r3, r3, r2
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	011c      	lsls	r4, r3, #4
 80048a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	1891      	adds	r1, r2, r2
 80048ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80048bc:	415b      	adcs	r3, r3
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048c4:	4641      	mov	r1, r8
 80048c6:	eb12 0a01 	adds.w	sl, r2, r1
 80048ca:	4649      	mov	r1, r9
 80048cc:	eb43 0b01 	adc.w	fp, r3, r1
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e4:	4692      	mov	sl, r2
 80048e6:	469b      	mov	fp, r3
 80048e8:	4643      	mov	r3, r8
 80048ea:	eb1a 0303 	adds.w	r3, sl, r3
 80048ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048f2:	464b      	mov	r3, r9
 80048f4:	eb4b 0303 	adc.w	r3, fp, r3
 80048f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004908:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800490c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004910:	460b      	mov	r3, r1
 8004912:	18db      	adds	r3, r3, r3
 8004914:	643b      	str	r3, [r7, #64]	; 0x40
 8004916:	4613      	mov	r3, r2
 8004918:	eb42 0303 	adc.w	r3, r2, r3
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
 800491e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004922:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004926:	f7fb fcbb 	bl	80002a0 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4611      	mov	r1, r2
 8004930:	4b3b      	ldr	r3, [pc, #236]	; (8004a20 <UART_SetConfig+0x2d4>)
 8004932:	fba3 2301 	umull	r2, r3, r3, r1
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2264      	movs	r2, #100	; 0x64
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	1acb      	subs	r3, r1, r3
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004946:	4b36      	ldr	r3, [pc, #216]	; (8004a20 <UART_SetConfig+0x2d4>)
 8004948:	fba3 2302 	umull	r2, r3, r3, r2
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004954:	441c      	add	r4, r3
 8004956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495a:	2200      	movs	r2, #0
 800495c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004960:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004964:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	1891      	adds	r1, r2, r2
 800496e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004970:	415b      	adcs	r3, r3
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004974:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004978:	4641      	mov	r1, r8
 800497a:	1851      	adds	r1, r2, r1
 800497c:	6339      	str	r1, [r7, #48]	; 0x30
 800497e:	4649      	mov	r1, r9
 8004980:	414b      	adcs	r3, r1
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004990:	4659      	mov	r1, fp
 8004992:	00cb      	lsls	r3, r1, #3
 8004994:	4651      	mov	r1, sl
 8004996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499a:	4651      	mov	r1, sl
 800499c:	00ca      	lsls	r2, r1, #3
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	4603      	mov	r3, r0
 80049a4:	4642      	mov	r2, r8
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049ac:	464b      	mov	r3, r9
 80049ae:	460a      	mov	r2, r1
 80049b0:	eb42 0303 	adc.w	r3, r2, r3
 80049b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049cc:	460b      	mov	r3, r1
 80049ce:	18db      	adds	r3, r3, r3
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d2:	4613      	mov	r3, r2
 80049d4:	eb42 0303 	adc.w	r3, r2, r3
 80049d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049e2:	f7fb fc5d 	bl	80002a0 <__aeabi_uldivmod>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <UART_SetConfig+0x2d4>)
 80049ec:	fba3 1302 	umull	r1, r3, r3, r2
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	2164      	movs	r1, #100	; 0x64
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3332      	adds	r3, #50	; 0x32
 80049fe:	4a08      	ldr	r2, [pc, #32]	; (8004a20 <UART_SetConfig+0x2d4>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	f003 0207 	and.w	r2, r3, #7
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4422      	add	r2, r4
 8004a12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a14:	e105      	b.n	8004c22 <UART_SetConfig+0x4d6>
 8004a16:	bf00      	nop
 8004a18:	40011000 	.word	0x40011000
 8004a1c:	40011400 	.word	0x40011400
 8004a20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a36:	4642      	mov	r2, r8
 8004a38:	464b      	mov	r3, r9
 8004a3a:	1891      	adds	r1, r2, r2
 8004a3c:	6239      	str	r1, [r7, #32]
 8004a3e:	415b      	adcs	r3, r3
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
 8004a42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a46:	4641      	mov	r1, r8
 8004a48:	1854      	adds	r4, r2, r1
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	eb43 0501 	adc.w	r5, r3, r1
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	00eb      	lsls	r3, r5, #3
 8004a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5e:	00e2      	lsls	r2, r4, #3
 8004a60:	4614      	mov	r4, r2
 8004a62:	461d      	mov	r5, r3
 8004a64:	4643      	mov	r3, r8
 8004a66:	18e3      	adds	r3, r4, r3
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	eb45 0303 	adc.w	r3, r5, r3
 8004a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a92:	4629      	mov	r1, r5
 8004a94:	008b      	lsls	r3, r1, #2
 8004a96:	4621      	mov	r1, r4
 8004a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	008a      	lsls	r2, r1, #2
 8004aa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aa4:	f7fb fbfc 	bl	80002a0 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4b60      	ldr	r3, [pc, #384]	; (8004c30 <UART_SetConfig+0x4e4>)
 8004aae:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	011c      	lsls	r4, r3, #4
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ac0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ac4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	61b9      	str	r1, [r7, #24]
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad8:	4641      	mov	r1, r8
 8004ada:	1851      	adds	r1, r2, r1
 8004adc:	6139      	str	r1, [r7, #16]
 8004ade:	4649      	mov	r1, r9
 8004ae0:	414b      	adcs	r3, r1
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af0:	4659      	mov	r1, fp
 8004af2:	00cb      	lsls	r3, r1, #3
 8004af4:	4651      	mov	r1, sl
 8004af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afa:	4651      	mov	r1, sl
 8004afc:	00ca      	lsls	r2, r1, #3
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	4642      	mov	r2, r8
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	460a      	mov	r2, r1
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b30:	4649      	mov	r1, r9
 8004b32:	008b      	lsls	r3, r1, #2
 8004b34:	4641      	mov	r1, r8
 8004b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	008a      	lsls	r2, r1, #2
 8004b3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b42:	f7fb fbad 	bl	80002a0 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <UART_SetConfig+0x4e4>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	; 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	3332      	adds	r3, #50	; 0x32
 8004b5e:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <UART_SetConfig+0x4e4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6a:	441c      	add	r4, r3
 8004b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b70:	2200      	movs	r2, #0
 8004b72:	673b      	str	r3, [r7, #112]	; 0x70
 8004b74:	677a      	str	r2, [r7, #116]	; 0x74
 8004b76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b7a:	4642      	mov	r2, r8
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	1891      	adds	r1, r2, r2
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	415b      	adcs	r3, r3
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b8a:	4641      	mov	r1, r8
 8004b8c:	1851      	adds	r1, r2, r1
 8004b8e:	6039      	str	r1, [r7, #0]
 8004b90:	4649      	mov	r1, r9
 8004b92:	414b      	adcs	r3, r1
 8004b94:	607b      	str	r3, [r7, #4]
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ba2:	4659      	mov	r1, fp
 8004ba4:	00cb      	lsls	r3, r1, #3
 8004ba6:	4651      	mov	r1, sl
 8004ba8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bac:	4651      	mov	r1, sl
 8004bae:	00ca      	lsls	r2, r1, #3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	189b      	adds	r3, r3, r2
 8004bba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	663b      	str	r3, [r7, #96]	; 0x60
 8004bd0:	667a      	str	r2, [r7, #100]	; 0x64
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bde:	4649      	mov	r1, r9
 8004be0:	008b      	lsls	r3, r1, #2
 8004be2:	4641      	mov	r1, r8
 8004be4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be8:	4641      	mov	r1, r8
 8004bea:	008a      	lsls	r2, r1, #2
 8004bec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bf0:	f7fb fb56 	bl	80002a0 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <UART_SetConfig+0x4e4>)
 8004bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2164      	movs	r1, #100	; 0x64
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	3332      	adds	r3, #50	; 0x32
 8004c0c:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <UART_SetConfig+0x4e4>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	f003 020f 	and.w	r2, r3, #15
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4422      	add	r2, r4
 8004c20:	609a      	str	r2, [r3, #8]
}
 8004c22:	bf00      	nop
 8004c24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2e:	bf00      	nop
 8004c30:	51eb851f 	.word	0x51eb851f

08004c34 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f103 0208 	add.w	r2, r3, #8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c4c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f103 0208 	add.w	r2, r3, #8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f103 0208 	add.w	r2, r3, #8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cec:	d103      	bne.n	8004cf6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e00c      	b.n	8004d10 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e002      	b.n	8004d04 <vListInsert+0x2e>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d2f6      	bcs.n	8004cfe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6892      	ldr	r2, [r2, #8]
 8004d5e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6852      	ldr	r2, [r2, #4]
 8004d68:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d103      	bne.n	8004d7c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	1e5a      	subs	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueGenericReset+0x2a>
        __asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60bb      	str	r3, [r7, #8]
    }
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004dc6:	f002 fb37 	bl	8007438 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df6:	3b01      	subs	r3, #1
 8004df8:	68f9      	ldr	r1, [r7, #12]
 8004dfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	441a      	add	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	22ff      	movs	r2, #255	; 0xff
 8004e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	22ff      	movs	r2, #255	; 0xff
 8004e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d114      	bne.n	8004e46 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01a      	beq.n	8004e5a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3310      	adds	r3, #16
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 f921 	bl	8006070 <xTaskRemoveFromEventList>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d012      	beq.n	8004e5a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <xQueueGenericReset+0xcc>)
 8004e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	e009      	b.n	8004e5a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3310      	adds	r3, #16
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fef2 	bl	8004c34 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3324      	adds	r3, #36	; 0x24
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff feed 	bl	8004c34 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004e5a:	f002 fb1d 	bl	8007498 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004e5e:	2301      	movs	r3, #1
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	; 0x30
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	61bb      	str	r3, [r7, #24]
    }
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d006      	beq.n	8004eb4 <xQueueGenericCreate+0x48>
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d101      	bne.n	8004eb8 <xQueueGenericCreate+0x4c>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <xQueueGenericCreate+0x4e>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <xQueueGenericCreate+0x68>
        __asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	617b      	str	r3, [r7, #20]
    }
 8004ed0:	bf00      	nop
 8004ed2:	e7fe      	b.n	8004ed2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004eda:	d90a      	bls.n	8004ef2 <xQueueGenericCreate+0x86>
        __asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	613b      	str	r3, [r7, #16]
    }
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	3350      	adds	r3, #80	; 0x50
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f002 fbc0 	bl	800767c <pvPortMalloc>
 8004efc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00d      	beq.n	8004f20 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	3350      	adds	r3, #80	; 0x50
 8004f0c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f0e:	79fa      	ldrb	r2, [r7, #7]
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f805 	bl	8004f2a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004f20:	6a3b      	ldr	r3, [r7, #32]
    }
 8004f22:	4618      	mov	r0, r3
 8004f24:	3728      	adds	r7, #40	; 0x28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e002      	b.n	8004f4c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f58:	2101      	movs	r1, #1
 8004f5a:	69b8      	ldr	r0, [r7, #24]
 8004f5c:	f7ff ff1e 	bl	8004d9c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08e      	sub	sp, #56	; 0x38
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xQueueGenericSend+0x32>
        __asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <xQueueGenericSend+0x40>
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <xQueueGenericSend+0x44>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <xQueueGenericSend+0x46>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <xQueueGenericSend+0x60>
        __asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d103      	bne.n	8004fde <xQueueGenericSend+0x6e>
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <xQueueGenericSend+0x72>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <xQueueGenericSend+0x74>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueGenericSend+0x8e>
        __asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	623b      	str	r3, [r7, #32]
    }
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ffe:	f001 f9d3 	bl	80063a8 <xTaskGetSchedulerState>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <xQueueGenericSend+0x9e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <xQueueGenericSend+0xa2>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <xQueueGenericSend+0xa4>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <xQueueGenericSend+0xbe>
        __asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	61fb      	str	r3, [r7, #28]
    }
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800502e:	f002 fa03 	bl	8007438 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <xQueueGenericSend+0xd4>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d129      	bne.n	8005098 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504a:	f000 fac6 	bl	80055da <prvCopyDataToQueue>
 800504e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	d010      	beq.n	800507a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	3324      	adds	r3, #36	; 0x24
 800505c:	4618      	mov	r0, r3
 800505e:	f001 f807 	bl	8006070 <xTaskRemoveFromEventList>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d013      	beq.n	8005090 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005068:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <xQueueGenericSend+0x1f8>)
 800506a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	e00a      	b.n	8005090 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005080:	4b39      	ldr	r3, [pc, #228]	; (8005168 <xQueueGenericSend+0x1f8>)
 8005082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005090:	f002 fa02 	bl	8007498 <vPortExitCritical>
                return pdPASS;
 8005094:	2301      	movs	r3, #1
 8005096:	e063      	b.n	8005160 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800509e:	f002 f9fb 	bl	8007498 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e05c      	b.n	8005160 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80050ac:	f107 0314 	add.w	r3, r7, #20
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 f83f 	bl	8006134 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80050ba:	f002 f9ed 	bl	8007498 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80050be:	f000 fdb9 	bl	8005c34 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80050c2:	f002 f9b9 	bl	8007438 <vPortEnterCritical>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050cc:	b25b      	sxtb	r3, r3
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d2:	d103      	bne.n	80050dc <xQueueGenericSend+0x16c>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e2:	b25b      	sxtb	r3, r3
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e8:	d103      	bne.n	80050f2 <xQueueGenericSend+0x182>
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f2:	f002 f9d1 	bl	8007498 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050f6:	1d3a      	adds	r2, r7, #4
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 f82e 	bl	8006160 <xTaskCheckForTimeOut>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d124      	bne.n	8005154 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800510a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800510c:	f000 fb5d 	bl	80057ca <prvIsQueueFull>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d018      	beq.n	8005148 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	3310      	adds	r3, #16
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f000 ff56 	bl	8005fd0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005126:	f000 fae8 	bl	80056fa <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800512a:	f000 fd91 	bl	8005c50 <xTaskResumeAll>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	f47f af7c 	bne.w	800502e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <xQueueGenericSend+0x1f8>)
 8005138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	e772      	b.n	800502e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800514a:	f000 fad6 	bl	80056fa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800514e:	f000 fd7f 	bl	8005c50 <xTaskResumeAll>
 8005152:	e76c      	b.n	800502e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005156:	f000 fad0 	bl	80056fa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800515a:	f000 fd79 	bl	8005c50 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800515e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005160:	4618      	mov	r0, r3
 8005162:	3738      	adds	r7, #56	; 0x38
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b090      	sub	sp, #64	; 0x40
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <xQueueGenericSendFromISR+0x3c>
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <xQueueGenericSendFromISR+0x40>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <xQueueGenericSendFromISR+0x42>
 80051ac:	2300      	movs	r3, #0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d103      	bne.n	80051d6 <xQueueGenericSendFromISR+0x6a>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <xQueueGenericSendFromISR+0x6e>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueGenericSendFromISR+0x70>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	623b      	str	r3, [r7, #32]
    }
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051f6:	f002 fa01 	bl	80075fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80051fa:	f3ef 8211 	mrs	r2, BASEPRI
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	61fa      	str	r2, [r7, #28]
 8005210:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005212:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005214:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <xQueueGenericSendFromISR+0xbc>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d13e      	bne.n	80052a6 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800522e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800523e:	f000 f9cc 	bl	80055da <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005242:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800524a:	d112      	bne.n	8005272 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d025      	beq.n	80052a0 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	3324      	adds	r3, #36	; 0x24
 8005258:	4618      	mov	r0, r3
 800525a:	f000 ff09 	bl	8006070 <xTaskRemoveFromEventList>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01d      	beq.n	80052a0 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e016      	b.n	80052a0 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005272:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005276:	2b7f      	cmp	r3, #127	; 0x7f
 8005278:	d10a      	bne.n	8005290 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	617b      	str	r3, [r7, #20]
    }
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005294:	3301      	adds	r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	b25a      	sxtb	r2, r3
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80052a0:	2301      	movs	r3, #1
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80052a4:	e001      	b.n	80052aa <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80052b4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80052b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3740      	adds	r7, #64	; 0x40
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08c      	sub	sp, #48	; 0x30
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <xQueueReceive+0x30>
        __asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	623b      	str	r3, [r7, #32]
    }
 80052ec:	bf00      	nop
 80052ee:	e7fe      	b.n	80052ee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <xQueueReceive+0x3e>
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <xQueueReceive+0x42>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <xQueueReceive+0x44>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <xQueueReceive+0x5e>
        __asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	61fb      	str	r3, [r7, #28]
    }
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800531e:	f001 f843 	bl	80063a8 <xTaskGetSchedulerState>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d102      	bne.n	800532e <xQueueReceive+0x6e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <xQueueReceive+0x72>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <xQueueReceive+0x74>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <xQueueReceive+0x8e>
        __asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	61bb      	str	r3, [r7, #24]
    }
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800534e:	f002 f873 	bl	8007438 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01f      	beq.n	800539e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005362:	f000 f9a4 	bl	80056ae <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	1e5a      	subs	r2, r3, #1
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00f      	beq.n	8005396 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	3310      	adds	r3, #16
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fe78 	bl	8006070 <xTaskRemoveFromEventList>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005386:	4b3d      	ldr	r3, [pc, #244]	; (800547c <xQueueReceive+0x1bc>)
 8005388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005396:	f002 f87f 	bl	8007498 <vPortExitCritical>
                return pdPASS;
 800539a:	2301      	movs	r3, #1
 800539c:	e069      	b.n	8005472 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80053a4:	f002 f878 	bl	8007498 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e062      	b.n	8005472 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80053b2:	f107 0310 	add.w	r3, r7, #16
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 febc 	bl	8006134 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80053c0:	f002 f86a 	bl	8007498 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80053c4:	f000 fc36 	bl	8005c34 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80053c8:	f002 f836 	bl	8007438 <vPortEnterCritical>
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d8:	d103      	bne.n	80053e2 <xQueueReceive+0x122>
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e8:	b25b      	sxtb	r3, r3
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ee:	d103      	bne.n	80053f8 <xQueueReceive+0x138>
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f8:	f002 f84e 	bl	8007498 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053fc:	1d3a      	adds	r2, r7, #4
 80053fe:	f107 0310 	add.w	r3, r7, #16
 8005402:	4611      	mov	r1, r2
 8005404:	4618      	mov	r0, r3
 8005406:	f000 feab 	bl	8006160 <xTaskCheckForTimeOut>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d123      	bne.n	8005458 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005412:	f000 f9c4 	bl	800579e <prvIsQueueEmpty>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d017      	beq.n	800544c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	3324      	adds	r3, #36	; 0x24
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fdd3 	bl	8005fd0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800542a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800542c:	f000 f965 	bl	80056fa <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005430:	f000 fc0e 	bl	8005c50 <xTaskResumeAll>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d189      	bne.n	800534e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800543a:	4b10      	ldr	r3, [pc, #64]	; (800547c <xQueueReceive+0x1bc>)
 800543c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	e780      	b.n	800534e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800544c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800544e:	f000 f954 	bl	80056fa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005452:	f000 fbfd 	bl	8005c50 <xTaskResumeAll>
 8005456:	e77a      	b.n	800534e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545a:	f000 f94e 	bl	80056fa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800545e:	f000 fbf7 	bl	8005c50 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005464:	f000 f99b 	bl	800579e <prvIsQueueEmpty>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	f43f af6f 	beq.w	800534e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005470:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005472:	4618      	mov	r0, r3
 8005474:	3730      	adds	r7, #48	; 0x30
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b090      	sub	sp, #64	; 0x40
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80054a8:	bf00      	nop
 80054aa:	e7fe      	b.n	80054aa <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <xQueueReceiveFromISR+0x3a>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <xQueueReceiveFromISR+0x3e>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <xQueueReceiveFromISR+0x40>
 80054be:	2300      	movs	r3, #0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054da:	f002 f88f 	bl	80075fc <vPortValidateInterruptPriority>
        __asm volatile
 80054de:	f3ef 8211 	mrs	r2, BASEPRI
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	623a      	str	r2, [r7, #32]
 80054f4:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80054f6:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	2b00      	cmp	r3, #0
 8005504:	d03e      	beq.n	8005584 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800550c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005514:	f000 f8cb 	bl	80056ae <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	1e5a      	subs	r2, r3, #1
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005520:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005528:	d112      	bne.n	8005550 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d025      	beq.n	800557e <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	3310      	adds	r3, #16
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fd9a 	bl	8006070 <xTaskRemoveFromEventList>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01d      	beq.n	800557e <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01a      	beq.n	800557e <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e016      	b.n	800557e <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005550:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005554:	2b7f      	cmp	r3, #127	; 0x7f
 8005556:	d10a      	bne.n	800556e <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	61bb      	str	r3, [r7, #24]
    }
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800556e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005572:	3301      	adds	r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	b25a      	sxtb	r2, r3
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800557e:	2301      	movs	r3, #1
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005582:	e001      	b.n	8005588 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f383 8811 	msr	BASEPRI, r3
    }
 8005592:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005596:	4618      	mov	r0, r3
 8005598:	3740      	adds	r7, #64	; 0x40
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60bb      	str	r3, [r7, #8]
    }
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80055c2:	f001 ff39 	bl	8007438 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80055cc:	f001 ff64 	bl	8007498 <vPortExitCritical>

    return uxReturn;
 80055d0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b086      	sub	sp, #24
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10d      	bne.n	8005614 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d14d      	bne.n	800569c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 feed 	bl	80063e4 <xTaskPriorityDisinherit>
 800560a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	e043      	b.n	800569c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d119      	bne.n	800564e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6858      	ldr	r0, [r3, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	461a      	mov	r2, r3
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	f002 fa4b 	bl	8007ac0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	429a      	cmp	r2, r3
 8005642:	d32b      	bcc.n	800569c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	e026      	b.n	800569c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68d8      	ldr	r0, [r3, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	461a      	mov	r2, r3
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	f002 fa31 	bl	8007ac0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	425b      	negs	r3, r3
 8005668:	441a      	add	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d207      	bcs.n	800568a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	425b      	negs	r3, r3
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d105      	bne.n	800569c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	3b01      	subs	r3, #1
 800569a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80056a4:	697b      	ldr	r3, [r7, #20]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d018      	beq.n	80056f2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	441a      	add	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d303      	bcc.n	80056e2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68d9      	ldr	r1, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	461a      	mov	r2, r3
 80056ec:	6838      	ldr	r0, [r7, #0]
 80056ee:	f002 f9e7 	bl	8007ac0 <memcpy>
    }
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005702:	f001 fe99 	bl	8007438 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800570c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800570e:	e011      	b.n	8005734 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d012      	beq.n	800573e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3324      	adds	r3, #36	; 0x24
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fca7 	bl	8006070 <xTaskRemoveFromEventList>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005728:	f000 fd80 	bl	800622c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	3b01      	subs	r3, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005738:	2b00      	cmp	r3, #0
 800573a:	dce9      	bgt.n	8005710 <prvUnlockQueue+0x16>
 800573c:	e000      	b.n	8005740 <prvUnlockQueue+0x46>
                        break;
 800573e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005748:	f001 fea6 	bl	8007498 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800574c:	f001 fe74 	bl	8007438 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005756:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005758:	e011      	b.n	800577e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d012      	beq.n	8005788 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3310      	adds	r3, #16
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fc82 	bl	8006070 <xTaskRemoveFromEventList>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005772:	f000 fd5b 	bl	800622c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005776:	7bbb      	ldrb	r3, [r7, #14]
 8005778:	3b01      	subs	r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800577e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005782:	2b00      	cmp	r3, #0
 8005784:	dce9      	bgt.n	800575a <prvUnlockQueue+0x60>
 8005786:	e000      	b.n	800578a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005788:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	22ff      	movs	r2, #255	; 0xff
 800578e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005792:	f001 fe81 	bl	8007498 <vPortExitCritical>
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80057a6:	f001 fe47 	bl	8007438 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80057b2:	2301      	movs	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e001      	b.n	80057bc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80057bc:	f001 fe6c 	bl	8007498 <vPortExitCritical>

    return xReturn;
 80057c0:	68fb      	ldr	r3, [r7, #12]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80057d2:	f001 fe31 	bl	8007438 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	429a      	cmp	r2, r3
 80057e0:	d102      	bne.n	80057e8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80057e2:	2301      	movs	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e001      	b.n	80057ec <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80057ec:	f001 fe54 	bl	8007498 <vPortExitCritical>

    return xReturn;
 80057f0:	68fb      	ldr	r3, [r7, #12]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80057fa:	b480      	push	{r7}
 80057fc:	b087      	sub	sp, #28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60fb      	str	r3, [r7, #12]
    }
 800581e:	bf00      	nop
 8005820:	e7fe      	b.n	8005820 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	429a      	cmp	r2, r3
 800582c:	d102      	bne.n	8005834 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800582e:	2301      	movs	r3, #1
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e001      	b.n	8005838 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005838:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800583a:	4618      	mov	r0, r3
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e014      	b.n	8005882 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005858:	4a0f      	ldr	r2, [pc, #60]	; (8005898 <vQueueAddToRegistry+0x50>)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005864:	490c      	ldr	r1, [pc, #48]	; (8005898 <vQueueAddToRegistry+0x50>)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800586e:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <vQueueAddToRegistry+0x50>)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	4413      	add	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800587a:	e006      	b.n	800588a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b07      	cmp	r3, #7
 8005886:	d9e7      	bls.n	8005858 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	200001e8 	.word	0x200001e8

0800589c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80058ac:	f001 fdc4 	bl	8007438 <vPortEnterCritical>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058b6:	b25b      	sxtb	r3, r3
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058bc:	d103      	bne.n	80058c6 <vQueueWaitForMessageRestricted+0x2a>
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058cc:	b25b      	sxtb	r3, r3
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d2:	d103      	bne.n	80058dc <vQueueWaitForMessageRestricted+0x40>
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058dc:	f001 fddc 	bl	8007498 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3324      	adds	r3, #36	; 0x24
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fb91 	bl	8006018 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80058f6:	6978      	ldr	r0, [r7, #20]
 80058f8:	f7ff feff 	bl	80056fa <prvUnlockQueue>
    }
 80058fc:	bf00      	nop
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005904:	b580      	push	{r7, lr}
 8005906:	b08c      	sub	sp, #48	; 0x30
 8005908:	af04      	add	r7, sp, #16
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4618      	mov	r0, r3
 800591a:	f001 feaf 	bl	800767c <pvPortMalloc>
 800591e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00e      	beq.n	8005944 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005926:	2058      	movs	r0, #88	; 0x58
 8005928:	f001 fea8 	bl	800767c <pvPortMalloc>
 800592c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
 800593a:	e005      	b.n	8005948 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800593c:	6978      	ldr	r0, [r7, #20]
 800593e:	f001 ff7d 	bl	800783c <vPortFree>
 8005942:	e001      	b.n	8005948 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d013      	beq.n	8005976 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	2300      	movs	r3, #0
 8005952:	9303      	str	r3, [sp, #12]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	9302      	str	r3, [sp, #8]
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f80e 	bl	8005986 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800596a:	69f8      	ldr	r0, [r7, #28]
 800596c:	f000 f8a2 	bl	8005ab4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005970:	2301      	movs	r3, #1
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	e002      	b.n	800597c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800597a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800597c:	69bb      	ldr	r3, [r7, #24]
    }
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b088      	sub	sp, #32
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	461a      	mov	r2, r3
 800599e:	21a5      	movs	r1, #165	; 0xa5
 80059a0:	f002 f89c 	bl	8007adc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059ae:	3b01      	subs	r3, #1
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	f023 0307 	bic.w	r3, r3, #7
 80059bc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <prvInitialiseNewTask+0x58>
        __asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	617b      	str	r3, [r7, #20]
    }
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01f      	beq.n	8005a24 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e012      	b.n	8005a10 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	7819      	ldrb	r1, [r3, #0]
 80059f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	3334      	adds	r3, #52	; 0x34
 80059fa:	460a      	mov	r2, r1
 80059fc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b09      	cmp	r3, #9
 8005a14:	d9e9      	bls.n	80059ea <prvInitialiseNewTask+0x64>
 8005a16:	e000      	b.n	8005a1a <prvInitialiseNewTask+0x94>
            {
                break;
 8005a18:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a22:	e003      	b.n	8005a2c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d901      	bls.n	8005a36 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a32:	2304      	movs	r3, #4
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a40:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	2200      	movs	r2, #0
 8005a46:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff f911 	bl	8004c74 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	3318      	adds	r3, #24
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff f90c 	bl	8004c74 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a60:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	f1c3 0205 	rsb	r2, r3, #5
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	3350      	adds	r3, #80	; 0x50
 8005a76:	2204      	movs	r2, #4
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f002 f82e 	bl	8007adc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	3354      	adds	r3, #84	; 0x54
 8005a84:	2201      	movs	r2, #1
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f002 f827 	bl	8007adc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	68f9      	ldr	r1, [r7, #12]
 8005a92:	69b8      	ldr	r0, [r7, #24]
 8005a94:	f001 fba0 	bl	80071d8 <pxPortInitialiseStack>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005aaa:	bf00      	nop
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005abc:	f001 fcbc 	bl	8007438 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005ac0:	4b2c      	ldr	r3, [pc, #176]	; (8005b74 <prvAddNewTaskToReadyList+0xc0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	4a2b      	ldr	r2, [pc, #172]	; (8005b74 <prvAddNewTaskToReadyList+0xc0>)
 8005ac8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005aca:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <prvAddNewTaskToReadyList+0xc4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005ad2:	4a29      	ldr	r2, [pc, #164]	; (8005b78 <prvAddNewTaskToReadyList+0xc4>)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ad8:	4b26      	ldr	r3, [pc, #152]	; (8005b74 <prvAddNewTaskToReadyList+0xc0>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d110      	bne.n	8005b02 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005ae0:	f000 fbc8 	bl	8006274 <prvInitialiseTaskLists>
 8005ae4:	e00d      	b.n	8005b02 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005ae6:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <prvAddNewTaskToReadyList+0xc8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005aee:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <prvAddNewTaskToReadyList+0xc4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d802      	bhi.n	8005b02 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005afc:	4a1e      	ldr	r2, [pc, #120]	; (8005b78 <prvAddNewTaskToReadyList+0xc4>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005b02:	4b1f      	ldr	r3, [pc, #124]	; (8005b80 <prvAddNewTaskToReadyList+0xcc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3301      	adds	r3, #1
 8005b08:	4a1d      	ldr	r2, [pc, #116]	; (8005b80 <prvAddNewTaskToReadyList+0xcc>)
 8005b0a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b0c:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <prvAddNewTaskToReadyList+0xcc>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	2201      	movs	r2, #1
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	4b19      	ldr	r3, [pc, #100]	; (8005b84 <prvAddNewTaskToReadyList+0xd0>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	4a18      	ldr	r2, [pc, #96]	; (8005b84 <prvAddNewTaskToReadyList+0xd0>)
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <prvAddNewTaskToReadyList+0xd4>)
 8005b34:	441a      	add	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7ff f8a6 	bl	8004c8e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005b42:	f001 fca9 	bl	8007498 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005b46:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <prvAddNewTaskToReadyList+0xc8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <prvAddNewTaskToReadyList+0xc4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d207      	bcs.n	8005b6c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <prvAddNewTaskToReadyList+0xd8>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000300 	.word	0x20000300
 8005b78:	20000228 	.word	0x20000228
 8005b7c:	2000030c 	.word	0x2000030c
 8005b80:	2000031c 	.word	0x2000031c
 8005b84:	20000308 	.word	0x20000308
 8005b88:	2000022c 	.word	0x2000022c
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005b96:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <vTaskStartScheduler+0x88>)
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2282      	movs	r2, #130	; 0x82
 8005ba2:	491e      	ldr	r1, [pc, #120]	; (8005c1c <vTaskStartScheduler+0x8c>)
 8005ba4:	481e      	ldr	r0, [pc, #120]	; (8005c20 <vTaskStartScheduler+0x90>)
 8005ba6:	f7ff fead 	bl	8005904 <xTaskCreate>
 8005baa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d102      	bne.n	8005bb8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005bb2:	f000 ff59 	bl	8006a68 <xTimerCreateTimerTask>
 8005bb6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d116      	bne.n	8005bec <vTaskStartScheduler+0x5c>
        __asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60bb      	str	r3, [r7, #8]
    }
 8005bd0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005bd2:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <vTaskStartScheduler+0x94>)
 8005bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bd8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005bda:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <vTaskStartScheduler+0x98>)
 8005bdc:	2201      	movs	r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005be0:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <vTaskStartScheduler+0x9c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005be6:	f001 fb85 	bl	80072f4 <xPortStartScheduler>
 8005bea:	e00e      	b.n	8005c0a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bf2:	d10a      	bne.n	8005c0a <vTaskStartScheduler+0x7a>
        __asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	607b      	str	r3, [r7, #4]
    }
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <vTaskStartScheduler+0xa0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000324 	.word	0x20000324
 8005c1c:	080091a4 	.word	0x080091a4
 8005c20:	08006245 	.word	0x08006245
 8005c24:	20000320 	.word	0x20000320
 8005c28:	2000030c 	.word	0x2000030c
 8005c2c:	20000304 	.word	0x20000304
 8005c30:	20000020 	.word	0x20000020

08005c34 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005c38:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <vTaskSuspendAll+0x18>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	4a03      	ldr	r2, [pc, #12]	; (8005c4c <vTaskSuspendAll+0x18>)
 8005c40:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005c42:	bf00      	nop
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	20000328 	.word	0x20000328

08005c50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005c5e:	4b41      	ldr	r3, [pc, #260]	; (8005d64 <xTaskResumeAll+0x114>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <xTaskResumeAll+0x2c>
        __asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	603b      	str	r3, [r7, #0]
    }
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005c7c:	f001 fbdc 	bl	8007438 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005c80:	4b38      	ldr	r3, [pc, #224]	; (8005d64 <xTaskResumeAll+0x114>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	4a37      	ldr	r2, [pc, #220]	; (8005d64 <xTaskResumeAll+0x114>)
 8005c88:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c8a:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <xTaskResumeAll+0x114>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d161      	bne.n	8005d56 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c92:	4b35      	ldr	r3, [pc, #212]	; (8005d68 <xTaskResumeAll+0x118>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d05d      	beq.n	8005d56 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c9a:	e02e      	b.n	8005cfa <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9c:	4b33      	ldr	r3, [pc, #204]	; (8005d6c <xTaskResumeAll+0x11c>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3318      	adds	r3, #24
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff f84d 	bl	8004d48 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff f848 	bl	8004d48 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <xTaskResumeAll+0x120>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <xTaskResumeAll+0x120>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4a27      	ldr	r2, [pc, #156]	; (8005d74 <xTaskResumeAll+0x124>)
 8005cd8:	441a      	add	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7fe ffd4 	bl	8004c8e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <xTaskResumeAll+0x128>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d302      	bcc.n	8005cfa <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005cf4:	4b21      	ldr	r3, [pc, #132]	; (8005d7c <xTaskResumeAll+0x12c>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cfa:	4b1c      	ldr	r3, [pc, #112]	; (8005d6c <xTaskResumeAll+0x11c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1cc      	bne.n	8005c9c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005d08:	f000 fb32 	bl	8006370 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d0c:	4b1c      	ldr	r3, [pc, #112]	; (8005d80 <xTaskResumeAll+0x130>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d010      	beq.n	8005d3a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005d18:	f000 f846 	bl	8005da8 <xTaskIncrementTick>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <xTaskResumeAll+0x12c>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f1      	bne.n	8005d18 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005d34:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <xTaskResumeAll+0x130>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005d3a:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <xTaskResumeAll+0x12c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005d42:	2301      	movs	r3, #1
 8005d44:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <xTaskResumeAll+0x134>)
 8005d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005d56:	f001 fb9f 	bl	8007498 <vPortExitCritical>

    return xAlreadyYielded;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20000328 	.word	0x20000328
 8005d68:	20000300 	.word	0x20000300
 8005d6c:	200002c0 	.word	0x200002c0
 8005d70:	20000308 	.word	0x20000308
 8005d74:	2000022c 	.word	0x2000022c
 8005d78:	20000228 	.word	0x20000228
 8005d7c:	20000314 	.word	0x20000314
 8005d80:	20000310 	.word	0x20000310
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <xTaskGetTickCount+0x1c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005d94:	687b      	ldr	r3, [r7, #4]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20000304 	.word	0x20000304

08005da8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005db2:	4b4e      	ldr	r3, [pc, #312]	; (8005eec <xTaskIncrementTick+0x144>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f040 808e 	bne.w	8005ed8 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dbc:	4b4c      	ldr	r3, [pc, #304]	; (8005ef0 <xTaskIncrementTick+0x148>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005dc4:	4a4a      	ldr	r2, [pc, #296]	; (8005ef0 <xTaskIncrementTick+0x148>)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d120      	bne.n	8005e12 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005dd0:	4b48      	ldr	r3, [pc, #288]	; (8005ef4 <xTaskIncrementTick+0x14c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <xTaskIncrementTick+0x48>
        __asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	603b      	str	r3, [r7, #0]
    }
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <xTaskIncrementTick+0x46>
 8005df0:	4b40      	ldr	r3, [pc, #256]	; (8005ef4 <xTaskIncrementTick+0x14c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	4b40      	ldr	r3, [pc, #256]	; (8005ef8 <xTaskIncrementTick+0x150>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a3e      	ldr	r2, [pc, #248]	; (8005ef4 <xTaskIncrementTick+0x14c>)
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	4a3e      	ldr	r2, [pc, #248]	; (8005ef8 <xTaskIncrementTick+0x150>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	4b3d      	ldr	r3, [pc, #244]	; (8005efc <xTaskIncrementTick+0x154>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <xTaskIncrementTick+0x154>)
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	f000 faaf 	bl	8006370 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005e12:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <xTaskIncrementTick+0x158>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d348      	bcc.n	8005eae <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1c:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <xTaskIncrementTick+0x14c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d104      	bne.n	8005e30 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e26:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <xTaskIncrementTick+0x158>)
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e2c:	601a      	str	r2, [r3, #0]
                    break;
 8005e2e:	e03e      	b.n	8005eae <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e30:	4b30      	ldr	r3, [pc, #192]	; (8005ef4 <xTaskIncrementTick+0x14c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d203      	bcs.n	8005e50 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005e48:	4a2d      	ldr	r2, [pc, #180]	; (8005f00 <xTaskIncrementTick+0x158>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e4e:	e02e      	b.n	8005eae <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe ff77 	bl	8004d48 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	3318      	adds	r3, #24
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe ff6e 	bl	8004d48 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	2201      	movs	r2, #1
 8005e72:	409a      	lsls	r2, r3
 8005e74:	4b23      	ldr	r3, [pc, #140]	; (8005f04 <xTaskIncrementTick+0x15c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	4a22      	ldr	r2, [pc, #136]	; (8005f04 <xTaskIncrementTick+0x15c>)
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <xTaskIncrementTick+0x160>)
 8005e8c:	441a      	add	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7fe fefa 	bl	8004c8e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9e:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <xTaskIncrementTick+0x164>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d3b9      	bcc.n	8005e1c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eac:	e7b6      	b.n	8005e1c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <xTaskIncrementTick+0x164>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	4914      	ldr	r1, [pc, #80]	; (8005f08 <xTaskIncrementTick+0x160>)
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d901      	bls.n	8005eca <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005eca:	4b11      	ldr	r3, [pc, #68]	; (8005f10 <xTaskIncrementTick+0x168>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e004      	b.n	8005ee2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <xTaskIncrementTick+0x16c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	4a0d      	ldr	r2, [pc, #52]	; (8005f14 <xTaskIncrementTick+0x16c>)
 8005ee0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005ee2:	697b      	ldr	r3, [r7, #20]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000328 	.word	0x20000328
 8005ef0:	20000304 	.word	0x20000304
 8005ef4:	200002b8 	.word	0x200002b8
 8005ef8:	200002bc 	.word	0x200002bc
 8005efc:	20000318 	.word	0x20000318
 8005f00:	20000320 	.word	0x20000320
 8005f04:	20000308 	.word	0x20000308
 8005f08:	2000022c 	.word	0x2000022c
 8005f0c:	20000228 	.word	0x20000228
 8005f10:	20000314 	.word	0x20000314
 8005f14:	20000310 	.word	0x20000310

08005f18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f1e:	4b27      	ldr	r3, [pc, #156]	; (8005fbc <vTaskSwitchContext+0xa4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005f26:	4b26      	ldr	r3, [pc, #152]	; (8005fc0 <vTaskSwitchContext+0xa8>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005f2c:	e03f      	b.n	8005fae <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005f2e:	4b24      	ldr	r3, [pc, #144]	; (8005fc0 <vTaskSwitchContext+0xa8>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f34:	4b23      	ldr	r3, [pc, #140]	; (8005fc4 <vTaskSwitchContext+0xac>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	fab3 f383 	clz	r3, r3
 8005f40:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005f42:	7afb      	ldrb	r3, [r7, #11]
 8005f44:	f1c3 031f 	rsb	r3, r3, #31
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	491f      	ldr	r1, [pc, #124]	; (8005fc8 <vTaskSwitchContext+0xb0>)
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	607b      	str	r3, [r7, #4]
    }
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <vTaskSwitchContext+0x5a>
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4a12      	ldr	r2, [pc, #72]	; (8005fc8 <vTaskSwitchContext+0xb0>)
 8005f80:	4413      	add	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	3308      	adds	r3, #8
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d104      	bne.n	8005fa4 <vTaskSwitchContext+0x8c>
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	605a      	str	r2, [r3, #4]
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <vTaskSwitchContext+0xb4>)
 8005fac:	6013      	str	r3, [r2, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000328 	.word	0x20000328
 8005fc0:	20000314 	.word	0x20000314
 8005fc4:	20000308 	.word	0x20000308
 8005fc8:	2000022c 	.word	0x2000022c
 8005fcc:	20000228 	.word	0x20000228

08005fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60fb      	str	r3, [r7, #12]
    }
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <vTaskPlaceOnEventList+0x44>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3318      	adds	r3, #24
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fe fe69 	bl	8004cd6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006004:	2101      	movs	r1, #1
 8006006:	6838      	ldr	r0, [r7, #0]
 8006008:	f000 fcc8 	bl	800699c <prvAddCurrentTaskToDelayedList>
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000228 	.word	0x20000228

08006018 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	617b      	str	r3, [r7, #20]
    }
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006040:	4b0a      	ldr	r3, [pc, #40]	; (800606c <vTaskPlaceOnEventListRestricted+0x54>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3318      	adds	r3, #24
 8006046:	4619      	mov	r1, r3
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f7fe fe20 	bl	8004c8e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006058:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	68b8      	ldr	r0, [r7, #8]
 800605e:	f000 fc9d 	bl	800699c <prvAddCurrentTaskToDelayedList>
    }
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000228 	.word	0x20000228

08006070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	60fb      	str	r3, [r7, #12]
    }
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	3318      	adds	r3, #24
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fe51 	bl	8004d48 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a6:	4b1d      	ldr	r3, [pc, #116]	; (800611c <xTaskRemoveFromEventList+0xac>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d11c      	bne.n	80060e8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fe48 	bl	8004d48 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	2201      	movs	r2, #1
 80060be:	409a      	lsls	r2, r3
 80060c0:	4b17      	ldr	r3, [pc, #92]	; (8006120 <xTaskRemoveFromEventList+0xb0>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	4a16      	ldr	r2, [pc, #88]	; (8006120 <xTaskRemoveFromEventList+0xb0>)
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4a13      	ldr	r2, [pc, #76]	; (8006124 <xTaskRemoveFromEventList+0xb4>)
 80060d8:	441a      	add	r2, r3
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	3304      	adds	r3, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f7fe fdd4 	bl	8004c8e <vListInsertEnd>
 80060e6:	e005      	b.n	80060f4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	3318      	adds	r3, #24
 80060ec:	4619      	mov	r1, r3
 80060ee:	480e      	ldr	r0, [pc, #56]	; (8006128 <xTaskRemoveFromEventList+0xb8>)
 80060f0:	f7fe fdcd 	bl	8004c8e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <xTaskRemoveFromEventList+0xbc>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	429a      	cmp	r2, r3
 8006100:	d905      	bls.n	800610e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006102:	2301      	movs	r3, #1
 8006104:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <xTaskRemoveFromEventList+0xc0>)
 8006108:	2201      	movs	r2, #1
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	e001      	b.n	8006112 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006112:	697b      	ldr	r3, [r7, #20]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000328 	.word	0x20000328
 8006120:	20000308 	.word	0x20000308
 8006124:	2000022c 	.word	0x2000022c
 8006128:	200002c0 	.word	0x200002c0
 800612c:	20000228 	.word	0x20000228
 8006130:	20000314 	.word	0x20000314

08006134 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <vTaskInternalSetTimeOutState+0x24>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <vTaskInternalSetTimeOutState+0x28>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	605a      	str	r2, [r3, #4]
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	20000318 	.word	0x20000318
 800615c:	20000304 	.word	0x20000304

08006160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	613b      	str	r3, [r7, #16]
    }
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	60fb      	str	r3, [r7, #12]
    }
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80061a2:	f001 f949 	bl	8007438 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80061a6:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <xTaskCheckForTimeOut+0xc4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061be:	d102      	bne.n	80061c6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e026      	b.n	8006214 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b17      	ldr	r3, [pc, #92]	; (8006228 <xTaskCheckForTimeOut+0xc8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d00a      	beq.n	80061e8 <xTaskCheckForTimeOut+0x88>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d305      	bcc.n	80061e8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	e015      	b.n	8006214 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d20b      	bcs.n	800620a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	1ad2      	subs	r2, r2, r3
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff ff98 	bl	8006134 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006204:	2300      	movs	r3, #0
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	e004      	b.n	8006214 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006210:	2301      	movs	r3, #1
 8006212:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006214:	f001 f940 	bl	8007498 <vPortExitCritical>

    return xReturn;
 8006218:	69fb      	ldr	r3, [r7, #28]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000304 	.word	0x20000304
 8006228:	20000318 	.word	0x20000318

0800622c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006230:	4b03      	ldr	r3, [pc, #12]	; (8006240 <vTaskMissedYield+0x14>)
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]
}
 8006236:	bf00      	nop
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	20000314 	.word	0x20000314

08006244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800624c:	f000 f852 	bl	80062f4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <prvIdleTask+0x28>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d9f9      	bls.n	800624c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <prvIdleTask+0x2c>)
 800625a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006268:	e7f0      	b.n	800624c <prvIdleTask+0x8>
 800626a:	bf00      	nop
 800626c:	2000022c 	.word	0x2000022c
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800627a:	2300      	movs	r3, #0
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	e00c      	b.n	800629a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4a12      	ldr	r2, [pc, #72]	; (80062d4 <prvInitialiseTaskLists+0x60>)
 800628c:	4413      	add	r3, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe fcd0 	bl	8004c34 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3301      	adds	r3, #1
 8006298:	607b      	str	r3, [r7, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b04      	cmp	r3, #4
 800629e:	d9ef      	bls.n	8006280 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80062a0:	480d      	ldr	r0, [pc, #52]	; (80062d8 <prvInitialiseTaskLists+0x64>)
 80062a2:	f7fe fcc7 	bl	8004c34 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80062a6:	480d      	ldr	r0, [pc, #52]	; (80062dc <prvInitialiseTaskLists+0x68>)
 80062a8:	f7fe fcc4 	bl	8004c34 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80062ac:	480c      	ldr	r0, [pc, #48]	; (80062e0 <prvInitialiseTaskLists+0x6c>)
 80062ae:	f7fe fcc1 	bl	8004c34 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80062b2:	480c      	ldr	r0, [pc, #48]	; (80062e4 <prvInitialiseTaskLists+0x70>)
 80062b4:	f7fe fcbe 	bl	8004c34 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80062b8:	480b      	ldr	r0, [pc, #44]	; (80062e8 <prvInitialiseTaskLists+0x74>)
 80062ba:	f7fe fcbb 	bl	8004c34 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80062be:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <prvInitialiseTaskLists+0x78>)
 80062c0:	4a05      	ldr	r2, [pc, #20]	; (80062d8 <prvInitialiseTaskLists+0x64>)
 80062c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062c4:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <prvInitialiseTaskLists+0x7c>)
 80062c6:	4a05      	ldr	r2, [pc, #20]	; (80062dc <prvInitialiseTaskLists+0x68>)
 80062c8:	601a      	str	r2, [r3, #0]
}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	2000022c 	.word	0x2000022c
 80062d8:	20000290 	.word	0x20000290
 80062dc:	200002a4 	.word	0x200002a4
 80062e0:	200002c0 	.word	0x200002c0
 80062e4:	200002d4 	.word	0x200002d4
 80062e8:	200002ec 	.word	0x200002ec
 80062ec:	200002b8 	.word	0x200002b8
 80062f0:	200002bc 	.word	0x200002bc

080062f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062fa:	e019      	b.n	8006330 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80062fc:	f001 f89c 	bl	8007438 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006300:	4b10      	ldr	r3, [pc, #64]	; (8006344 <prvCheckTasksWaitingTermination+0x50>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3304      	adds	r3, #4
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe fd1b 	bl	8004d48 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006312:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <prvCheckTasksWaitingTermination+0x54>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3b01      	subs	r3, #1
 8006318:	4a0b      	ldr	r2, [pc, #44]	; (8006348 <prvCheckTasksWaitingTermination+0x54>)
 800631a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800631c:	4b0b      	ldr	r3, [pc, #44]	; (800634c <prvCheckTasksWaitingTermination+0x58>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3b01      	subs	r3, #1
 8006322:	4a0a      	ldr	r2, [pc, #40]	; (800634c <prvCheckTasksWaitingTermination+0x58>)
 8006324:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006326:	f001 f8b7 	bl	8007498 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f810 	bl	8006350 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <prvCheckTasksWaitingTermination+0x58>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e1      	bne.n	80062fc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	200002d4 	.word	0x200002d4
 8006348:	20000300 	.word	0x20000300
 800634c:	200002e8 	.word	0x200002e8

08006350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	4618      	mov	r0, r3
 800635e:	f001 fa6d 	bl	800783c <vPortFree>
                vPortFree( pxTCB );
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fa6a 	bl	800783c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <prvResetNextTaskUnblockTime+0x30>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800637e:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <prvResetNextTaskUnblockTime+0x34>)
 8006380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006384:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006386:	e005      	b.n	8006394 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <prvResetNextTaskUnblockTime+0x30>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a04      	ldr	r2, [pc, #16]	; (80063a4 <prvResetNextTaskUnblockTime+0x34>)
 8006392:	6013      	str	r3, [r2, #0]
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	200002b8 	.word	0x200002b8
 80063a4:	20000320 	.word	0x20000320

080063a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <xTaskGetSchedulerState+0x34>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80063b6:	2301      	movs	r3, #1
 80063b8:	607b      	str	r3, [r7, #4]
 80063ba:	e008      	b.n	80063ce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <xTaskGetSchedulerState+0x38>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80063c4:	2302      	movs	r3, #2
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	e001      	b.n	80063ce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80063ce:	687b      	ldr	r3, [r7, #4]
    }
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	2000030c 	.word	0x2000030c
 80063e0:	20000328 	.word	0x20000328

080063e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d063      	beq.n	80064c2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80063fa:	4b34      	ldr	r3, [pc, #208]	; (80064cc <xTaskPriorityDisinherit+0xe8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	429a      	cmp	r2, r3
 8006402:	d00a      	beq.n	800641a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	60fb      	str	r3, [r7, #12]
    }
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60bb      	str	r3, [r7, #8]
    }
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644a:	429a      	cmp	r2, r3
 800644c:	d039      	beq.n	80064c2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d135      	bne.n	80064c2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe fc74 	bl	8004d48 <uxListRemove>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	2201      	movs	r2, #1
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43da      	mvns	r2, r3
 8006472:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <xTaskPriorityDisinherit+0xec>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4013      	ands	r3, r2
 8006478:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <xTaskPriorityDisinherit+0xec>)
 800647a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f1c3 0205 	rsb	r2, r3, #5
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	2201      	movs	r2, #1
 8006496:	409a      	lsls	r2, r3
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <xTaskPriorityDisinherit+0xec>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4313      	orrs	r3, r2
 800649e:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <xTaskPriorityDisinherit+0xec>)
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <xTaskPriorityDisinherit+0xf0>)
 80064b0:	441a      	add	r2, r3
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f7fe fbe8 	bl	8004c8e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80064be:	2301      	movs	r3, #1
 80064c0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80064c2:	697b      	ldr	r3, [r7, #20]
    }
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000228 	.word	0x20000228
 80064d0:	20000308 	.word	0x20000308
 80064d4:	2000022c 	.word	0x2000022c

080064d8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	613b      	str	r3, [r7, #16]
    }
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006502:	f000 ff99 	bl	8007438 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006506:	4b32      	ldr	r3, [pc, #200]	; (80065d0 <xTaskGenericNotifyWait+0xf8>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	3354      	adds	r3, #84	; 0x54
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d022      	beq.n	800655e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006518:	4b2d      	ldr	r3, [pc, #180]	; (80065d0 <xTaskGenericNotifyWait+0xf8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	3214      	adds	r2, #20
 8006520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	43d2      	mvns	r2, r2
 8006528:	4011      	ands	r1, r2
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	3214      	adds	r2, #20
 800652e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006532:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <xTaskGenericNotifyWait+0xf8>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	3354      	adds	r3, #84	; 0x54
 800653c:	2201      	movs	r2, #1
 800653e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006546:	2101      	movs	r1, #1
 8006548:	6a38      	ldr	r0, [r7, #32]
 800654a:	f000 fa27 	bl	800699c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800654e:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <xTaskGenericNotifyWait+0xfc>)
 8006550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800655e:	f000 ff9b 	bl	8007498 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006562:	f000 ff69 	bl	8007438 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800656c:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <xTaskGenericNotifyWait+0xf8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	3214      	adds	r2, #20
 8006574:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800657c:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <xTaskGenericNotifyWait+0xf8>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	3354      	adds	r3, #84	; 0x54
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d002      	beq.n	8006594 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e00e      	b.n	80065b2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <xTaskGenericNotifyWait+0xf8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	3214      	adds	r2, #20
 800659c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	43d2      	mvns	r2, r2
 80065a4:	4011      	ands	r1, r2
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	3214      	adds	r2, #20
 80065aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80065ae:	2301      	movs	r3, #1
 80065b0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80065b2:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <xTaskGenericNotifyWait+0xf8>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	3354      	adds	r3, #84	; 0x54
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80065c0:	f000 ff6a 	bl	8007498 <vPortExitCritical>

        return xReturn;
 80065c4:	697b      	ldr	r3, [r7, #20]
    }
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000228 	.word	0x20000228
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	; 0x30
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80065e6:	2301      	movs	r3, #1
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <xTaskGenericNotify+0x2e>
        __asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	623b      	str	r3, [r7, #32]
    }
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <xTaskGenericNotify+0x4a>
        __asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	61fb      	str	r3, [r7, #28]
    }
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006626:	f000 ff07 	bl	8007438 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	d006      	beq.n	800663e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	3214      	adds	r2, #20
 8006636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800663e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4413      	add	r3, r2
 8006644:	3354      	adds	r3, #84	; 0x54
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800664c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	4413      	add	r3, r2
 8006652:	3354      	adds	r3, #84	; 0x54
 8006654:	2202      	movs	r2, #2
 8006656:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	2b04      	cmp	r3, #4
 800665c:	d83b      	bhi.n	80066d6 <xTaskGenericNotify+0xfe>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <xTaskGenericNotify+0x8c>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	080066f5 	.word	0x080066f5
 8006668:	08006679 	.word	0x08006679
 800666c:	08006695 	.word	0x08006695
 8006670:	080066ad 	.word	0x080066ad
 8006674:	080066bb 	.word	0x080066bb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	3214      	adds	r2, #20
 800667e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	ea42 0103 	orr.w	r1, r2, r3
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	3214      	adds	r2, #20
 800668e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006692:	e032      	b.n	80066fa <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	3214      	adds	r2, #20
 800669a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669e:	1c59      	adds	r1, r3, #1
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	3214      	adds	r2, #20
 80066a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066aa:	e026      	b.n	80066fa <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	3214      	adds	r2, #20
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066b8:	e01f      	b.n	80066fa <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80066ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d006      	beq.n	80066d0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	3214      	adds	r2, #20
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80066ce:	e014      	b.n	80066fa <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80066d4:	e011      	b.n	80066fa <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80066d6:	4b2b      	ldr	r3, [pc, #172]	; (8006784 <xTaskGenericNotify+0x1ac>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00c      	beq.n	80066f8 <xTaskGenericNotify+0x120>
        __asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	61bb      	str	r3, [r7, #24]
    }
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <xTaskGenericNotify+0x11a>
                    break;
 80066f4:	bf00      	nop
 80066f6:	e000      	b.n	80066fa <xTaskGenericNotify+0x122>

                    break;
 80066f8:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80066fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d139      	bne.n	8006776 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	3304      	adds	r3, #4
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fb1e 	bl	8004d48 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	2201      	movs	r2, #1
 8006712:	409a      	lsls	r2, r3
 8006714:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <xTaskGenericNotify+0x1b0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4313      	orrs	r3, r2
 800671a:	4a1b      	ldr	r2, [pc, #108]	; (8006788 <xTaskGenericNotify+0x1b0>)
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4a18      	ldr	r2, [pc, #96]	; (800678c <xTaskGenericNotify+0x1b4>)
 800672c:	441a      	add	r2, r3
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	3304      	adds	r3, #4
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7fe faaa 	bl	8004c8e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <xTaskGenericNotify+0x180>
        __asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	617b      	str	r3, [r7, #20]
    }
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <xTaskGenericNotify+0x1b8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	429a      	cmp	r2, r3
 8006764:	d907      	bls.n	8006776 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <xTaskGenericNotify+0x1bc>)
 8006768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006776:	f000 fe8f 	bl	8007498 <vPortExitCritical>

        return xReturn;
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800677c:	4618      	mov	r0, r3
 800677e:	3730      	adds	r7, #48	; 0x30
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20000304 	.word	0x20000304
 8006788:	20000308 	.word	0x20000308
 800678c:	2000022c 	.word	0x2000022c
 8006790:	20000228 	.word	0x20000228
 8006794:	e000ed04 	.word	0xe000ed04

08006798 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006798:	b580      	push	{r7, lr}
 800679a:	b090      	sub	sp, #64	; 0x40
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80067a6:	2301      	movs	r3, #1
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10a      	bne.n	80067c6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067e2:	f000 ff0b 	bl	80075fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80067ea:	f3ef 8211 	mrs	r2, BASEPRI
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006800:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006808:	2b00      	cmp	r3, #0
 800680a:	d006      	beq.n	800681a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	3214      	adds	r2, #20
 8006812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006818:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800681a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4413      	add	r3, r2
 8006820:	3354      	adds	r3, #84	; 0x54
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4413      	add	r3, r2
 800682e:	3354      	adds	r3, #84	; 0x54
 8006830:	2202      	movs	r2, #2
 8006832:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	2b04      	cmp	r3, #4
 8006838:	d83b      	bhi.n	80068b2 <xTaskGenericNotifyFromISR+0x11a>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <xTaskGenericNotifyFromISR+0xa8>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	080068d1 	.word	0x080068d1
 8006844:	08006855 	.word	0x08006855
 8006848:	08006871 	.word	0x08006871
 800684c:	08006889 	.word	0x08006889
 8006850:	08006897 	.word	0x08006897
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	3214      	adds	r2, #20
 800685a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	ea42 0103 	orr.w	r1, r2, r3
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	3214      	adds	r2, #20
 800686a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800686e:	e032      	b.n	80068d6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	3214      	adds	r2, #20
 8006876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	3214      	adds	r2, #20
 8006882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006886:	e026      	b.n	80068d6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	3214      	adds	r2, #20
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006894:	e01f      	b.n	80068d6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800689a:	2b02      	cmp	r3, #2
 800689c:	d006      	beq.n	80068ac <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	3214      	adds	r2, #20
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80068aa:	e014      	b.n	80068d6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80068b0:	e011      	b.n	80068d6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80068b2:	4b33      	ldr	r3, [pc, #204]	; (8006980 <xTaskGenericNotifyFromISR+0x1e8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00c      	beq.n	80068d4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	61fb      	str	r3, [r7, #28]
    }
 80068cc:	bf00      	nop
 80068ce:	e7fe      	b.n	80068ce <xTaskGenericNotifyFromISR+0x136>
                    break;
 80068d0:	bf00      	nop
 80068d2:	e000      	b.n	80068d6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80068d4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80068d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d145      	bne.n	800696a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	61bb      	str	r3, [r7, #24]
    }
 80068f8:	bf00      	nop
 80068fa:	e7fe      	b.n	80068fa <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068fc:	4b21      	ldr	r3, [pc, #132]	; (8006984 <xTaskGenericNotifyFromISR+0x1ec>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d11c      	bne.n	800693e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006906:	3304      	adds	r3, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fa1d 	bl	8004d48 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	2201      	movs	r2, #1
 8006914:	409a      	lsls	r2, r3
 8006916:	4b1c      	ldr	r3, [pc, #112]	; (8006988 <xTaskGenericNotifyFromISR+0x1f0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4313      	orrs	r3, r2
 800691c:	4a1a      	ldr	r2, [pc, #104]	; (8006988 <xTaskGenericNotifyFromISR+0x1f0>)
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4a17      	ldr	r2, [pc, #92]	; (800698c <xTaskGenericNotifyFromISR+0x1f4>)
 800692e:	441a      	add	r2, r3
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	3304      	adds	r3, #4
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f7fe f9a9 	bl	8004c8e <vListInsertEnd>
 800693c:	e005      	b.n	800694a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	3318      	adds	r3, #24
 8006942:	4619      	mov	r1, r3
 8006944:	4812      	ldr	r0, [pc, #72]	; (8006990 <xTaskGenericNotifyFromISR+0x1f8>)
 8006946:	f7fe f9a2 	bl	8004c8e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694e:	4b11      	ldr	r3, [pc, #68]	; (8006994 <xTaskGenericNotifyFromISR+0x1fc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	429a      	cmp	r2, r3
 8006956:	d908      	bls.n	800696a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800695e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006960:	2201      	movs	r2, #1
 8006962:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <xTaskGenericNotifyFromISR+0x200>)
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	617b      	str	r3, [r7, #20]
        __asm volatile
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f383 8811 	msr	BASEPRI, r3
    }
 8006974:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006978:	4618      	mov	r0, r3
 800697a:	3740      	adds	r7, #64	; 0x40
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20000304 	.word	0x20000304
 8006984:	20000328 	.word	0x20000328
 8006988:	20000308 	.word	0x20000308
 800698c:	2000022c 	.word	0x2000022c
 8006990:	200002c0 	.word	0x200002c0
 8006994:	20000228 	.word	0x20000228
 8006998:	20000314 	.word	0x20000314

0800699c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80069a6:	4b29      	ldr	r3, [pc, #164]	; (8006a4c <prvAddCurrentTaskToDelayedList+0xb0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ac:	4b28      	ldr	r3, [pc, #160]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3304      	adds	r3, #4
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe f9c8 	bl	8004d48 <uxListRemove>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80069be:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	2201      	movs	r2, #1
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43da      	mvns	r2, r3
 80069cc:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4013      	ands	r3, r2
 80069d2:	4a20      	ldr	r2, [pc, #128]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069dc:	d10a      	bne.n	80069f4 <prvAddCurrentTaskToDelayedList+0x58>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d007      	beq.n	80069f4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069e4:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4619      	mov	r1, r3
 80069ec:	481a      	ldr	r0, [pc, #104]	; (8006a58 <prvAddCurrentTaskToDelayedList+0xbc>)
 80069ee:	f7fe f94e 	bl	8004c8e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80069f2:	e026      	b.n	8006a42 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4413      	add	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069fc:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d209      	bcs.n	8006a20 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a0c:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f7fe f95c 	bl	8004cd6 <vListInsert>
}
 8006a1e:	e010      	b.n	8006a42 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a20:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f7fe f952 	bl	8004cd6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006a32:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d202      	bcs.n	8006a42 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006a3c:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6013      	str	r3, [r2, #0]
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000304 	.word	0x20000304
 8006a50:	20000228 	.word	0x20000228
 8006a54:	20000308 	.word	0x20000308
 8006a58:	200002ec 	.word	0x200002ec
 8006a5c:	200002bc 	.word	0x200002bc
 8006a60:	200002b8 	.word	0x200002b8
 8006a64:	20000320 	.word	0x20000320

08006a68 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006a72:	f000 fb31 	bl	80070d8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006a76:	4b11      	ldr	r3, [pc, #68]	; (8006abc <xTimerCreateTimerTask+0x54>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00b      	beq.n	8006a96 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006a7e:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <xTimerCreateTimerTask+0x58>)
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	2302      	movs	r3, #2
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	2300      	movs	r3, #0
 8006a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006a8c:	490d      	ldr	r1, [pc, #52]	; (8006ac4 <xTimerCreateTimerTask+0x5c>)
 8006a8e:	480e      	ldr	r0, [pc, #56]	; (8006ac8 <xTimerCreateTimerTask+0x60>)
 8006a90:	f7fe ff38 	bl	8005904 <xTaskCreate>
 8006a94:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	603b      	str	r3, [r7, #0]
    }
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006ab2:	687b      	ldr	r3, [r7, #4]
    }
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	2000035c 	.word	0x2000035c
 8006ac0:	20000360 	.word	0x20000360
 8006ac4:	080091ac 	.word	0x080091ac
 8006ac8:	08006cb9 	.word	0x08006cb9

08006acc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006ada:	202c      	movs	r0, #44	; 0x2c
 8006adc:	f000 fdce 	bl	800767c <pvPortMalloc>
 8006ae0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00d      	beq.n	8006b04 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f805 	bl	8006b0e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006b04:	697b      	ldr	r3, [r7, #20]
        }
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b086      	sub	sp, #24
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10a      	bne.n	8006b38 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	617b      	str	r3, [r7, #20]
    }
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d01e      	beq.n	8006b7c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006b3e:	f000 facb 	bl	80070d8 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	6a3a      	ldr	r2, [r7, #32]
 8006b58:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe f888 	bl	8004c74 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d008      	beq.n	8006b7c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b70:	f043 0304 	orr.w	r3, r3, #4
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006b7c:	bf00      	nop
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	; 0x28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	623b      	str	r3, [r7, #32]
    }
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006bb2:	4b1a      	ldr	r3, [pc, #104]	; (8006c1c <xTimerGenericCommand+0x98>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d02a      	beq.n	8006c10 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b05      	cmp	r3, #5
 8006bca:	dc18      	bgt.n	8006bfe <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bcc:	f7ff fbec 	bl	80063a8 <xTaskGetSchedulerState>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d109      	bne.n	8006bea <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bd6:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <xTimerGenericCommand+0x98>)
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	f107 0114 	add.w	r1, r7, #20
 8006bde:	2300      	movs	r3, #0
 8006be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be2:	f7fe f9c5 	bl	8004f70 <xQueueGenericSend>
 8006be6:	6278      	str	r0, [r7, #36]	; 0x24
 8006be8:	e012      	b.n	8006c10 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bea:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <xTimerGenericCommand+0x98>)
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	f107 0114 	add.w	r1, r7, #20
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f7fe f9bb 	bl	8004f70 <xQueueGenericSend>
 8006bfa:	6278      	str	r0, [r7, #36]	; 0x24
 8006bfc:	e008      	b.n	8006c10 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <xTimerGenericCommand+0x98>)
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	f107 0114 	add.w	r1, r7, #20
 8006c06:	2300      	movs	r3, #0
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	f7fe faaf 	bl	800516c <xQueueGenericSendFromISR>
 8006c0e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006c12:	4618      	mov	r0, r3
 8006c14:	3728      	adds	r7, #40	; 0x28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	2000035c 	.word	0x2000035c

08006c20 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c2a:	4b22      	ldr	r3, [pc, #136]	; (8006cb4 <prvProcessExpiredTimer+0x94>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe f885 	bl	8004d48 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d022      	beq.n	8006c92 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	699a      	ldr	r2, [r3, #24]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	18d1      	adds	r1, r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	f000 f8d1 	bl	8006e00 <prvInsertTimerInActiveList>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01f      	beq.n	8006ca4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c64:	2300      	movs	r3, #0
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	6978      	ldr	r0, [r7, #20]
 8006c70:	f7ff ff88 	bl	8006b84 <xTimerGenericCommand>
 8006c74:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d113      	bne.n	8006ca4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60fb      	str	r3, [r7, #12]
    }
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	6978      	ldr	r0, [r7, #20]
 8006caa:	4798      	blx	r3
    }
 8006cac:	bf00      	nop
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20000354 	.word	0x20000354

08006cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cc0:	f107 0308 	add.w	r3, r7, #8
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 f857 	bl	8006d78 <prvGetNextExpireTime>
 8006cca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f803 	bl	8006cdc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006cd6:	f000 f8d5 	bl	8006e84 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cda:	e7f1      	b.n	8006cc0 <prvTimerTask+0x8>

08006cdc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006ce6:	f7fe ffa5 	bl	8005c34 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cea:	f107 0308 	add.w	r3, r7, #8
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 f866 	bl	8006dc0 <prvSampleTimeNow>
 8006cf4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d130      	bne.n	8006d5e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <prvProcessTimerOrBlockTask+0x3c>
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d806      	bhi.n	8006d18 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006d0a:	f7fe ffa1 	bl	8005c50 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff ff85 	bl	8006c20 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006d16:	e024      	b.n	8006d62 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d008      	beq.n	8006d30 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <prvProcessTimerOrBlockTask+0x90>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <prvProcessTimerOrBlockTask+0x50>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <prvProcessTimerOrBlockTask+0x52>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d30:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <prvProcessTimerOrBlockTask+0x94>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7fe fdad 	bl	800589c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006d42:	f7fe ff85 	bl	8005c50 <xTaskResumeAll>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <prvProcessTimerOrBlockTask+0x98>)
 8006d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	f3bf 8f6f 	isb	sy
    }
 8006d5c:	e001      	b.n	8006d62 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006d5e:	f7fe ff77 	bl	8005c50 <xTaskResumeAll>
    }
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000358 	.word	0x20000358
 8006d70:	2000035c 	.word	0x2000035c
 8006d74:	e000ed04 	.word	0xe000ed04

08006d78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d80:	4b0e      	ldr	r3, [pc, #56]	; (8006dbc <prvGetNextExpireTime+0x44>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <prvGetNextExpireTime+0x16>
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	e000      	b.n	8006d90 <prvGetNextExpireTime+0x18>
 8006d8e:	2200      	movs	r2, #0
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d105      	bne.n	8006da8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d9c:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <prvGetNextExpireTime+0x44>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	e001      	b.n	8006dac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006dac:	68fb      	ldr	r3, [r7, #12]
    }
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	20000354 	.word	0x20000354

08006dc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006dc8:	f7fe ffde 	bl	8005d88 <xTaskGetTickCount>
 8006dcc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <prvSampleTimeNow+0x3c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d205      	bcs.n	8006de4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006dd8:	f000 f91a 	bl	8007010 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	e002      	b.n	8006dea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006dea:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <prvSampleTimeNow+0x3c>)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006df0:	68fb      	ldr	r3, [r7, #12]
    }
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000364 	.word	0x20000364

08006e00 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d812      	bhi.n	8006e4c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d302      	bcc.n	8006e3a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006e34:	2301      	movs	r3, #1
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	e01b      	b.n	8006e72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e3a:	4b10      	ldr	r3, [pc, #64]	; (8006e7c <prvInsertTimerInActiveList+0x7c>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3304      	adds	r3, #4
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f7fd ff46 	bl	8004cd6 <vListInsert>
 8006e4a:	e012      	b.n	8006e72 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d206      	bcs.n	8006e62 <prvInsertTimerInActiveList+0x62>
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d302      	bcc.n	8006e62 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	e007      	b.n	8006e72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e62:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <prvInsertTimerInActiveList+0x80>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7fd ff32 	bl	8004cd6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006e72:	697b      	ldr	r3, [r7, #20]
    }
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000358 	.word	0x20000358
 8006e80:	20000354 	.word	0x20000354

08006e84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08c      	sub	sp, #48	; 0x30
 8006e88:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e8a:	e0ae      	b.n	8006fea <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f2c0 80aa 	blt.w	8006fe8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fd ff4f 	bl	8004d48 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eaa:	1d3b      	adds	r3, r7, #4
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff ff87 	bl	8006dc0 <prvSampleTimeNow>
 8006eb2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b09      	cmp	r3, #9
 8006eb8:	f200 8097 	bhi.w	8006fea <prvProcessReceivedCommands+0x166>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <prvProcessReceivedCommands+0x40>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006eed 	.word	0x08006eed
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006eed 	.word	0x08006eed
 8006ed0:	08006f61 	.word	0x08006f61
 8006ed4:	08006f75 	.word	0x08006f75
 8006ed8:	08006fbf 	.word	0x08006fbf
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006eed 	.word	0x08006eed
 8006ee4:	08006f61 	.word	0x08006f61
 8006ee8:	08006f75 	.word	0x08006f75
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	18d1      	adds	r1, r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a3a      	ldr	r2, [r7, #32]
 8006f0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f0c:	f7ff ff78 	bl	8006e00 <prvInsertTimerInActiveList>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d069      	beq.n	8006fea <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f1c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d05e      	beq.n	8006fea <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	441a      	add	r2, r3
 8006f34:	2300      	movs	r3, #0
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f3e:	f7ff fe21 	bl	8006b84 <xTimerGenericCommand>
 8006f42:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d14f      	bne.n	8006fea <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	61bb      	str	r3, [r7, #24]
    }
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006f72:	e03a      	b.n	8006fea <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	617b      	str	r3, [r7, #20]
    }
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	18d1      	adds	r1, r2, r3
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	6a3a      	ldr	r2, [r7, #32]
 8006fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fb8:	f7ff ff22 	bl	8006e00 <prvInsertTimerInActiveList>
                        break;
 8006fbc:	e015      	b.n	8006fea <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d103      	bne.n	8006fd4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fce:	f000 fc35 	bl	800783c <vPortFree>
 8006fd2:	e00a      	b.n	8006fea <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006fe6:	e000      	b.n	8006fea <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006fe8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fea:	4b08      	ldr	r3, [pc, #32]	; (800700c <prvProcessReceivedCommands+0x188>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f107 0108 	add.w	r1, r7, #8
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe f963 	bl	80052c0 <xQueueReceive>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f47f af45 	bne.w	8006e8c <prvProcessReceivedCommands+0x8>
        }
    }
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	3728      	adds	r7, #40	; 0x28
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	2000035c 	.word	0x2000035c

08007010 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007016:	e048      	b.n	80070aa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007018:	4b2d      	ldr	r3, [pc, #180]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007022:	4b2b      	ldr	r3, [pc, #172]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7fd fe89 	bl	8004d48 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d02e      	beq.n	80070aa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4413      	add	r3, r2
 8007054:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	429a      	cmp	r2, r3
 800705c:	d90e      	bls.n	800707c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800706a:	4b19      	ldr	r3, [pc, #100]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3304      	adds	r3, #4
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7fd fe2e 	bl	8004cd6 <vListInsert>
 800707a:	e016      	b.n	80070aa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800707c:	2300      	movs	r3, #0
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2300      	movs	r3, #0
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	2100      	movs	r1, #0
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7ff fd7c 	bl	8006b84 <xTimerGenericCommand>
 800708c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	603b      	str	r3, [r7, #0]
    }
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070aa:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1b1      	bne.n	8007018 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80070b4:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <prvSwitchTimerLists+0xc4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <prvSwitchTimerLists+0xc0>)
 80070c0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80070c2:	4a04      	ldr	r2, [pc, #16]	; (80070d4 <prvSwitchTimerLists+0xc4>)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6013      	str	r3, [r2, #0]
    }
 80070c8:	bf00      	nop
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000354 	.word	0x20000354
 80070d4:	20000358 	.word	0x20000358

080070d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80070dc:	f000 f9ac 	bl	8007438 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80070e0:	4b12      	ldr	r3, [pc, #72]	; (800712c <prvCheckForValidListAndQueue+0x54>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11d      	bne.n	8007124 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80070e8:	4811      	ldr	r0, [pc, #68]	; (8007130 <prvCheckForValidListAndQueue+0x58>)
 80070ea:	f7fd fda3 	bl	8004c34 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80070ee:	4811      	ldr	r0, [pc, #68]	; (8007134 <prvCheckForValidListAndQueue+0x5c>)
 80070f0:	f7fd fda0 	bl	8004c34 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80070f4:	4b10      	ldr	r3, [pc, #64]	; (8007138 <prvCheckForValidListAndQueue+0x60>)
 80070f6:	4a0e      	ldr	r2, [pc, #56]	; (8007130 <prvCheckForValidListAndQueue+0x58>)
 80070f8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <prvCheckForValidListAndQueue+0x64>)
 80070fc:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <prvCheckForValidListAndQueue+0x5c>)
 80070fe:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007100:	2200      	movs	r2, #0
 8007102:	210c      	movs	r1, #12
 8007104:	200a      	movs	r0, #10
 8007106:	f7fd feb1 	bl	8004e6c <xQueueGenericCreate>
 800710a:	4603      	mov	r3, r0
 800710c:	4a07      	ldr	r2, [pc, #28]	; (800712c <prvCheckForValidListAndQueue+0x54>)
 800710e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007110:	4b06      	ldr	r3, [pc, #24]	; (800712c <prvCheckForValidListAndQueue+0x54>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007118:	4b04      	ldr	r3, [pc, #16]	; (800712c <prvCheckForValidListAndQueue+0x54>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4908      	ldr	r1, [pc, #32]	; (8007140 <prvCheckForValidListAndQueue+0x68>)
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fb92 	bl	8005848 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007124:	f000 f9b8 	bl	8007498 <vPortExitCritical>
    }
 8007128:	bf00      	nop
 800712a:	bd80      	pop	{r7, pc}
 800712c:	2000035c 	.word	0x2000035c
 8007130:	2000032c 	.word	0x2000032c
 8007134:	20000340 	.word	0x20000340
 8007138:	20000354 	.word	0x20000354
 800713c:	20000358 	.word	0x20000358
 8007140:	080091b4 	.word	0x080091b4

08007144 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <xTimerIsTimerActive+0x28>
        __asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
    }
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 800716c:	f000 f964 	bl	8007438 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d102      	bne.n	8007184 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	e001      	b.n	8007188 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8007184:	2301      	movs	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8007188:	f000 f986 	bl	8007498 <vPortExitCritical>

        return xReturn;
 800718c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007196:	b580      	push	{r7, lr}
 8007198:	b086      	sub	sp, #24
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <pvTimerGetTimerID+0x28>
        __asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	60fb      	str	r3, [r7, #12]
    }
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80071be:	f000 f93b 	bl	8007438 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80071c8:	f000 f966 	bl	8007498 <vPortExitCritical>

        return pvReturn;
 80071cc:	693b      	ldr	r3, [r7, #16]
    }
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3b04      	subs	r3, #4
 80071e8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3b04      	subs	r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f023 0201 	bic.w	r2, r3, #1
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3b04      	subs	r3, #4
 8007206:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007208:	4a0c      	ldr	r2, [pc, #48]	; (800723c <pxPortInitialiseStack+0x64>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3b14      	subs	r3, #20
 8007212:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3b04      	subs	r3, #4
 800721e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f06f 0202 	mvn.w	r2, #2
 8007226:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3b20      	subs	r3, #32
 800722c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800722e:	68fb      	ldr	r3, [r7, #12]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	08007241 	.word	0x08007241

08007240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800724a:	4b12      	ldr	r3, [pc, #72]	; (8007294 <prvTaskExitError+0x54>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007252:	d00a      	beq.n	800726a <prvTaskExitError+0x2a>
        __asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	60fb      	str	r3, [r7, #12]
    }
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <prvTaskExitError+0x28>
        __asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	60bb      	str	r3, [r7, #8]
    }
 800727c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800727e:	bf00      	nop
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0fc      	beq.n	8007280 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007286:	bf00      	nop
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	20000024 	.word	0x20000024
	...

080072a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80072a0:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <pxCurrentTCBConst2>)
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	6808      	ldr	r0, [r1, #0]
 80072a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	f380 8809 	msr	PSP, r0
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8811 	msr	BASEPRI, r0
 80072ba:	4770      	bx	lr
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst2>:
 80072c0:	20000228 	.word	0x20000228
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80072c8:	4808      	ldr	r0, [pc, #32]	; (80072ec <prvPortStartFirstTask+0x24>)
 80072ca:	6800      	ldr	r0, [r0, #0]
 80072cc:	6800      	ldr	r0, [r0, #0]
 80072ce:	f380 8808 	msr	MSP, r0
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8814 	msr	CONTROL, r0
 80072da:	b662      	cpsie	i
 80072dc:	b661      	cpsie	f
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	df00      	svc	0
 80072e8:	bf00      	nop
 80072ea:	0000      	.short	0x0000
 80072ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop

080072f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072fa:	4b46      	ldr	r3, [pc, #280]	; (8007414 <xPortStartScheduler+0x120>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a46      	ldr	r2, [pc, #280]	; (8007418 <xPortStartScheduler+0x124>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d10a      	bne.n	800731a <xPortStartScheduler+0x26>
        __asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	613b      	str	r3, [r7, #16]
    }
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800731a:	4b3e      	ldr	r3, [pc, #248]	; (8007414 <xPortStartScheduler+0x120>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a3f      	ldr	r2, [pc, #252]	; (800741c <xPortStartScheduler+0x128>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d10a      	bne.n	800733a <xPortStartScheduler+0x46>
        __asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	60fb      	str	r3, [r7, #12]
    }
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800733a:	4b39      	ldr	r3, [pc, #228]	; (8007420 <xPortStartScheduler+0x12c>)
 800733c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	22ff      	movs	r2, #255	; 0xff
 800734a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800735c:	b2da      	uxtb	r2, r3
 800735e:	4b31      	ldr	r3, [pc, #196]	; (8007424 <xPortStartScheduler+0x130>)
 8007360:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007362:	4b31      	ldr	r3, [pc, #196]	; (8007428 <xPortStartScheduler+0x134>)
 8007364:	2207      	movs	r2, #7
 8007366:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007368:	e009      	b.n	800737e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800736a:	4b2f      	ldr	r3, [pc, #188]	; (8007428 <xPortStartScheduler+0x134>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3b01      	subs	r3, #1
 8007370:	4a2d      	ldr	r2, [pc, #180]	; (8007428 <xPortStartScheduler+0x134>)
 8007372:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	b2db      	uxtb	r3, r3
 800737c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007386:	2b80      	cmp	r3, #128	; 0x80
 8007388:	d0ef      	beq.n	800736a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800738a:	4b27      	ldr	r3, [pc, #156]	; (8007428 <xPortStartScheduler+0x134>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1c3 0307 	rsb	r3, r3, #7
 8007392:	2b04      	cmp	r3, #4
 8007394:	d00a      	beq.n	80073ac <xPortStartScheduler+0xb8>
        __asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	60bb      	str	r3, [r7, #8]
    }
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073ac:	4b1e      	ldr	r3, [pc, #120]	; (8007428 <xPortStartScheduler+0x134>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <xPortStartScheduler+0x134>)
 80073b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073b6:	4b1c      	ldr	r3, [pc, #112]	; (8007428 <xPortStartScheduler+0x134>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073be:	4a1a      	ldr	r2, [pc, #104]	; (8007428 <xPortStartScheduler+0x134>)
 80073c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80073ca:	4b18      	ldr	r3, [pc, #96]	; (800742c <xPortStartScheduler+0x138>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a17      	ldr	r2, [pc, #92]	; (800742c <xPortStartScheduler+0x138>)
 80073d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80073d6:	4b15      	ldr	r3, [pc, #84]	; (800742c <xPortStartScheduler+0x138>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a14      	ldr	r2, [pc, #80]	; (800742c <xPortStartScheduler+0x138>)
 80073dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80073e2:	f000 f8db 	bl	800759c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80073e6:	4b12      	ldr	r3, [pc, #72]	; (8007430 <xPortStartScheduler+0x13c>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80073ec:	f000 f8fa 	bl	80075e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073f0:	4b10      	ldr	r3, [pc, #64]	; (8007434 <xPortStartScheduler+0x140>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a0f      	ldr	r2, [pc, #60]	; (8007434 <xPortStartScheduler+0x140>)
 80073f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80073fc:	f7ff ff64 	bl	80072c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007400:	f7fe fd8a 	bl	8005f18 <vTaskSwitchContext>
    prvTaskExitError();
 8007404:	f7ff ff1c 	bl	8007240 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	e000ed00 	.word	0xe000ed00
 8007418:	410fc271 	.word	0x410fc271
 800741c:	410fc270 	.word	0x410fc270
 8007420:	e000e400 	.word	0xe000e400
 8007424:	20000368 	.word	0x20000368
 8007428:	2000036c 	.word	0x2000036c
 800742c:	e000ed20 	.word	0xe000ed20
 8007430:	20000024 	.word	0x20000024
 8007434:	e000ef34 	.word	0xe000ef34

08007438 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
        __asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	607b      	str	r3, [r7, #4]
    }
 8007450:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <vPortEnterCritical+0x58>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3301      	adds	r3, #1
 8007458:	4a0d      	ldr	r2, [pc, #52]	; (8007490 <vPortEnterCritical+0x58>)
 800745a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <vPortEnterCritical+0x58>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10f      	bne.n	8007484 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007464:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <vPortEnterCritical+0x5c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <vPortEnterCritical+0x4c>
        __asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	603b      	str	r3, [r7, #0]
    }
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <vPortEnterCritical+0x4a>
    }
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	20000024 	.word	0x20000024
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800749e:	4b12      	ldr	r3, [pc, #72]	; (80074e8 <vPortExitCritical+0x50>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <vPortExitCritical+0x24>
        __asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	607b      	str	r3, [r7, #4]
    }
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <vPortExitCritical+0x50>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4a09      	ldr	r2, [pc, #36]	; (80074e8 <vPortExitCritical+0x50>)
 80074c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80074c6:	4b08      	ldr	r3, [pc, #32]	; (80074e8 <vPortExitCritical+0x50>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d105      	bne.n	80074da <vPortExitCritical+0x42>
 80074ce:	2300      	movs	r3, #0
 80074d0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	f383 8811 	msr	BASEPRI, r3
    }
 80074d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20000024 	.word	0x20000024
 80074ec:	00000000 	.word	0x00000000

080074f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80074f0:	f3ef 8009 	mrs	r0, PSP
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4b15      	ldr	r3, [pc, #84]	; (8007550 <pxCurrentTCBConst>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	f01e 0f10 	tst.w	lr, #16
 8007500:	bf08      	it	eq
 8007502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	6010      	str	r0, [r2, #0]
 800750c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007514:	f380 8811 	msr	BASEPRI, r0
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f7fe fcfa 	bl	8005f18 <vTaskSwitchContext>
 8007524:	f04f 0000 	mov.w	r0, #0
 8007528:	f380 8811 	msr	BASEPRI, r0
 800752c:	bc09      	pop	{r0, r3}
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	6808      	ldr	r0, [r1, #0]
 8007532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007536:	f01e 0f10 	tst.w	lr, #16
 800753a:	bf08      	it	eq
 800753c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007540:	f380 8809 	msr	PSP, r0
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst>:
 8007550:	20000228 	.word	0x20000228
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
        __asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
    }
 8007570:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007572:	f7fe fc19 	bl	8005da8 <xTaskIncrementTick>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <SysTick_Handler+0x40>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f383 8811 	msr	BASEPRI, r3
    }
 800758e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <vPortSetupTimerInterrupt+0x38>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <vPortSetupTimerInterrupt+0x3c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <vPortSetupTimerInterrupt+0x40>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <vPortSetupTimerInterrupt+0x44>)
 80075ba:	3b01      	subs	r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075be:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	e000e010 	.word	0xe000e010
 80075d4:	e000e018 	.word	0xe000e018
 80075d8:	20000010 	.word	0x20000010
 80075dc:	10624dd3 	.word	0x10624dd3
 80075e0:	e000e014 	.word	0xe000e014

080075e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80075e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075f4 <vPortEnableVFP+0x10>
 80075e8:	6801      	ldr	r1, [r0, #0]
 80075ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ee:	6001      	str	r1, [r0, #0]
 80075f0:	4770      	bx	lr
 80075f2:	0000      	.short	0x0000
 80075f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop

080075fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007602:	f3ef 8305 	mrs	r3, IPSR
 8007606:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b0f      	cmp	r3, #15
 800760c:	d914      	bls.n	8007638 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800760e:	4a17      	ldr	r2, [pc, #92]	; (800766c <vPortValidateInterruptPriority+0x70>)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007618:	4b15      	ldr	r3, [pc, #84]	; (8007670 <vPortValidateInterruptPriority+0x74>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	7afa      	ldrb	r2, [r7, #11]
 800761e:	429a      	cmp	r2, r3
 8007620:	d20a      	bcs.n	8007638 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	607b      	str	r3, [r7, #4]
    }
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007638:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <vPortValidateInterruptPriority+0x78>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007640:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <vPortValidateInterruptPriority+0x7c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d90a      	bls.n	800765e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	603b      	str	r3, [r7, #0]
    }
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <vPortValidateInterruptPriority+0x60>
    }
 800765e:	bf00      	nop
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	e000e3f0 	.word	0xe000e3f0
 8007670:	20000368 	.word	0x20000368
 8007674:	e000ed0c 	.word	0xe000ed0c
 8007678:	2000036c 	.word	0x2000036c

0800767c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007688:	f7fe fad4 	bl	8005c34 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800768c:	4b65      	ldr	r3, [pc, #404]	; (8007824 <pvPortMalloc+0x1a8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007694:	f000 f934 	bl	8007900 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007698:	4b63      	ldr	r3, [pc, #396]	; (8007828 <pvPortMalloc+0x1ac>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4013      	ands	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 80a7 	bne.w	80077f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d02d      	beq.n	8007708 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80076ac:	2208      	movs	r2, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d227      	bcs.n	8007708 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80076b8:	2208      	movs	r2, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d021      	beq.n	800770e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f023 0307 	bic.w	r3, r3, #7
 80076d0:	3308      	adds	r3, #8
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d214      	bcs.n	8007702 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f023 0307 	bic.w	r3, r3, #7
 80076de:	3308      	adds	r3, #8
 80076e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d010      	beq.n	800770e <pvPortMalloc+0x92>
        __asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	617b      	str	r3, [r7, #20]
    }
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007706:	e002      	b.n	800770e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	607b      	str	r3, [r7, #4]
 800770c:	e000      	b.n	8007710 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800770e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d06e      	beq.n	80077f4 <pvPortMalloc+0x178>
 8007716:	4b45      	ldr	r3, [pc, #276]	; (800782c <pvPortMalloc+0x1b0>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d869      	bhi.n	80077f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007720:	4b43      	ldr	r3, [pc, #268]	; (8007830 <pvPortMalloc+0x1b4>)
 8007722:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007724:	4b42      	ldr	r3, [pc, #264]	; (8007830 <pvPortMalloc+0x1b4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800772a:	e004      	b.n	8007736 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	429a      	cmp	r2, r3
 800773e:	d903      	bls.n	8007748 <pvPortMalloc+0xcc>
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1f1      	bne.n	800772c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007748:	4b36      	ldr	r3, [pc, #216]	; (8007824 <pvPortMalloc+0x1a8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774e:	429a      	cmp	r2, r3
 8007750:	d050      	beq.n	80077f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2208      	movs	r2, #8
 8007758:	4413      	add	r3, r2
 800775a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	1ad2      	subs	r2, r2, r3
 800776c:	2308      	movs	r3, #8
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	429a      	cmp	r2, r3
 8007772:	d91f      	bls.n	80077b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4413      	add	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <pvPortMalloc+0x120>
        __asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	613b      	str	r3, [r7, #16]
    }
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	1ad2      	subs	r2, r2, r3
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077ae:	69b8      	ldr	r0, [r7, #24]
 80077b0:	f000 f908 	bl	80079c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077b4:	4b1d      	ldr	r3, [pc, #116]	; (800782c <pvPortMalloc+0x1b0>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	4a1b      	ldr	r2, [pc, #108]	; (800782c <pvPortMalloc+0x1b0>)
 80077c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077c2:	4b1a      	ldr	r3, [pc, #104]	; (800782c <pvPortMalloc+0x1b0>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <pvPortMalloc+0x1b8>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d203      	bcs.n	80077d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077ce:	4b17      	ldr	r3, [pc, #92]	; (800782c <pvPortMalloc+0x1b0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a18      	ldr	r2, [pc, #96]	; (8007834 <pvPortMalloc+0x1b8>)
 80077d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	4b13      	ldr	r3, [pc, #76]	; (8007828 <pvPortMalloc+0x1ac>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	431a      	orrs	r2, r3
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80077ea:	4b13      	ldr	r3, [pc, #76]	; (8007838 <pvPortMalloc+0x1bc>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	4a11      	ldr	r2, [pc, #68]	; (8007838 <pvPortMalloc+0x1bc>)
 80077f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80077f4:	f7fe fa2c 	bl	8005c50 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <pvPortMalloc+0x19c>
        __asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60fb      	str	r3, [r7, #12]
    }
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <pvPortMalloc+0x19a>
    return pvReturn;
 8007818:	69fb      	ldr	r3, [r7, #28]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3728      	adds	r7, #40	; 0x28
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20019378 	.word	0x20019378
 8007828:	2001938c 	.word	0x2001938c
 800782c:	2001937c 	.word	0x2001937c
 8007830:	20019370 	.word	0x20019370
 8007834:	20019380 	.word	0x20019380
 8007838:	20019384 	.word	0x20019384

0800783c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d04d      	beq.n	80078ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800784e:	2308      	movs	r3, #8
 8007850:	425b      	negs	r3, r3
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4413      	add	r3, r2
 8007856:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <vPortFree+0xb8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4013      	ands	r3, r2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <vPortFree+0x44>
        __asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	60fb      	str	r3, [r7, #12]
    }
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00a      	beq.n	800789e <vPortFree+0x62>
        __asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	60bb      	str	r3, [r7, #8]
    }
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <vPortFree+0xb8>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4013      	ands	r3, r2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01e      	beq.n	80078ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d11a      	bne.n	80078ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <vPortFree+0xb8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	43db      	mvns	r3, r3
 80078be:	401a      	ands	r2, r3
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80078c4:	f7fe f9b6 	bl	8005c34 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <vPortFree+0xbc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4413      	add	r3, r2
 80078d2:	4a09      	ldr	r2, [pc, #36]	; (80078f8 <vPortFree+0xbc>)
 80078d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078d6:	6938      	ldr	r0, [r7, #16]
 80078d8:	f000 f874 	bl	80079c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <vPortFree+0xc0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3301      	adds	r3, #1
 80078e2:	4a06      	ldr	r2, [pc, #24]	; (80078fc <vPortFree+0xc0>)
 80078e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80078e6:	f7fe f9b3 	bl	8005c50 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80078ea:	bf00      	nop
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	2001938c 	.word	0x2001938c
 80078f8:	2001937c 	.word	0x2001937c
 80078fc:	20019388 	.word	0x20019388

08007900 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007906:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800790a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800790c:	4b27      	ldr	r3, [pc, #156]	; (80079ac <prvHeapInit+0xac>)
 800790e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00c      	beq.n	8007934 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3307      	adds	r3, #7
 800791e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0307 	bic.w	r3, r3, #7
 8007926:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	4a1f      	ldr	r2, [pc, #124]	; (80079ac <prvHeapInit+0xac>)
 8007930:	4413      	add	r3, r2
 8007932:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007938:	4a1d      	ldr	r2, [pc, #116]	; (80079b0 <prvHeapInit+0xb0>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800793e:	4b1c      	ldr	r3, [pc, #112]	; (80079b0 <prvHeapInit+0xb0>)
 8007940:	2200      	movs	r2, #0
 8007942:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	4413      	add	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800794c:	2208      	movs	r2, #8
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1a9b      	subs	r3, r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0307 	bic.w	r3, r3, #7
 800795a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <prvHeapInit+0xb4>)
 8007960:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007962:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <prvHeapInit+0xb4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2200      	movs	r2, #0
 8007968:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <prvHeapInit+0xb4>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	1ad2      	subs	r2, r2, r3
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <prvHeapInit+0xb4>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	4a0a      	ldr	r2, [pc, #40]	; (80079b8 <prvHeapInit+0xb8>)
 800798e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	4a09      	ldr	r2, [pc, #36]	; (80079bc <prvHeapInit+0xbc>)
 8007996:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007998:	4b09      	ldr	r3, [pc, #36]	; (80079c0 <prvHeapInit+0xc0>)
 800799a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800799e:	601a      	str	r2, [r3, #0]
}
 80079a0:	bf00      	nop
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20000370 	.word	0x20000370
 80079b0:	20019370 	.word	0x20019370
 80079b4:	20019378 	.word	0x20019378
 80079b8:	20019380 	.word	0x20019380
 80079bc:	2001937c 	.word	0x2001937c
 80079c0:	2001938c 	.word	0x2001938c

080079c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079cc:	4b28      	ldr	r3, [pc, #160]	; (8007a70 <prvInsertBlockIntoFreeList+0xac>)
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e002      	b.n	80079d8 <prvInsertBlockIntoFreeList+0x14>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d8f7      	bhi.n	80079d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	4413      	add	r3, r2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d108      	bne.n	8007a06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	441a      	add	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	441a      	add	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d118      	bne.n	8007a4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b15      	ldr	r3, [pc, #84]	; (8007a74 <prvInsertBlockIntoFreeList+0xb0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d00d      	beq.n	8007a42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	441a      	add	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	e008      	b.n	8007a54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a42:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <prvInsertBlockIntoFreeList+0xb0>)
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	e003      	b.n	8007a54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d002      	beq.n	8007a62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	20019370 	.word	0x20019370
 8007a74:	20019378 	.word	0x20019378

08007a78 <__libc_init_array>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	4d0d      	ldr	r5, [pc, #52]	; (8007ab0 <__libc_init_array+0x38>)
 8007a7c:	4c0d      	ldr	r4, [pc, #52]	; (8007ab4 <__libc_init_array+0x3c>)
 8007a7e:	1b64      	subs	r4, r4, r5
 8007a80:	10a4      	asrs	r4, r4, #2
 8007a82:	2600      	movs	r6, #0
 8007a84:	42a6      	cmp	r6, r4
 8007a86:	d109      	bne.n	8007a9c <__libc_init_array+0x24>
 8007a88:	4d0b      	ldr	r5, [pc, #44]	; (8007ab8 <__libc_init_array+0x40>)
 8007a8a:	4c0c      	ldr	r4, [pc, #48]	; (8007abc <__libc_init_array+0x44>)
 8007a8c:	f001 f998 	bl	8008dc0 <_init>
 8007a90:	1b64      	subs	r4, r4, r5
 8007a92:	10a4      	asrs	r4, r4, #2
 8007a94:	2600      	movs	r6, #0
 8007a96:	42a6      	cmp	r6, r4
 8007a98:	d105      	bne.n	8007aa6 <__libc_init_array+0x2e>
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa0:	4798      	blx	r3
 8007aa2:	3601      	adds	r6, #1
 8007aa4:	e7ee      	b.n	8007a84 <__libc_init_array+0xc>
 8007aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aaa:	4798      	blx	r3
 8007aac:	3601      	adds	r6, #1
 8007aae:	e7f2      	b.n	8007a96 <__libc_init_array+0x1e>
 8007ab0:	08009274 	.word	0x08009274
 8007ab4:	08009274 	.word	0x08009274
 8007ab8:	08009274 	.word	0x08009274
 8007abc:	08009278 	.word	0x08009278

08007ac0 <memcpy>:
 8007ac0:	440a      	add	r2, r1
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ac8:	d100      	bne.n	8007acc <memcpy+0xc>
 8007aca:	4770      	bx	lr
 8007acc:	b510      	push	{r4, lr}
 8007ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	d1f9      	bne.n	8007ace <memcpy+0xe>
 8007ada:	bd10      	pop	{r4, pc}

08007adc <memset>:
 8007adc:	4402      	add	r2, r0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d100      	bne.n	8007ae6 <memset+0xa>
 8007ae4:	4770      	bx	lr
 8007ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aea:	e7f9      	b.n	8007ae0 <memset+0x4>

08007aec <iprintf>:
 8007aec:	b40f      	push	{r0, r1, r2, r3}
 8007aee:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <iprintf+0x2c>)
 8007af0:	b513      	push	{r0, r1, r4, lr}
 8007af2:	681c      	ldr	r4, [r3, #0]
 8007af4:	b124      	cbz	r4, 8007b00 <iprintf+0x14>
 8007af6:	69a3      	ldr	r3, [r4, #24]
 8007af8:	b913      	cbnz	r3, 8007b00 <iprintf+0x14>
 8007afa:	4620      	mov	r0, r4
 8007afc:	f000 f886 	bl	8007c0c <__sinit>
 8007b00:	ab05      	add	r3, sp, #20
 8007b02:	9a04      	ldr	r2, [sp, #16]
 8007b04:	68a1      	ldr	r1, [r4, #8]
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fb39 	bl	8008180 <_vfiprintf_r>
 8007b0e:	b002      	add	sp, #8
 8007b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b14:	b004      	add	sp, #16
 8007b16:	4770      	bx	lr
 8007b18:	20000028 	.word	0x20000028

08007b1c <siprintf>:
 8007b1c:	b40e      	push	{r1, r2, r3}
 8007b1e:	b500      	push	{lr}
 8007b20:	b09c      	sub	sp, #112	; 0x70
 8007b22:	ab1d      	add	r3, sp, #116	; 0x74
 8007b24:	9002      	str	r0, [sp, #8]
 8007b26:	9006      	str	r0, [sp, #24]
 8007b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b2c:	4809      	ldr	r0, [pc, #36]	; (8007b54 <siprintf+0x38>)
 8007b2e:	9107      	str	r1, [sp, #28]
 8007b30:	9104      	str	r1, [sp, #16]
 8007b32:	4909      	ldr	r1, [pc, #36]	; (8007b58 <siprintf+0x3c>)
 8007b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b38:	9105      	str	r1, [sp, #20]
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	a902      	add	r1, sp, #8
 8007b40:	f000 f9f4 	bl	8007f2c <_svfiprintf_r>
 8007b44:	9b02      	ldr	r3, [sp, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	b01c      	add	sp, #112	; 0x70
 8007b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b50:	b003      	add	sp, #12
 8007b52:	4770      	bx	lr
 8007b54:	20000028 	.word	0x20000028
 8007b58:	ffff0208 	.word	0xffff0208

08007b5c <std>:
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	4604      	mov	r4, r0
 8007b62:	e9c0 3300 	strd	r3, r3, [r0]
 8007b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6a:	6083      	str	r3, [r0, #8]
 8007b6c:	8181      	strh	r1, [r0, #12]
 8007b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b70:	81c2      	strh	r2, [r0, #14]
 8007b72:	6183      	str	r3, [r0, #24]
 8007b74:	4619      	mov	r1, r3
 8007b76:	2208      	movs	r2, #8
 8007b78:	305c      	adds	r0, #92	; 0x5c
 8007b7a:	f7ff ffaf 	bl	8007adc <memset>
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <std+0x38>)
 8007b80:	6263      	str	r3, [r4, #36]	; 0x24
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x3c>)
 8007b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <std+0x40>)
 8007b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <std+0x44>)
 8007b8c:	6224      	str	r4, [r4, #32]
 8007b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	bf00      	nop
 8007b94:	08008729 	.word	0x08008729
 8007b98:	0800874b 	.word	0x0800874b
 8007b9c:	08008783 	.word	0x08008783
 8007ba0:	080087a7 	.word	0x080087a7

08007ba4 <_cleanup_r>:
 8007ba4:	4901      	ldr	r1, [pc, #4]	; (8007bac <_cleanup_r+0x8>)
 8007ba6:	f000 b8af 	b.w	8007d08 <_fwalk_reent>
 8007baa:	bf00      	nop
 8007bac:	08008a81 	.word	0x08008a81

08007bb0 <__sfmoreglue>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	2268      	movs	r2, #104	; 0x68
 8007bb4:	1e4d      	subs	r5, r1, #1
 8007bb6:	4355      	muls	r5, r2
 8007bb8:	460e      	mov	r6, r1
 8007bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bbe:	f000 f8e5 	bl	8007d8c <_malloc_r>
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	b140      	cbz	r0, 8007bd8 <__sfmoreglue+0x28>
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bcc:	300c      	adds	r0, #12
 8007bce:	60a0      	str	r0, [r4, #8]
 8007bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bd4:	f7ff ff82 	bl	8007adc <memset>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	bd70      	pop	{r4, r5, r6, pc}

08007bdc <__sfp_lock_acquire>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__sfp_lock_acquire+0x8>)
 8007bde:	f000 b8b3 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	20019391 	.word	0x20019391

08007be8 <__sfp_lock_release>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sfp_lock_release+0x8>)
 8007bea:	f000 b8ae 	b.w	8007d4a <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20019391 	.word	0x20019391

08007bf4 <__sinit_lock_acquire>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__sinit_lock_acquire+0x8>)
 8007bf6:	f000 b8a7 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	20019392 	.word	0x20019392

08007c00 <__sinit_lock_release>:
 8007c00:	4801      	ldr	r0, [pc, #4]	; (8007c08 <__sinit_lock_release+0x8>)
 8007c02:	f000 b8a2 	b.w	8007d4a <__retarget_lock_release_recursive>
 8007c06:	bf00      	nop
 8007c08:	20019392 	.word	0x20019392

08007c0c <__sinit>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4604      	mov	r4, r0
 8007c10:	f7ff fff0 	bl	8007bf4 <__sinit_lock_acquire>
 8007c14:	69a3      	ldr	r3, [r4, #24]
 8007c16:	b11b      	cbz	r3, 8007c20 <__sinit+0x14>
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1c:	f7ff bff0 	b.w	8007c00 <__sinit_lock_release>
 8007c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c24:	6523      	str	r3, [r4, #80]	; 0x50
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <__sinit+0x68>)
 8007c28:	4a13      	ldr	r2, [pc, #76]	; (8007c78 <__sinit+0x6c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c2e:	42a3      	cmp	r3, r4
 8007c30:	bf04      	itt	eq
 8007c32:	2301      	moveq	r3, #1
 8007c34:	61a3      	streq	r3, [r4, #24]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 f820 	bl	8007c7c <__sfp>
 8007c3c:	6060      	str	r0, [r4, #4]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f81c 	bl	8007c7c <__sfp>
 8007c44:	60a0      	str	r0, [r4, #8]
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 f818 	bl	8007c7c <__sfp>
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	60e0      	str	r0, [r4, #12]
 8007c50:	2104      	movs	r1, #4
 8007c52:	6860      	ldr	r0, [r4, #4]
 8007c54:	f7ff ff82 	bl	8007b5c <std>
 8007c58:	68a0      	ldr	r0, [r4, #8]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	2109      	movs	r1, #9
 8007c5e:	f7ff ff7d 	bl	8007b5c <std>
 8007c62:	68e0      	ldr	r0, [r4, #12]
 8007c64:	2202      	movs	r2, #2
 8007c66:	2112      	movs	r1, #18
 8007c68:	f7ff ff78 	bl	8007b5c <std>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	61a3      	str	r3, [r4, #24]
 8007c70:	e7d2      	b.n	8007c18 <__sinit+0xc>
 8007c72:	bf00      	nop
 8007c74:	080091d4 	.word	0x080091d4
 8007c78:	08007ba5 	.word	0x08007ba5

08007c7c <__sfp>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	4607      	mov	r7, r0
 8007c80:	f7ff ffac 	bl	8007bdc <__sfp_lock_acquire>
 8007c84:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <__sfp+0x84>)
 8007c86:	681e      	ldr	r6, [r3, #0]
 8007c88:	69b3      	ldr	r3, [r6, #24]
 8007c8a:	b913      	cbnz	r3, 8007c92 <__sfp+0x16>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ffbd 	bl	8007c0c <__sinit>
 8007c92:	3648      	adds	r6, #72	; 0x48
 8007c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	d503      	bpl.n	8007ca4 <__sfp+0x28>
 8007c9c:	6833      	ldr	r3, [r6, #0]
 8007c9e:	b30b      	cbz	r3, 8007ce4 <__sfp+0x68>
 8007ca0:	6836      	ldr	r6, [r6, #0]
 8007ca2:	e7f7      	b.n	8007c94 <__sfp+0x18>
 8007ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ca8:	b9d5      	cbnz	r5, 8007ce0 <__sfp+0x64>
 8007caa:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <__sfp+0x88>)
 8007cac:	60e3      	str	r3, [r4, #12]
 8007cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8007cb4:	f000 f847 	bl	8007d46 <__retarget_lock_init_recursive>
 8007cb8:	f7ff ff96 	bl	8007be8 <__sfp_lock_release>
 8007cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cc4:	6025      	str	r5, [r4, #0]
 8007cc6:	61a5      	str	r5, [r4, #24]
 8007cc8:	2208      	movs	r2, #8
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd0:	f7ff ff04 	bl	8007adc <memset>
 8007cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cdc:	4620      	mov	r0, r4
 8007cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce0:	3468      	adds	r4, #104	; 0x68
 8007ce2:	e7d9      	b.n	8007c98 <__sfp+0x1c>
 8007ce4:	2104      	movs	r1, #4
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ff62 	bl	8007bb0 <__sfmoreglue>
 8007cec:	4604      	mov	r4, r0
 8007cee:	6030      	str	r0, [r6, #0]
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d1d5      	bne.n	8007ca0 <__sfp+0x24>
 8007cf4:	f7ff ff78 	bl	8007be8 <__sfp_lock_release>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	e7ee      	b.n	8007cdc <__sfp+0x60>
 8007cfe:	bf00      	nop
 8007d00:	080091d4 	.word	0x080091d4
 8007d04:	ffff0001 	.word	0xffff0001

08007d08 <_fwalk_reent>:
 8007d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	4688      	mov	r8, r1
 8007d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d14:	2700      	movs	r7, #0
 8007d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d1e:	d505      	bpl.n	8007d2c <_fwalk_reent+0x24>
 8007d20:	6824      	ldr	r4, [r4, #0]
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d1f7      	bne.n	8007d16 <_fwalk_reent+0xe>
 8007d26:	4638      	mov	r0, r7
 8007d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2c:	89ab      	ldrh	r3, [r5, #12]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d907      	bls.n	8007d42 <_fwalk_reent+0x3a>
 8007d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d36:	3301      	adds	r3, #1
 8007d38:	d003      	beq.n	8007d42 <_fwalk_reent+0x3a>
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	47c0      	blx	r8
 8007d40:	4307      	orrs	r7, r0
 8007d42:	3568      	adds	r5, #104	; 0x68
 8007d44:	e7e9      	b.n	8007d1a <_fwalk_reent+0x12>

08007d46 <__retarget_lock_init_recursive>:
 8007d46:	4770      	bx	lr

08007d48 <__retarget_lock_acquire_recursive>:
 8007d48:	4770      	bx	lr

08007d4a <__retarget_lock_release_recursive>:
 8007d4a:	4770      	bx	lr

08007d4c <sbrk_aligned>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4e0e      	ldr	r6, [pc, #56]	; (8007d88 <sbrk_aligned+0x3c>)
 8007d50:	460c      	mov	r4, r1
 8007d52:	6831      	ldr	r1, [r6, #0]
 8007d54:	4605      	mov	r5, r0
 8007d56:	b911      	cbnz	r1, 8007d5e <sbrk_aligned+0x12>
 8007d58:	f000 fcd6 	bl	8008708 <_sbrk_r>
 8007d5c:	6030      	str	r0, [r6, #0]
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4628      	mov	r0, r5
 8007d62:	f000 fcd1 	bl	8008708 <_sbrk_r>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	d00a      	beq.n	8007d80 <sbrk_aligned+0x34>
 8007d6a:	1cc4      	adds	r4, r0, #3
 8007d6c:	f024 0403 	bic.w	r4, r4, #3
 8007d70:	42a0      	cmp	r0, r4
 8007d72:	d007      	beq.n	8007d84 <sbrk_aligned+0x38>
 8007d74:	1a21      	subs	r1, r4, r0
 8007d76:	4628      	mov	r0, r5
 8007d78:	f000 fcc6 	bl	8008708 <_sbrk_r>
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d101      	bne.n	8007d84 <sbrk_aligned+0x38>
 8007d80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007d84:	4620      	mov	r0, r4
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	20019398 	.word	0x20019398

08007d8c <_malloc_r>:
 8007d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d90:	1ccd      	adds	r5, r1, #3
 8007d92:	f025 0503 	bic.w	r5, r5, #3
 8007d96:	3508      	adds	r5, #8
 8007d98:	2d0c      	cmp	r5, #12
 8007d9a:	bf38      	it	cc
 8007d9c:	250c      	movcc	r5, #12
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	4607      	mov	r7, r0
 8007da2:	db01      	blt.n	8007da8 <_malloc_r+0x1c>
 8007da4:	42a9      	cmp	r1, r5
 8007da6:	d905      	bls.n	8007db4 <_malloc_r+0x28>
 8007da8:	230c      	movs	r3, #12
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	2600      	movs	r6, #0
 8007dae:	4630      	mov	r0, r6
 8007db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db4:	4e2e      	ldr	r6, [pc, #184]	; (8007e70 <_malloc_r+0xe4>)
 8007db6:	f000 ff31 	bl	8008c1c <__malloc_lock>
 8007dba:	6833      	ldr	r3, [r6, #0]
 8007dbc:	461c      	mov	r4, r3
 8007dbe:	bb34      	cbnz	r4, 8007e0e <_malloc_r+0x82>
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	f7ff ffc2 	bl	8007d4c <sbrk_aligned>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	4604      	mov	r4, r0
 8007dcc:	d14d      	bne.n	8007e6a <_malloc_r+0xde>
 8007dce:	6834      	ldr	r4, [r6, #0]
 8007dd0:	4626      	mov	r6, r4
 8007dd2:	2e00      	cmp	r6, #0
 8007dd4:	d140      	bne.n	8007e58 <_malloc_r+0xcc>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4638      	mov	r0, r7
 8007ddc:	eb04 0803 	add.w	r8, r4, r3
 8007de0:	f000 fc92 	bl	8008708 <_sbrk_r>
 8007de4:	4580      	cmp	r8, r0
 8007de6:	d13a      	bne.n	8007e5e <_malloc_r+0xd2>
 8007de8:	6821      	ldr	r1, [r4, #0]
 8007dea:	3503      	adds	r5, #3
 8007dec:	1a6d      	subs	r5, r5, r1
 8007dee:	f025 0503 	bic.w	r5, r5, #3
 8007df2:	3508      	adds	r5, #8
 8007df4:	2d0c      	cmp	r5, #12
 8007df6:	bf38      	it	cc
 8007df8:	250c      	movcc	r5, #12
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff ffa5 	bl	8007d4c <sbrk_aligned>
 8007e02:	3001      	adds	r0, #1
 8007e04:	d02b      	beq.n	8007e5e <_malloc_r+0xd2>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	442b      	add	r3, r5
 8007e0a:	6023      	str	r3, [r4, #0]
 8007e0c:	e00e      	b.n	8007e2c <_malloc_r+0xa0>
 8007e0e:	6822      	ldr	r2, [r4, #0]
 8007e10:	1b52      	subs	r2, r2, r5
 8007e12:	d41e      	bmi.n	8007e52 <_malloc_r+0xc6>
 8007e14:	2a0b      	cmp	r2, #11
 8007e16:	d916      	bls.n	8007e46 <_malloc_r+0xba>
 8007e18:	1961      	adds	r1, r4, r5
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	6025      	str	r5, [r4, #0]
 8007e1e:	bf18      	it	ne
 8007e20:	6059      	strne	r1, [r3, #4]
 8007e22:	6863      	ldr	r3, [r4, #4]
 8007e24:	bf08      	it	eq
 8007e26:	6031      	streq	r1, [r6, #0]
 8007e28:	5162      	str	r2, [r4, r5]
 8007e2a:	604b      	str	r3, [r1, #4]
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f104 060b 	add.w	r6, r4, #11
 8007e32:	f000 fef9 	bl	8008c28 <__malloc_unlock>
 8007e36:	f026 0607 	bic.w	r6, r6, #7
 8007e3a:	1d23      	adds	r3, r4, #4
 8007e3c:	1af2      	subs	r2, r6, r3
 8007e3e:	d0b6      	beq.n	8007dae <_malloc_r+0x22>
 8007e40:	1b9b      	subs	r3, r3, r6
 8007e42:	50a3      	str	r3, [r4, r2]
 8007e44:	e7b3      	b.n	8007dae <_malloc_r+0x22>
 8007e46:	6862      	ldr	r2, [r4, #4]
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	bf0c      	ite	eq
 8007e4c:	6032      	streq	r2, [r6, #0]
 8007e4e:	605a      	strne	r2, [r3, #4]
 8007e50:	e7ec      	b.n	8007e2c <_malloc_r+0xa0>
 8007e52:	4623      	mov	r3, r4
 8007e54:	6864      	ldr	r4, [r4, #4]
 8007e56:	e7b2      	b.n	8007dbe <_malloc_r+0x32>
 8007e58:	4634      	mov	r4, r6
 8007e5a:	6876      	ldr	r6, [r6, #4]
 8007e5c:	e7b9      	b.n	8007dd2 <_malloc_r+0x46>
 8007e5e:	230c      	movs	r3, #12
 8007e60:	603b      	str	r3, [r7, #0]
 8007e62:	4638      	mov	r0, r7
 8007e64:	f000 fee0 	bl	8008c28 <__malloc_unlock>
 8007e68:	e7a1      	b.n	8007dae <_malloc_r+0x22>
 8007e6a:	6025      	str	r5, [r4, #0]
 8007e6c:	e7de      	b.n	8007e2c <_malloc_r+0xa0>
 8007e6e:	bf00      	nop
 8007e70:	20019394 	.word	0x20019394

08007e74 <__ssputs_r>:
 8007e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	688e      	ldr	r6, [r1, #8]
 8007e7a:	429e      	cmp	r6, r3
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	4690      	mov	r8, r2
 8007e82:	461f      	mov	r7, r3
 8007e84:	d838      	bhi.n	8007ef8 <__ssputs_r+0x84>
 8007e86:	898a      	ldrh	r2, [r1, #12]
 8007e88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e8c:	d032      	beq.n	8007ef4 <__ssputs_r+0x80>
 8007e8e:	6825      	ldr	r5, [r4, #0]
 8007e90:	6909      	ldr	r1, [r1, #16]
 8007e92:	eba5 0901 	sub.w	r9, r5, r1
 8007e96:	6965      	ldr	r5, [r4, #20]
 8007e98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	444b      	add	r3, r9
 8007ea4:	106d      	asrs	r5, r5, #1
 8007ea6:	429d      	cmp	r5, r3
 8007ea8:	bf38      	it	cc
 8007eaa:	461d      	movcc	r5, r3
 8007eac:	0553      	lsls	r3, r2, #21
 8007eae:	d531      	bpl.n	8007f14 <__ssputs_r+0xa0>
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7ff ff6b 	bl	8007d8c <_malloc_r>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	b950      	cbnz	r0, 8007ed0 <__ssputs_r+0x5c>
 8007eba:	230c      	movs	r3, #12
 8007ebc:	f8ca 3000 	str.w	r3, [sl]
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed0:	6921      	ldr	r1, [r4, #16]
 8007ed2:	464a      	mov	r2, r9
 8007ed4:	f7ff fdf4 	bl	8007ac0 <memcpy>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	6126      	str	r6, [r4, #16]
 8007ee6:	6165      	str	r5, [r4, #20]
 8007ee8:	444e      	add	r6, r9
 8007eea:	eba5 0509 	sub.w	r5, r5, r9
 8007eee:	6026      	str	r6, [r4, #0]
 8007ef0:	60a5      	str	r5, [r4, #8]
 8007ef2:	463e      	mov	r6, r7
 8007ef4:	42be      	cmp	r6, r7
 8007ef6:	d900      	bls.n	8007efa <__ssputs_r+0x86>
 8007ef8:	463e      	mov	r6, r7
 8007efa:	6820      	ldr	r0, [r4, #0]
 8007efc:	4632      	mov	r2, r6
 8007efe:	4641      	mov	r1, r8
 8007f00:	f000 fe72 	bl	8008be8 <memmove>
 8007f04:	68a3      	ldr	r3, [r4, #8]
 8007f06:	1b9b      	subs	r3, r3, r6
 8007f08:	60a3      	str	r3, [r4, #8]
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	4433      	add	r3, r6
 8007f0e:	6023      	str	r3, [r4, #0]
 8007f10:	2000      	movs	r0, #0
 8007f12:	e7db      	b.n	8007ecc <__ssputs_r+0x58>
 8007f14:	462a      	mov	r2, r5
 8007f16:	f000 fed9 	bl	8008ccc <_realloc_r>
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d1e1      	bne.n	8007ee4 <__ssputs_r+0x70>
 8007f20:	6921      	ldr	r1, [r4, #16]
 8007f22:	4650      	mov	r0, sl
 8007f24:	f000 fe86 	bl	8008c34 <_free_r>
 8007f28:	e7c7      	b.n	8007eba <__ssputs_r+0x46>
	...

08007f2c <_svfiprintf_r>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	4698      	mov	r8, r3
 8007f32:	898b      	ldrh	r3, [r1, #12]
 8007f34:	061b      	lsls	r3, r3, #24
 8007f36:	b09d      	sub	sp, #116	; 0x74
 8007f38:	4607      	mov	r7, r0
 8007f3a:	460d      	mov	r5, r1
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	d50e      	bpl.n	8007f5e <_svfiprintf_r+0x32>
 8007f40:	690b      	ldr	r3, [r1, #16]
 8007f42:	b963      	cbnz	r3, 8007f5e <_svfiprintf_r+0x32>
 8007f44:	2140      	movs	r1, #64	; 0x40
 8007f46:	f7ff ff21 	bl	8007d8c <_malloc_r>
 8007f4a:	6028      	str	r0, [r5, #0]
 8007f4c:	6128      	str	r0, [r5, #16]
 8007f4e:	b920      	cbnz	r0, 8007f5a <_svfiprintf_r+0x2e>
 8007f50:	230c      	movs	r3, #12
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f58:	e0d1      	b.n	80080fe <_svfiprintf_r+0x1d2>
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	616b      	str	r3, [r5, #20]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9309      	str	r3, [sp, #36]	; 0x24
 8007f62:	2320      	movs	r3, #32
 8007f64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f6c:	2330      	movs	r3, #48	; 0x30
 8007f6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008118 <_svfiprintf_r+0x1ec>
 8007f72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f76:	f04f 0901 	mov.w	r9, #1
 8007f7a:	4623      	mov	r3, r4
 8007f7c:	469a      	mov	sl, r3
 8007f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f82:	b10a      	cbz	r2, 8007f88 <_svfiprintf_r+0x5c>
 8007f84:	2a25      	cmp	r2, #37	; 0x25
 8007f86:	d1f9      	bne.n	8007f7c <_svfiprintf_r+0x50>
 8007f88:	ebba 0b04 	subs.w	fp, sl, r4
 8007f8c:	d00b      	beq.n	8007fa6 <_svfiprintf_r+0x7a>
 8007f8e:	465b      	mov	r3, fp
 8007f90:	4622      	mov	r2, r4
 8007f92:	4629      	mov	r1, r5
 8007f94:	4638      	mov	r0, r7
 8007f96:	f7ff ff6d 	bl	8007e74 <__ssputs_r>
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f000 80aa 	beq.w	80080f4 <_svfiprintf_r+0x1c8>
 8007fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa2:	445a      	add	r2, fp
 8007fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 80a2 	beq.w	80080f4 <_svfiprintf_r+0x1c8>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fba:	f10a 0a01 	add.w	sl, sl, #1
 8007fbe:	9304      	str	r3, [sp, #16]
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8007fc8:	4654      	mov	r4, sl
 8007fca:	2205      	movs	r2, #5
 8007fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd0:	4851      	ldr	r0, [pc, #324]	; (8008118 <_svfiprintf_r+0x1ec>)
 8007fd2:	f7f8 f915 	bl	8000200 <memchr>
 8007fd6:	9a04      	ldr	r2, [sp, #16]
 8007fd8:	b9d8      	cbnz	r0, 8008012 <_svfiprintf_r+0xe6>
 8007fda:	06d0      	lsls	r0, r2, #27
 8007fdc:	bf44      	itt	mi
 8007fde:	2320      	movmi	r3, #32
 8007fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe4:	0711      	lsls	r1, r2, #28
 8007fe6:	bf44      	itt	mi
 8007fe8:	232b      	movmi	r3, #43	; 0x2b
 8007fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fee:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ff4:	d015      	beq.n	8008022 <_svfiprintf_r+0xf6>
 8007ff6:	9a07      	ldr	r2, [sp, #28]
 8007ff8:	4654      	mov	r4, sl
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f04f 0c0a 	mov.w	ip, #10
 8008000:	4621      	mov	r1, r4
 8008002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008006:	3b30      	subs	r3, #48	; 0x30
 8008008:	2b09      	cmp	r3, #9
 800800a:	d94e      	bls.n	80080aa <_svfiprintf_r+0x17e>
 800800c:	b1b0      	cbz	r0, 800803c <_svfiprintf_r+0x110>
 800800e:	9207      	str	r2, [sp, #28]
 8008010:	e014      	b.n	800803c <_svfiprintf_r+0x110>
 8008012:	eba0 0308 	sub.w	r3, r0, r8
 8008016:	fa09 f303 	lsl.w	r3, r9, r3
 800801a:	4313      	orrs	r3, r2
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	46a2      	mov	sl, r4
 8008020:	e7d2      	b.n	8007fc8 <_svfiprintf_r+0x9c>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	1d19      	adds	r1, r3, #4
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	9103      	str	r1, [sp, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	bfbb      	ittet	lt
 800802e:	425b      	neglt	r3, r3
 8008030:	f042 0202 	orrlt.w	r2, r2, #2
 8008034:	9307      	strge	r3, [sp, #28]
 8008036:	9307      	strlt	r3, [sp, #28]
 8008038:	bfb8      	it	lt
 800803a:	9204      	strlt	r2, [sp, #16]
 800803c:	7823      	ldrb	r3, [r4, #0]
 800803e:	2b2e      	cmp	r3, #46	; 0x2e
 8008040:	d10c      	bne.n	800805c <_svfiprintf_r+0x130>
 8008042:	7863      	ldrb	r3, [r4, #1]
 8008044:	2b2a      	cmp	r3, #42	; 0x2a
 8008046:	d135      	bne.n	80080b4 <_svfiprintf_r+0x188>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	1d1a      	adds	r2, r3, #4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	9203      	str	r2, [sp, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	bfb8      	it	lt
 8008054:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008058:	3402      	adds	r4, #2
 800805a:	9305      	str	r3, [sp, #20]
 800805c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008128 <_svfiprintf_r+0x1fc>
 8008060:	7821      	ldrb	r1, [r4, #0]
 8008062:	2203      	movs	r2, #3
 8008064:	4650      	mov	r0, sl
 8008066:	f7f8 f8cb 	bl	8000200 <memchr>
 800806a:	b140      	cbz	r0, 800807e <_svfiprintf_r+0x152>
 800806c:	2340      	movs	r3, #64	; 0x40
 800806e:	eba0 000a 	sub.w	r0, r0, sl
 8008072:	fa03 f000 	lsl.w	r0, r3, r0
 8008076:	9b04      	ldr	r3, [sp, #16]
 8008078:	4303      	orrs	r3, r0
 800807a:	3401      	adds	r4, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008082:	4826      	ldr	r0, [pc, #152]	; (800811c <_svfiprintf_r+0x1f0>)
 8008084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008088:	2206      	movs	r2, #6
 800808a:	f7f8 f8b9 	bl	8000200 <memchr>
 800808e:	2800      	cmp	r0, #0
 8008090:	d038      	beq.n	8008104 <_svfiprintf_r+0x1d8>
 8008092:	4b23      	ldr	r3, [pc, #140]	; (8008120 <_svfiprintf_r+0x1f4>)
 8008094:	bb1b      	cbnz	r3, 80080de <_svfiprintf_r+0x1b2>
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	3307      	adds	r3, #7
 800809a:	f023 0307 	bic.w	r3, r3, #7
 800809e:	3308      	adds	r3, #8
 80080a0:	9303      	str	r3, [sp, #12]
 80080a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a4:	4433      	add	r3, r6
 80080a6:	9309      	str	r3, [sp, #36]	; 0x24
 80080a8:	e767      	b.n	8007f7a <_svfiprintf_r+0x4e>
 80080aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ae:	460c      	mov	r4, r1
 80080b0:	2001      	movs	r0, #1
 80080b2:	e7a5      	b.n	8008000 <_svfiprintf_r+0xd4>
 80080b4:	2300      	movs	r3, #0
 80080b6:	3401      	adds	r4, #1
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	4619      	mov	r1, r3
 80080bc:	f04f 0c0a 	mov.w	ip, #10
 80080c0:	4620      	mov	r0, r4
 80080c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080c6:	3a30      	subs	r2, #48	; 0x30
 80080c8:	2a09      	cmp	r2, #9
 80080ca:	d903      	bls.n	80080d4 <_svfiprintf_r+0x1a8>
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0c5      	beq.n	800805c <_svfiprintf_r+0x130>
 80080d0:	9105      	str	r1, [sp, #20]
 80080d2:	e7c3      	b.n	800805c <_svfiprintf_r+0x130>
 80080d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080d8:	4604      	mov	r4, r0
 80080da:	2301      	movs	r3, #1
 80080dc:	e7f0      	b.n	80080c0 <_svfiprintf_r+0x194>
 80080de:	ab03      	add	r3, sp, #12
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	462a      	mov	r2, r5
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <_svfiprintf_r+0x1f8>)
 80080e6:	a904      	add	r1, sp, #16
 80080e8:	4638      	mov	r0, r7
 80080ea:	f3af 8000 	nop.w
 80080ee:	1c42      	adds	r2, r0, #1
 80080f0:	4606      	mov	r6, r0
 80080f2:	d1d6      	bne.n	80080a2 <_svfiprintf_r+0x176>
 80080f4:	89ab      	ldrh	r3, [r5, #12]
 80080f6:	065b      	lsls	r3, r3, #25
 80080f8:	f53f af2c 	bmi.w	8007f54 <_svfiprintf_r+0x28>
 80080fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080fe:	b01d      	add	sp, #116	; 0x74
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008104:	ab03      	add	r3, sp, #12
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	462a      	mov	r2, r5
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <_svfiprintf_r+0x1f8>)
 800810c:	a904      	add	r1, sp, #16
 800810e:	4638      	mov	r0, r7
 8008110:	f000 f9d4 	bl	80084bc <_printf_i>
 8008114:	e7eb      	b.n	80080ee <_svfiprintf_r+0x1c2>
 8008116:	bf00      	nop
 8008118:	08009238 	.word	0x08009238
 800811c:	08009242 	.word	0x08009242
 8008120:	00000000 	.word	0x00000000
 8008124:	08007e75 	.word	0x08007e75
 8008128:	0800923e 	.word	0x0800923e

0800812c <__sfputc_r>:
 800812c:	6893      	ldr	r3, [r2, #8]
 800812e:	3b01      	subs	r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	b410      	push	{r4}
 8008134:	6093      	str	r3, [r2, #8]
 8008136:	da08      	bge.n	800814a <__sfputc_r+0x1e>
 8008138:	6994      	ldr	r4, [r2, #24]
 800813a:	42a3      	cmp	r3, r4
 800813c:	db01      	blt.n	8008142 <__sfputc_r+0x16>
 800813e:	290a      	cmp	r1, #10
 8008140:	d103      	bne.n	800814a <__sfputc_r+0x1e>
 8008142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008146:	f000 bb33 	b.w	80087b0 <__swbuf_r>
 800814a:	6813      	ldr	r3, [r2, #0]
 800814c:	1c58      	adds	r0, r3, #1
 800814e:	6010      	str	r0, [r2, #0]
 8008150:	7019      	strb	r1, [r3, #0]
 8008152:	4608      	mov	r0, r1
 8008154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008158:	4770      	bx	lr

0800815a <__sfputs_r>:
 800815a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815c:	4606      	mov	r6, r0
 800815e:	460f      	mov	r7, r1
 8008160:	4614      	mov	r4, r2
 8008162:	18d5      	adds	r5, r2, r3
 8008164:	42ac      	cmp	r4, r5
 8008166:	d101      	bne.n	800816c <__sfputs_r+0x12>
 8008168:	2000      	movs	r0, #0
 800816a:	e007      	b.n	800817c <__sfputs_r+0x22>
 800816c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008170:	463a      	mov	r2, r7
 8008172:	4630      	mov	r0, r6
 8008174:	f7ff ffda 	bl	800812c <__sfputc_r>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d1f3      	bne.n	8008164 <__sfputs_r+0xa>
 800817c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008180 <_vfiprintf_r>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	460d      	mov	r5, r1
 8008186:	b09d      	sub	sp, #116	; 0x74
 8008188:	4614      	mov	r4, r2
 800818a:	4698      	mov	r8, r3
 800818c:	4606      	mov	r6, r0
 800818e:	b118      	cbz	r0, 8008198 <_vfiprintf_r+0x18>
 8008190:	6983      	ldr	r3, [r0, #24]
 8008192:	b90b      	cbnz	r3, 8008198 <_vfiprintf_r+0x18>
 8008194:	f7ff fd3a 	bl	8007c0c <__sinit>
 8008198:	4b89      	ldr	r3, [pc, #548]	; (80083c0 <_vfiprintf_r+0x240>)
 800819a:	429d      	cmp	r5, r3
 800819c:	d11b      	bne.n	80081d6 <_vfiprintf_r+0x56>
 800819e:	6875      	ldr	r5, [r6, #4]
 80081a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081a2:	07d9      	lsls	r1, r3, #31
 80081a4:	d405      	bmi.n	80081b2 <_vfiprintf_r+0x32>
 80081a6:	89ab      	ldrh	r3, [r5, #12]
 80081a8:	059a      	lsls	r2, r3, #22
 80081aa:	d402      	bmi.n	80081b2 <_vfiprintf_r+0x32>
 80081ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081ae:	f7ff fdcb 	bl	8007d48 <__retarget_lock_acquire_recursive>
 80081b2:	89ab      	ldrh	r3, [r5, #12]
 80081b4:	071b      	lsls	r3, r3, #28
 80081b6:	d501      	bpl.n	80081bc <_vfiprintf_r+0x3c>
 80081b8:	692b      	ldr	r3, [r5, #16]
 80081ba:	b9eb      	cbnz	r3, 80081f8 <_vfiprintf_r+0x78>
 80081bc:	4629      	mov	r1, r5
 80081be:	4630      	mov	r0, r6
 80081c0:	f000 fb5a 	bl	8008878 <__swsetup_r>
 80081c4:	b1c0      	cbz	r0, 80081f8 <_vfiprintf_r+0x78>
 80081c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081c8:	07dc      	lsls	r4, r3, #31
 80081ca:	d50e      	bpl.n	80081ea <_vfiprintf_r+0x6a>
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081d0:	b01d      	add	sp, #116	; 0x74
 80081d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d6:	4b7b      	ldr	r3, [pc, #492]	; (80083c4 <_vfiprintf_r+0x244>)
 80081d8:	429d      	cmp	r5, r3
 80081da:	d101      	bne.n	80081e0 <_vfiprintf_r+0x60>
 80081dc:	68b5      	ldr	r5, [r6, #8]
 80081de:	e7df      	b.n	80081a0 <_vfiprintf_r+0x20>
 80081e0:	4b79      	ldr	r3, [pc, #484]	; (80083c8 <_vfiprintf_r+0x248>)
 80081e2:	429d      	cmp	r5, r3
 80081e4:	bf08      	it	eq
 80081e6:	68f5      	ldreq	r5, [r6, #12]
 80081e8:	e7da      	b.n	80081a0 <_vfiprintf_r+0x20>
 80081ea:	89ab      	ldrh	r3, [r5, #12]
 80081ec:	0598      	lsls	r0, r3, #22
 80081ee:	d4ed      	bmi.n	80081cc <_vfiprintf_r+0x4c>
 80081f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081f2:	f7ff fdaa 	bl	8007d4a <__retarget_lock_release_recursive>
 80081f6:	e7e9      	b.n	80081cc <_vfiprintf_r+0x4c>
 80081f8:	2300      	movs	r3, #0
 80081fa:	9309      	str	r3, [sp, #36]	; 0x24
 80081fc:	2320      	movs	r3, #32
 80081fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008202:	f8cd 800c 	str.w	r8, [sp, #12]
 8008206:	2330      	movs	r3, #48	; 0x30
 8008208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80083cc <_vfiprintf_r+0x24c>
 800820c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008210:	f04f 0901 	mov.w	r9, #1
 8008214:	4623      	mov	r3, r4
 8008216:	469a      	mov	sl, r3
 8008218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800821c:	b10a      	cbz	r2, 8008222 <_vfiprintf_r+0xa2>
 800821e:	2a25      	cmp	r2, #37	; 0x25
 8008220:	d1f9      	bne.n	8008216 <_vfiprintf_r+0x96>
 8008222:	ebba 0b04 	subs.w	fp, sl, r4
 8008226:	d00b      	beq.n	8008240 <_vfiprintf_r+0xc0>
 8008228:	465b      	mov	r3, fp
 800822a:	4622      	mov	r2, r4
 800822c:	4629      	mov	r1, r5
 800822e:	4630      	mov	r0, r6
 8008230:	f7ff ff93 	bl	800815a <__sfputs_r>
 8008234:	3001      	adds	r0, #1
 8008236:	f000 80aa 	beq.w	800838e <_vfiprintf_r+0x20e>
 800823a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800823c:	445a      	add	r2, fp
 800823e:	9209      	str	r2, [sp, #36]	; 0x24
 8008240:	f89a 3000 	ldrb.w	r3, [sl]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 80a2 	beq.w	800838e <_vfiprintf_r+0x20e>
 800824a:	2300      	movs	r3, #0
 800824c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008254:	f10a 0a01 	add.w	sl, sl, #1
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	9307      	str	r3, [sp, #28]
 800825c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008260:	931a      	str	r3, [sp, #104]	; 0x68
 8008262:	4654      	mov	r4, sl
 8008264:	2205      	movs	r2, #5
 8008266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826a:	4858      	ldr	r0, [pc, #352]	; (80083cc <_vfiprintf_r+0x24c>)
 800826c:	f7f7 ffc8 	bl	8000200 <memchr>
 8008270:	9a04      	ldr	r2, [sp, #16]
 8008272:	b9d8      	cbnz	r0, 80082ac <_vfiprintf_r+0x12c>
 8008274:	06d1      	lsls	r1, r2, #27
 8008276:	bf44      	itt	mi
 8008278:	2320      	movmi	r3, #32
 800827a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800827e:	0713      	lsls	r3, r2, #28
 8008280:	bf44      	itt	mi
 8008282:	232b      	movmi	r3, #43	; 0x2b
 8008284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008288:	f89a 3000 	ldrb.w	r3, [sl]
 800828c:	2b2a      	cmp	r3, #42	; 0x2a
 800828e:	d015      	beq.n	80082bc <_vfiprintf_r+0x13c>
 8008290:	9a07      	ldr	r2, [sp, #28]
 8008292:	4654      	mov	r4, sl
 8008294:	2000      	movs	r0, #0
 8008296:	f04f 0c0a 	mov.w	ip, #10
 800829a:	4621      	mov	r1, r4
 800829c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082a0:	3b30      	subs	r3, #48	; 0x30
 80082a2:	2b09      	cmp	r3, #9
 80082a4:	d94e      	bls.n	8008344 <_vfiprintf_r+0x1c4>
 80082a6:	b1b0      	cbz	r0, 80082d6 <_vfiprintf_r+0x156>
 80082a8:	9207      	str	r2, [sp, #28]
 80082aa:	e014      	b.n	80082d6 <_vfiprintf_r+0x156>
 80082ac:	eba0 0308 	sub.w	r3, r0, r8
 80082b0:	fa09 f303 	lsl.w	r3, r9, r3
 80082b4:	4313      	orrs	r3, r2
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	46a2      	mov	sl, r4
 80082ba:	e7d2      	b.n	8008262 <_vfiprintf_r+0xe2>
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	1d19      	adds	r1, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	9103      	str	r1, [sp, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfbb      	ittet	lt
 80082c8:	425b      	neglt	r3, r3
 80082ca:	f042 0202 	orrlt.w	r2, r2, #2
 80082ce:	9307      	strge	r3, [sp, #28]
 80082d0:	9307      	strlt	r3, [sp, #28]
 80082d2:	bfb8      	it	lt
 80082d4:	9204      	strlt	r2, [sp, #16]
 80082d6:	7823      	ldrb	r3, [r4, #0]
 80082d8:	2b2e      	cmp	r3, #46	; 0x2e
 80082da:	d10c      	bne.n	80082f6 <_vfiprintf_r+0x176>
 80082dc:	7863      	ldrb	r3, [r4, #1]
 80082de:	2b2a      	cmp	r3, #42	; 0x2a
 80082e0:	d135      	bne.n	800834e <_vfiprintf_r+0x1ce>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	1d1a      	adds	r2, r3, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	9203      	str	r2, [sp, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfb8      	it	lt
 80082ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80082f2:	3402      	adds	r4, #2
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083dc <_vfiprintf_r+0x25c>
 80082fa:	7821      	ldrb	r1, [r4, #0]
 80082fc:	2203      	movs	r2, #3
 80082fe:	4650      	mov	r0, sl
 8008300:	f7f7 ff7e 	bl	8000200 <memchr>
 8008304:	b140      	cbz	r0, 8008318 <_vfiprintf_r+0x198>
 8008306:	2340      	movs	r3, #64	; 0x40
 8008308:	eba0 000a 	sub.w	r0, r0, sl
 800830c:	fa03 f000 	lsl.w	r0, r3, r0
 8008310:	9b04      	ldr	r3, [sp, #16]
 8008312:	4303      	orrs	r3, r0
 8008314:	3401      	adds	r4, #1
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831c:	482c      	ldr	r0, [pc, #176]	; (80083d0 <_vfiprintf_r+0x250>)
 800831e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008322:	2206      	movs	r2, #6
 8008324:	f7f7 ff6c 	bl	8000200 <memchr>
 8008328:	2800      	cmp	r0, #0
 800832a:	d03f      	beq.n	80083ac <_vfiprintf_r+0x22c>
 800832c:	4b29      	ldr	r3, [pc, #164]	; (80083d4 <_vfiprintf_r+0x254>)
 800832e:	bb1b      	cbnz	r3, 8008378 <_vfiprintf_r+0x1f8>
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	3307      	adds	r3, #7
 8008334:	f023 0307 	bic.w	r3, r3, #7
 8008338:	3308      	adds	r3, #8
 800833a:	9303      	str	r3, [sp, #12]
 800833c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833e:	443b      	add	r3, r7
 8008340:	9309      	str	r3, [sp, #36]	; 0x24
 8008342:	e767      	b.n	8008214 <_vfiprintf_r+0x94>
 8008344:	fb0c 3202 	mla	r2, ip, r2, r3
 8008348:	460c      	mov	r4, r1
 800834a:	2001      	movs	r0, #1
 800834c:	e7a5      	b.n	800829a <_vfiprintf_r+0x11a>
 800834e:	2300      	movs	r3, #0
 8008350:	3401      	adds	r4, #1
 8008352:	9305      	str	r3, [sp, #20]
 8008354:	4619      	mov	r1, r3
 8008356:	f04f 0c0a 	mov.w	ip, #10
 800835a:	4620      	mov	r0, r4
 800835c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008360:	3a30      	subs	r2, #48	; 0x30
 8008362:	2a09      	cmp	r2, #9
 8008364:	d903      	bls.n	800836e <_vfiprintf_r+0x1ee>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0c5      	beq.n	80082f6 <_vfiprintf_r+0x176>
 800836a:	9105      	str	r1, [sp, #20]
 800836c:	e7c3      	b.n	80082f6 <_vfiprintf_r+0x176>
 800836e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008372:	4604      	mov	r4, r0
 8008374:	2301      	movs	r3, #1
 8008376:	e7f0      	b.n	800835a <_vfiprintf_r+0x1da>
 8008378:	ab03      	add	r3, sp, #12
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	462a      	mov	r2, r5
 800837e:	4b16      	ldr	r3, [pc, #88]	; (80083d8 <_vfiprintf_r+0x258>)
 8008380:	a904      	add	r1, sp, #16
 8008382:	4630      	mov	r0, r6
 8008384:	f3af 8000 	nop.w
 8008388:	4607      	mov	r7, r0
 800838a:	1c78      	adds	r0, r7, #1
 800838c:	d1d6      	bne.n	800833c <_vfiprintf_r+0x1bc>
 800838e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008390:	07d9      	lsls	r1, r3, #31
 8008392:	d405      	bmi.n	80083a0 <_vfiprintf_r+0x220>
 8008394:	89ab      	ldrh	r3, [r5, #12]
 8008396:	059a      	lsls	r2, r3, #22
 8008398:	d402      	bmi.n	80083a0 <_vfiprintf_r+0x220>
 800839a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800839c:	f7ff fcd5 	bl	8007d4a <__retarget_lock_release_recursive>
 80083a0:	89ab      	ldrh	r3, [r5, #12]
 80083a2:	065b      	lsls	r3, r3, #25
 80083a4:	f53f af12 	bmi.w	80081cc <_vfiprintf_r+0x4c>
 80083a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083aa:	e711      	b.n	80081d0 <_vfiprintf_r+0x50>
 80083ac:	ab03      	add	r3, sp, #12
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	462a      	mov	r2, r5
 80083b2:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <_vfiprintf_r+0x258>)
 80083b4:	a904      	add	r1, sp, #16
 80083b6:	4630      	mov	r0, r6
 80083b8:	f000 f880 	bl	80084bc <_printf_i>
 80083bc:	e7e4      	b.n	8008388 <_vfiprintf_r+0x208>
 80083be:	bf00      	nop
 80083c0:	080091f8 	.word	0x080091f8
 80083c4:	08009218 	.word	0x08009218
 80083c8:	080091d8 	.word	0x080091d8
 80083cc:	08009238 	.word	0x08009238
 80083d0:	08009242 	.word	0x08009242
 80083d4:	00000000 	.word	0x00000000
 80083d8:	0800815b 	.word	0x0800815b
 80083dc:	0800923e 	.word	0x0800923e

080083e0 <_printf_common>:
 80083e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e4:	4616      	mov	r6, r2
 80083e6:	4699      	mov	r9, r3
 80083e8:	688a      	ldr	r2, [r1, #8]
 80083ea:	690b      	ldr	r3, [r1, #16]
 80083ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083f0:	4293      	cmp	r3, r2
 80083f2:	bfb8      	it	lt
 80083f4:	4613      	movlt	r3, r2
 80083f6:	6033      	str	r3, [r6, #0]
 80083f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083fc:	4607      	mov	r7, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	b10a      	cbz	r2, 8008406 <_printf_common+0x26>
 8008402:	3301      	adds	r3, #1
 8008404:	6033      	str	r3, [r6, #0]
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	0699      	lsls	r1, r3, #26
 800840a:	bf42      	ittt	mi
 800840c:	6833      	ldrmi	r3, [r6, #0]
 800840e:	3302      	addmi	r3, #2
 8008410:	6033      	strmi	r3, [r6, #0]
 8008412:	6825      	ldr	r5, [r4, #0]
 8008414:	f015 0506 	ands.w	r5, r5, #6
 8008418:	d106      	bne.n	8008428 <_printf_common+0x48>
 800841a:	f104 0a19 	add.w	sl, r4, #25
 800841e:	68e3      	ldr	r3, [r4, #12]
 8008420:	6832      	ldr	r2, [r6, #0]
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	42ab      	cmp	r3, r5
 8008426:	dc26      	bgt.n	8008476 <_printf_common+0x96>
 8008428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800842c:	1e13      	subs	r3, r2, #0
 800842e:	6822      	ldr	r2, [r4, #0]
 8008430:	bf18      	it	ne
 8008432:	2301      	movne	r3, #1
 8008434:	0692      	lsls	r2, r2, #26
 8008436:	d42b      	bmi.n	8008490 <_printf_common+0xb0>
 8008438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800843c:	4649      	mov	r1, r9
 800843e:	4638      	mov	r0, r7
 8008440:	47c0      	blx	r8
 8008442:	3001      	adds	r0, #1
 8008444:	d01e      	beq.n	8008484 <_printf_common+0xa4>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	68e5      	ldr	r5, [r4, #12]
 800844a:	6832      	ldr	r2, [r6, #0]
 800844c:	f003 0306 	and.w	r3, r3, #6
 8008450:	2b04      	cmp	r3, #4
 8008452:	bf08      	it	eq
 8008454:	1aad      	subeq	r5, r5, r2
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	6922      	ldr	r2, [r4, #16]
 800845a:	bf0c      	ite	eq
 800845c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008460:	2500      	movne	r5, #0
 8008462:	4293      	cmp	r3, r2
 8008464:	bfc4      	itt	gt
 8008466:	1a9b      	subgt	r3, r3, r2
 8008468:	18ed      	addgt	r5, r5, r3
 800846a:	2600      	movs	r6, #0
 800846c:	341a      	adds	r4, #26
 800846e:	42b5      	cmp	r5, r6
 8008470:	d11a      	bne.n	80084a8 <_printf_common+0xc8>
 8008472:	2000      	movs	r0, #0
 8008474:	e008      	b.n	8008488 <_printf_common+0xa8>
 8008476:	2301      	movs	r3, #1
 8008478:	4652      	mov	r2, sl
 800847a:	4649      	mov	r1, r9
 800847c:	4638      	mov	r0, r7
 800847e:	47c0      	blx	r8
 8008480:	3001      	adds	r0, #1
 8008482:	d103      	bne.n	800848c <_printf_common+0xac>
 8008484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848c:	3501      	adds	r5, #1
 800848e:	e7c6      	b.n	800841e <_printf_common+0x3e>
 8008490:	18e1      	adds	r1, r4, r3
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	2030      	movs	r0, #48	; 0x30
 8008496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800849a:	4422      	add	r2, r4
 800849c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084a4:	3302      	adds	r3, #2
 80084a6:	e7c7      	b.n	8008438 <_printf_common+0x58>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4622      	mov	r2, r4
 80084ac:	4649      	mov	r1, r9
 80084ae:	4638      	mov	r0, r7
 80084b0:	47c0      	blx	r8
 80084b2:	3001      	adds	r0, #1
 80084b4:	d0e6      	beq.n	8008484 <_printf_common+0xa4>
 80084b6:	3601      	adds	r6, #1
 80084b8:	e7d9      	b.n	800846e <_printf_common+0x8e>
	...

080084bc <_printf_i>:
 80084bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	7e0f      	ldrb	r7, [r1, #24]
 80084c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084c4:	2f78      	cmp	r7, #120	; 0x78
 80084c6:	4691      	mov	r9, r2
 80084c8:	4680      	mov	r8, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	469a      	mov	sl, r3
 80084ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084d2:	d807      	bhi.n	80084e4 <_printf_i+0x28>
 80084d4:	2f62      	cmp	r7, #98	; 0x62
 80084d6:	d80a      	bhi.n	80084ee <_printf_i+0x32>
 80084d8:	2f00      	cmp	r7, #0
 80084da:	f000 80d8 	beq.w	800868e <_printf_i+0x1d2>
 80084de:	2f58      	cmp	r7, #88	; 0x58
 80084e0:	f000 80a3 	beq.w	800862a <_printf_i+0x16e>
 80084e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084ec:	e03a      	b.n	8008564 <_printf_i+0xa8>
 80084ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084f2:	2b15      	cmp	r3, #21
 80084f4:	d8f6      	bhi.n	80084e4 <_printf_i+0x28>
 80084f6:	a101      	add	r1, pc, #4	; (adr r1, 80084fc <_printf_i+0x40>)
 80084f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084fc:	08008555 	.word	0x08008555
 8008500:	08008569 	.word	0x08008569
 8008504:	080084e5 	.word	0x080084e5
 8008508:	080084e5 	.word	0x080084e5
 800850c:	080084e5 	.word	0x080084e5
 8008510:	080084e5 	.word	0x080084e5
 8008514:	08008569 	.word	0x08008569
 8008518:	080084e5 	.word	0x080084e5
 800851c:	080084e5 	.word	0x080084e5
 8008520:	080084e5 	.word	0x080084e5
 8008524:	080084e5 	.word	0x080084e5
 8008528:	08008675 	.word	0x08008675
 800852c:	08008599 	.word	0x08008599
 8008530:	08008657 	.word	0x08008657
 8008534:	080084e5 	.word	0x080084e5
 8008538:	080084e5 	.word	0x080084e5
 800853c:	08008697 	.word	0x08008697
 8008540:	080084e5 	.word	0x080084e5
 8008544:	08008599 	.word	0x08008599
 8008548:	080084e5 	.word	0x080084e5
 800854c:	080084e5 	.word	0x080084e5
 8008550:	0800865f 	.word	0x0800865f
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	1d1a      	adds	r2, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	602a      	str	r2, [r5, #0]
 800855c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008564:	2301      	movs	r3, #1
 8008566:	e0a3      	b.n	80086b0 <_printf_i+0x1f4>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	6829      	ldr	r1, [r5, #0]
 800856c:	0606      	lsls	r6, r0, #24
 800856e:	f101 0304 	add.w	r3, r1, #4
 8008572:	d50a      	bpl.n	800858a <_printf_i+0xce>
 8008574:	680e      	ldr	r6, [r1, #0]
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	2e00      	cmp	r6, #0
 800857a:	da03      	bge.n	8008584 <_printf_i+0xc8>
 800857c:	232d      	movs	r3, #45	; 0x2d
 800857e:	4276      	negs	r6, r6
 8008580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008584:	485e      	ldr	r0, [pc, #376]	; (8008700 <_printf_i+0x244>)
 8008586:	230a      	movs	r3, #10
 8008588:	e019      	b.n	80085be <_printf_i+0x102>
 800858a:	680e      	ldr	r6, [r1, #0]
 800858c:	602b      	str	r3, [r5, #0]
 800858e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008592:	bf18      	it	ne
 8008594:	b236      	sxthne	r6, r6
 8008596:	e7ef      	b.n	8008578 <_printf_i+0xbc>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	6820      	ldr	r0, [r4, #0]
 800859c:	1d19      	adds	r1, r3, #4
 800859e:	6029      	str	r1, [r5, #0]
 80085a0:	0601      	lsls	r1, r0, #24
 80085a2:	d501      	bpl.n	80085a8 <_printf_i+0xec>
 80085a4:	681e      	ldr	r6, [r3, #0]
 80085a6:	e002      	b.n	80085ae <_printf_i+0xf2>
 80085a8:	0646      	lsls	r6, r0, #25
 80085aa:	d5fb      	bpl.n	80085a4 <_printf_i+0xe8>
 80085ac:	881e      	ldrh	r6, [r3, #0]
 80085ae:	4854      	ldr	r0, [pc, #336]	; (8008700 <_printf_i+0x244>)
 80085b0:	2f6f      	cmp	r7, #111	; 0x6f
 80085b2:	bf0c      	ite	eq
 80085b4:	2308      	moveq	r3, #8
 80085b6:	230a      	movne	r3, #10
 80085b8:	2100      	movs	r1, #0
 80085ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085be:	6865      	ldr	r5, [r4, #4]
 80085c0:	60a5      	str	r5, [r4, #8]
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	bfa2      	ittt	ge
 80085c6:	6821      	ldrge	r1, [r4, #0]
 80085c8:	f021 0104 	bicge.w	r1, r1, #4
 80085cc:	6021      	strge	r1, [r4, #0]
 80085ce:	b90e      	cbnz	r6, 80085d4 <_printf_i+0x118>
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	d04d      	beq.n	8008670 <_printf_i+0x1b4>
 80085d4:	4615      	mov	r5, r2
 80085d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80085da:	fb03 6711 	mls	r7, r3, r1, r6
 80085de:	5dc7      	ldrb	r7, [r0, r7]
 80085e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085e4:	4637      	mov	r7, r6
 80085e6:	42bb      	cmp	r3, r7
 80085e8:	460e      	mov	r6, r1
 80085ea:	d9f4      	bls.n	80085d6 <_printf_i+0x11a>
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d10b      	bne.n	8008608 <_printf_i+0x14c>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	07de      	lsls	r6, r3, #31
 80085f4:	d508      	bpl.n	8008608 <_printf_i+0x14c>
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	6861      	ldr	r1, [r4, #4]
 80085fa:	4299      	cmp	r1, r3
 80085fc:	bfde      	ittt	le
 80085fe:	2330      	movle	r3, #48	; 0x30
 8008600:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008604:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008608:	1b52      	subs	r2, r2, r5
 800860a:	6122      	str	r2, [r4, #16]
 800860c:	f8cd a000 	str.w	sl, [sp]
 8008610:	464b      	mov	r3, r9
 8008612:	aa03      	add	r2, sp, #12
 8008614:	4621      	mov	r1, r4
 8008616:	4640      	mov	r0, r8
 8008618:	f7ff fee2 	bl	80083e0 <_printf_common>
 800861c:	3001      	adds	r0, #1
 800861e:	d14c      	bne.n	80086ba <_printf_i+0x1fe>
 8008620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008624:	b004      	add	sp, #16
 8008626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862a:	4835      	ldr	r0, [pc, #212]	; (8008700 <_printf_i+0x244>)
 800862c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008630:	6829      	ldr	r1, [r5, #0]
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	f851 6b04 	ldr.w	r6, [r1], #4
 8008638:	6029      	str	r1, [r5, #0]
 800863a:	061d      	lsls	r5, r3, #24
 800863c:	d514      	bpl.n	8008668 <_printf_i+0x1ac>
 800863e:	07df      	lsls	r7, r3, #31
 8008640:	bf44      	itt	mi
 8008642:	f043 0320 	orrmi.w	r3, r3, #32
 8008646:	6023      	strmi	r3, [r4, #0]
 8008648:	b91e      	cbnz	r6, 8008652 <_printf_i+0x196>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	f023 0320 	bic.w	r3, r3, #32
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	2310      	movs	r3, #16
 8008654:	e7b0      	b.n	80085b8 <_printf_i+0xfc>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	f043 0320 	orr.w	r3, r3, #32
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	2378      	movs	r3, #120	; 0x78
 8008660:	4828      	ldr	r0, [pc, #160]	; (8008704 <_printf_i+0x248>)
 8008662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008666:	e7e3      	b.n	8008630 <_printf_i+0x174>
 8008668:	0659      	lsls	r1, r3, #25
 800866a:	bf48      	it	mi
 800866c:	b2b6      	uxthmi	r6, r6
 800866e:	e7e6      	b.n	800863e <_printf_i+0x182>
 8008670:	4615      	mov	r5, r2
 8008672:	e7bb      	b.n	80085ec <_printf_i+0x130>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	6826      	ldr	r6, [r4, #0]
 8008678:	6961      	ldr	r1, [r4, #20]
 800867a:	1d18      	adds	r0, r3, #4
 800867c:	6028      	str	r0, [r5, #0]
 800867e:	0635      	lsls	r5, r6, #24
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	d501      	bpl.n	8008688 <_printf_i+0x1cc>
 8008684:	6019      	str	r1, [r3, #0]
 8008686:	e002      	b.n	800868e <_printf_i+0x1d2>
 8008688:	0670      	lsls	r0, r6, #25
 800868a:	d5fb      	bpl.n	8008684 <_printf_i+0x1c8>
 800868c:	8019      	strh	r1, [r3, #0]
 800868e:	2300      	movs	r3, #0
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	4615      	mov	r5, r2
 8008694:	e7ba      	b.n	800860c <_printf_i+0x150>
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	1d1a      	adds	r2, r3, #4
 800869a:	602a      	str	r2, [r5, #0]
 800869c:	681d      	ldr	r5, [r3, #0]
 800869e:	6862      	ldr	r2, [r4, #4]
 80086a0:	2100      	movs	r1, #0
 80086a2:	4628      	mov	r0, r5
 80086a4:	f7f7 fdac 	bl	8000200 <memchr>
 80086a8:	b108      	cbz	r0, 80086ae <_printf_i+0x1f2>
 80086aa:	1b40      	subs	r0, r0, r5
 80086ac:	6060      	str	r0, [r4, #4]
 80086ae:	6863      	ldr	r3, [r4, #4]
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	2300      	movs	r3, #0
 80086b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b8:	e7a8      	b.n	800860c <_printf_i+0x150>
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	462a      	mov	r2, r5
 80086be:	4649      	mov	r1, r9
 80086c0:	4640      	mov	r0, r8
 80086c2:	47d0      	blx	sl
 80086c4:	3001      	adds	r0, #1
 80086c6:	d0ab      	beq.n	8008620 <_printf_i+0x164>
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	079b      	lsls	r3, r3, #30
 80086cc:	d413      	bmi.n	80086f6 <_printf_i+0x23a>
 80086ce:	68e0      	ldr	r0, [r4, #12]
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	4298      	cmp	r0, r3
 80086d4:	bfb8      	it	lt
 80086d6:	4618      	movlt	r0, r3
 80086d8:	e7a4      	b.n	8008624 <_printf_i+0x168>
 80086da:	2301      	movs	r3, #1
 80086dc:	4632      	mov	r2, r6
 80086de:	4649      	mov	r1, r9
 80086e0:	4640      	mov	r0, r8
 80086e2:	47d0      	blx	sl
 80086e4:	3001      	adds	r0, #1
 80086e6:	d09b      	beq.n	8008620 <_printf_i+0x164>
 80086e8:	3501      	adds	r5, #1
 80086ea:	68e3      	ldr	r3, [r4, #12]
 80086ec:	9903      	ldr	r1, [sp, #12]
 80086ee:	1a5b      	subs	r3, r3, r1
 80086f0:	42ab      	cmp	r3, r5
 80086f2:	dcf2      	bgt.n	80086da <_printf_i+0x21e>
 80086f4:	e7eb      	b.n	80086ce <_printf_i+0x212>
 80086f6:	2500      	movs	r5, #0
 80086f8:	f104 0619 	add.w	r6, r4, #25
 80086fc:	e7f5      	b.n	80086ea <_printf_i+0x22e>
 80086fe:	bf00      	nop
 8008700:	08009249 	.word	0x08009249
 8008704:	0800925a 	.word	0x0800925a

08008708 <_sbrk_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d06      	ldr	r5, [pc, #24]	; (8008724 <_sbrk_r+0x1c>)
 800870c:	2300      	movs	r3, #0
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	f000 fb46 	bl	8008da4 <_sbrk>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_sbrk_r+0x1a>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_sbrk_r+0x1a>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	2001939c 	.word	0x2001939c

08008728 <__sread>:
 8008728:	b510      	push	{r4, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008730:	f000 fafc 	bl	8008d2c <_read_r>
 8008734:	2800      	cmp	r0, #0
 8008736:	bfab      	itete	ge
 8008738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800873a:	89a3      	ldrhlt	r3, [r4, #12]
 800873c:	181b      	addge	r3, r3, r0
 800873e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008742:	bfac      	ite	ge
 8008744:	6563      	strge	r3, [r4, #84]	; 0x54
 8008746:	81a3      	strhlt	r3, [r4, #12]
 8008748:	bd10      	pop	{r4, pc}

0800874a <__swrite>:
 800874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874e:	461f      	mov	r7, r3
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	05db      	lsls	r3, r3, #23
 8008754:	4605      	mov	r5, r0
 8008756:	460c      	mov	r4, r1
 8008758:	4616      	mov	r6, r2
 800875a:	d505      	bpl.n	8008768 <__swrite+0x1e>
 800875c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008760:	2302      	movs	r3, #2
 8008762:	2200      	movs	r2, #0
 8008764:	f000 f9c8 	bl	8008af8 <_lseek_r>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	4628      	mov	r0, r5
 800877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	f000 b869 	b.w	8008854 <_write_r>

08008782 <__sseek>:
 8008782:	b510      	push	{r4, lr}
 8008784:	460c      	mov	r4, r1
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 f9b5 	bl	8008af8 <_lseek_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	bf15      	itete	ne
 8008794:	6560      	strne	r0, [r4, #84]	; 0x54
 8008796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800879a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800879e:	81a3      	strheq	r3, [r4, #12]
 80087a0:	bf18      	it	ne
 80087a2:	81a3      	strhne	r3, [r4, #12]
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <__sclose>:
 80087a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087aa:	f000 b8d3 	b.w	8008954 <_close_r>
	...

080087b0 <__swbuf_r>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	460e      	mov	r6, r1
 80087b4:	4614      	mov	r4, r2
 80087b6:	4605      	mov	r5, r0
 80087b8:	b118      	cbz	r0, 80087c2 <__swbuf_r+0x12>
 80087ba:	6983      	ldr	r3, [r0, #24]
 80087bc:	b90b      	cbnz	r3, 80087c2 <__swbuf_r+0x12>
 80087be:	f7ff fa25 	bl	8007c0c <__sinit>
 80087c2:	4b21      	ldr	r3, [pc, #132]	; (8008848 <__swbuf_r+0x98>)
 80087c4:	429c      	cmp	r4, r3
 80087c6:	d12b      	bne.n	8008820 <__swbuf_r+0x70>
 80087c8:	686c      	ldr	r4, [r5, #4]
 80087ca:	69a3      	ldr	r3, [r4, #24]
 80087cc:	60a3      	str	r3, [r4, #8]
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	071a      	lsls	r2, r3, #28
 80087d2:	d52f      	bpl.n	8008834 <__swbuf_r+0x84>
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	b36b      	cbz	r3, 8008834 <__swbuf_r+0x84>
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	6820      	ldr	r0, [r4, #0]
 80087dc:	1ac0      	subs	r0, r0, r3
 80087de:	6963      	ldr	r3, [r4, #20]
 80087e0:	b2f6      	uxtb	r6, r6
 80087e2:	4283      	cmp	r3, r0
 80087e4:	4637      	mov	r7, r6
 80087e6:	dc04      	bgt.n	80087f2 <__swbuf_r+0x42>
 80087e8:	4621      	mov	r1, r4
 80087ea:	4628      	mov	r0, r5
 80087ec:	f000 f948 	bl	8008a80 <_fflush_r>
 80087f0:	bb30      	cbnz	r0, 8008840 <__swbuf_r+0x90>
 80087f2:	68a3      	ldr	r3, [r4, #8]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	60a3      	str	r3, [r4, #8]
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	6022      	str	r2, [r4, #0]
 80087fe:	701e      	strb	r6, [r3, #0]
 8008800:	6963      	ldr	r3, [r4, #20]
 8008802:	3001      	adds	r0, #1
 8008804:	4283      	cmp	r3, r0
 8008806:	d004      	beq.n	8008812 <__swbuf_r+0x62>
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	07db      	lsls	r3, r3, #31
 800880c:	d506      	bpl.n	800881c <__swbuf_r+0x6c>
 800880e:	2e0a      	cmp	r6, #10
 8008810:	d104      	bne.n	800881c <__swbuf_r+0x6c>
 8008812:	4621      	mov	r1, r4
 8008814:	4628      	mov	r0, r5
 8008816:	f000 f933 	bl	8008a80 <_fflush_r>
 800881a:	b988      	cbnz	r0, 8008840 <__swbuf_r+0x90>
 800881c:	4638      	mov	r0, r7
 800881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <__swbuf_r+0x9c>)
 8008822:	429c      	cmp	r4, r3
 8008824:	d101      	bne.n	800882a <__swbuf_r+0x7a>
 8008826:	68ac      	ldr	r4, [r5, #8]
 8008828:	e7cf      	b.n	80087ca <__swbuf_r+0x1a>
 800882a:	4b09      	ldr	r3, [pc, #36]	; (8008850 <__swbuf_r+0xa0>)
 800882c:	429c      	cmp	r4, r3
 800882e:	bf08      	it	eq
 8008830:	68ec      	ldreq	r4, [r5, #12]
 8008832:	e7ca      	b.n	80087ca <__swbuf_r+0x1a>
 8008834:	4621      	mov	r1, r4
 8008836:	4628      	mov	r0, r5
 8008838:	f000 f81e 	bl	8008878 <__swsetup_r>
 800883c:	2800      	cmp	r0, #0
 800883e:	d0cb      	beq.n	80087d8 <__swbuf_r+0x28>
 8008840:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008844:	e7ea      	b.n	800881c <__swbuf_r+0x6c>
 8008846:	bf00      	nop
 8008848:	080091f8 	.word	0x080091f8
 800884c:	08009218 	.word	0x08009218
 8008850:	080091d8 	.word	0x080091d8

08008854 <_write_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d07      	ldr	r5, [pc, #28]	; (8008874 <_write_r+0x20>)
 8008858:	4604      	mov	r4, r0
 800885a:	4608      	mov	r0, r1
 800885c:	4611      	mov	r1, r2
 800885e:	2200      	movs	r2, #0
 8008860:	602a      	str	r2, [r5, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	f7f8 fe0b 	bl	800147e <_write>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_write_r+0x1e>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_write_r+0x1e>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	2001939c 	.word	0x2001939c

08008878 <__swsetup_r>:
 8008878:	4b32      	ldr	r3, [pc, #200]	; (8008944 <__swsetup_r+0xcc>)
 800887a:	b570      	push	{r4, r5, r6, lr}
 800887c:	681d      	ldr	r5, [r3, #0]
 800887e:	4606      	mov	r6, r0
 8008880:	460c      	mov	r4, r1
 8008882:	b125      	cbz	r5, 800888e <__swsetup_r+0x16>
 8008884:	69ab      	ldr	r3, [r5, #24]
 8008886:	b913      	cbnz	r3, 800888e <__swsetup_r+0x16>
 8008888:	4628      	mov	r0, r5
 800888a:	f7ff f9bf 	bl	8007c0c <__sinit>
 800888e:	4b2e      	ldr	r3, [pc, #184]	; (8008948 <__swsetup_r+0xd0>)
 8008890:	429c      	cmp	r4, r3
 8008892:	d10f      	bne.n	80088b4 <__swsetup_r+0x3c>
 8008894:	686c      	ldr	r4, [r5, #4]
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800889c:	0719      	lsls	r1, r3, #28
 800889e:	d42c      	bmi.n	80088fa <__swsetup_r+0x82>
 80088a0:	06dd      	lsls	r5, r3, #27
 80088a2:	d411      	bmi.n	80088c8 <__swsetup_r+0x50>
 80088a4:	2309      	movs	r3, #9
 80088a6:	6033      	str	r3, [r6, #0]
 80088a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b2:	e03e      	b.n	8008932 <__swsetup_r+0xba>
 80088b4:	4b25      	ldr	r3, [pc, #148]	; (800894c <__swsetup_r+0xd4>)
 80088b6:	429c      	cmp	r4, r3
 80088b8:	d101      	bne.n	80088be <__swsetup_r+0x46>
 80088ba:	68ac      	ldr	r4, [r5, #8]
 80088bc:	e7eb      	b.n	8008896 <__swsetup_r+0x1e>
 80088be:	4b24      	ldr	r3, [pc, #144]	; (8008950 <__swsetup_r+0xd8>)
 80088c0:	429c      	cmp	r4, r3
 80088c2:	bf08      	it	eq
 80088c4:	68ec      	ldreq	r4, [r5, #12]
 80088c6:	e7e6      	b.n	8008896 <__swsetup_r+0x1e>
 80088c8:	0758      	lsls	r0, r3, #29
 80088ca:	d512      	bpl.n	80088f2 <__swsetup_r+0x7a>
 80088cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ce:	b141      	cbz	r1, 80088e2 <__swsetup_r+0x6a>
 80088d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088d4:	4299      	cmp	r1, r3
 80088d6:	d002      	beq.n	80088de <__swsetup_r+0x66>
 80088d8:	4630      	mov	r0, r6
 80088da:	f000 f9ab 	bl	8008c34 <_free_r>
 80088de:	2300      	movs	r3, #0
 80088e0:	6363      	str	r3, [r4, #52]	; 0x34
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	2300      	movs	r3, #0
 80088ec:	6063      	str	r3, [r4, #4]
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	f043 0308 	orr.w	r3, r3, #8
 80088f8:	81a3      	strh	r3, [r4, #12]
 80088fa:	6923      	ldr	r3, [r4, #16]
 80088fc:	b94b      	cbnz	r3, 8008912 <__swsetup_r+0x9a>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008908:	d003      	beq.n	8008912 <__swsetup_r+0x9a>
 800890a:	4621      	mov	r1, r4
 800890c:	4630      	mov	r0, r6
 800890e:	f000 f92b 	bl	8008b68 <__smakebuf_r>
 8008912:	89a0      	ldrh	r0, [r4, #12]
 8008914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008918:	f010 0301 	ands.w	r3, r0, #1
 800891c:	d00a      	beq.n	8008934 <__swsetup_r+0xbc>
 800891e:	2300      	movs	r3, #0
 8008920:	60a3      	str	r3, [r4, #8]
 8008922:	6963      	ldr	r3, [r4, #20]
 8008924:	425b      	negs	r3, r3
 8008926:	61a3      	str	r3, [r4, #24]
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	b943      	cbnz	r3, 800893e <__swsetup_r+0xc6>
 800892c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008930:	d1ba      	bne.n	80088a8 <__swsetup_r+0x30>
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	0781      	lsls	r1, r0, #30
 8008936:	bf58      	it	pl
 8008938:	6963      	ldrpl	r3, [r4, #20]
 800893a:	60a3      	str	r3, [r4, #8]
 800893c:	e7f4      	b.n	8008928 <__swsetup_r+0xb0>
 800893e:	2000      	movs	r0, #0
 8008940:	e7f7      	b.n	8008932 <__swsetup_r+0xba>
 8008942:	bf00      	nop
 8008944:	20000028 	.word	0x20000028
 8008948:	080091f8 	.word	0x080091f8
 800894c:	08009218 	.word	0x08009218
 8008950:	080091d8 	.word	0x080091d8

08008954 <_close_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d06      	ldr	r5, [pc, #24]	; (8008970 <_close_r+0x1c>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	f7f8 fda9 	bl	80014b6 <_close>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_close_r+0x1a>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_close_r+0x1a>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	2001939c 	.word	0x2001939c

08008974 <__sflush_r>:
 8008974:	898a      	ldrh	r2, [r1, #12]
 8008976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897a:	4605      	mov	r5, r0
 800897c:	0710      	lsls	r0, r2, #28
 800897e:	460c      	mov	r4, r1
 8008980:	d458      	bmi.n	8008a34 <__sflush_r+0xc0>
 8008982:	684b      	ldr	r3, [r1, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	dc05      	bgt.n	8008994 <__sflush_r+0x20>
 8008988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800898a:	2b00      	cmp	r3, #0
 800898c:	dc02      	bgt.n	8008994 <__sflush_r+0x20>
 800898e:	2000      	movs	r0, #0
 8008990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008996:	2e00      	cmp	r6, #0
 8008998:	d0f9      	beq.n	800898e <__sflush_r+0x1a>
 800899a:	2300      	movs	r3, #0
 800899c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089a0:	682f      	ldr	r7, [r5, #0]
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	d032      	beq.n	8008a0c <__sflush_r+0x98>
 80089a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	075a      	lsls	r2, r3, #29
 80089ac:	d505      	bpl.n	80089ba <__sflush_r+0x46>
 80089ae:	6863      	ldr	r3, [r4, #4]
 80089b0:	1ac0      	subs	r0, r0, r3
 80089b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089b4:	b10b      	cbz	r3, 80089ba <__sflush_r+0x46>
 80089b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089b8:	1ac0      	subs	r0, r0, r3
 80089ba:	2300      	movs	r3, #0
 80089bc:	4602      	mov	r2, r0
 80089be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089c0:	6a21      	ldr	r1, [r4, #32]
 80089c2:	4628      	mov	r0, r5
 80089c4:	47b0      	blx	r6
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	d106      	bne.n	80089da <__sflush_r+0x66>
 80089cc:	6829      	ldr	r1, [r5, #0]
 80089ce:	291d      	cmp	r1, #29
 80089d0:	d82c      	bhi.n	8008a2c <__sflush_r+0xb8>
 80089d2:	4a2a      	ldr	r2, [pc, #168]	; (8008a7c <__sflush_r+0x108>)
 80089d4:	40ca      	lsrs	r2, r1
 80089d6:	07d6      	lsls	r6, r2, #31
 80089d8:	d528      	bpl.n	8008a2c <__sflush_r+0xb8>
 80089da:	2200      	movs	r2, #0
 80089dc:	6062      	str	r2, [r4, #4]
 80089de:	04d9      	lsls	r1, r3, #19
 80089e0:	6922      	ldr	r2, [r4, #16]
 80089e2:	6022      	str	r2, [r4, #0]
 80089e4:	d504      	bpl.n	80089f0 <__sflush_r+0x7c>
 80089e6:	1c42      	adds	r2, r0, #1
 80089e8:	d101      	bne.n	80089ee <__sflush_r+0x7a>
 80089ea:	682b      	ldr	r3, [r5, #0]
 80089ec:	b903      	cbnz	r3, 80089f0 <__sflush_r+0x7c>
 80089ee:	6560      	str	r0, [r4, #84]	; 0x54
 80089f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f2:	602f      	str	r7, [r5, #0]
 80089f4:	2900      	cmp	r1, #0
 80089f6:	d0ca      	beq.n	800898e <__sflush_r+0x1a>
 80089f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089fc:	4299      	cmp	r1, r3
 80089fe:	d002      	beq.n	8008a06 <__sflush_r+0x92>
 8008a00:	4628      	mov	r0, r5
 8008a02:	f000 f917 	bl	8008c34 <_free_r>
 8008a06:	2000      	movs	r0, #0
 8008a08:	6360      	str	r0, [r4, #52]	; 0x34
 8008a0a:	e7c1      	b.n	8008990 <__sflush_r+0x1c>
 8008a0c:	6a21      	ldr	r1, [r4, #32]
 8008a0e:	2301      	movs	r3, #1
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b0      	blx	r6
 8008a14:	1c41      	adds	r1, r0, #1
 8008a16:	d1c7      	bne.n	80089a8 <__sflush_r+0x34>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0c4      	beq.n	80089a8 <__sflush_r+0x34>
 8008a1e:	2b1d      	cmp	r3, #29
 8008a20:	d001      	beq.n	8008a26 <__sflush_r+0xb2>
 8008a22:	2b16      	cmp	r3, #22
 8008a24:	d101      	bne.n	8008a2a <__sflush_r+0xb6>
 8008a26:	602f      	str	r7, [r5, #0]
 8008a28:	e7b1      	b.n	800898e <__sflush_r+0x1a>
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a30:	81a3      	strh	r3, [r4, #12]
 8008a32:	e7ad      	b.n	8008990 <__sflush_r+0x1c>
 8008a34:	690f      	ldr	r7, [r1, #16]
 8008a36:	2f00      	cmp	r7, #0
 8008a38:	d0a9      	beq.n	800898e <__sflush_r+0x1a>
 8008a3a:	0793      	lsls	r3, r2, #30
 8008a3c:	680e      	ldr	r6, [r1, #0]
 8008a3e:	bf08      	it	eq
 8008a40:	694b      	ldreq	r3, [r1, #20]
 8008a42:	600f      	str	r7, [r1, #0]
 8008a44:	bf18      	it	ne
 8008a46:	2300      	movne	r3, #0
 8008a48:	eba6 0807 	sub.w	r8, r6, r7
 8008a4c:	608b      	str	r3, [r1, #8]
 8008a4e:	f1b8 0f00 	cmp.w	r8, #0
 8008a52:	dd9c      	ble.n	800898e <__sflush_r+0x1a>
 8008a54:	6a21      	ldr	r1, [r4, #32]
 8008a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a58:	4643      	mov	r3, r8
 8008a5a:	463a      	mov	r2, r7
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b0      	blx	r6
 8008a60:	2800      	cmp	r0, #0
 8008a62:	dc06      	bgt.n	8008a72 <__sflush_r+0xfe>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a70:	e78e      	b.n	8008990 <__sflush_r+0x1c>
 8008a72:	4407      	add	r7, r0
 8008a74:	eba8 0800 	sub.w	r8, r8, r0
 8008a78:	e7e9      	b.n	8008a4e <__sflush_r+0xda>
 8008a7a:	bf00      	nop
 8008a7c:	20400001 	.word	0x20400001

08008a80 <_fflush_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	690b      	ldr	r3, [r1, #16]
 8008a84:	4605      	mov	r5, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	b913      	cbnz	r3, 8008a90 <_fflush_r+0x10>
 8008a8a:	2500      	movs	r5, #0
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	b118      	cbz	r0, 8008a9a <_fflush_r+0x1a>
 8008a92:	6983      	ldr	r3, [r0, #24]
 8008a94:	b90b      	cbnz	r3, 8008a9a <_fflush_r+0x1a>
 8008a96:	f7ff f8b9 	bl	8007c0c <__sinit>
 8008a9a:	4b14      	ldr	r3, [pc, #80]	; (8008aec <_fflush_r+0x6c>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	d11b      	bne.n	8008ad8 <_fflush_r+0x58>
 8008aa0:	686c      	ldr	r4, [r5, #4]
 8008aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0ef      	beq.n	8008a8a <_fflush_r+0xa>
 8008aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008aac:	07d0      	lsls	r0, r2, #31
 8008aae:	d404      	bmi.n	8008aba <_fflush_r+0x3a>
 8008ab0:	0599      	lsls	r1, r3, #22
 8008ab2:	d402      	bmi.n	8008aba <_fflush_r+0x3a>
 8008ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ab6:	f7ff f947 	bl	8007d48 <__retarget_lock_acquire_recursive>
 8008aba:	4628      	mov	r0, r5
 8008abc:	4621      	mov	r1, r4
 8008abe:	f7ff ff59 	bl	8008974 <__sflush_r>
 8008ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ac4:	07da      	lsls	r2, r3, #31
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	d4e0      	bmi.n	8008a8c <_fflush_r+0xc>
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	059b      	lsls	r3, r3, #22
 8008ace:	d4dd      	bmi.n	8008a8c <_fflush_r+0xc>
 8008ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ad2:	f7ff f93a 	bl	8007d4a <__retarget_lock_release_recursive>
 8008ad6:	e7d9      	b.n	8008a8c <_fflush_r+0xc>
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <_fflush_r+0x70>)
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d101      	bne.n	8008ae2 <_fflush_r+0x62>
 8008ade:	68ac      	ldr	r4, [r5, #8]
 8008ae0:	e7df      	b.n	8008aa2 <_fflush_r+0x22>
 8008ae2:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <_fflush_r+0x74>)
 8008ae4:	429c      	cmp	r4, r3
 8008ae6:	bf08      	it	eq
 8008ae8:	68ec      	ldreq	r4, [r5, #12]
 8008aea:	e7da      	b.n	8008aa2 <_fflush_r+0x22>
 8008aec:	080091f8 	.word	0x080091f8
 8008af0:	08009218 	.word	0x08009218
 8008af4:	080091d8 	.word	0x080091d8

08008af8 <_lseek_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d07      	ldr	r5, [pc, #28]	; (8008b18 <_lseek_r+0x20>)
 8008afc:	4604      	mov	r4, r0
 8008afe:	4608      	mov	r0, r1
 8008b00:	4611      	mov	r1, r2
 8008b02:	2200      	movs	r2, #0
 8008b04:	602a      	str	r2, [r5, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f7f8 fcfc 	bl	8001504 <_lseek>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_lseek_r+0x1e>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_lseek_r+0x1e>
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	2001939c 	.word	0x2001939c

08008b1c <__swhatbuf_r>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	460e      	mov	r6, r1
 8008b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b24:	2900      	cmp	r1, #0
 8008b26:	b096      	sub	sp, #88	; 0x58
 8008b28:	4614      	mov	r4, r2
 8008b2a:	461d      	mov	r5, r3
 8008b2c:	da08      	bge.n	8008b40 <__swhatbuf_r+0x24>
 8008b2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	602a      	str	r2, [r5, #0]
 8008b36:	061a      	lsls	r2, r3, #24
 8008b38:	d410      	bmi.n	8008b5c <__swhatbuf_r+0x40>
 8008b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b3e:	e00e      	b.n	8008b5e <__swhatbuf_r+0x42>
 8008b40:	466a      	mov	r2, sp
 8008b42:	f000 f905 	bl	8008d50 <_fstat_r>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	dbf1      	blt.n	8008b2e <__swhatbuf_r+0x12>
 8008b4a:	9a01      	ldr	r2, [sp, #4]
 8008b4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b54:	425a      	negs	r2, r3
 8008b56:	415a      	adcs	r2, r3
 8008b58:	602a      	str	r2, [r5, #0]
 8008b5a:	e7ee      	b.n	8008b3a <__swhatbuf_r+0x1e>
 8008b5c:	2340      	movs	r3, #64	; 0x40
 8008b5e:	2000      	movs	r0, #0
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	b016      	add	sp, #88	; 0x58
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b68 <__smakebuf_r>:
 8008b68:	898b      	ldrh	r3, [r1, #12]
 8008b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b6c:	079d      	lsls	r5, r3, #30
 8008b6e:	4606      	mov	r6, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	d507      	bpl.n	8008b84 <__smakebuf_r+0x1c>
 8008b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	6123      	str	r3, [r4, #16]
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	6163      	str	r3, [r4, #20]
 8008b80:	b002      	add	sp, #8
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	ab01      	add	r3, sp, #4
 8008b86:	466a      	mov	r2, sp
 8008b88:	f7ff ffc8 	bl	8008b1c <__swhatbuf_r>
 8008b8c:	9900      	ldr	r1, [sp, #0]
 8008b8e:	4605      	mov	r5, r0
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff f8fb 	bl	8007d8c <_malloc_r>
 8008b96:	b948      	cbnz	r0, 8008bac <__smakebuf_r+0x44>
 8008b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9c:	059a      	lsls	r2, r3, #22
 8008b9e:	d4ef      	bmi.n	8008b80 <__smakebuf_r+0x18>
 8008ba0:	f023 0303 	bic.w	r3, r3, #3
 8008ba4:	f043 0302 	orr.w	r3, r3, #2
 8008ba8:	81a3      	strh	r3, [r4, #12]
 8008baa:	e7e3      	b.n	8008b74 <__smakebuf_r+0xc>
 8008bac:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <__smakebuf_r+0x7c>)
 8008bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	6020      	str	r0, [r4, #0]
 8008bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	9b00      	ldr	r3, [sp, #0]
 8008bbc:	6163      	str	r3, [r4, #20]
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	6120      	str	r0, [r4, #16]
 8008bc2:	b15b      	cbz	r3, 8008bdc <__smakebuf_r+0x74>
 8008bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f8d3 	bl	8008d74 <_isatty_r>
 8008bce:	b128      	cbz	r0, 8008bdc <__smakebuf_r+0x74>
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	81a3      	strh	r3, [r4, #12]
 8008bdc:	89a0      	ldrh	r0, [r4, #12]
 8008bde:	4305      	orrs	r5, r0
 8008be0:	81a5      	strh	r5, [r4, #12]
 8008be2:	e7cd      	b.n	8008b80 <__smakebuf_r+0x18>
 8008be4:	08007ba5 	.word	0x08007ba5

08008be8 <memmove>:
 8008be8:	4288      	cmp	r0, r1
 8008bea:	b510      	push	{r4, lr}
 8008bec:	eb01 0402 	add.w	r4, r1, r2
 8008bf0:	d902      	bls.n	8008bf8 <memmove+0x10>
 8008bf2:	4284      	cmp	r4, r0
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	d807      	bhi.n	8008c08 <memmove+0x20>
 8008bf8:	1e43      	subs	r3, r0, #1
 8008bfa:	42a1      	cmp	r1, r4
 8008bfc:	d008      	beq.n	8008c10 <memmove+0x28>
 8008bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c06:	e7f8      	b.n	8008bfa <memmove+0x12>
 8008c08:	4402      	add	r2, r0
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	428a      	cmp	r2, r1
 8008c0e:	d100      	bne.n	8008c12 <memmove+0x2a>
 8008c10:	bd10      	pop	{r4, pc}
 8008c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c1a:	e7f7      	b.n	8008c0c <memmove+0x24>

08008c1c <__malloc_lock>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <__malloc_lock+0x8>)
 8008c1e:	f7ff b893 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 8008c22:	bf00      	nop
 8008c24:	20019390 	.word	0x20019390

08008c28 <__malloc_unlock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__malloc_unlock+0x8>)
 8008c2a:	f7ff b88e 	b.w	8007d4a <__retarget_lock_release_recursive>
 8008c2e:	bf00      	nop
 8008c30:	20019390 	.word	0x20019390

08008c34 <_free_r>:
 8008c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c36:	2900      	cmp	r1, #0
 8008c38:	d044      	beq.n	8008cc4 <_free_r+0x90>
 8008c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c3e:	9001      	str	r0, [sp, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f1a1 0404 	sub.w	r4, r1, #4
 8008c46:	bfb8      	it	lt
 8008c48:	18e4      	addlt	r4, r4, r3
 8008c4a:	f7ff ffe7 	bl	8008c1c <__malloc_lock>
 8008c4e:	4a1e      	ldr	r2, [pc, #120]	; (8008cc8 <_free_r+0x94>)
 8008c50:	9801      	ldr	r0, [sp, #4]
 8008c52:	6813      	ldr	r3, [r2, #0]
 8008c54:	b933      	cbnz	r3, 8008c64 <_free_r+0x30>
 8008c56:	6063      	str	r3, [r4, #4]
 8008c58:	6014      	str	r4, [r2, #0]
 8008c5a:	b003      	add	sp, #12
 8008c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c60:	f7ff bfe2 	b.w	8008c28 <__malloc_unlock>
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d908      	bls.n	8008c7a <_free_r+0x46>
 8008c68:	6825      	ldr	r5, [r4, #0]
 8008c6a:	1961      	adds	r1, r4, r5
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	bf01      	itttt	eq
 8008c70:	6819      	ldreq	r1, [r3, #0]
 8008c72:	685b      	ldreq	r3, [r3, #4]
 8008c74:	1949      	addeq	r1, r1, r5
 8008c76:	6021      	streq	r1, [r4, #0]
 8008c78:	e7ed      	b.n	8008c56 <_free_r+0x22>
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	b10b      	cbz	r3, 8008c84 <_free_r+0x50>
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	d9fa      	bls.n	8008c7a <_free_r+0x46>
 8008c84:	6811      	ldr	r1, [r2, #0]
 8008c86:	1855      	adds	r5, r2, r1
 8008c88:	42a5      	cmp	r5, r4
 8008c8a:	d10b      	bne.n	8008ca4 <_free_r+0x70>
 8008c8c:	6824      	ldr	r4, [r4, #0]
 8008c8e:	4421      	add	r1, r4
 8008c90:	1854      	adds	r4, r2, r1
 8008c92:	42a3      	cmp	r3, r4
 8008c94:	6011      	str	r1, [r2, #0]
 8008c96:	d1e0      	bne.n	8008c5a <_free_r+0x26>
 8008c98:	681c      	ldr	r4, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	6053      	str	r3, [r2, #4]
 8008c9e:	4421      	add	r1, r4
 8008ca0:	6011      	str	r1, [r2, #0]
 8008ca2:	e7da      	b.n	8008c5a <_free_r+0x26>
 8008ca4:	d902      	bls.n	8008cac <_free_r+0x78>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	6003      	str	r3, [r0, #0]
 8008caa:	e7d6      	b.n	8008c5a <_free_r+0x26>
 8008cac:	6825      	ldr	r5, [r4, #0]
 8008cae:	1961      	adds	r1, r4, r5
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf04      	itt	eq
 8008cb4:	6819      	ldreq	r1, [r3, #0]
 8008cb6:	685b      	ldreq	r3, [r3, #4]
 8008cb8:	6063      	str	r3, [r4, #4]
 8008cba:	bf04      	itt	eq
 8008cbc:	1949      	addeq	r1, r1, r5
 8008cbe:	6021      	streq	r1, [r4, #0]
 8008cc0:	6054      	str	r4, [r2, #4]
 8008cc2:	e7ca      	b.n	8008c5a <_free_r+0x26>
 8008cc4:	b003      	add	sp, #12
 8008cc6:	bd30      	pop	{r4, r5, pc}
 8008cc8:	20019394 	.word	0x20019394

08008ccc <_realloc_r>:
 8008ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4614      	mov	r4, r2
 8008cd4:	460e      	mov	r6, r1
 8008cd6:	b921      	cbnz	r1, 8008ce2 <_realloc_r+0x16>
 8008cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cdc:	4611      	mov	r1, r2
 8008cde:	f7ff b855 	b.w	8007d8c <_malloc_r>
 8008ce2:	b92a      	cbnz	r2, 8008cf0 <_realloc_r+0x24>
 8008ce4:	f7ff ffa6 	bl	8008c34 <_free_r>
 8008ce8:	4625      	mov	r5, r4
 8008cea:	4628      	mov	r0, r5
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	f000 f850 	bl	8008d94 <_malloc_usable_size_r>
 8008cf4:	4284      	cmp	r4, r0
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	d802      	bhi.n	8008d00 <_realloc_r+0x34>
 8008cfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cfe:	d812      	bhi.n	8008d26 <_realloc_r+0x5a>
 8008d00:	4621      	mov	r1, r4
 8008d02:	4640      	mov	r0, r8
 8008d04:	f7ff f842 	bl	8007d8c <_malloc_r>
 8008d08:	4605      	mov	r5, r0
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d0ed      	beq.n	8008cea <_realloc_r+0x1e>
 8008d0e:	42bc      	cmp	r4, r7
 8008d10:	4622      	mov	r2, r4
 8008d12:	4631      	mov	r1, r6
 8008d14:	bf28      	it	cs
 8008d16:	463a      	movcs	r2, r7
 8008d18:	f7fe fed2 	bl	8007ac0 <memcpy>
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4640      	mov	r0, r8
 8008d20:	f7ff ff88 	bl	8008c34 <_free_r>
 8008d24:	e7e1      	b.n	8008cea <_realloc_r+0x1e>
 8008d26:	4635      	mov	r5, r6
 8008d28:	e7df      	b.n	8008cea <_realloc_r+0x1e>
	...

08008d2c <_read_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d07      	ldr	r5, [pc, #28]	; (8008d4c <_read_r+0x20>)
 8008d30:	4604      	mov	r4, r0
 8008d32:	4608      	mov	r0, r1
 8008d34:	4611      	mov	r1, r2
 8008d36:	2200      	movs	r2, #0
 8008d38:	602a      	str	r2, [r5, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f7f8 fb82 	bl	8001444 <_read>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_read_r+0x1e>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_read_r+0x1e>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	2001939c 	.word	0x2001939c

08008d50 <_fstat_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d07      	ldr	r5, [pc, #28]	; (8008d70 <_fstat_r+0x20>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	f7f8 fbb6 	bl	80014ce <_fstat>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	d102      	bne.n	8008d6c <_fstat_r+0x1c>
 8008d66:	682b      	ldr	r3, [r5, #0]
 8008d68:	b103      	cbz	r3, 8008d6c <_fstat_r+0x1c>
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}
 8008d6e:	bf00      	nop
 8008d70:	2001939c 	.word	0x2001939c

08008d74 <_isatty_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d06      	ldr	r5, [pc, #24]	; (8008d90 <_isatty_r+0x1c>)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	4608      	mov	r0, r1
 8008d7e:	602b      	str	r3, [r5, #0]
 8008d80:	f7f8 fbb5 	bl	80014ee <_isatty>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_isatty_r+0x1a>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_isatty_r+0x1a>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	2001939c 	.word	0x2001939c

08008d94 <_malloc_usable_size_r>:
 8008d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d98:	1f18      	subs	r0, r3, #4
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	bfbc      	itt	lt
 8008d9e:	580b      	ldrlt	r3, [r1, r0]
 8008da0:	18c0      	addlt	r0, r0, r3
 8008da2:	4770      	bx	lr

08008da4 <_sbrk>:
 8008da4:	4a04      	ldr	r2, [pc, #16]	; (8008db8 <_sbrk+0x14>)
 8008da6:	6811      	ldr	r1, [r2, #0]
 8008da8:	4603      	mov	r3, r0
 8008daa:	b909      	cbnz	r1, 8008db0 <_sbrk+0xc>
 8008dac:	4903      	ldr	r1, [pc, #12]	; (8008dbc <_sbrk+0x18>)
 8008dae:	6011      	str	r1, [r2, #0]
 8008db0:	6810      	ldr	r0, [r2, #0]
 8008db2:	4403      	add	r3, r0
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	4770      	bx	lr
 8008db8:	200193a0 	.word	0x200193a0
 8008dbc:	200193a8 	.word	0x200193a8

08008dc0 <_init>:
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	bf00      	nop
 8008dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc6:	bc08      	pop	{r3}
 8008dc8:	469e      	mov	lr, r3
 8008dca:	4770      	bx	lr

08008dcc <_fini>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	bf00      	nop
 8008dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd2:	bc08      	pop	{r3}
 8008dd4:	469e      	mov	lr, r3
 8008dd6:	4770      	bx	lr
