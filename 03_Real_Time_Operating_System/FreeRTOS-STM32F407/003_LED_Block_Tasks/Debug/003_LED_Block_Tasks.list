
003_LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006124  08006124  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006124  08006124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800612c  0800612c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800612c  0800612c  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013480  20000014  08006148  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013494  08006148  00023494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001405c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca5  00000000  00000000  000340a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00036d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00038008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a84  00000000  00000000  00039160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014af0  00000000  00000000  0005bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d67e8  00000000  00000000  000706d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146ebc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004edc  00000000  00000000  00146f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006030 	.word	0x08006030

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006030 	.word	0x08006030

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ec8 	.word	0x20012ec8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb59 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f867 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8cf 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(250000);

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <main+0xc0>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <main+0xc0>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2302      	movs	r3, #2
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	22c8      	movs	r2, #200	; 0xc8
 8000594:	4925      	ldr	r1, [pc, #148]	; (800062c <main+0xc4>)
 8000596:	4826      	ldr	r0, [pc, #152]	; (8000630 <main+0xc8>)
 8000598:	f002 fb7c 	bl	8002c94 <xTaskCreate>
 800059c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d00a      	beq.n	80005ba <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a8:	f383 8811 	msr	BASEPRI, r3
 80005ac:	f3bf 8f6f 	isb	sy
 80005b0:	f3bf 8f4f 	dsb	sy
 80005b4:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <main+0x50>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2302      	movs	r3, #2
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	22c8      	movs	r2, #200	; 0xc8
 80005c8:	491a      	ldr	r1, [pc, #104]	; (8000634 <main+0xcc>)
 80005ca:	481b      	ldr	r0, [pc, #108]	; (8000638 <main+0xd0>)
 80005cc:	f002 fb62 	bl	8002c94 <xTaskCreate>
 80005d0:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00a      	beq.n	80005ee <main+0x86>
        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	617b      	str	r3, [r7, #20]
    }
 80005ea:	bf00      	nop
 80005ec:	e7fe      	b.n	80005ec <main+0x84>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22c8      	movs	r2, #200	; 0xc8
 80005fa:	4910      	ldr	r1, [pc, #64]	; (800063c <main+0xd4>)
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <main+0xd8>)
 80005fe:	f002 fb49 	bl	8002c94 <xTaskCreate>
 8000602:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d00a      	beq.n	8000620 <main+0xb8>
        __asm volatile
 800060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060e:	f383 8811 	msr	BASEPRI, r3
 8000612:	f3bf 8f6f 	isb	sy
 8000616:	f3bf 8f4f 	dsb	sy
 800061a:	613b      	str	r3, [r7, #16]
    }
 800061c:	bf00      	nop
 800061e:	e7fe      	b.n	800061e <main+0xb6>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000620:	f002 fcc6 	bl	8002fb0 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0xbc>
 8000626:	bf00      	nop
 8000628:	e0001000 	.word	0xe0001000
 800062c:	08006048 	.word	0x08006048
 8000630:	080009d5 	.word	0x080009d5
 8000634:	08006058 	.word	0x08006058
 8000638:	08000a15 	.word	0x08000a15
 800063c:	08006068 	.word	0x08006068
 8000640:	080009f5 	.word	0x080009f5

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fce4 	bl	8006020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fd9f 	bl	800120c <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f9c0 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f800 	bl	80016fc <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f9a9 	bl	8000a58 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba2      	ldr	r3, [pc, #648]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aa1      	ldr	r2, [pc, #644]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9f      	ldr	r3, [pc, #636]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9b      	ldr	r3, [pc, #620]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a9a      	ldr	r2, [pc, #616]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b98      	ldr	r3, [pc, #608]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b94      	ldr	r3, [pc, #592]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a93      	ldr	r2, [pc, #588]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b91      	ldr	r3, [pc, #580]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8d      	ldr	r3, [pc, #564]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8c      	ldr	r2, [pc, #560]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b8a      	ldr	r3, [pc, #552]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b86      	ldr	r3, [pc, #536]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a85      	ldr	r2, [pc, #532]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b83      	ldr	r3, [pc, #524]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7f      	ldr	r3, [pc, #508]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a7e      	ldr	r2, [pc, #504]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7c      	ldr	r3, [pc, #496]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4879      	ldr	r0, [pc, #484]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80007dc:	f000 fce2 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4877      	ldr	r0, [pc, #476]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fcdd 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80007f2:	f000 fcd7 	bl	80011a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486c      	ldr	r0, [pc, #432]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fb2d 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4866      	ldr	r0, [pc, #408]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 fb1f 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 fb0f 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	485a      	ldr	r0, [pc, #360]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000864:	f000 fb02 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4852      	ldr	r0, [pc, #328]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000884:	f000 faf2 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000888:	23e0      	movs	r3, #224	; 0xe0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484a      	ldr	r0, [pc, #296]	; (80009cc <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fae2 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fad6 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008de:	f000 fac5 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80008fc:	f000 fab6 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4829      	ldr	r0, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 faa5 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000938:	f000 fa98 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094e:	230a      	movs	r3, #10
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_GPIO_Init+0x2b4>)
 800095a:	f000 fa87 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 8000972:	f000 fa7b 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	; 0x240
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000980:	2301      	movs	r3, #1
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 8000994:	f000 fa6a 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 fa5d 	bl	8000e6c <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <led_green_handler+0x1c>)
 80009e2:	f000 fbf8 	bl	80011d6 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80009e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ea:	f002 faa9 	bl	8002f40 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ee:	e7f5      	b.n	80009dc <led_green_handler+0x8>
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 80009fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <led_orange_handler+0x1c>)
 8000a02:	f000 fbe8 	bl	80011d6 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 8000a06:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a0a:	f002 fa99 	bl	8002f40 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a0e:	e7f5      	b.n	80009fc <led_orange_handler+0x8>
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <led_red_handler+0x1c>)
 8000a22:	f000 fbd8 	bl	80011d6 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 8000a26:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a2a:	f002 fa89 	bl	8002f40 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a2e:	e7f5      	b.n	8000a1c <led_red_handler+0x8>
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a46:	f000 f90f 	bl	8000c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40001000 	.word	0x40001000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000aa6:	f003 fbdf 	bl	8004268 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	2036      	movs	r0, #54	; 0x36
 8000ace:	f000 f9a3 	bl	8000e18 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ad2:	2036      	movs	r0, #54	; 0x36
 8000ad4:	f000 f9bc 	bl	8000e50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <HAL_InitTick+0xa4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <HAL_InitTick+0xa4>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <HAL_InitTick+0xa4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af4:	f107 0210 	add.w	r2, r7, #16
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f808 	bl	8001b14 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b04:	f000 fff2 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	0c9b      	lsrs	r3, r3, #18
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_InitTick+0xac>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <HAL_InitTick+0xb0>)
 8000b20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_InitTick+0xac>)
 8000b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_InitTick+0xac>)
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_InitTick+0xac>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_InitTick+0xac>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <HAL_InitTick+0xac>)
 8000b3e:	f001 f81b 	bl	8001b78 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d104      	bne.n	8000b52 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b48:	4806      	ldr	r0, [pc, #24]	; (8000b64 <HAL_InitTick+0xac>)
 8000b4a:	f001 f86f 	bl	8001c2c <HAL_TIM_Base_Start_IT>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3730      	adds	r7, #48	; 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	20000030 	.word	0x20000030
 8000b68:	40001000 	.word	0x40001000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM6_DAC_IRQHandler+0x10>)
 8000b9e:	f001 f8b5 	bl	8001d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000030 	.word	0x20000030

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff ffd7 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f005 f9cd 	bl	8005f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fcb1 	bl	8000568 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c14:	08006134 	.word	0x08006134
  ldr r2, =_sbss
 8000c18:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c1c:	20013494 	.word	0x20013494

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f8d8 	bl	8000e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff ff30 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff ff06 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000078 	.word	0x20000078

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000078 	.word	0x20000078

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff4c 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2a:	f7ff ff61 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	6978      	ldr	r0, [r7, #20]
 8000e36:	f7ff ffb1 	bl	8000d9c <NVIC_EncodePriority>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff80 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff54 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e16b      	b.n	8001160 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f040 815a 	bne.w	800115a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d005      	beq.n	8000ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d017      	beq.n	8000f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	69b9      	ldr	r1, [r7, #24]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0203 	and.w	r2, r3, #3
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80b4 	beq.w	800115a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b60      	ldr	r3, [pc, #384]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a5f      	ldr	r2, [pc, #380]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b5d      	ldr	r3, [pc, #372]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100e:	4a5b      	ldr	r2, [pc, #364]	; (800117c <HAL_GPIO_Init+0x310>)
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x314>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d02b      	beq.n	8001092 <HAL_GPIO_Init+0x226>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x318>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d025      	beq.n	800108e <HAL_GPIO_Init+0x222>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x31c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_GPIO_Init+0x21e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x320>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x21a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x324>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x216>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x328>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x212>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x32c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x20e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_GPIO_Init+0x330>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x20a>
 8001072:	2307      	movs	r3, #7
 8001074:	e00e      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001076:	2308      	movs	r3, #8
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800107a:	2306      	movs	r3, #6
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_GPIO_Init+0x310>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d6:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001100:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_GPIO_Init+0x334>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f ae90 	bls.w	8000e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40021400 	.word	0x40021400
 8001198:	40021800 	.word	0x40021800
 800119c:	40021c00 	.word	0x40021c00
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e8:	887a      	ldrh	r2, [r7, #2]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	041a      	lsls	r2, r3, #16
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	400b      	ands	r3, r1
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e267      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d075      	beq.n	8001316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122a:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b04      	cmp	r3, #4
 8001234:	d00c      	beq.n	8001250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b85      	ldr	r3, [pc, #532]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123e:	2b08      	cmp	r3, #8
 8001240:	d112      	bne.n	8001268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001242:	4b82      	ldr	r3, [pc, #520]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124e:	d10b      	bne.n	8001268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	4b7e      	ldr	r3, [pc, #504]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d05b      	beq.n	8001314 <HAL_RCC_OscConfig+0x108>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d157      	bne.n	8001314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e242      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x74>
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a75      	ldr	r2, [pc, #468]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01d      	b.n	80012bc <HAL_RCC_OscConfig+0xb0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x98>
 800128a:	4b70      	ldr	r3, [pc, #448]	; (800144c <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6f      	ldr	r2, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b6d      	ldr	r3, [pc, #436]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6c      	ldr	r2, [pc, #432]	; (800144c <HAL_RCC_OscConfig+0x240>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xb0>
 80012a4:	4b69      	ldr	r3, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a68      	ldr	r2, [pc, #416]	; (800144c <HAL_RCC_OscConfig+0x240>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b66      	ldr	r3, [pc, #408]	; (800144c <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a65      	ldr	r2, [pc, #404]	; (800144c <HAL_RCC_OscConfig+0x240>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fce4 	bl	8000c90 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fce0 	bl	8000c90 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e207      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b5b      	ldr	r3, [pc, #364]	; (800144c <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xc0>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fcd0 	bl	8000c90 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fccc 	bl	8000c90 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1f3      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	4b51      	ldr	r3, [pc, #324]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0xe8>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d063      	beq.n	80013ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001322:	4b4a      	ldr	r3, [pc, #296]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001336:	2b08      	cmp	r3, #8
 8001338:	d11c      	bne.n	8001374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133a:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_RCC_OscConfig+0x240>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x152>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e1c7      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4937      	ldr	r1, [pc, #220]	; (800144c <HAL_RCC_OscConfig+0x240>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	e03a      	b.n	80013ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_RCC_OscConfig+0x244>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001382:	f7ff fc85 	bl	8000c90 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fc81 	bl	8000c90 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1a8      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4925      	ldr	r1, [pc, #148]	; (800144c <HAL_RCC_OscConfig+0x240>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_RCC_OscConfig+0x244>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc64 	bl	8000c90 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc60 	bl	8000c90 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e187      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d036      	beq.n	8001464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d016      	beq.n	800142c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_RCC_OscConfig+0x248>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fc44 	bl	8000c90 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff fc40 	bl	8000c90 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e167      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_RCC_OscConfig+0x240>)
 8001420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x200>
 800142a:	e01b      	b.n	8001464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_RCC_OscConfig+0x248>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fc2d 	bl	8000c90 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	e00e      	b.n	8001458 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fc29 	bl	8000c90 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d907      	bls.n	8001458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e150      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
 800144c:	40023800 	.word	0x40023800
 8001450:	42470000 	.word	0x42470000
 8001454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	4b88      	ldr	r3, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x470>)
 800145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1ea      	bne.n	800143a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8097 	beq.w	80015a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001476:	4b81      	ldr	r3, [pc, #516]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b7d      	ldr	r3, [pc, #500]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a7c      	ldr	r2, [pc, #496]	; (800167c <HAL_RCC_OscConfig+0x470>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b7a      	ldr	r3, [pc, #488]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b77      	ldr	r3, [pc, #476]	; (8001680 <HAL_RCC_OscConfig+0x474>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	4b74      	ldr	r3, [pc, #464]	; (8001680 <HAL_RCC_OscConfig+0x474>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a73      	ldr	r2, [pc, #460]	; (8001680 <HAL_RCC_OscConfig+0x474>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fbe9 	bl	8000c90 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fbe5 	bl	8000c90 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e10c      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <HAL_RCC_OscConfig+0x474>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x2ea>
 80014e8:	4b64      	ldr	r3, [pc, #400]	; (800167c <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a63      	ldr	r2, [pc, #396]	; (800167c <HAL_RCC_OscConfig+0x470>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	e01c      	b.n	8001530 <HAL_RCC_OscConfig+0x324>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x30c>
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a5e      	ldr	r2, [pc, #376]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
 800150a:	4b5c      	ldr	r3, [pc, #368]	; (800167c <HAL_RCC_OscConfig+0x470>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	4a5b      	ldr	r2, [pc, #364]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0x324>
 8001518:	4b58      	ldr	r3, [pc, #352]	; (800167c <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a57      	ldr	r2, [pc, #348]	; (800167c <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	4b55      	ldr	r3, [pc, #340]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	4a54      	ldr	r2, [pc, #336]	; (800167c <HAL_RCC_OscConfig+0x470>)
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d015      	beq.n	8001564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fbaa 	bl	8000c90 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff fba6 	bl	8000c90 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e0cb      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0ee      	beq.n	8001540 <HAL_RCC_OscConfig+0x334>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001564:	f7ff fb94 	bl	8000c90 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff fb90 	bl	8000c90 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0b5      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	4b3e      	ldr	r3, [pc, #248]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1ee      	bne.n	800156c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a38      	ldr	r2, [pc, #224]	; (800167c <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80a1 	beq.w	80016ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <HAL_RCC_OscConfig+0x470>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d05c      	beq.n	8001670 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d141      	bne.n	8001642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015be:	4b31      	ldr	r3, [pc, #196]	; (8001684 <HAL_RCC_OscConfig+0x478>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb64 	bl	8000c90 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff fb60 	bl	8000c90 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e087      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <HAL_RCC_OscConfig+0x470>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	019b      	lsls	r3, r3, #6
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	3b01      	subs	r3, #1
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	061b      	lsls	r3, r3, #24
 800160e:	491b      	ldr	r1, [pc, #108]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x478>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fb39 	bl	8000c90 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff fb35 	bl	8000c90 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e05c      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x416>
 8001640:	e054      	b.n	80016ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_RCC_OscConfig+0x478>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fb22 	bl	8000c90 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff fb1e 	bl	8000c90 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e045      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_RCC_OscConfig+0x470>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x444>
 800166e:	e03d      	b.n	80016ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d107      	bne.n	8001688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e038      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
 800167c:	40023800 	.word	0x40023800
 8001680:	40007000 	.word	0x40007000
 8001684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x4ec>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d028      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d121      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d11a      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b8:	4013      	ands	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d111      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	3b01      	subs	r3, #1
 80016d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d107      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0cc      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d90c      	bls.n	8001738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0b8      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a58      	ldr	r2, [pc, #352]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800175a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001774:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	494d      	ldr	r1, [pc, #308]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d044      	beq.n	800181c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d119      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e07f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e06f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e067      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f023 0203 	bic.w	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4934      	ldr	r1, [pc, #208]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ec:	f7ff fa50 	bl	8000c90 <HAL_GetTick>
 80017f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	e00a      	b.n	800180a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f4:	f7ff fa4c 	bl	8000c90 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e04f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 020c 	and.w	r2, r3, #12
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	429a      	cmp	r2, r3
 800181a:	d1eb      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800181c:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d20c      	bcs.n	8001844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e032      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4916      	ldr	r1, [pc, #88]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	490e      	ldr	r1, [pc, #56]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001882:	f000 f821 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001886:	4602      	mov	r2, r0
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	490a      	ldr	r1, [pc, #40]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	5ccb      	ldrb	r3, [r1, r3]
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f908 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00
 80018b8:	40023800 	.word	0x40023800
 80018bc:	08006100 	.word	0x08006100
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018cc:	b094      	sub	sp, #80	; 0x50
 80018ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44
 80018d4:	2300      	movs	r3, #0
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d8:	2300      	movs	r3, #0
 80018da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e0:	4b79      	ldr	r3, [pc, #484]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d00d      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x40>
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	f200 80e1 	bhi.w	8001ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x34>
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x3a>
 80018fa:	e0db      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4b73      	ldr	r3, [pc, #460]	; (8001acc <HAL_RCC_GetSysClockFreq+0x204>)
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001900:	e0db      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001906:	e0d8      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001908:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001912:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d063      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191e:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	2200      	movs	r2, #0
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
 8001928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800192a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800192c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
 8001936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800193a:	4622      	mov	r2, r4
 800193c:	462b      	mov	r3, r5
 800193e:	f04f 0000 	mov.w	r0, #0
 8001942:	f04f 0100 	mov.w	r1, #0
 8001946:	0159      	lsls	r1, r3, #5
 8001948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800194c:	0150      	lsls	r0, r2, #5
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4621      	mov	r1, r4
 8001954:	1a51      	subs	r1, r2, r1
 8001956:	6139      	str	r1, [r7, #16]
 8001958:	4629      	mov	r1, r5
 800195a:	eb63 0301 	sbc.w	r3, r3, r1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800196c:	4659      	mov	r1, fp
 800196e:	018b      	lsls	r3, r1, #6
 8001970:	4651      	mov	r1, sl
 8001972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001976:	4651      	mov	r1, sl
 8001978:	018a      	lsls	r2, r1, #6
 800197a:	4651      	mov	r1, sl
 800197c:	ebb2 0801 	subs.w	r8, r2, r1
 8001980:	4659      	mov	r1, fp
 8001982:	eb63 0901 	sbc.w	r9, r3, r1
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800199a:	4690      	mov	r8, r2
 800199c:	4699      	mov	r9, r3
 800199e:	4623      	mov	r3, r4
 80019a0:	eb18 0303 	adds.w	r3, r8, r3
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	462b      	mov	r3, r5
 80019a8:	eb49 0303 	adc.w	r3, r9, r3
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ba:	4629      	mov	r1, r5
 80019bc:	024b      	lsls	r3, r1, #9
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019c4:	4621      	mov	r1, r4
 80019c6:	024a      	lsls	r2, r1, #9
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ce:	2200      	movs	r2, #0
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019d8:	f7fe fc44 	bl	8000264 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019e4:	e058      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	2200      	movs	r2, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	4611      	mov	r1, r2
 80019f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019f6:	623b      	str	r3, [r7, #32]
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a00:	4642      	mov	r2, r8
 8001a02:	464b      	mov	r3, r9
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	0159      	lsls	r1, r3, #5
 8001a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a12:	0150      	lsls	r0, r2, #5
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4641      	mov	r1, r8
 8001a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a1e:	4649      	mov	r1, r9
 8001a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a38:	ebb2 040a 	subs.w	r4, r2, sl
 8001a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	00eb      	lsls	r3, r5, #3
 8001a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a4e:	00e2      	lsls	r2, r4, #3
 8001a50:	4614      	mov	r4, r2
 8001a52:	461d      	mov	r5, r3
 8001a54:	4643      	mov	r3, r8
 8001a56:	18e3      	adds	r3, r4, r3
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	464b      	mov	r3, r9
 8001a5c:	eb45 0303 	adc.w	r3, r5, r3
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	028b      	lsls	r3, r1, #10
 8001a72:	4621      	mov	r1, r4
 8001a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a78:	4621      	mov	r1, r4
 8001a7a:	028a      	lsls	r2, r1, #10
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a82:	2200      	movs	r2, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	61fa      	str	r2, [r7, #28]
 8001a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a8c:	f7fe fbea 	bl	8000264 <__aeabi_uldivmod>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4613      	mov	r3, r2
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab2:	e002      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3750      	adds	r7, #80	; 0x50
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	00f42400 	.word	0x00f42400
 8001ad0:	007a1200 	.word	0x007a1200

08001ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001af0:	f7ff fff0 	bl	8001ad4 <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0a9b      	lsrs	r3, r3, #10
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4903      	ldr	r1, [pc, #12]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08006110 	.word	0x08006110

08001b14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	220f      	movs	r2, #15
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <HAL_RCC_GetClockConfig+0x60>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0207 	and.w	r2, r3, #7
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e041      	b.n	8001c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f839 	bl	8001c16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f000 f9d8 	bl	8001f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d001      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e04e      	b.n	8001ce2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d022      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6e:	d01d      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d018      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00e      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d009      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x80>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d111      	bne.n	8001cd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d010      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cce:	e007      	b.n	8001ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	40000800 	.word	0x40000800
 8001cfc:	40000c00 	.word	0x40000c00
 8001d00:	40010400 	.word	0x40010400
 8001d04:	40014000 	.word	0x40014000
 8001d08:	40001800 	.word	0x40001800

08001d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0202 	mvn.w	r2, #2
 8001d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8ee 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8e0 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8f1 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0204 	mvn.w	r2, #4
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8c4 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8b6 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8c7 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0208 	mvn.w	r2, #8
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2204      	movs	r2, #4
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f89a 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f88c 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f89d 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0210 	mvn.w	r2, #16
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f870 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f862 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f873 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0201 	mvn.w	r2, #1
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe fdd2 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b80      	cmp	r3, #128	; 0x80
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	2b80      	cmp	r3, #128	; 0x80
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f902 	bl	80020c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b40      	cmp	r3, #64	; 0x40
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d107      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f838 	bl	8001f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d10e      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d107      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0220 	mvn.w	r2, #32
 8001f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8cc 	bl	80020ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a40      	ldr	r2, [pc, #256]	; (8002080 <TIM_Base_SetConfig+0x114>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d013      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8a:	d00f      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3d      	ldr	r2, [pc, #244]	; (8002084 <TIM_Base_SetConfig+0x118>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00b      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3c      	ldr	r2, [pc, #240]	; (8002088 <TIM_Base_SetConfig+0x11c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3b      	ldr	r2, [pc, #236]	; (800208c <TIM_Base_SetConfig+0x120>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3a      	ldr	r2, [pc, #232]	; (8002090 <TIM_Base_SetConfig+0x124>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d108      	bne.n	8001fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <TIM_Base_SetConfig+0x114>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02b      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fcc:	d027      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	; (8002084 <TIM_Base_SetConfig+0x118>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d023      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <TIM_Base_SetConfig+0x11c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01f      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2a      	ldr	r2, [pc, #168]	; (800208c <TIM_Base_SetConfig+0x120>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01b      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a29      	ldr	r2, [pc, #164]	; (8002090 <TIM_Base_SetConfig+0x124>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d017      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a28      	ldr	r2, [pc, #160]	; (8002094 <TIM_Base_SetConfig+0x128>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a27      	ldr	r2, [pc, #156]	; (8002098 <TIM_Base_SetConfig+0x12c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00f      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <TIM_Base_SetConfig+0x130>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00b      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a25      	ldr	r2, [pc, #148]	; (80020a0 <TIM_Base_SetConfig+0x134>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <TIM_Base_SetConfig+0x138>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d003      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <TIM_Base_SetConfig+0x13c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d108      	bne.n	8002030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <TIM_Base_SetConfig+0x114>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0xf8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <TIM_Base_SetConfig+0x124>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d103      	bne.n	800206c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	615a      	str	r2, [r3, #20]
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40010000 	.word	0x40010000
 8002084:	40000400 	.word	0x40000400
 8002088:	40000800 	.word	0x40000800
 800208c:	40000c00 	.word	0x40000c00
 8002090:	40010400 	.word	0x40010400
 8002094:	40014000 	.word	0x40014000
 8002098:	40014400 	.word	0x40014400
 800209c:	40014800 	.word	0x40014800
 80020a0:	40001800 	.word	0x40001800
 80020a4:	40001c00 	.word	0x40001c00
 80020a8:	40002000 	.word	0x40002000

080020ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f103 0208 	add.w	r2, r3, #8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f103 0208 	add.w	r2, r3, #8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f103 0208 	add.w	r2, r3, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218c:	d103      	bne.n	8002196 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e00c      	b.n	80021b0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3308      	adds	r3, #8
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e002      	b.n	80021a4 <vListInsert+0x2e>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d2f6      	bcs.n	800219e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6892      	ldr	r2, [r2, #8]
 80021fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6852      	ldr	r2, [r2, #4]
 8002208:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	d103      	bne.n	800221c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1e5a      	subs	r2, r3, #1
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <xQueueGenericReset+0x2a>
        __asm volatile
 8002250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002254:	f383 8811 	msr	BASEPRI, r3
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	60bb      	str	r3, [r7, #8]
    }
 8002262:	bf00      	nop
 8002264:	e7fe      	b.n	8002264 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002266:	f002 f87d 	bl	8004364 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	441a      	add	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	3b01      	subs	r3, #1
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	441a      	add	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	22ff      	movs	r2, #255	; 0xff
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	22ff      	movs	r2, #255	; 0xff
 80022b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00f      	beq.n	80022e4 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3310      	adds	r3, #16
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 f8d9 	bl	8003480 <xTaskRemoveFromEventList>
 80022ce:	e009      	b.n	80022e4 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3310      	adds	r3, #16
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fefd 	bl	80020d4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3324      	adds	r3, #36	; 0x24
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fef8 	bl	80020d4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80022e4:	f002 f86e 	bl	80043c4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80022e8:	2301      	movs	r3, #1
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b08c      	sub	sp, #48	; 0x30
 80022f6:	af02      	add	r7, sp, #8
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	4613      	mov	r3, r2
 80022fe:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10a      	bne.n	800231c <xQueueGenericCreate+0x2a>
        __asm volatile
 8002306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230a:	f383 8811 	msr	BASEPRI, r3
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	61bb      	str	r3, [r7, #24]
    }
 8002318:	bf00      	nop
 800231a:	e7fe      	b.n	800231a <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <xQueueGenericCreate+0x48>
 800232c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d101      	bne.n	800233e <xQueueGenericCreate+0x4c>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <xQueueGenericCreate+0x4e>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <xQueueGenericCreate+0x68>
        __asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	617b      	str	r3, [r7, #20]
    }
 8002356:	bf00      	nop
 8002358:	e7fe      	b.n	8002358 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002360:	d90a      	bls.n	8002378 <xQueueGenericCreate+0x86>
        __asm volatile
 8002362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	613b      	str	r3, [r7, #16]
    }
 8002374:	bf00      	nop
 8002376:	e7fe      	b.n	8002376 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	3350      	adds	r3, #80	; 0x50
 800237c:	4618      	mov	r0, r3
 800237e:	f002 f91d 	bl	80045bc <pvPortMalloc>
 8002382:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3350      	adds	r3, #80	; 0x50
 8002392:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f805 	bl	80023b0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023a6:	6a3b      	ldr	r3, [r7, #32]
    }
 80023a8:	4618      	mov	r0, r3
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e002      	b.n	80023d2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023de:	2101      	movs	r1, #1
 80023e0:	69b8      	ldr	r0, [r7, #24]
 80023e2:	f7ff ff2b 	bl	800223c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	2073      	movs	r0, #115	; 0x73
 80023f6:	f002 ff21 	bl	800523c <SEGGER_SYSVIEW_RecordU32x3>
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b090      	sub	sp, #64	; 0x40
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueGenericSend+0x32>
        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <xQueueGenericSend+0x40>
 800243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <xQueueGenericSend+0x44>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <xQueueGenericSend+0x46>
 8002448:	2300      	movs	r3, #0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10a      	bne.n	8002464 <xQueueGenericSend+0x60>
        __asm volatile
 800244e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002452:	f383 8811 	msr	BASEPRI, r3
 8002456:	f3bf 8f6f 	isb	sy
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002460:	bf00      	nop
 8002462:	e7fe      	b.n	8002462 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d103      	bne.n	8002472 <xQueueGenericSend+0x6e>
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <xQueueGenericSend+0x72>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <xQueueGenericSend+0x74>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueGenericSend+0x8e>
        __asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	623b      	str	r3, [r7, #32]
    }
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002492:	f001 f98f 	bl	80037b4 <xTaskGetSchedulerState>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <xQueueGenericSend+0x9e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <xQueueGenericSend+0xa2>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <xQueueGenericSend+0xa4>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <xQueueGenericSend+0xbe>
        __asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	61fb      	str	r3, [r7, #28]
    }
 80024be:	bf00      	nop
 80024c0:	e7fe      	b.n	80024c0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024c2:	f001 ff4f 	bl	8004364 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d302      	bcc.n	80024d8 <xQueueGenericSend+0xd4>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d11f      	bne.n	8002518 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fc16 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	460b      	mov	r3, r1
 80024ea:	4601      	mov	r1, r0
 80024ec:	205a      	movs	r0, #90	; 0x5a
 80024ee:	f002 ff1b 	bl	8005328 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024f8:	f000 fa56 	bl	80029a8 <prvCopyDataToQueue>
 80024fc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	3324      	adds	r3, #36	; 0x24
 800250a:	4618      	mov	r0, r3
 800250c:	f000 ffb8 	bl	8003480 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002510:	f001 ff58 	bl	80043c4 <vPortExitCritical>
                return pdPASS;
 8002514:	2301      	movs	r3, #1
 8002516:	e07d      	b.n	8002614 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d110      	bne.n	8002540 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800251e:	f001 ff51 	bl	80043c4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fbf1 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	460b      	mov	r3, r1
 8002534:	4601      	mov	r1, r0
 8002536:	205a      	movs	r0, #90	; 0x5a
 8002538:	f002 fef6 	bl	8005328 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800253c:	2300      	movs	r3, #0
 800253e:	e069      	b.n	8002614 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fffe 	bl	800354c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002550:	2301      	movs	r3, #1
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002554:	f001 ff36 	bl	80043c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002558:	f000 fd8c 	bl	8003074 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800255c:	f001 ff02 	bl	8004364 <vPortEnterCritical>
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002566:	b25b      	sxtb	r3, r3
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256c:	d103      	bne.n	8002576 <xQueueGenericSend+0x172>
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800257c:	b25b      	sxtb	r3, r3
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002582:	d103      	bne.n	800258c <xQueueGenericSend+0x188>
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800258c:	f001 ff1a 	bl	80043c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002590:	1d3a      	adds	r2, r7, #4
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f000 ffed 	bl	8003578 <xTaskCheckForTimeOut>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d124      	bne.n	80025ee <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025a6:	f000 faf7 	bl	8002b98 <prvIsQueueFull>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d018      	beq.n	80025e2 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	3310      	adds	r3, #16
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 ff0f 	bl	80033dc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80025be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c0:	f000 fa82 	bl	8002ac8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80025c4:	f000 fd64 	bl	8003090 <xTaskResumeAll>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f47f af79 	bne.w	80024c2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <xQueueGenericSend+0x218>)
 80025d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	e76f      	b.n	80024c2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80025e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e4:	f000 fa70 	bl	8002ac8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025e8:	f000 fd52 	bl	8003090 <xTaskResumeAll>
 80025ec:	e769      	b.n	80024c2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80025ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025f0:	f000 fa6a 	bl	8002ac8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025f4:	f000 fd4c 	bl	8003090 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fb86 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	460b      	mov	r3, r1
 800260a:	4601      	mov	r1, r0
 800260c:	205a      	movs	r0, #90	; 0x5a
 800260e:	f002 fe8b 	bl	8005328 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002612:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002614:	4618      	mov	r0, r3
 8002616:	3738      	adds	r7, #56	; 0x38
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	e000ed04 	.word	0xe000ed04

08002620 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b090      	sub	sp, #64	; 0x40
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800264a:	bf00      	nop
 800264c:	e7fe      	b.n	800264c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <xQueueGenericSendFromISR+0x3c>
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <xQueueGenericSendFromISR+0x40>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <xQueueGenericSendFromISR+0x42>
 8002660:	2300      	movs	r3, #0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266a:	f383 8811 	msr	BASEPRI, r3
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002678:	bf00      	nop
 800267a:	e7fe      	b.n	800267a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d103      	bne.n	800268a <xQueueGenericSendFromISR+0x6a>
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <xQueueGenericSendFromISR+0x6e>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <xQueueGenericSendFromISR+0x70>
 800268e:	2300      	movs	r3, #0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	623b      	str	r3, [r7, #32]
    }
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026aa:	f001 ff47 	bl	800453c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80026ae:	f3ef 8211 	mrs	r2, BASEPRI
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	61fa      	str	r2, [r7, #28]
 80026c4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80026c6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d302      	bcc.n	80026dc <xQueueGenericSendFromISR+0xbc>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d148      	bne.n	800276e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fb0c 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 80026f4:	4601      	mov	r1, r0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	461a      	mov	r2, r3
 80026fa:	2060      	movs	r0, #96	; 0x60
 80026fc:	f002 fd44 	bl	8005188 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002706:	f000 f94f 	bl	80029a8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800270a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002712:	d112      	bne.n	800273a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2b00      	cmp	r3, #0
 800271a:	d025      	beq.n	8002768 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271e:	3324      	adds	r3, #36	; 0x24
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fead 	bl	8003480 <xTaskRemoveFromEventList>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01d      	beq.n	8002768 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01a      	beq.n	8002768 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e016      	b.n	8002768 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800273a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800273e:	2b7f      	cmp	r3, #127	; 0x7f
 8002740:	d10a      	bne.n	8002758 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
 8002752:	617b      	str	r3, [r7, #20]
    }
 8002754:	bf00      	nop
 8002756:	e7fe      	b.n	8002756 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002758:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800275c:	3301      	adds	r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	b25a      	sxtb	r2, r3
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002768:	2301      	movs	r3, #1
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800276c:	e00b      	b.n	8002786 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	4618      	mov	r0, r3
 8002772:	f003 facb 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 8002776:	4601      	mov	r1, r0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	461a      	mov	r2, r3
 800277c:	2060      	movs	r0, #96	; 0x60
 800277e:	f002 fd03 	bl	8005188 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002782:	2300      	movs	r3, #0
 8002784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002790:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002794:	4618      	mov	r0, r3
 8002796:	3740      	adds	r7, #64	; 0x40
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b08f      	sub	sp, #60	; 0x3c
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <xQueueReceive+0x30>
        __asm volatile
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	623b      	str	r3, [r7, #32]
    }
 80027c8:	bf00      	nop
 80027ca:	e7fe      	b.n	80027ca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <xQueueReceive+0x3e>
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <xQueueReceive+0x42>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <xQueueReceive+0x44>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueReceive+0x5e>
        __asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	61fb      	str	r3, [r7, #28]
    }
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027fa:	f000 ffdb 	bl	80037b4 <xTaskGetSchedulerState>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <xQueueReceive+0x6e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <xQueueReceive+0x72>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueReceive+0x74>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <xQueueReceive+0x8e>
        __asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	61bb      	str	r3, [r7, #24]
    }
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800282a:	f001 fd9b 	bl	8004364 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d024      	beq.n	8002884 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283e:	f000 f91d 	bl	8002a7c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fa61 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 800284a:	4604      	mov	r4, r0
 800284c:	2000      	movs	r0, #0
 800284e:	f003 fa5d 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 8002852:	4602      	mov	r2, r0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2101      	movs	r1, #1
 8002858:	9100      	str	r1, [sp, #0]
 800285a:	4621      	mov	r1, r4
 800285c:	205c      	movs	r0, #92	; 0x5c
 800285e:	f002 fd63 	bl	8005328 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	3310      	adds	r3, #16
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fe02 	bl	8003480 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800287c:	f001 fda2 	bl	80043c4 <vPortExitCritical>
                return pdPASS;
 8002880:	2301      	movs	r3, #1
 8002882:	e08a      	b.n	800299a <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d113      	bne.n	80028b2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800288a:	f001 fd9b 	bl	80043c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	4618      	mov	r0, r3
 8002892:	f003 fa3b 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 8002896:	4604      	mov	r4, r0
 8002898:	2000      	movs	r0, #0
 800289a:	f003 fa37 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 800289e:	4602      	mov	r2, r0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2101      	movs	r1, #1
 80028a4:	9100      	str	r1, [sp, #0]
 80028a6:	4621      	mov	r1, r4
 80028a8:	205c      	movs	r0, #92	; 0x5c
 80028aa:	f002 fd3d 	bl	8005328 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e073      	b.n	800299a <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fe45 	bl	800354c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028c6:	f001 fd7d 	bl	80043c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028ca:	f000 fbd3 	bl	8003074 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028ce:	f001 fd49 	bl	8004364 <vPortEnterCritical>
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028de:	d103      	bne.n	80028e8 <xQueueReceive+0x14c>
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f4:	d103      	bne.n	80028fe <xQueueReceive+0x162>
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028fe:	f001 fd61 	bl	80043c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002902:	1d3a      	adds	r2, r7, #4
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fe34 	bl	8003578 <xTaskCheckForTimeOut>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d124      	bne.n	8002960 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002918:	f000 f928 	bl	8002b6c <prvIsQueueEmpty>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	3324      	adds	r3, #36	; 0x24
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fd56 	bl	80033dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002932:	f000 f8c9 	bl	8002ac8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002936:	f000 fbab 	bl	8003090 <xTaskResumeAll>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f af74 	bne.w	800282a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <xQueueReceive+0x208>)
 8002944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	e76a      	b.n	800282a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002956:	f000 f8b7 	bl	8002ac8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800295a:	f000 fb99 	bl	8003090 <xTaskResumeAll>
 800295e:	e764      	b.n	800282a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002962:	f000 f8b1 	bl	8002ac8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002966:	f000 fb93 	bl	8003090 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800296a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800296c:	f000 f8fe 	bl	8002b6c <prvIsQueueEmpty>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f43f af59 	beq.w	800282a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	4618      	mov	r0, r3
 800297c:	f003 f9c6 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 8002980:	4604      	mov	r4, r0
 8002982:	2000      	movs	r0, #0
 8002984:	f003 f9c2 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 8002988:	4602      	mov	r2, r0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2101      	movs	r1, #1
 800298e:	9100      	str	r1, [sp, #0]
 8002990:	4621      	mov	r1, r4
 8002992:	205c      	movs	r0, #92	; 0x5c
 8002994:	f002 fcc8 	bl	8005328 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002998:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800299a:	4618      	mov	r0, r3
 800299c:	3734      	adds	r7, #52	; 0x34
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d14d      	bne.n	8002a6a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 ff0c 	bl	80037f0 <xTaskPriorityDisinherit>
 80029d8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e043      	b.n	8002a6a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d119      	bne.n	8002a1c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6858      	ldr	r0, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	461a      	mov	r2, r3
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	f003 fb06 	bl	8006004 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	441a      	add	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d32b      	bcc.n	8002a6a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	e026      	b.n	8002a6a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	68d8      	ldr	r0, [r3, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	461a      	mov	r2, r3
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	f003 faec 	bl	8006004 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	425b      	negs	r3, r3
 8002a36:	441a      	add	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d207      	bcs.n	8002a58 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	425b      	negs	r3, r3
 8002a52:	441a      	add	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d105      	bne.n	8002a6a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a72:	697b      	ldr	r3, [r7, #20]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d018      	beq.n	8002ac0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	441a      	add	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d303      	bcc.n	8002ab0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68d9      	ldr	r1, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6838      	ldr	r0, [r7, #0]
 8002abc:	f003 faa2 	bl	8006004 <memcpy>
    }
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ad0:	f001 fc48 	bl	8004364 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ada:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002adc:	e011      	b.n	8002b02 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d012      	beq.n	8002b0c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3324      	adds	r3, #36	; 0x24
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fcc8 	bl	8003480 <xTaskRemoveFromEventList>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002af6:	f000 fda5 	bl	8003644 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	dce9      	bgt.n	8002ade <prvUnlockQueue+0x16>
 8002b0a:	e000      	b.n	8002b0e <prvUnlockQueue+0x46>
                        break;
 8002b0c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b16:	f001 fc55 	bl	80043c4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b1a:	f001 fc23 	bl	8004364 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b24:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b26:	e011      	b.n	8002b4c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d012      	beq.n	8002b56 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3310      	adds	r3, #16
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fca3 	bl	8003480 <xTaskRemoveFromEventList>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b40:	f000 fd80 	bl	8003644 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b44:	7bbb      	ldrb	r3, [r7, #14]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	dce9      	bgt.n	8002b28 <prvUnlockQueue+0x60>
 8002b54:	e000      	b.n	8002b58 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b56:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	22ff      	movs	r2, #255	; 0xff
 8002b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b60:	f001 fc30 	bl	80043c4 <vPortExitCritical>
}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b74:	f001 fbf6 	bl	8004364 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b80:	2301      	movs	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e001      	b.n	8002b8a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b8a:	f001 fc1b 	bl	80043c4 <vPortExitCritical>

    return xReturn;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ba0:	f001 fbe0 	bl	8004364 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d102      	bne.n	8002bb6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e001      	b.n	8002bba <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bba:	f001 fc03 	bl	80043c4 <vPortExitCritical>

    return xReturn;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	e01e      	b.n	8002c16 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bd8:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <vQueueAddToRegistry+0x60>)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d115      	bne.n	8002c10 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002be4:	4910      	ldr	r1, [pc, #64]	; (8002c28 <vQueueAddToRegistry+0x60>)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <vQueueAddToRegistry+0x60>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 f885 	bl	8005d0c <SEGGER_SYSVIEW_ShrinkId>
 8002c02:	4601      	mov	r1, r0
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	2071      	movs	r0, #113	; 0x71
 8002c0a:	f002 fabd 	bl	8005188 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c0e:	e006      	b.n	8002c1e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b07      	cmp	r3, #7
 8002c1a:	d9dd      	bls.n	8002bd8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	2000007c 	.word	0x2000007c

08002c2c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c3c:	f001 fb92 	bl	8004364 <vPortEnterCritical>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c4c:	d103      	bne.n	8002c56 <vQueueWaitForMessageRestricted+0x2a>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c62:	d103      	bne.n	8002c6c <vQueueWaitForMessageRestricted+0x40>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c6c:	f001 fbaa 	bl	80043c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d106      	bne.n	8002c86 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3324      	adds	r3, #36	; 0x24
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fbcf 	bl	8003424 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff1e 	bl	8002ac8 <prvUnlockQueue>
    }
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	; 0x30
 8002c98:	af04      	add	r7, sp, #16
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f001 fc87 	bl	80045bc <pvPortMalloc>
 8002cae:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00e      	beq.n	8002cd4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cb6:	2058      	movs	r0, #88	; 0x58
 8002cb8:	f001 fc80 	bl	80045bc <pvPortMalloc>
 8002cbc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cca:	e005      	b.n	8002cd8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ccc:	6978      	ldr	r0, [r7, #20]
 8002cce:	f001 fd55 	bl	800477c <vPortFree>
 8002cd2:	e001      	b.n	8002cd8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d013      	beq.n	8002d06 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9303      	str	r3, [sp, #12]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	9302      	str	r3, [sp, #8]
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f80e 	bl	8002d16 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002cfa:	69f8      	ldr	r0, [r7, #28]
 8002cfc:	f000 f8a2 	bl	8002e44 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d00:	2301      	movs	r3, #1
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	e002      	b.n	8002d0c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d0a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
    }
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b088      	sub	sp, #32
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	21a5      	movs	r1, #165	; 0xa5
 8002d30:	f003 f976 	bl	8006020 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f023 0307 	bic.w	r3, r3, #7
 8002d4c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	617b      	str	r3, [r7, #20]
    }
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01f      	beq.n	8002db4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	e012      	b.n	8002da0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	4413      	add	r3, r2
 8002d80:	7819      	ldrb	r1, [r3, #0]
 8002d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	3334      	adds	r3, #52	; 0x34
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b09      	cmp	r3, #9
 8002da4:	d9e9      	bls.n	8002d7a <prvInitialiseNewTask+0x64>
 8002da6:	e000      	b.n	8002daa <prvInitialiseNewTask+0x94>
            {
                break;
 8002da8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002db2:	e003      	b.n	8002dbc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d901      	bls.n	8002dc6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	3304      	adds	r3, #4
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f999 	bl	8002114 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	3318      	adds	r3, #24
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff f994 	bl	8002114 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	f1c3 0205 	rsb	r2, r3, #5
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	3350      	adds	r3, #80	; 0x50
 8002e06:	2204      	movs	r2, #4
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f003 f908 	bl	8006020 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	3354      	adds	r3, #84	; 0x54
 8002e14:	2201      	movs	r2, #1
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 f901 	bl	8006020 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	69b8      	ldr	r0, [r7, #24]
 8002e24:	f001 f8ee 	bl	8004004 <pxPortInitialiseStack>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e38:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e3a:	bf00      	nop
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e44:	b5b0      	push	{r4, r5, r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e4c:	f001 fa8a 	bl	8004364 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e50:	4b35      	ldr	r3, [pc, #212]	; (8002f28 <prvAddNewTaskToReadyList+0xe4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	4a34      	ldr	r2, [pc, #208]	; (8002f28 <prvAddNewTaskToReadyList+0xe4>)
 8002e58:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e5a:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <prvAddNewTaskToReadyList+0xe8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e62:	4a32      	ldr	r2, [pc, #200]	; (8002f2c <prvAddNewTaskToReadyList+0xe8>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e68:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <prvAddNewTaskToReadyList+0xe4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d110      	bne.n	8002e92 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e70:	f000 fc06 	bl	8003680 <prvInitialiseTaskLists>
 8002e74:	e00d      	b.n	8002e92 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e76:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <prvAddNewTaskToReadyList+0xec>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <prvAddNewTaskToReadyList+0xe8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d802      	bhi.n	8002e92 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e8c:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <prvAddNewTaskToReadyList+0xe8>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <prvAddNewTaskToReadyList+0xf0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <prvAddNewTaskToReadyList+0xf0>)
 8002e9a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <prvAddNewTaskToReadyList+0xf0>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d016      	beq.n	8002ed8 <prvAddNewTaskToReadyList+0x94>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 fe07 	bl	8005ac0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	461d      	mov	r5, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461c      	mov	r4, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	1ae3      	subs	r3, r4, r3
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	462b      	mov	r3, r5
 8002ed4:	f001 fd70 	bl	80049b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fe74 	bl	8005bc8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <prvAddNewTaskToReadyList+0xf4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <prvAddNewTaskToReadyList+0xf4>)
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4a0f      	ldr	r2, [pc, #60]	; (8002f3c <prvAddNewTaskToReadyList+0xf8>)
 8002f00:	441a      	add	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f7ff f910 	bl	800212e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f0e:	f001 fa59 	bl	80043c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <prvAddNewTaskToReadyList+0xec>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <prvAddNewTaskToReadyList+0xe8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bdb0      	pop	{r4, r5, r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000194 	.word	0x20000194
 8002f2c:	200000bc 	.word	0x200000bc
 8002f30:	200001a0 	.word	0x200001a0
 8002f34:	200001b0 	.word	0x200001b0
 8002f38:	2000019c 	.word	0x2000019c
 8002f3c:	200000c0 	.word	0x200000c0

08002f40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01b      	beq.n	8002f8a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <vTaskDelay+0x68>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <vTaskDelay+0x30>
        __asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	60bb      	str	r3, [r7, #8]
    }
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002f70:	f000 f880 	bl	8003074 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	2023      	movs	r0, #35	; 0x23
 8002f78:	f002 f8ca 	bl	8005110 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fcb6 	bl	80038f0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002f84:	f000 f884 	bl	8003090 <xTaskResumeAll>
 8002f88:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <vTaskDelay+0x6c>)
 8002f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200001bc 	.word	0x200001bc
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002fb6:	4b27      	ldr	r3, [pc, #156]	; (8003054 <vTaskStartScheduler+0xa4>)
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2282      	movs	r2, #130	; 0x82
 8002fc2:	4925      	ldr	r1, [pc, #148]	; (8003058 <vTaskStartScheduler+0xa8>)
 8002fc4:	4825      	ldr	r0, [pc, #148]	; (800305c <vTaskStartScheduler+0xac>)
 8002fc6:	f7ff fe65 	bl	8002c94 <xTaskCreate>
 8002fca:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d102      	bne.n	8002fd8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002fd2:	f000 fd05 	bl	80039e0 <xTimerCreateTimerTask>
 8002fd6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d124      	bne.n	8003028 <vTaskStartScheduler+0x78>
        __asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	60bb      	str	r3, [r7, #8]
    }
 8002ff0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <vTaskStartScheduler+0xb0>)
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <vTaskStartScheduler+0xb4>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <vTaskStartScheduler+0xb8>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <vTaskStartScheduler+0xbc>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <vTaskStartScheduler+0xa4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d102      	bne.n	8003018 <vTaskStartScheduler+0x68>
 8003012:	f002 fd39 	bl	8005a88 <SEGGER_SYSVIEW_OnIdle>
 8003016:	e004      	b.n	8003022 <vTaskStartScheduler+0x72>
 8003018:	4b14      	ldr	r3, [pc, #80]	; (800306c <vTaskStartScheduler+0xbc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fd91 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003022:	f001 f87f 	bl	8004124 <xPortStartScheduler>
 8003026:	e00e      	b.n	8003046 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302e:	d10a      	bne.n	8003046 <vTaskStartScheduler+0x96>
        __asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	607b      	str	r3, [r7, #4]
    }
 8003042:	bf00      	nop
 8003044:	e7fe      	b.n	8003044 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <vTaskStartScheduler+0xc0>)
 8003048:	681b      	ldr	r3, [r3, #0]
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200001b8 	.word	0x200001b8
 8003058:	08006078 	.word	0x08006078
 800305c:	0800365d 	.word	0x0800365d
 8003060:	200001b4 	.word	0x200001b4
 8003064:	200001a0 	.word	0x200001a0
 8003068:	20000198 	.word	0x20000198
 800306c:	200000bc 	.word	0x200000bc
 8003070:	2000000c 	.word	0x2000000c

08003074 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <vTaskSuspendAll+0x18>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	4a03      	ldr	r2, [pc, #12]	; (800308c <vTaskSuspendAll+0x18>)
 8003080:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	200001bc 	.word	0x200001bc

08003090 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <xTaskResumeAll+0x104>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <xTaskResumeAll+0x2c>
        __asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	603b      	str	r3, [r7, #0]
    }
 80030b8:	bf00      	nop
 80030ba:	e7fe      	b.n	80030ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030bc:	f001 f952 	bl	8004364 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <xTaskResumeAll+0x104>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	4a33      	ldr	r2, [pc, #204]	; (8003194 <xTaskResumeAll+0x104>)
 80030c8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ca:	4b32      	ldr	r3, [pc, #200]	; (8003194 <xTaskResumeAll+0x104>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d159      	bne.n	8003186 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <xTaskResumeAll+0x108>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d055      	beq.n	8003186 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030da:	e032      	b.n	8003142 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030dc:	4b2f      	ldr	r3, [pc, #188]	; (800319c <xTaskResumeAll+0x10c>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3318      	adds	r3, #24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f87d 	bl	80021e8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3304      	adds	r3, #4
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f878 	bl	80021e8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 fd64 	bl	8005bc8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	2201      	movs	r2, #1
 8003106:	409a      	lsls	r2, r3
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <xTaskResumeAll+0x110>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	4a24      	ldr	r2, [pc, #144]	; (80031a0 <xTaskResumeAll+0x110>)
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <xTaskResumeAll+0x114>)
 8003120:	441a      	add	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3304      	adds	r3, #4
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f7ff f800 	bl	800212e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <xTaskResumeAll+0x118>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <xTaskResumeAll+0x11c>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003142:	4b16      	ldr	r3, [pc, #88]	; (800319c <xTaskResumeAll+0x10c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1c8      	bne.n	80030dc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003150:	f000 fb14 	bl	800377c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <xTaskResumeAll+0x120>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d010      	beq.n	8003182 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003160:	f000 f838 	bl	80031d4 <xTaskIncrementTick>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <xTaskResumeAll+0x11c>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3b01      	subs	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f1      	bne.n	8003160 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <xTaskResumeAll+0x120>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <xTaskResumeAll+0x11c>)
 8003184:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003186:	f001 f91d 	bl	80043c4 <vPortExitCritical>

    return xAlreadyYielded;
 800318a:	687b      	ldr	r3, [r7, #4]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	200001bc 	.word	0x200001bc
 8003198:	20000194 	.word	0x20000194
 800319c:	20000154 	.word	0x20000154
 80031a0:	2000019c 	.word	0x2000019c
 80031a4:	200000c0 	.word	0x200000c0
 80031a8:	200000bc 	.word	0x200000bc
 80031ac:	200001a8 	.word	0x200001a8
 80031b0:	200001a4 	.word	0x200001a4

080031b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <xTaskGetTickCount+0x1c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031c0:	687b      	ldr	r3, [r7, #4]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000198 	.word	0x20000198

080031d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <xTaskIncrementTick+0x110>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d173      	bne.n	80032ce <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031e6:	4b40      	ldr	r3, [pc, #256]	; (80032e8 <xTaskIncrementTick+0x114>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3301      	adds	r3, #1
 80031ec:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031ee:	4a3e      	ldr	r2, [pc, #248]	; (80032e8 <xTaskIncrementTick+0x114>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d120      	bne.n	800323c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80031fa:	4b3c      	ldr	r3, [pc, #240]	; (80032ec <xTaskIncrementTick+0x118>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <xTaskIncrementTick+0x46>
        __asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	603b      	str	r3, [r7, #0]
    }
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xTaskIncrementTick+0x44>
 800321a:	4b34      	ldr	r3, [pc, #208]	; (80032ec <xTaskIncrementTick+0x118>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <xTaskIncrementTick+0x11c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a31      	ldr	r2, [pc, #196]	; (80032ec <xTaskIncrementTick+0x118>)
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4a31      	ldr	r2, [pc, #196]	; (80032f0 <xTaskIncrementTick+0x11c>)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <xTaskIncrementTick+0x120>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	4a2f      	ldr	r2, [pc, #188]	; (80032f4 <xTaskIncrementTick+0x120>)
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	f000 faa0 	bl	800377c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800323c:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <xTaskIncrementTick+0x124>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	429a      	cmp	r2, r3
 8003244:	d348      	bcc.n	80032d8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <xTaskIncrementTick+0x118>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003250:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <xTaskIncrementTick+0x124>)
 8003252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003256:	601a      	str	r2, [r3, #0]
                    break;
 8003258:	e03e      	b.n	80032d8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <xTaskIncrementTick+0x118>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d203      	bcs.n	800327a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003272:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <xTaskIncrementTick+0x124>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003278:	e02e      	b.n	80032d8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	3304      	adds	r3, #4
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe ffb2 	bl	80021e8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	3318      	adds	r3, #24
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe ffa9 	bl	80021e8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4618      	mov	r0, r3
 800329a:	f002 fc95 	bl	8005bc8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <xTaskIncrementTick+0x128>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <xTaskIncrementTick+0x128>)
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4a10      	ldr	r2, [pc, #64]	; (8003300 <xTaskIncrementTick+0x12c>)
 80032be:	441a      	add	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f7fe ff31 	bl	800212e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032cc:	e7bb      	b.n	8003246 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <xTaskIncrementTick+0x130>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <xTaskIncrementTick+0x130>)
 80032d6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80032d8:	697b      	ldr	r3, [r7, #20]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200001bc 	.word	0x200001bc
 80032e8:	20000198 	.word	0x20000198
 80032ec:	2000014c 	.word	0x2000014c
 80032f0:	20000150 	.word	0x20000150
 80032f4:	200001ac 	.word	0x200001ac
 80032f8:	200001b4 	.word	0x200001b4
 80032fc:	2000019c 	.word	0x2000019c
 8003300:	200000c0 	.word	0x200000c0
 8003304:	200001a4 	.word	0x200001a4

08003308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800330e:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <vTaskSwitchContext+0xbc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003316:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <vTaskSwitchContext+0xc0>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800331c:	e04d      	b.n	80033ba <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <vTaskSwitchContext+0xc0>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003324:	4b29      	ldr	r3, [pc, #164]	; (80033cc <vTaskSwitchContext+0xc4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	f1c3 031f 	rsb	r3, r3, #31
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	4925      	ldr	r1, [pc, #148]	; (80033d0 <vTaskSwitchContext+0xc8>)
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <vTaskSwitchContext+0x5c>
        __asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	607b      	str	r3, [r7, #4]
    }
 8003360:	bf00      	nop
 8003362:	e7fe      	b.n	8003362 <vTaskSwitchContext+0x5a>
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <vTaskSwitchContext+0xc8>)
 8003370:	4413      	add	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	3308      	adds	r3, #8
 8003386:	429a      	cmp	r2, r3
 8003388:	d104      	bne.n	8003394 <vTaskSwitchContext+0x8c>
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <vTaskSwitchContext+0xcc>)
 800339c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <vTaskSwitchContext+0xcc>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <vTaskSwitchContext+0xd0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d102      	bne.n	80033b0 <vTaskSwitchContext+0xa8>
 80033aa:	f002 fb6d 	bl	8005a88 <SEGGER_SYSVIEW_OnIdle>
}
 80033ae:	e004      	b.n	80033ba <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <vTaskSwitchContext+0xcc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f002 fbc5 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200001bc 	.word	0x200001bc
 80033c8:	200001a8 	.word	0x200001a8
 80033cc:	2000019c 	.word	0x2000019c
 80033d0:	200000c0 	.word	0x200000c0
 80033d4:	200000bc 	.word	0x200000bc
 80033d8:	200001b8 	.word	0x200001b8

080033dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	60fb      	str	r3, [r7, #12]
    }
 80033fe:	bf00      	nop
 8003400:	e7fe      	b.n	8003400 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <vTaskPlaceOnEventList+0x44>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3318      	adds	r3, #24
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe feb3 	bl	8002176 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003410:	2101      	movs	r1, #1
 8003412:	6838      	ldr	r0, [r7, #0]
 8003414:	f000 fa6c 	bl	80038f0 <prvAddCurrentTaskToDelayedList>
}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	200000bc 	.word	0x200000bc

08003424 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	617b      	str	r3, [r7, #20]
    }
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <vTaskPlaceOnEventListRestricted+0x58>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3318      	adds	r3, #24
 8003452:	4619      	mov	r1, r3
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7fe fe6a 	bl	800212e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003464:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003466:	2024      	movs	r0, #36	; 0x24
 8003468:	f001 fe34 	bl	80050d4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	68b8      	ldr	r0, [r7, #8]
 8003470:	f000 fa3e 	bl	80038f0 <prvAddCurrentTaskToDelayedList>
    }
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200000bc 	.word	0x200000bc

08003480 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	60fb      	str	r3, [r7, #12]
    }
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	3318      	adds	r3, #24
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fe99 	bl	80021e8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b6:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <xTaskRemoveFromEventList+0xb4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d120      	bne.n	8003500 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fe90 	bl	80021e8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 fb7c 	bl	8005bc8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	2201      	movs	r2, #1
 80034d6:	409a      	lsls	r2, r3
 80034d8:	4b17      	ldr	r3, [pc, #92]	; (8003538 <xTaskRemoveFromEventList+0xb8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4313      	orrs	r3, r2
 80034de:	4a16      	ldr	r2, [pc, #88]	; (8003538 <xTaskRemoveFromEventList+0xb8>)
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4a13      	ldr	r2, [pc, #76]	; (800353c <xTaskRemoveFromEventList+0xbc>)
 80034f0:	441a      	add	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7fe fe18 	bl	800212e <vListInsertEnd>
 80034fe:	e005      	b.n	800350c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	3318      	adds	r3, #24
 8003504:	4619      	mov	r1, r3
 8003506:	480e      	ldr	r0, [pc, #56]	; (8003540 <xTaskRemoveFromEventList+0xc0>)
 8003508:	f7fe fe11 	bl	800212e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <xTaskRemoveFromEventList+0xc4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	429a      	cmp	r2, r3
 8003518:	d905      	bls.n	8003526 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800351a:	2301      	movs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <xTaskRemoveFromEventList+0xc8>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e001      	b.n	800352a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800352a:	697b      	ldr	r3, [r7, #20]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200001bc 	.word	0x200001bc
 8003538:	2000019c 	.word	0x2000019c
 800353c:	200000c0 	.word	0x200000c0
 8003540:	20000154 	.word	0x20000154
 8003544:	200000bc 	.word	0x200000bc
 8003548:	200001a8 	.word	0x200001a8

0800354c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <vTaskInternalSetTimeOutState+0x24>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <vTaskInternalSetTimeOutState+0x28>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	200001ac 	.word	0x200001ac
 8003574:	20000198 	.word	0x20000198

08003578 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	613b      	str	r3, [r7, #16]
    }
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	60fb      	str	r3, [r7, #12]
    }
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035ba:	f000 fed3 	bl	8004364 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035be:	4b1f      	ldr	r3, [pc, #124]	; (800363c <xTaskCheckForTimeOut+0xc4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d6:	d102      	bne.n	80035de <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e026      	b.n	800362c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <xTaskCheckForTimeOut+0xc8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d00a      	beq.n	8003600 <xTaskCheckForTimeOut+0x88>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d305      	bcc.n	8003600 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e015      	b.n	800362c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	429a      	cmp	r2, r3
 8003608:	d20b      	bcs.n	8003622 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ff98 	bl	800354c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	e004      	b.n	800362c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800362c:	f000 feca 	bl	80043c4 <vPortExitCritical>

    return xReturn;
 8003630:	69fb      	ldr	r3, [r7, #28]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000198 	.word	0x20000198
 8003640:	200001ac 	.word	0x200001ac

08003644 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <vTaskMissedYield+0x14>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	200001a8 	.word	0x200001a8

0800365c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003664:	f000 f84c 	bl	8003700 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <prvIdleTask+0x20>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003678:	e7f4      	b.n	8003664 <prvIdleTask+0x8>
 800367a:	bf00      	nop
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e00c      	b.n	80036a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <prvInitialiseTaskLists+0x60>)
 8003698:	4413      	add	r3, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fd1a 	bl	80020d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d9ef      	bls.n	800368c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ae:	f7fe fd11 	bl	80020d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036b2:	480d      	ldr	r0, [pc, #52]	; (80036e8 <prvInitialiseTaskLists+0x68>)
 80036b4:	f7fe fd0e 	bl	80020d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036b8:	480c      	ldr	r0, [pc, #48]	; (80036ec <prvInitialiseTaskLists+0x6c>)
 80036ba:	f7fe fd0b 	bl	80020d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036be:	480c      	ldr	r0, [pc, #48]	; (80036f0 <prvInitialiseTaskLists+0x70>)
 80036c0:	f7fe fd08 	bl	80020d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <prvInitialiseTaskLists+0x74>)
 80036c6:	f7fe fd05 	bl	80020d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <prvInitialiseTaskLists+0x78>)
 80036cc:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <prvInitialiseTaskLists+0x7c>)
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <prvInitialiseTaskLists+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200000c0 	.word	0x200000c0
 80036e4:	20000124 	.word	0x20000124
 80036e8:	20000138 	.word	0x20000138
 80036ec:	20000154 	.word	0x20000154
 80036f0:	20000168 	.word	0x20000168
 80036f4:	20000180 	.word	0x20000180
 80036f8:	2000014c 	.word	0x2000014c
 80036fc:	20000150 	.word	0x20000150

08003700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003706:	e019      	b.n	800373c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003708:	f000 fe2c 	bl	8004364 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <prvCheckTasksWaitingTermination+0x50>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fd65 	bl	80021e8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003726:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 8003730:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003732:	f000 fe47 	bl	80043c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f810 	bl	800375c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e1      	bne.n	8003708 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000168 	.word	0x20000168
 8003754:	20000194 	.word	0x20000194
 8003758:	2000017c 	.word	0x2000017c

0800375c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	4618      	mov	r0, r3
 800376a:	f001 f807 	bl	800477c <vPortFree>
                vPortFree( pxTCB );
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 f804 	bl	800477c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <prvResetNextTaskUnblockTime+0x30>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d104      	bne.n	8003794 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <prvResetNextTaskUnblockTime+0x34>)
 800378c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003790:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003792:	e005      	b.n	80037a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <prvResetNextTaskUnblockTime+0x30>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <prvResetNextTaskUnblockTime+0x34>)
 800379e:	6013      	str	r3, [r2, #0]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	2000014c 	.word	0x2000014c
 80037b0:	200001b4 	.word	0x200001b4

080037b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <xTaskGetSchedulerState+0x34>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037c2:	2301      	movs	r3, #1
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	e008      	b.n	80037da <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <xTaskGetSchedulerState+0x38>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037d0:	2302      	movs	r3, #2
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	e001      	b.n	80037da <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037da:	687b      	ldr	r3, [r7, #4]
    }
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	200001a0 	.word	0x200001a0
 80037ec:	200001bc 	.word	0x200001bc

080037f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d068      	beq.n	80038d8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003806:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <xTaskPriorityDisinherit+0xf4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d00a      	beq.n	8003826 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
    }
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	60bb      	str	r3, [r7, #8]
    }
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003848:	1e5a      	subs	r2, r3, #1
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	429a      	cmp	r2, r3
 8003858:	d03e      	beq.n	80038d8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d13a      	bne.n	80038d8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	3304      	adds	r3, #4
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fcbe 	bl	80021e8 <uxListRemove>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	2201      	movs	r2, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43da      	mvns	r2, r3
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <xTaskPriorityDisinherit+0xf8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4013      	ands	r3, r2
 8003884:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <xTaskPriorityDisinherit+0xf8>)
 8003886:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4619      	mov	r1, r3
 800388c:	204a      	movs	r0, #74	; 0x4a
 800388e:	f001 fc3f 	bl	8005110 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	f1c3 0205 	rsb	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	2201      	movs	r2, #1
 80038ac:	409a      	lsls	r2, r3
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <xTaskPriorityDisinherit+0xf8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <xTaskPriorityDisinherit+0xf8>)
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4a09      	ldr	r2, [pc, #36]	; (80038ec <xTaskPriorityDisinherit+0xfc>)
 80038c6:	441a      	add	r2, r3
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f7fe fc2d 	bl	800212e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80038d8:	697b      	ldr	r3, [r7, #20]
    }
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200000bc 	.word	0x200000bc
 80038e8:	2000019c 	.word	0x2000019c
 80038ec:	200000c0 	.word	0x200000c0

080038f0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038fa:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003900:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3304      	adds	r3, #4
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fc6e 	bl	80021e8 <uxListRemove>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003912:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	2201      	movs	r2, #1
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43da      	mvns	r2, r3
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4013      	ands	r3, r2
 8003926:	4a29      	ldr	r2, [pc, #164]	; (80039cc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003928:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003930:	d110      	bne.n	8003954 <prvAddCurrentTaskToDelayedList+0x64>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	211b      	movs	r1, #27
 800393e:	4618      	mov	r0, r3
 8003940:	f002 f984 	bl	8005c4c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003944:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3304      	adds	r3, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4820      	ldr	r0, [pc, #128]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800394e:	f7fe fbee 	bl	800212e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003952:	e032      	b.n	80039ba <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d20f      	bcs.n	800398c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800396c:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2104      	movs	r1, #4
 8003972:	4618      	mov	r0, r3
 8003974:	f002 f96a 	bl	8005c4c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3304      	adds	r3, #4
 8003982:	4619      	mov	r1, r3
 8003984:	4610      	mov	r0, r2
 8003986:	f7fe fbf6 	bl	8002176 <vListInsert>
}
 800398a:	e016      	b.n	80039ba <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2104      	movs	r1, #4
 8003992:	4618      	mov	r0, r3
 8003994:	f002 f95a 	bl	8005c4c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f7fe fbe6 	bl	8002176 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <prvAddCurrentTaskToDelayedList+0xec>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d202      	bcs.n	80039ba <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80039b4:	4a09      	ldr	r2, [pc, #36]	; (80039dc <prvAddCurrentTaskToDelayedList+0xec>)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6013      	str	r3, [r2, #0]
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000198 	.word	0x20000198
 80039c8:	200000bc 	.word	0x200000bc
 80039cc:	2000019c 	.word	0x2000019c
 80039d0:	20000180 	.word	0x20000180
 80039d4:	20000150 	.word	0x20000150
 80039d8:	2000014c 	.word	0x2000014c
 80039dc:	200001b4 	.word	0x200001b4

080039e0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039ea:	f000 fad5 	bl	8003f98 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <xTimerCreateTimerTask+0x54>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <xTimerCreateTimerTask+0x58>)
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	2302      	movs	r3, #2
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2300      	movs	r3, #0
 8003a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a04:	490d      	ldr	r1, [pc, #52]	; (8003a3c <xTimerCreateTimerTask+0x5c>)
 8003a06:	480e      	ldr	r0, [pc, #56]	; (8003a40 <xTimerCreateTimerTask+0x60>)
 8003a08:	f7ff f944 	bl	8002c94 <xTaskCreate>
 8003a0c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	603b      	str	r3, [r7, #0]
    }
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003a2a:	687b      	ldr	r3, [r7, #4]
    }
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	200001f0 	.word	0x200001f0
 8003a38:	200001f4 	.word	0x200001f4
 8003a3c:	08006080 	.word	0x08006080
 8003a40:	08003b79 	.word	0x08003b79

08003a44 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	623b      	str	r3, [r7, #32]
    }
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a72:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <xTimerGenericCommand+0x98>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d02a      	beq.n	8003ad0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	dc18      	bgt.n	8003abe <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a8c:	f7ff fe92 	bl	80037b4 <xTaskGetSchedulerState>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d109      	bne.n	8003aaa <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <xTimerGenericCommand+0x98>)
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f107 0114 	add.w	r1, r7, #20
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa2:	f7fe fcaf 	bl	8002404 <xQueueGenericSend>
 8003aa6:	6278      	str	r0, [r7, #36]	; 0x24
 8003aa8:	e012      	b.n	8003ad0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <xTimerGenericCommand+0x98>)
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	f107 0114 	add.w	r1, r7, #20
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f7fe fca5 	bl	8002404 <xQueueGenericSend>
 8003aba:	6278      	str	r0, [r7, #36]	; 0x24
 8003abc:	e008      	b.n	8003ad0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <xTimerGenericCommand+0x98>)
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	f107 0114 	add.w	r1, r7, #20
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	f7fe fda9 	bl	8002620 <xQueueGenericSendFromISR>
 8003ace:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3728      	adds	r7, #40	; 0x28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200001f0 	.word	0x200001f0

08003ae0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <prvProcessExpiredTimer+0x94>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fb75 	bl	80021e8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d022      	beq.n	8003b52 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	18d1      	adds	r1, r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	6978      	ldr	r0, [r7, #20]
 8003b1a:	f000 f8d1 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01f      	beq.n	8003b64 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b24:	2300      	movs	r3, #0
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff88 	bl	8003a44 <xTimerGenericCommand>
 8003b34:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d113      	bne.n	8003b64 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	60fb      	str	r3, [r7, #12]
    }
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	6978      	ldr	r0, [r7, #20]
 8003b6a:	4798      	blx	r3
    }
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200001e8 	.word	0x200001e8

08003b78 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 f857 	bl	8003c38 <prvGetNextExpireTime>
 8003b8a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f803 	bl	8003b9c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b96:	f000 f8d5 	bl	8003d44 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b9a:	e7f1      	b.n	8003b80 <prvTimerTask+0x8>

08003b9c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ba6:	f7ff fa65 	bl	8003074 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f866 	bl	8003c80 <prvSampleTimeNow>
 8003bb4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d130      	bne.n	8003c1e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <prvProcessTimerOrBlockTask+0x3c>
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d806      	bhi.n	8003bd8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bca:	f7ff fa61 	bl	8003090 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff85 	bl	8003ae0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bd6:	e024      	b.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <prvProcessTimerOrBlockTask+0x90>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <prvProcessTimerOrBlockTask+0x50>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <prvProcessTimerOrBlockTask+0x52>
 8003bec:	2300      	movs	r3, #0
 8003bee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <prvProcessTimerOrBlockTask+0x94>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f7ff f815 	bl	8002c2c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c02:	f7ff fa45 	bl	8003090 <xTaskResumeAll>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <prvProcessTimerOrBlockTask+0x98>)
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	f3bf 8f6f 	isb	sy
    }
 8003c1c:	e001      	b.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c1e:	f7ff fa37 	bl	8003090 <xTaskResumeAll>
    }
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200001ec 	.word	0x200001ec
 8003c30:	200001f0 	.word	0x200001f0
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <prvGetNextExpireTime+0x44>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <prvGetNextExpireTime+0x16>
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	e000      	b.n	8003c50 <prvGetNextExpireTime+0x18>
 8003c4e:	2200      	movs	r2, #0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <prvGetNextExpireTime+0x44>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e001      	b.n	8003c6c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	200001e8 	.word	0x200001e8

08003c80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c88:	f7ff fa94 	bl	80031b4 <xTaskGetTickCount>
 8003c8c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <prvSampleTimeNow+0x3c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d205      	bcs.n	8003ca4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c98:	f000 f91a 	bl	8003ed0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003caa:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <prvSampleTimeNow+0x3c>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    }
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200001f8 	.word	0x200001f8

08003cc0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d812      	bhi.n	8003d0c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	1ad2      	subs	r2, r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e01b      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <prvInsertTimerInActiveList+0x7c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe fa36 	bl	8002176 <vListInsert>
 8003d0a:	e012      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d206      	bcs.n	8003d22 <prvInsertTimerInActiveList+0x62>
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d302      	bcc.n	8003d22 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e007      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <prvInsertTimerInActiveList+0x80>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fa22 	bl	8002176 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d32:	697b      	ldr	r3, [r7, #20]
    }
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200001ec 	.word	0x200001ec
 8003d40:	200001e8 	.word	0x200001e8

08003d44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08c      	sub	sp, #48	; 0x30
 8003d48:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d4a:	e0ae      	b.n	8003eaa <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f2c0 80aa 	blt.w	8003ea8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	3304      	adds	r3, #4
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fa3f 	bl	80021e8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff87 	bl	8003c80 <prvSampleTimeNow>
 8003d72:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b09      	cmp	r3, #9
 8003d78:	f200 8097 	bhi.w	8003eaa <prvProcessReceivedCommands+0x166>
 8003d7c:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <prvProcessReceivedCommands+0x40>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003dad 	.word	0x08003dad
 8003d8c:	08003dad 	.word	0x08003dad
 8003d90:	08003e21 	.word	0x08003e21
 8003d94:	08003e35 	.word	0x08003e35
 8003d98:	08003e7f 	.word	0x08003e7f
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003dad 	.word	0x08003dad
 8003da4:	08003e21 	.word	0x08003e21
 8003da8:	08003e35 	.word	0x08003e35
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	18d1      	adds	r1, r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a3a      	ldr	r2, [r7, #32]
 8003dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dcc:	f7ff ff78 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d069      	beq.n	8003eaa <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ddc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05e      	beq.n	8003eaa <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	441a      	add	r2, r3
 8003df4:	2300      	movs	r3, #0
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dfe:	f7ff fe21 	bl	8003a44 <xTimerGenericCommand>
 8003e02:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d14f      	bne.n	8003eaa <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	61bb      	str	r3, [r7, #24]
    }
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e32:	e03a      	b.n	8003eaa <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	617b      	str	r3, [r7, #20]
    }
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	18d1      	adds	r1, r2, r3
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e78:	f7ff ff22 	bl	8003cc0 <prvInsertTimerInActiveList>
                        break;
 8003e7c:	e015      	b.n	8003eaa <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e8e:	f000 fc75 	bl	800477c <vPortFree>
 8003e92:	e00a      	b.n	8003eaa <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ea6:	e000      	b.n	8003eaa <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ea8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <prvProcessReceivedCommands+0x188>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f107 0108 	add.w	r1, r7, #8
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fc71 	bl	800279c <xQueueReceive>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f47f af45 	bne.w	8003d4c <prvProcessReceivedCommands+0x8>
        }
    }
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	200001f0 	.word	0x200001f0

08003ed0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ed6:	e048      	b.n	8003f6a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ed8:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <prvSwitchTimerLists+0xc0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <prvSwitchTimerLists+0xc0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe f979 	bl	80021e8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d02e      	beq.n	8003f6a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d90e      	bls.n	8003f3c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f2a:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <prvSwitchTimerLists+0xc0>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7fe f91e 	bl	8002176 <vListInsert>
 8003f3a:	e016      	b.n	8003f6a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2300      	movs	r3, #0
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	2100      	movs	r1, #0
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fd7c 	bl	8003a44 <xTimerGenericCommand>
 8003f4c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	603b      	str	r3, [r7, #0]
    }
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <prvSwitchTimerLists+0xc0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1b1      	bne.n	8003ed8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <prvSwitchTimerLists+0xc0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <prvSwitchTimerLists+0xc4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <prvSwitchTimerLists+0xc0>)
 8003f80:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f82:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <prvSwitchTimerLists+0xc4>)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6013      	str	r3, [r2, #0]
    }
 8003f88:	bf00      	nop
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	200001e8 	.word	0x200001e8
 8003f94:	200001ec 	.word	0x200001ec

08003f98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f9c:	f000 f9e2 	bl	8004364 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <prvCheckForValidListAndQueue+0x54>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d11d      	bne.n	8003fe4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003fa8:	4811      	ldr	r0, [pc, #68]	; (8003ff0 <prvCheckForValidListAndQueue+0x58>)
 8003faa:	f7fe f893 	bl	80020d4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003fae:	4811      	ldr	r0, [pc, #68]	; (8003ff4 <prvCheckForValidListAndQueue+0x5c>)
 8003fb0:	f7fe f890 	bl	80020d4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <prvCheckForValidListAndQueue+0x60>)
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <prvCheckForValidListAndQueue+0x58>)
 8003fb8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <prvCheckForValidListAndQueue+0x64>)
 8003fbc:	4a0d      	ldr	r2, [pc, #52]	; (8003ff4 <prvCheckForValidListAndQueue+0x5c>)
 8003fbe:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	210c      	movs	r1, #12
 8003fc4:	200a      	movs	r0, #10
 8003fc6:	f7fe f994 	bl	80022f2 <xQueueGenericCreate>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4a07      	ldr	r2, [pc, #28]	; (8003fec <prvCheckForValidListAndQueue+0x54>)
 8003fce:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <prvCheckForValidListAndQueue+0x54>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <prvCheckForValidListAndQueue+0x54>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4908      	ldr	r1, [pc, #32]	; (8004000 <prvCheckForValidListAndQueue+0x68>)
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fdf2 	bl	8002bc8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fe4:	f000 f9ee 	bl	80043c4 <vPortExitCritical>
    }
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200001f0 	.word	0x200001f0
 8003ff0:	200001c0 	.word	0x200001c0
 8003ff4:	200001d4 	.word	0x200001d4
 8003ff8:	200001e8 	.word	0x200001e8
 8003ffc:	200001ec 	.word	0x200001ec
 8004000:	08006088 	.word	0x08006088

08004004 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3b04      	subs	r3, #4
 8004014:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800401c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b04      	subs	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0201 	bic.w	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b04      	subs	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004034:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <pxPortInitialiseStack+0x64>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3b14      	subs	r3, #20
 800403e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3b04      	subs	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f06f 0202 	mvn.w	r2, #2
 8004052:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3b20      	subs	r3, #32
 8004058:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800405a:	68fb      	ldr	r3, [r7, #12]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	0800406d 	.word	0x0800406d

0800406c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <prvTaskExitError+0x54>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407e:	d00a      	beq.n	8004096 <prvTaskExitError+0x2a>
        __asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
    }
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <prvTaskExitError+0x28>
        __asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	60bb      	str	r3, [r7, #8]
    }
 80040a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040aa:	bf00      	nop
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0fc      	beq.n	80040ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	20000010 	.word	0x20000010
	...

080040d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <pxCurrentTCBConst2>)
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	6808      	ldr	r0, [r1, #0]
 80040d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040da:	f380 8809 	msr	PSP, r0
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f380 8811 	msr	BASEPRI, r0
 80040ea:	4770      	bx	lr
 80040ec:	f3af 8000 	nop.w

080040f0 <pxCurrentTCBConst2>:
 80040f0:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop

080040f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040f8:	4808      	ldr	r0, [pc, #32]	; (800411c <prvPortStartFirstTask+0x24>)
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	6800      	ldr	r0, [r0, #0]
 80040fe:	f380 8808 	msr	MSP, r0
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8814 	msr	CONTROL, r0
 800410a:	b662      	cpsie	i
 800410c:	b661      	cpsie	f
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	df00      	svc	0
 8004118:	bf00      	nop
 800411a:	0000      	.short	0x0000
 800411c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop

08004124 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800412a:	4b46      	ldr	r3, [pc, #280]	; (8004244 <xPortStartScheduler+0x120>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a46      	ldr	r2, [pc, #280]	; (8004248 <xPortStartScheduler+0x124>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10a      	bne.n	800414a <xPortStartScheduler+0x26>
        __asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	613b      	str	r3, [r7, #16]
    }
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800414a:	4b3e      	ldr	r3, [pc, #248]	; (8004244 <xPortStartScheduler+0x120>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a3f      	ldr	r2, [pc, #252]	; (800424c <xPortStartScheduler+0x128>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d10a      	bne.n	800416a <xPortStartScheduler+0x46>
        __asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60fb      	str	r3, [r7, #12]
    }
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800416a:	4b39      	ldr	r3, [pc, #228]	; (8004250 <xPortStartScheduler+0x12c>)
 800416c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	22ff      	movs	r2, #255	; 0xff
 800417a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800418c:	b2da      	uxtb	r2, r3
 800418e:	4b31      	ldr	r3, [pc, #196]	; (8004254 <xPortStartScheduler+0x130>)
 8004190:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004192:	4b31      	ldr	r3, [pc, #196]	; (8004258 <xPortStartScheduler+0x134>)
 8004194:	2207      	movs	r2, #7
 8004196:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004198:	e009      	b.n	80041ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800419a:	4b2f      	ldr	r3, [pc, #188]	; (8004258 <xPortStartScheduler+0x134>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3b01      	subs	r3, #1
 80041a0:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <xPortStartScheduler+0x134>)
 80041a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d0ef      	beq.n	800419a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ba:	4b27      	ldr	r3, [pc, #156]	; (8004258 <xPortStartScheduler+0x134>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f1c3 0307 	rsb	r3, r3, #7
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d00a      	beq.n	80041dc <xPortStartScheduler+0xb8>
        __asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60bb      	str	r3, [r7, #8]
    }
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041dc:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <xPortStartScheduler+0x134>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <xPortStartScheduler+0x134>)
 80041e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <xPortStartScheduler+0x134>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ee:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <xPortStartScheduler+0x134>)
 80041f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041fa:	4b18      	ldr	r3, [pc, #96]	; (800425c <xPortStartScheduler+0x138>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a17      	ldr	r2, [pc, #92]	; (800425c <xPortStartScheduler+0x138>)
 8004200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004204:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <xPortStartScheduler+0x138>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a14      	ldr	r2, [pc, #80]	; (800425c <xPortStartScheduler+0x138>)
 800420c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004210:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004212:	f000 f963 	bl	80044dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <xPortStartScheduler+0x13c>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800421c:	f000 f982 	bl	8004524 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <xPortStartScheduler+0x140>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0f      	ldr	r2, [pc, #60]	; (8004264 <xPortStartScheduler+0x140>)
 8004226:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800422a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800422c:	f7ff ff64 	bl	80040f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004230:	f7ff f86a 	bl	8003308 <vTaskSwitchContext>
    prvTaskExitError();
 8004234:	f7ff ff1a 	bl	800406c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	e000ed00 	.word	0xe000ed00
 8004248:	410fc271 	.word	0x410fc271
 800424c:	410fc270 	.word	0x410fc270
 8004250:	e000e400 	.word	0xe000e400
 8004254:	200001fc 	.word	0x200001fc
 8004258:	20000200 	.word	0x20000200
 800425c:	e000ed20 	.word	0xe000ed20
 8004260:	20000010 	.word	0x20000010
 8004264:	e000ef34 	.word	0xe000ef34

08004268 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800426e:	4b37      	ldr	r3, [pc, #220]	; (800434c <vInitPrioGroupValue+0xe4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a37      	ldr	r2, [pc, #220]	; (8004350 <vInitPrioGroupValue+0xe8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10a      	bne.n	800428e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	613b      	str	r3, [r7, #16]
    }
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800428e:	4b2f      	ldr	r3, [pc, #188]	; (800434c <vInitPrioGroupValue+0xe4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a30      	ldr	r2, [pc, #192]	; (8004354 <vInitPrioGroupValue+0xec>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10a      	bne.n	80042ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	60fb      	str	r3, [r7, #12]
    }
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ae:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <vInitPrioGroupValue+0xf0>)
 80042b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	22ff      	movs	r2, #255	; 0xff
 80042be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	4b22      	ldr	r3, [pc, #136]	; (800435c <vInitPrioGroupValue+0xf4>)
 80042d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <vInitPrioGroupValue+0xf8>)
 80042d8:	2207      	movs	r2, #7
 80042da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042dc:	e009      	b.n	80042f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042de:	4b20      	ldr	r3, [pc, #128]	; (8004360 <vInitPrioGroupValue+0xf8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <vInitPrioGroupValue+0xf8>)
 80042e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d0ef      	beq.n	80042de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042fe:	4b18      	ldr	r3, [pc, #96]	; (8004360 <vInitPrioGroupValue+0xf8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1c3 0307 	rsb	r3, r3, #7
 8004306:	2b04      	cmp	r3, #4
 8004308:	d00a      	beq.n	8004320 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	60bb      	str	r3, [r7, #8]
    }
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <vInitPrioGroupValue+0xf8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	4a0e      	ldr	r2, [pc, #56]	; (8004360 <vInitPrioGroupValue+0xf8>)
 8004328:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <vInitPrioGroupValue+0xf8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004332:	4a0b      	ldr	r2, [pc, #44]	; (8004360 <vInitPrioGroupValue+0xf8>)
 8004334:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	b2da      	uxtb	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	e000ed00 	.word	0xe000ed00
 8004350:	410fc271 	.word	0x410fc271
 8004354:	410fc270 	.word	0x410fc270
 8004358:	e000e400 	.word	0xe000e400
 800435c:	200001fc 	.word	0x200001fc
 8004360:	20000200 	.word	0x20000200

08004364 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
        __asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	607b      	str	r3, [r7, #4]
    }
 800437c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <vPortEnterCritical+0x58>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <vPortEnterCritical+0x58>)
 8004386:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <vPortEnterCritical+0x58>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d10f      	bne.n	80043b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <vPortEnterCritical+0x5c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	603b      	str	r3, [r7, #0]
    }
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <vPortEnterCritical+0x4a>
    }
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	20000010 	.word	0x20000010
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <vPortExitCritical+0x50>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <vPortExitCritical+0x24>
        __asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	607b      	str	r3, [r7, #4]
    }
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <vPortExitCritical+0x50>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <vPortExitCritical+0x50>)
 80043f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <vPortExitCritical+0x50>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <vPortExitCritical+0x42>
 80043fa:	2300      	movs	r3, #0
 80043fc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f383 8811 	msr	BASEPRI, r3
    }
 8004404:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000010 	.word	0x20000010
	...

08004420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004420:	f3ef 8009 	mrs	r0, PSP
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <pxCurrentTCBConst>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f01e 0f10 	tst.w	lr, #16
 8004430:	bf08      	it	eq
 8004432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	6010      	str	r0, [r2, #0]
 800443c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004444:	f380 8811 	msr	BASEPRI, r0
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f7fe ff5a 	bl	8003308 <vTaskSwitchContext>
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f380 8811 	msr	BASEPRI, r0
 800445c:	bc09      	pop	{r0, r3}
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004466:	f01e 0f10 	tst.w	lr, #16
 800446a:	bf08      	it	eq
 800446c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004470:	f380 8809 	msr	PSP, r0
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst>:
 8004480:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
        __asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	607b      	str	r3, [r7, #4]
    }
 80044a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80044a2:	f001 fa77 	bl	8005994 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044a6:	f7fe fe95 	bl	80031d4 <xTaskIncrementTick>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d006      	beq.n	80044be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80044b0:	f001 face 	bl	8005a50 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <SysTick_Handler+0x50>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e001      	b.n	80044c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80044be:	f001 faab 	bl	8005a18 <SEGGER_SYSVIEW_RecordExitISR>
 80044c2:	2300      	movs	r3, #0
 80044c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f383 8811 	msr	BASEPRI, r3
    }
 80044cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <vPortSetupTimerInterrupt+0x34>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <vPortSetupTimerInterrupt+0x38>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <vPortSetupTimerInterrupt+0x3c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0a      	ldr	r2, [pc, #40]	; (800451c <vPortSetupTimerInterrupt+0x40>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	4a09      	ldr	r2, [pc, #36]	; (8004520 <vPortSetupTimerInterrupt+0x44>)
 80044fa:	3b01      	subs	r3, #1
 80044fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <vPortSetupTimerInterrupt+0x34>)
 8004500:	2207      	movs	r2, #7
 8004502:	601a      	str	r2, [r3, #0]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	e000e010 	.word	0xe000e010
 8004514:	e000e018 	.word	0xe000e018
 8004518:	20000000 	.word	0x20000000
 800451c:	10624dd3 	.word	0x10624dd3
 8004520:	e000e014 	.word	0xe000e014

08004524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004534 <vPortEnableVFP+0x10>
 8004528:	6801      	ldr	r1, [r0, #0]
 800452a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800452e:	6001      	str	r1, [r0, #0]
 8004530:	4770      	bx	lr
 8004532:	0000      	.short	0x0000
 8004534:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop

0800453c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004542:	f3ef 8305 	mrs	r3, IPSR
 8004546:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b0f      	cmp	r3, #15
 800454c:	d914      	bls.n	8004578 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800454e:	4a17      	ldr	r2, [pc, #92]	; (80045ac <vPortValidateInterruptPriority+0x70>)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <vPortValidateInterruptPriority+0x74>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	7afa      	ldrb	r2, [r7, #11]
 800455e:	429a      	cmp	r2, r3
 8004560:	d20a      	bcs.n	8004578 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	607b      	str	r3, [r7, #4]
    }
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <vPortValidateInterruptPriority+0x78>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004580:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <vPortValidateInterruptPriority+0x7c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d90a      	bls.n	800459e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	603b      	str	r3, [r7, #0]
    }
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <vPortValidateInterruptPriority+0x60>
    }
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	e000e3f0 	.word	0xe000e3f0
 80045b0:	200001fc 	.word	0x200001fc
 80045b4:	e000ed0c 	.word	0xe000ed0c
 80045b8:	20000200 	.word	0x20000200

080045bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80045c8:	f7fe fd54 	bl	8003074 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045cc:	4b65      	ldr	r3, [pc, #404]	; (8004764 <pvPortMalloc+0x1a8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80045d4:	f000 f934 	bl	8004840 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045d8:	4b63      	ldr	r3, [pc, #396]	; (8004768 <pvPortMalloc+0x1ac>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4013      	ands	r3, r2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f040 80a7 	bne.w	8004734 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02d      	beq.n	8004648 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045ec:	2208      	movs	r2, #8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d227      	bcs.n	8004648 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80045f8:	2208      	movs	r2, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	2b00      	cmp	r3, #0
 8004608:	d021      	beq.n	800464e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f023 0307 	bic.w	r3, r3, #7
 8004610:	3308      	adds	r3, #8
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d214      	bcs.n	8004642 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f023 0307 	bic.w	r3, r3, #7
 800461e:	3308      	adds	r3, #8
 8004620:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	2b00      	cmp	r3, #0
 800462a:	d010      	beq.n	800464e <pvPortMalloc+0x92>
        __asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	617b      	str	r3, [r7, #20]
    }
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004646:	e002      	b.n	800464e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	e000      	b.n	8004650 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800464e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d06e      	beq.n	8004734 <pvPortMalloc+0x178>
 8004656:	4b45      	ldr	r3, [pc, #276]	; (800476c <pvPortMalloc+0x1b0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d869      	bhi.n	8004734 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004660:	4b43      	ldr	r3, [pc, #268]	; (8004770 <pvPortMalloc+0x1b4>)
 8004662:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004664:	4b42      	ldr	r3, [pc, #264]	; (8004770 <pvPortMalloc+0x1b4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800466a:	e004      	b.n	8004676 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	429a      	cmp	r2, r3
 800467e:	d903      	bls.n	8004688 <pvPortMalloc+0xcc>
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f1      	bne.n	800466c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004688:	4b36      	ldr	r3, [pc, #216]	; (8004764 <pvPortMalloc+0x1a8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468e:	429a      	cmp	r2, r3
 8004690:	d050      	beq.n	8004734 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2208      	movs	r2, #8
 8004698:	4413      	add	r3, r2
 800469a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	2308      	movs	r3, #8
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d91f      	bls.n	80046f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <pvPortMalloc+0x120>
        __asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	613b      	str	r3, [r7, #16]
    }
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	1ad2      	subs	r2, r2, r3
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046ee:	69b8      	ldr	r0, [r7, #24]
 80046f0:	f000 f908 	bl	8004904 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046f4:	4b1d      	ldr	r3, [pc, #116]	; (800476c <pvPortMalloc+0x1b0>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	4a1b      	ldr	r2, [pc, #108]	; (800476c <pvPortMalloc+0x1b0>)
 8004700:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004702:	4b1a      	ldr	r3, [pc, #104]	; (800476c <pvPortMalloc+0x1b0>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <pvPortMalloc+0x1b8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d203      	bcs.n	8004716 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <pvPortMalloc+0x1b0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a18      	ldr	r2, [pc, #96]	; (8004774 <pvPortMalloc+0x1b8>)
 8004714:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	4b13      	ldr	r3, [pc, #76]	; (8004768 <pvPortMalloc+0x1ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	431a      	orrs	r2, r3
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <pvPortMalloc+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	4a11      	ldr	r2, [pc, #68]	; (8004778 <pvPortMalloc+0x1bc>)
 8004732:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004734:	f7fe fcac 	bl	8003090 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <pvPortMalloc+0x19c>
        __asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60fb      	str	r3, [r7, #12]
    }
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <pvPortMalloc+0x19a>
    return pvReturn;
 8004758:	69fb      	ldr	r3, [r7, #28]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3728      	adds	r7, #40	; 0x28
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20012e0c 	.word	0x20012e0c
 8004768:	20012e20 	.word	0x20012e20
 800476c:	20012e10 	.word	0x20012e10
 8004770:	20012e04 	.word	0x20012e04
 8004774:	20012e14 	.word	0x20012e14
 8004778:	20012e18 	.word	0x20012e18

0800477c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04d      	beq.n	800482a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800478e:	2308      	movs	r3, #8
 8004790:	425b      	negs	r3, r3
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4413      	add	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	4b24      	ldr	r3, [pc, #144]	; (8004834 <vPortFree+0xb8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <vPortFree+0x44>
        __asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	60fb      	str	r3, [r7, #12]
    }
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <vPortFree+0x62>
        __asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60bb      	str	r3, [r7, #8]
    }
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <vPortFree+0xb8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01e      	beq.n	800482a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d11a      	bne.n	800482a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <vPortFree+0xb8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	401a      	ands	r2, r3
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004804:	f7fe fc36 	bl	8003074 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <vPortFree+0xbc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4413      	add	r3, r2
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <vPortFree+0xbc>)
 8004814:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004816:	6938      	ldr	r0, [r7, #16]
 8004818:	f000 f874 	bl	8004904 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <vPortFree+0xc0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3301      	adds	r3, #1
 8004822:	4a06      	ldr	r2, [pc, #24]	; (800483c <vPortFree+0xc0>)
 8004824:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004826:	f7fe fc33 	bl	8003090 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800482a:	bf00      	nop
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20012e20 	.word	0x20012e20
 8004838:	20012e10 	.word	0x20012e10
 800483c:	20012e1c 	.word	0x20012e1c

08004840 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004846:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800484a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800484c:	4b27      	ldr	r3, [pc, #156]	; (80048ec <prvHeapInit+0xac>)
 800484e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00c      	beq.n	8004874 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3307      	adds	r3, #7
 800485e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0307 	bic.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	4a1f      	ldr	r2, [pc, #124]	; (80048ec <prvHeapInit+0xac>)
 8004870:	4413      	add	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004878:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <prvHeapInit+0xb0>)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800487e:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <prvHeapInit+0xb0>)
 8004880:	2200      	movs	r2, #0
 8004882:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4413      	add	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800488c:	2208      	movs	r2, #8
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0307 	bic.w	r3, r3, #7
 800489a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a15      	ldr	r2, [pc, #84]	; (80048f4 <prvHeapInit+0xb4>)
 80048a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <prvHeapInit+0xb4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <prvHeapInit+0xb4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <prvHeapInit+0xb4>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <prvHeapInit+0xb8>)
 80048ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a09      	ldr	r2, [pc, #36]	; (80048fc <prvHeapInit+0xbc>)
 80048d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <prvHeapInit+0xc0>)
 80048da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048de:	601a      	str	r2, [r3, #0]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	20000204 	.word	0x20000204
 80048f0:	20012e04 	.word	0x20012e04
 80048f4:	20012e0c 	.word	0x20012e0c
 80048f8:	20012e14 	.word	0x20012e14
 80048fc:	20012e10 	.word	0x20012e10
 8004900:	20012e20 	.word	0x20012e20

08004904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800490c:	4b28      	ldr	r3, [pc, #160]	; (80049b0 <prvInsertBlockIntoFreeList+0xac>)
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	e002      	b.n	8004918 <prvInsertBlockIntoFreeList+0x14>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	429a      	cmp	r2, r3
 8004920:	d8f7      	bhi.n	8004912 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	4413      	add	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d108      	bne.n	8004946 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	441a      	add	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	441a      	add	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d118      	bne.n	800498c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d00d      	beq.n	8004982 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e008      	b.n	8004994 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e003      	b.n	8004994 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d002      	beq.n	80049a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20012e04 	.word	0x20012e04
 80049b4:	20012e0c 	.word	0x20012e0c

080049b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80049c6:	2205      	movs	r2, #5
 80049c8:	492b      	ldr	r1, [pc, #172]	; (8004a78 <SYSVIEW_AddTask+0xc0>)
 80049ca:	68b8      	ldr	r0, [r7, #8]
 80049cc:	f001 fb0a 	bl	8005fe4 <memcmp>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d04b      	beq.n	8004a6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <SYSVIEW_AddTask+0xc4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b07      	cmp	r3, #7
 80049dc:	d903      	bls.n	80049e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80049de:	4828      	ldr	r0, [pc, #160]	; (8004a80 <SYSVIEW_AddTask+0xc8>)
 80049e0:	f001 fa80 	bl	8005ee4 <SEGGER_SYSVIEW_Warn>
    return;
 80049e4:	e044      	b.n	8004a70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80049e6:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <SYSVIEW_AddTask+0xc4>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4926      	ldr	r1, [pc, #152]	; (8004a84 <SYSVIEW_AddTask+0xcc>)
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80049fa:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <SYSVIEW_AddTask+0xc4>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4921      	ldr	r1, [pc, #132]	; (8004a84 <SYSVIEW_AddTask+0xcc>)
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004a10:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <SYSVIEW_AddTask+0xc4>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	491b      	ldr	r1, [pc, #108]	; (8004a84 <SYSVIEW_AddTask+0xcc>)
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	3308      	adds	r3, #8
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004a26:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <SYSVIEW_AddTask+0xc4>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4916      	ldr	r1, [pc, #88]	; (8004a84 <SYSVIEW_AddTask+0xcc>)
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	330c      	adds	r3, #12
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <SYSVIEW_AddTask+0xc4>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4910      	ldr	r1, [pc, #64]	; (8004a84 <SYSVIEW_AddTask+0xcc>)
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3310      	adds	r3, #16
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <SYSVIEW_AddTask+0xc4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <SYSVIEW_AddTask+0xc4>)
 8004a5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f80e 	bl	8004a88 <SYSVIEW_SendTaskInfo>
 8004a6c:	e000      	b.n	8004a70 <SYSVIEW_AddTask+0xb8>
    return;
 8004a6e:	bf00      	nop

}
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	08006090 	.word	0x08006090
 8004a7c:	20012ec4 	.word	0x20012ec4
 8004a80:	08006098 	.word	0x08006098
 8004a84:	20012e24 	.word	0x20012e24

08004a88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004a96:	f107 0314 	add.w	r3, r7, #20
 8004a9a:	2214      	movs	r2, #20
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 fabe 	bl	8006020 <memset>
  TaskInfo.TaskID     = TaskID;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fe3f 	bl	8005740 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ac2:	bf00      	nop
 8004ac4:	3728      	adds	r7, #40	; 0x28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004ad2:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <_DoInit+0x98>)
 8004ad4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2203      	movs	r2, #3
 8004ae0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <_DoInit+0x9c>)
 8004ae6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <_DoInit+0xa0>)
 8004aec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004af4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <_DoInit+0x9c>)
 8004b0c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <_DoInit+0xa4>)
 8004b12:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2210      	movs	r2, #16
 8004b18:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3307      	adds	r3, #7
 8004b30:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <_DoInit+0xa8>)
 8004b32:	6810      	ldr	r0, [r2, #0]
 8004b34:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b36:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <_DoInit+0xac>)
 8004b3e:	6810      	ldr	r0, [r2, #0]
 8004b40:	6018      	str	r0, [r3, #0]
 8004b42:	8891      	ldrh	r1, [r2, #4]
 8004b44:	7992      	ldrb	r2, [r2, #6]
 8004b46:	8099      	strh	r1, [r3, #4]
 8004b48:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b4a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b54:	f3bf 8f5f 	dmb	sy
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	20012ec8 	.word	0x20012ec8
 8004b68:	080060e8 	.word	0x080060e8
 8004b6c:	20012f70 	.word	0x20012f70
 8004b70:	20013370 	.word	0x20013370
 8004b74:	080060f4 	.word	0x080060f4
 8004b78:	080060f8 	.word	0x080060f8

08004b7c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08c      	sub	sp, #48	; 0x30
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004b88:	4b3e      	ldr	r3, [pc, #248]	; (8004c84 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b8a:	623b      	str	r3, [r7, #32]
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <SEGGER_RTT_ReadNoLock+0x1e>
 8004b96:	f7ff ff99 	bl	8004acc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	3360      	adds	r3, #96	; 0x60
 8004ba6:	4a37      	ldr	r2, [pc, #220]	; (8004c84 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ba8:	4413      	add	r3, r2
 8004baa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d92b      	bls.n	8004c20 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	bf28      	it	cs
 8004bda:	4613      	movcs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	4413      	add	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	6939      	ldr	r1, [r7, #16]
 8004bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bee:	f001 fa09 	bl	8006004 <memcpy>
    NumBytesRead += NumBytesRem;
 8004bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	4413      	add	r3, r2
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d101      	bne.n	8004c20 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	bf28      	it	cs
 8004c30:	4613      	movcs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d019      	beq.n	8004c6e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	4413      	add	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	6939      	ldr	r1, [r7, #16]
 8004c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c4a:	f001 f9db 	bl	8006004 <memcpy>
    NumBytesRead += NumBytesRem;
 8004c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	4413      	add	r3, r2
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c78:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3730      	adds	r7, #48	; 0x30
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20012ec8 	.word	0x20012ec8

08004c88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00f      	beq.n	8004cbe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004c9e:	e002      	b.n	8004ca6 <_EncodeStr+0x1e>
      Len++;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4413      	add	r3, r2
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f6      	bne.n	8004ca0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d901      	bls.n	8004cbe <_EncodeStr+0x36>
      Len = Limit;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2bfe      	cmp	r3, #254	; 0xfe
 8004cc2:	d806      	bhi.n	8004cd2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	60fa      	str	r2, [r7, #12]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e011      	b.n	8004cf6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	60fa      	str	r2, [r7, #12]
 8004cd8:	22ff      	movs	r2, #255	; 0xff
 8004cda:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	60fa      	str	r2, [r7, #12]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	0a19      	lsrs	r1, r3, #8
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	60fa      	str	r2, [r7, #12]
 8004cf2:	b2ca      	uxtb	r2, r1
 8004cf4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004cfa:	e00a      	b.n	8004d12 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	1c53      	adds	r3, r2, #1
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1c59      	adds	r1, r3, #1
 8004d06:	60f9      	str	r1, [r7, #12]
 8004d08:	7812      	ldrb	r2, [r2, #0]
 8004d0a:	701a      	strb	r2, [r3, #0]
    n++;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d3f0      	bcc.n	8004cfc <_EncodeStr+0x74>
  }
  return pPayload;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d46:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <_HandleIncomingPacket+0xe0>)
 8004d48:	7e1b      	ldrb	r3, [r3, #24]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	1cfb      	adds	r3, r7, #3
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4619      	mov	r1, r3
 8004d52:	f7ff ff13 	bl	8004b7c <SEGGER_RTT_ReadNoLock>
 8004d56:	4603      	mov	r3, r0
 8004d58:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	dd54      	ble.n	8004e0a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	2b80      	cmp	r3, #128	; 0x80
 8004d64:	d032      	beq.n	8004dcc <_HandleIncomingPacket+0x8c>
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	dc42      	bgt.n	8004df0 <_HandleIncomingPacket+0xb0>
 8004d6a:	2b07      	cmp	r3, #7
 8004d6c:	dc16      	bgt.n	8004d9c <_HandleIncomingPacket+0x5c>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dd3e      	ble.n	8004df0 <_HandleIncomingPacket+0xb0>
 8004d72:	3b01      	subs	r3, #1
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d83b      	bhi.n	8004df0 <_HandleIncomingPacket+0xb0>
 8004d78:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <_HandleIncomingPacket+0x40>)
 8004d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7e:	bf00      	nop
 8004d80:	08004da3 	.word	0x08004da3
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004daf 	.word	0x08004daf
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004dbb 	.word	0x08004dbb
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	08004dc7 	.word	0x08004dc7
 8004d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9e:	d036      	beq.n	8004e0e <_HandleIncomingPacket+0xce>
 8004da0:	e026      	b.n	8004df0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004da2:	f000 fb53 	bl	800544c <SEGGER_SYSVIEW_Start>
      break;
 8004da6:	e037      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004da8:	f000 fc0a 	bl	80055c0 <SEGGER_SYSVIEW_Stop>
      break;
 8004dac:	e034      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004dae:	f000 fdbf 	bl	8005930 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004db2:	e031      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004db4:	f000 fda8 	bl	8005908 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004db8:	e02e      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004dba:	f000 fc27 	bl	800560c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004dbe:	e02b      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004dc0:	f001 f852 	bl	8005e68 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004dc4:	e028      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004dc6:	f001 f831 	bl	8005e2c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004dca:	e025      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004dcc:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <_HandleIncomingPacket+0xe0>)
 8004dce:	7e1b      	ldrb	r3, [r3, #24]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	1cfb      	adds	r3, r7, #3
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	f7ff fed0 	bl	8004b7c <SEGGER_RTT_ReadNoLock>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	dd15      	ble.n	8004e12 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 ff9f 	bl	8005d2c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004dee:	e010      	b.n	8004e12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	b25b      	sxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da0e      	bge.n	8004e16 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <_HandleIncomingPacket+0xe0>)
 8004dfa:	7e1b      	ldrb	r3, [r3, #24]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	1cfb      	adds	r3, r7, #3
 8004e00:	2201      	movs	r2, #1
 8004e02:	4619      	mov	r1, r3
 8004e04:	f7ff feba 	bl	8004b7c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004e08:	e005      	b.n	8004e16 <_HandleIncomingPacket+0xd6>
    }
  }
 8004e0a:	bf00      	nop
 8004e0c:	e004      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e002      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
      break;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <_HandleIncomingPacket+0xd8>
      break;
 8004e16:	bf00      	nop
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20013380 	.word	0x20013380

08004e24 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08c      	sub	sp, #48	; 0x30
 8004e28:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004e2e:	1d3b      	adds	r3, r7, #4
 8004e30:	3301      	adds	r3, #1
 8004e32:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e38:	4b31      	ldr	r3, [pc, #196]	; (8004f00 <_TrySendOverflowPacket+0xdc>)
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3e:	e00b      	b.n	8004e58 <_TrySendOverflowPacket+0x34>
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	1c59      	adds	r1, r3, #1
 8004e48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	09db      	lsrs	r3, r3, #7
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e5c:	d8f0      	bhi.n	8004e40 <_TrySendOverflowPacket+0x1c>
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e6e:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <_TrySendOverflowPacket+0xe0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e74:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <_TrySendOverflowPacket+0xdc>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	623b      	str	r3, [r7, #32]
 8004e86:	e00b      	b.n	8004ea0 <_TrySendOverflowPacket+0x7c>
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	6279      	str	r1, [r7, #36]	; 0x24
 8004e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	09db      	lsrs	r3, r3, #7
 8004e9e:	623b      	str	r3, [r7, #32]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea4:	d8f0      	bhi.n	8004e88 <_TrySendOverflowPacket+0x64>
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	627a      	str	r2, [r7, #36]	; 0x24
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <_TrySendOverflowPacket+0xdc>)
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	1d3b      	adds	r3, r7, #4
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f7fb f982 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <_TrySendOverflowPacket+0xdc>)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004edc:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <_TrySendOverflowPacket+0xdc>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <_TrySendOverflowPacket+0xdc>)
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	e004      	b.n	8004ef4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <_TrySendOverflowPacket+0xdc>)
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	4a03      	ldr	r2, [pc, #12]	; (8004f00 <_TrySendOverflowPacket+0xdc>)
 8004ef2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004ef4:	693b      	ldr	r3, [r7, #16]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3730      	adds	r7, #48	; 0x30
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20013380 	.word	0x20013380
 8004f04:	e0001004 	.word	0xe0001004

08004f08 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004f14:	4b6c      	ldr	r3, [pc, #432]	; (80050c8 <_SendPacket+0x1c0>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d010      	beq.n	8004f3e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004f1c:	4b6a      	ldr	r3, [pc, #424]	; (80050c8 <_SendPacket+0x1c0>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a3 	beq.w	800506c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004f26:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <_SendPacket+0x1c0>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d109      	bne.n	8004f42 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004f2e:	f7ff ff79 	bl	8004e24 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004f32:	4b65      	ldr	r3, [pc, #404]	; (80050c8 <_SendPacket+0x1c0>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	f040 809a 	bne.w	8005070 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004f3c:	e001      	b.n	8004f42 <_SendPacket+0x3a>
    goto Send;
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <_SendPacket+0x3c>
Send:
 8004f42:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b1f      	cmp	r3, #31
 8004f48:	d809      	bhi.n	8004f5e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004f4a:	4b5f      	ldr	r3, [pc, #380]	; (80050c8 <_SendPacket+0x1c0>)
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 808b 	bne.w	8005074 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b17      	cmp	r3, #23
 8004f62:	d807      	bhi.n	8004f74 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e03d      	b.n	8004ff0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f80:	d912      	bls.n	8004fa8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	09da      	lsrs	r2, r3, #7
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	3a01      	subs	r2, #1
 8004f9a:	60fa      	str	r2, [r7, #12]
 8004f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	e006      	b.n	8004fb6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fba:	d912      	bls.n	8004fe2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	09da      	lsrs	r2, r3, #7
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	3a01      	subs	r2, #1
 8004fd4:	60fa      	str	r2, [r7, #12]
 8004fd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e006      	b.n	8004ff0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ff0:	4b36      	ldr	r3, [pc, #216]	; (80050cc <_SendPacket+0x1c4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ff6:	4b34      	ldr	r3, [pc, #208]	; (80050c8 <_SendPacket+0x1c0>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	623b      	str	r3, [r7, #32]
 8005008:	e00b      	b.n	8005022 <_SendPacket+0x11a>
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	b2da      	uxtb	r2, r3
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	1c59      	adds	r1, r3, #1
 8005012:	6279      	str	r1, [r7, #36]	; 0x24
 8005014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	09db      	lsrs	r3, r3, #7
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	2b7f      	cmp	r3, #127	; 0x7f
 8005026:	d8f0      	bhi.n	800500a <_SendPacket+0x102>
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	627a      	str	r2, [r7, #36]	; 0x24
 800502e:	6a3a      	ldr	r2, [r7, #32]
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <_SendPacket+0x1c0>)
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	4618      	mov	r0, r3
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	461a      	mov	r2, r3
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	f7fb f8c2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800504c:	4603      	mov	r3, r0
 800504e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005056:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <_SendPacket+0x1c0>)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	60d3      	str	r3, [r2, #12]
 800505c:	e00b      	b.n	8005076 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800505e:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <_SendPacket+0x1c0>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	3301      	adds	r3, #1
 8005064:	b2da      	uxtb	r2, r3
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <_SendPacket+0x1c0>)
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	e004      	b.n	8005076 <_SendPacket+0x16e>
    goto SendDone;
 800506c:	bf00      	nop
 800506e:	e002      	b.n	8005076 <_SendPacket+0x16e>
      goto SendDone;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <_SendPacket+0x16e>
      goto SendDone;
 8005074:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005076:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <_SendPacket+0x1c0>)
 8005078:	7e1b      	ldrb	r3, [r3, #24]
 800507a:	4619      	mov	r1, r3
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <_SendPacket+0x1c8>)
 800507e:	460b      	mov	r3, r1
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	440b      	add	r3, r1
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	336c      	adds	r3, #108	; 0x6c
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <_SendPacket+0x1c0>)
 800508e:	7e1b      	ldrb	r3, [r3, #24]
 8005090:	4618      	mov	r0, r3
 8005092:	490f      	ldr	r1, [pc, #60]	; (80050d0 <_SendPacket+0x1c8>)
 8005094:	4603      	mov	r3, r0
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	4403      	add	r3, r0
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	440b      	add	r3, r1
 800509e:	3370      	adds	r3, #112	; 0x70
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d00b      	beq.n	80050be <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <_SendPacket+0x1c0>)
 80050a8:	789b      	ldrb	r3, [r3, #2]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d107      	bne.n	80050be <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <_SendPacket+0x1c0>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80050b4:	f7ff fe44 	bl	8004d40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80050b8:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <_SendPacket+0x1c0>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80050be:	bf00      	nop
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20013380 	.word	0x20013380
 80050cc:	e0001004 	.word	0xe0001004
 80050d0:	20012ec8 	.word	0x20012ec8

080050d4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050dc:	f3ef 8311 	mrs	r3, BASEPRI
 80050e0:	f04f 0120 	mov.w	r1, #32
 80050e4:	f381 8811 	msr	BASEPRI, r1
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	4808      	ldr	r0, [pc, #32]	; (800510c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80050ec:	f7ff fe1c 	bl	8004d28 <_PreparePacket>
 80050f0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	68b8      	ldr	r0, [r7, #8]
 80050f8:	f7ff ff06 	bl	8004f08 <_SendPacket>
  RECORD_END();
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f383 8811 	msr	BASEPRI, r3
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	200133b0 	.word	0x200133b0

08005110 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800511a:	f3ef 8311 	mrs	r3, BASEPRI
 800511e:	f04f 0120 	mov.w	r1, #32
 8005122:	f381 8811 	msr	BASEPRI, r1
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	4816      	ldr	r0, [pc, #88]	; (8005184 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800512a:	f7ff fdfd 	bl	8004d28 <_PreparePacket>
 800512e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e00b      	b.n	8005156 <SEGGER_SYSVIEW_RecordU32+0x46>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	1c59      	adds	r1, r3, #1
 8005146:	61f9      	str	r1, [r7, #28]
 8005148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	09db      	lsrs	r3, r3, #7
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b7f      	cmp	r3, #127	; 0x7f
 800515a:	d8f0      	bhi.n	800513e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	61fa      	str	r2, [r7, #28]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	6938      	ldr	r0, [r7, #16]
 8005172:	f7ff fec9 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f383 8811 	msr	BASEPRI, r3
}
 800517c:	bf00      	nop
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	200133b0 	.word	0x200133b0

08005188 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b08c      	sub	sp, #48	; 0x30
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005194:	f3ef 8311 	mrs	r3, BASEPRI
 8005198:	f04f 0120 	mov.w	r1, #32
 800519c:	f381 8811 	msr	BASEPRI, r1
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	4825      	ldr	r0, [pc, #148]	; (8005238 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80051a4:	f7ff fdc0 	bl	8004d28 <_PreparePacket>
 80051a8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b6:	e00b      	b.n	80051d0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	1c59      	adds	r1, r3, #1
 80051c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	09db      	lsrs	r3, r3, #7
 80051ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	2b7f      	cmp	r3, #127	; 0x7f
 80051d4:	d8f0      	bhi.n	80051b8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	e00b      	b.n	8005208 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	6279      	str	r1, [r7, #36]	; 0x24
 80051fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	09db      	lsrs	r3, r3, #7
 8005206:	623b      	str	r3, [r7, #32]
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	2b7f      	cmp	r3, #127	; 0x7f
 800520c:	d8f0      	bhi.n	80051f0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	627a      	str	r2, [r7, #36]	; 0x24
 8005214:	6a3a      	ldr	r2, [r7, #32]
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	6979      	ldr	r1, [r7, #20]
 8005222:	69b8      	ldr	r0, [r7, #24]
 8005224:	f7ff fe70 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f383 8811 	msr	BASEPRI, r3
}
 800522e:	bf00      	nop
 8005230:	3730      	adds	r7, #48	; 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200133b0 	.word	0x200133b0

0800523c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b08e      	sub	sp, #56	; 0x38
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800524a:	f3ef 8311 	mrs	r3, BASEPRI
 800524e:	f04f 0120 	mov.w	r1, #32
 8005252:	f381 8811 	msr	BASEPRI, r1
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	4832      	ldr	r0, [pc, #200]	; (8005324 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800525a:	f7ff fd65 	bl	8004d28 <_PreparePacket>
 800525e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	633b      	str	r3, [r7, #48]	; 0x30
 800526c:	e00b      	b.n	8005286 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	b2da      	uxtb	r2, r3
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	1c59      	adds	r1, r3, #1
 8005276:	6379      	str	r1, [r7, #52]	; 0x34
 8005278:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	09db      	lsrs	r3, r3, #7
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b7f      	cmp	r3, #127	; 0x7f
 800528a:	d8f0      	bhi.n	800526e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	637a      	str	r2, [r7, #52]	; 0x34
 8005292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a4:	e00b      	b.n	80052be <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	09db      	lsrs	r3, r3, #7
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	2b7f      	cmp	r3, #127	; 0x7f
 80052c2:	d8f0      	bhi.n	80052a6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	623b      	str	r3, [r7, #32]
 80052dc:	e00b      	b.n	80052f6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1c59      	adds	r1, r3, #1
 80052e6:	6279      	str	r1, [r7, #36]	; 0x24
 80052e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	09db      	lsrs	r3, r3, #7
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2b7f      	cmp	r3, #127	; 0x7f
 80052fa:	d8f0      	bhi.n	80052de <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	627a      	str	r2, [r7, #36]	; 0x24
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	6979      	ldr	r1, [r7, #20]
 8005310:	69b8      	ldr	r0, [r7, #24]
 8005312:	f7ff fdf9 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f383 8811 	msr	BASEPRI, r3
}
 800531c:	bf00      	nop
 800531e:	3738      	adds	r7, #56	; 0x38
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	200133b0 	.word	0x200133b0

08005328 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b090      	sub	sp, #64	; 0x40
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005336:	f3ef 8311 	mrs	r3, BASEPRI
 800533a:	f04f 0120 	mov.w	r1, #32
 800533e:	f381 8811 	msr	BASEPRI, r1
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	4840      	ldr	r0, [pc, #256]	; (8005448 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005346:	f7ff fcef 	bl	8004d28 <_PreparePacket>
 800534a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	63bb      	str	r3, [r7, #56]	; 0x38
 8005358:	e00b      	b.n	8005372 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	b2da      	uxtb	r2, r3
 800535e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005360:	1c59      	adds	r1, r3, #1
 8005362:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005364:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	09db      	lsrs	r3, r3, #7
 8005370:	63bb      	str	r3, [r7, #56]	; 0x38
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2b7f      	cmp	r3, #127	; 0x7f
 8005376:	d8f0      	bhi.n	800535a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800537e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005386:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	637b      	str	r3, [r7, #52]	; 0x34
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
 8005390:	e00b      	b.n	80053aa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	b2da      	uxtb	r2, r3
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	1c59      	adds	r1, r3, #1
 800539a:	6379      	str	r1, [r7, #52]	; 0x34
 800539c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	09db      	lsrs	r3, r3, #7
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	2b7f      	cmp	r3, #127	; 0x7f
 80053ae:	d8f0      	bhi.n	8005392 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	637a      	str	r2, [r7, #52]	; 0x34
 80053b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c8:	e00b      	b.n	80053e2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	1c59      	adds	r1, r3, #1
 80053d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	09db      	lsrs	r3, r3, #7
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	2b7f      	cmp	r3, #127	; 0x7f
 80053e6:	d8f0      	bhi.n	80053ca <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
 80053fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	e00b      	b.n	800541a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1c59      	adds	r1, r3, #1
 800540a:	6279      	str	r1, [r7, #36]	; 0x24
 800540c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	09db      	lsrs	r3, r3, #7
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	2b7f      	cmp	r3, #127	; 0x7f
 800541e:	d8f0      	bhi.n	8005402 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	627a      	str	r2, [r7, #36]	; 0x24
 8005426:	6a3a      	ldr	r2, [r7, #32]
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	69b8      	ldr	r0, [r7, #24]
 8005436:	f7ff fd67 	bl	8004f08 <_SendPacket>
  RECORD_END();
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f383 8811 	msr	BASEPRI, r3
}
 8005440:	bf00      	nop
 8005442:	3740      	adds	r7, #64	; 0x40
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	200133b0 	.word	0x200133b0

0800544c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b08c      	sub	sp, #48	; 0x30
 8005450:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005452:	4b58      	ldr	r3, [pc, #352]	; (80055b4 <SEGGER_SYSVIEW_Start+0x168>)
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005458:	f3ef 8311 	mrs	r3, BASEPRI
 800545c:	f04f 0120 	mov.w	r1, #32
 8005460:	f381 8811 	msr	BASEPRI, r1
 8005464:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005466:	4b53      	ldr	r3, [pc, #332]	; (80055b4 <SEGGER_SYSVIEW_Start+0x168>)
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	220a      	movs	r2, #10
 800546c:	4952      	ldr	r1, [pc, #328]	; (80055b8 <SEGGER_SYSVIEW_Start+0x16c>)
 800546e:	4618      	mov	r0, r3
 8005470:	f7fa feae 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800547a:	200a      	movs	r0, #10
 800547c:	f7ff fe2a 	bl	80050d4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005480:	f3ef 8311 	mrs	r3, BASEPRI
 8005484:	f04f 0120 	mov.w	r1, #32
 8005488:	f381 8811 	msr	BASEPRI, r1
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	484b      	ldr	r0, [pc, #300]	; (80055bc <SEGGER_SYSVIEW_Start+0x170>)
 8005490:	f7ff fc4a 	bl	8004d28 <_PreparePacket>
 8005494:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549e:	4b45      	ldr	r3, [pc, #276]	; (80055b4 <SEGGER_SYSVIEW_Start+0x168>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a4:	e00b      	b.n	80054be <SEGGER_SYSVIEW_Start+0x72>
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	1c59      	adds	r1, r3, #1
 80054ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	09db      	lsrs	r3, r3, #7
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	2b7f      	cmp	r3, #127	; 0x7f
 80054c2:	d8f0      	bhi.n	80054a6 <SEGGER_SYSVIEW_Start+0x5a>
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	4b36      	ldr	r3, [pc, #216]	; (80055b4 <SEGGER_SYSVIEW_Start+0x168>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	e00b      	b.n	80054f8 <SEGGER_SYSVIEW_Start+0xac>
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	1c59      	adds	r1, r3, #1
 80054e8:	6279      	str	r1, [r7, #36]	; 0x24
 80054ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	09db      	lsrs	r3, r3, #7
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	2b7f      	cmp	r3, #127	; 0x7f
 80054fc:	d8f0      	bhi.n	80054e0 <SEGGER_SYSVIEW_Start+0x94>
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	627a      	str	r2, [r7, #36]	; 0x24
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	4b28      	ldr	r3, [pc, #160]	; (80055b4 <SEGGER_SYSVIEW_Start+0x168>)
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e00b      	b.n	8005532 <SEGGER_SYSVIEW_Start+0xe6>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	1c59      	adds	r1, r3, #1
 8005522:	61f9      	str	r1, [r7, #28]
 8005524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	09db      	lsrs	r3, r3, #7
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b7f      	cmp	r3, #127	; 0x7f
 8005536:	d8f0      	bhi.n	800551a <SEGGER_SYSVIEW_Start+0xce>
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	61fa      	str	r2, [r7, #28]
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	e00b      	b.n	800556a <SEGGER_SYSVIEW_Start+0x11e>
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	6179      	str	r1, [r7, #20]
 800555c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	09db      	lsrs	r3, r3, #7
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b7f      	cmp	r3, #127	; 0x7f
 800556e:	d8f0      	bhi.n	8005552 <SEGGER_SYSVIEW_Start+0x106>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	617a      	str	r2, [r7, #20]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005580:	2218      	movs	r2, #24
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fcbf 	bl	8004f08 <_SendPacket>
      RECORD_END();
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005590:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <SEGGER_SYSVIEW_Start+0x168>)
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <SEGGER_SYSVIEW_Start+0x168>)
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800559e:	f000 f9c7 	bl	8005930 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80055a2:	f000 f9b1 	bl	8005908 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80055a6:	f000 fc5f 	bl	8005e68 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80055aa:	bf00      	nop
 80055ac:	3730      	adds	r7, #48	; 0x30
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20013380 	.word	0x20013380
 80055b8:	08006118 	.word	0x08006118
 80055bc:	200133b0 	.word	0x200133b0

080055c0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055c6:	f3ef 8311 	mrs	r3, BASEPRI
 80055ca:	f04f 0120 	mov.w	r1, #32
 80055ce:	f381 8811 	msr	BASEPRI, r1
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	480b      	ldr	r0, [pc, #44]	; (8005604 <SEGGER_SYSVIEW_Stop+0x44>)
 80055d6:	f7ff fba7 	bl	8004d28 <_PreparePacket>
 80055da:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <SEGGER_SYSVIEW_Stop+0x48>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80055e4:	220b      	movs	r2, #11
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	6838      	ldr	r0, [r7, #0]
 80055ea:	f7ff fc8d 	bl	8004f08 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <SEGGER_SYSVIEW_Stop+0x48>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f383 8811 	msr	BASEPRI, r3
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	200133b0 	.word	0x200133b0
 8005608:	20013380 	.word	0x20013380

0800560c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b08c      	sub	sp, #48	; 0x30
 8005610:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005612:	f3ef 8311 	mrs	r3, BASEPRI
 8005616:	f04f 0120 	mov.w	r1, #32
 800561a:	f381 8811 	msr	BASEPRI, r1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	4845      	ldr	r0, [pc, #276]	; (8005738 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005622:	f7ff fb81 	bl	8004d28 <_PreparePacket>
 8005626:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005630:	4b42      	ldr	r3, [pc, #264]	; (800573c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	62bb      	str	r3, [r7, #40]	; 0x28
 8005636:	e00b      	b.n	8005650 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	b2da      	uxtb	r2, r3
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	1c59      	adds	r1, r3, #1
 8005640:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	09db      	lsrs	r3, r3, #7
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	2b7f      	cmp	r3, #127	; 0x7f
 8005654:	d8f0      	bhi.n	8005638 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800565c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
 800566a:	4b34      	ldr	r3, [pc, #208]	; (800573c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	623b      	str	r3, [r7, #32]
 8005670:	e00b      	b.n	800568a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	1c59      	adds	r1, r3, #1
 800567a:	6279      	str	r1, [r7, #36]	; 0x24
 800567c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	09db      	lsrs	r3, r3, #7
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	2b7f      	cmp	r3, #127	; 0x7f
 800568e:	d8f0      	bhi.n	8005672 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	627a      	str	r2, [r7, #36]	; 0x24
 8005696:	6a3a      	ldr	r2, [r7, #32]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	4b25      	ldr	r3, [pc, #148]	; (800573c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	e00b      	b.n	80056c4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	1c59      	adds	r1, r3, #1
 80056b4:	61f9      	str	r1, [r7, #28]
 80056b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	09db      	lsrs	r3, r3, #7
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b7f      	cmp	r3, #127	; 0x7f
 80056c8:	d8f0      	bhi.n	80056ac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	61fa      	str	r2, [r7, #28]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	2300      	movs	r3, #0
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	e00b      	b.n	80056fc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1c59      	adds	r1, r3, #1
 80056ec:	6179      	str	r1, [r7, #20]
 80056ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	09db      	lsrs	r3, r3, #7
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005700:	d8f0      	bhi.n	80056e4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	617a      	str	r2, [r7, #20]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005712:	2218      	movs	r2, #24
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	68b8      	ldr	r0, [r7, #8]
 8005718:	f7ff fbf6 	bl	8004f08 <_SendPacket>
  RECORD_END();
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800572a:	4b04      	ldr	r3, [pc, #16]	; (800573c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	4798      	blx	r3
  }
}
 8005730:	bf00      	nop
 8005732:	3730      	adds	r7, #48	; 0x30
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	200133b0 	.word	0x200133b0
 800573c:	20013380 	.word	0x20013380

08005740 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b092      	sub	sp, #72	; 0x48
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005748:	f3ef 8311 	mrs	r3, BASEPRI
 800574c:	f04f 0120 	mov.w	r1, #32
 8005750:	f381 8811 	msr	BASEPRI, r1
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	486a      	ldr	r0, [pc, #424]	; (8005900 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005758:	f7ff fae6 	bl	8004d28 <_PreparePacket>
 800575c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	647b      	str	r3, [r7, #68]	; 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b66      	ldr	r3, [pc, #408]	; (8005904 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	643b      	str	r3, [r7, #64]	; 0x40
 8005772:	e00b      	b.n	800578c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005776:	b2da      	uxtb	r2, r3
 8005778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577a:	1c59      	adds	r1, r3, #1
 800577c:	6479      	str	r1, [r7, #68]	; 0x44
 800577e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005788:	09db      	lsrs	r3, r3, #7
 800578a:	643b      	str	r3, [r7, #64]	; 0x40
 800578c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578e:	2b7f      	cmp	r3, #127	; 0x7f
 8005790:	d8f0      	bhi.n	8005774 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	647a      	str	r2, [r7, #68]	; 0x44
 8005798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ac:	e00b      	b.n	80057c6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b4:	1c59      	adds	r1, r3, #1
 80057b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80057b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	09db      	lsrs	r3, r3, #7
 80057c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	2b7f      	cmp	r3, #127	; 0x7f
 80057ca:	d8f0      	bhi.n	80057ae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057da:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	4619      	mov	r1, r3
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff fa4f 	bl	8004c88 <_EncodeStr>
 80057ea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80057ec:	2209      	movs	r2, #9
 80057ee:	68f9      	ldr	r1, [r7, #12]
 80057f0:	6938      	ldr	r0, [r7, #16]
 80057f2:	f7ff fb89 	bl	8004f08 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	637b      	str	r3, [r7, #52]	; 0x34
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4b40      	ldr	r3, [pc, #256]	; (8005904 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	633b      	str	r3, [r7, #48]	; 0x30
 800580a:	e00b      	b.n	8005824 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	b2da      	uxtb	r2, r3
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	1c59      	adds	r1, r3, #1
 8005814:	6379      	str	r1, [r7, #52]	; 0x34
 8005816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	09db      	lsrs	r3, r3, #7
 8005822:	633b      	str	r3, [r7, #48]	; 0x30
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	2b7f      	cmp	r3, #127	; 0x7f
 8005828:	d8f0      	bhi.n	800580c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800582a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	637a      	str	r2, [r7, #52]	; 0x34
 8005830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
 8005844:	e00b      	b.n	800585e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	b2da      	uxtb	r2, r3
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	1c59      	adds	r1, r3, #1
 800584e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	2b7f      	cmp	r3, #127	; 0x7f
 8005862:	d8f0      	bhi.n	8005846 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800586a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005872:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	623b      	str	r3, [r7, #32]
 800587e:	e00b      	b.n	8005898 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	1c59      	adds	r1, r3, #1
 8005888:	6279      	str	r1, [r7, #36]	; 0x24
 800588a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	09db      	lsrs	r3, r3, #7
 8005896:	623b      	str	r3, [r7, #32]
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	2b7f      	cmp	r3, #127	; 0x7f
 800589c:	d8f0      	bhi.n	8005880 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	627a      	str	r2, [r7, #36]	; 0x24
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	e00b      	b.n	80058d0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	61f9      	str	r1, [r7, #28]
 80058c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	09db      	lsrs	r3, r3, #7
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b7f      	cmp	r3, #127	; 0x7f
 80058d4:	d8f0      	bhi.n	80058b8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	61fa      	str	r2, [r7, #28]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80058e6:	2215      	movs	r2, #21
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	6938      	ldr	r0, [r7, #16]
 80058ec:	f7ff fb0c 	bl	8004f08 <_SendPacket>
  RECORD_END();
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f383 8811 	msr	BASEPRI, r3
}
 80058f6:	bf00      	nop
 80058f8:	3748      	adds	r7, #72	; 0x48
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	200133b0 	.word	0x200133b0
 8005904:	20013380 	.word	0x20013380

08005908 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800591e:	4b03      	ldr	r3, [pc, #12]	; (800592c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4798      	blx	r3
  }
}
 8005926:	bf00      	nop
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20013380 	.word	0x20013380

08005930 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005936:	4b15      	ldr	r3, [pc, #84]	; (800598c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01a      	beq.n	8005974 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800593e:	4b13      	ldr	r3, [pc, #76]	; (800598c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d015      	beq.n	8005974 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005948:	4b10      	ldr	r3, [pc, #64]	; (800598c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4798      	blx	r3
 8005950:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005954:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005956:	e9d7 0100 	ldrd	r0, r1, [r7]
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	000a      	movs	r2, r1
 8005964:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005966:	4613      	mov	r3, r2
 8005968:	461a      	mov	r2, r3
 800596a:	4621      	mov	r1, r4
 800596c:	200d      	movs	r0, #13
 800596e:	f7ff fc0b 	bl	8005188 <SEGGER_SYSVIEW_RecordU32x2>
 8005972:	e006      	b.n	8005982 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	200c      	movs	r0, #12
 800597c:	f7ff fbc8 	bl	8005110 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bd90      	pop	{r4, r7, pc}
 800598a:	bf00      	nop
 800598c:	20013380 	.word	0x20013380
 8005990:	e0001004 	.word	0xe0001004

08005994 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800599a:	f3ef 8311 	mrs	r3, BASEPRI
 800599e:	f04f 0120 	mov.w	r1, #32
 80059a2:	f381 8811 	msr	BASEPRI, r1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	4819      	ldr	r0, [pc, #100]	; (8005a10 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80059aa:	f7ff f9bd 	bl	8004d28 <_PreparePacket>
 80059ae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80059b4:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059bc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	e00b      	b.n	80059e0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	6179      	str	r1, [r7, #20]
 80059d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	09db      	lsrs	r3, r3, #7
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b7f      	cmp	r3, #127	; 0x7f
 80059e4:	d8f0      	bhi.n	80059c8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	617a      	str	r2, [r7, #20]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80059f6:	2202      	movs	r2, #2
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	68b8      	ldr	r0, [r7, #8]
 80059fc:	f7ff fa84 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f383 8811 	msr	BASEPRI, r3
}
 8005a06:	bf00      	nop
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	200133b0 	.word	0x200133b0
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a22:	f04f 0120 	mov.w	r1, #32
 8005a26:	f381 8811 	msr	BASEPRI, r1
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	4807      	ldr	r0, [pc, #28]	; (8005a4c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005a2e:	f7ff f97b 	bl	8004d28 <_PreparePacket>
 8005a32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005a34:	2203      	movs	r2, #3
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6838      	ldr	r0, [r7, #0]
 8005a3a:	f7ff fa65 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f383 8811 	msr	BASEPRI, r3
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200133b0 	.word	0x200133b0

08005a50 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a56:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5a:	f04f 0120 	mov.w	r1, #32
 8005a5e:	f381 8811 	msr	BASEPRI, r1
 8005a62:	607b      	str	r3, [r7, #4]
 8005a64:	4807      	ldr	r0, [pc, #28]	; (8005a84 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005a66:	f7ff f95f 	bl	8004d28 <_PreparePacket>
 8005a6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005a6c:	2212      	movs	r2, #18
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6838      	ldr	r0, [r7, #0]
 8005a72:	f7ff fa49 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f383 8811 	msr	BASEPRI, r3
}
 8005a7c:	bf00      	nop
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200133b0 	.word	0x200133b0

08005a88 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a92:	f04f 0120 	mov.w	r1, #32
 8005a96:	f381 8811 	msr	BASEPRI, r1
 8005a9a:	607b      	str	r3, [r7, #4]
 8005a9c:	4807      	ldr	r0, [pc, #28]	; (8005abc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005a9e:	f7ff f943 	bl	8004d28 <_PreparePacket>
 8005aa2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005aa4:	2211      	movs	r2, #17
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6838      	ldr	r0, [r7, #0]
 8005aaa:	f7ff fa2d 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f383 8811 	msr	BASEPRI, r3
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	200133b0 	.word	0x200133b0

08005ac0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8005acc:	f04f 0120 	mov.w	r1, #32
 8005ad0:	f381 8811 	msr	BASEPRI, r1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	4819      	ldr	r0, [pc, #100]	; (8005b3c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005ad8:	f7ff f926 	bl	8004d28 <_PreparePacket>
 8005adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ae2:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e00b      	b.n	8005b0e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	1c59      	adds	r1, r3, #1
 8005afe:	61f9      	str	r1, [r7, #28]
 8005b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	09db      	lsrs	r3, r3, #7
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b7f      	cmp	r3, #127	; 0x7f
 8005b12:	d8f0      	bhi.n	8005af6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	61fa      	str	r2, [r7, #28]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005b24:	2208      	movs	r2, #8
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	6938      	ldr	r0, [r7, #16]
 8005b2a:	f7ff f9ed 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f383 8811 	msr	BASEPRI, r3
}
 8005b34:	bf00      	nop
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	200133b0 	.word	0x200133b0
 8005b40:	20013380 	.word	0x20013380

08005b44 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b50:	f04f 0120 	mov.w	r1, #32
 8005b54:	f381 8811 	msr	BASEPRI, r1
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	4819      	ldr	r0, [pc, #100]	; (8005bc0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005b5c:	f7ff f8e4 	bl	8004d28 <_PreparePacket>
 8005b60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b66:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e00b      	b.n	8005b92 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	1c59      	adds	r1, r3, #1
 8005b82:	61f9      	str	r1, [r7, #28]
 8005b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b7f      	cmp	r3, #127	; 0x7f
 8005b96:	d8f0      	bhi.n	8005b7a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	61fa      	str	r2, [r7, #28]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005ba8:	2204      	movs	r2, #4
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	6938      	ldr	r0, [r7, #16]
 8005bae:	f7ff f9ab 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f383 8811 	msr	BASEPRI, r3
}
 8005bb8:	bf00      	nop
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	200133b0 	.word	0x200133b0
 8005bc4:	20013380 	.word	0x20013380

08005bc8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005bd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bd4:	f04f 0120 	mov.w	r1, #32
 8005bd8:	f381 8811 	msr	BASEPRI, r1
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	4819      	ldr	r0, [pc, #100]	; (8005c44 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005be0:	f7ff f8a2 	bl	8004d28 <_PreparePacket>
 8005be4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	e00b      	b.n	8005c16 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	1c59      	adds	r1, r3, #1
 8005c06:	61f9      	str	r1, [r7, #28]
 8005c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	09db      	lsrs	r3, r3, #7
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b7f      	cmp	r3, #127	; 0x7f
 8005c1a:	d8f0      	bhi.n	8005bfe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	61fa      	str	r2, [r7, #28]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005c2c:	2206      	movs	r2, #6
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	6938      	ldr	r0, [r7, #16]
 8005c32:	f7ff f969 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f383 8811 	msr	BASEPRI, r3
}
 8005c3c:	bf00      	nop
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	200133b0 	.word	0x200133b0
 8005c48:	20013380 	.word	0x20013380

08005c4c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c56:	f3ef 8311 	mrs	r3, BASEPRI
 8005c5a:	f04f 0120 	mov.w	r1, #32
 8005c5e:	f381 8811 	msr	BASEPRI, r1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	4827      	ldr	r0, [pc, #156]	; (8005d04 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005c66:	f7ff f85f 	bl	8004d28 <_PreparePacket>
 8005c6a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c70:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	623b      	str	r3, [r7, #32]
 8005c82:	e00b      	b.n	8005c9c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	6279      	str	r1, [r7, #36]	; 0x24
 8005c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	623b      	str	r3, [r7, #32]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca0:	d8f0      	bhi.n	8005c84 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	e00b      	b.n	8005cd4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	61f9      	str	r1, [r7, #28]
 8005cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	09db      	lsrs	r3, r3, #7
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd8:	d8f0      	bhi.n	8005cbc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	61fa      	str	r2, [r7, #28]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005cea:	2207      	movs	r2, #7
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	6938      	ldr	r0, [r7, #16]
 8005cf0:	f7ff f90a 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f383 8811 	msr	BASEPRI, r3
}
 8005cfa:	bf00      	nop
 8005cfc:	3728      	adds	r7, #40	; 0x28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	200133b0 	.word	0x200133b0
 8005d08:	20013380 	.word	0x20013380

08005d0c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005d14:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	1ad3      	subs	r3, r2, r3
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20013380 	.word	0x20013380

08005d2c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	; 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005d36:	4b3b      	ldr	r3, [pc, #236]	; (8005e24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d06d      	beq.n	8005e1a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005d3e:	4b39      	ldr	r3, [pc, #228]	; (8005e24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005d44:	2300      	movs	r3, #0
 8005d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d48:	e008      	b.n	8005d5c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	3301      	adds	r3, #1
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d3f2      	bcc.n	8005d4a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005d64:	e000      	b.n	8005d68 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005d66:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d055      	beq.n	8005e1a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d72:	f04f 0120 	mov.w	r1, #32
 8005d76:	f381 8811 	msr	BASEPRI, r1
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	482a      	ldr	r0, [pc, #168]	; (8005e28 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005d7e:	f7fe ffd3 	bl	8004d28 <_PreparePacket>
 8005d82:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	623b      	str	r3, [r7, #32]
 8005d90:	e00b      	b.n	8005daa <SEGGER_SYSVIEW_SendModule+0x7e>
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	6279      	str	r1, [r7, #36]	; 0x24
 8005d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	09db      	lsrs	r3, r3, #7
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	2b7f      	cmp	r3, #127	; 0x7f
 8005dae:	d8f0      	bhi.n	8005d92 <SEGGER_SYSVIEW_SendModule+0x66>
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	627a      	str	r2, [r7, #36]	; 0x24
 8005db6:	6a3a      	ldr	r2, [r7, #32]
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	e00b      	b.n	8005de4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	1c59      	adds	r1, r3, #1
 8005dd4:	61f9      	str	r1, [r7, #28]
 8005dd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	09db      	lsrs	r3, r3, #7
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b7f      	cmp	r3, #127	; 0x7f
 8005de8:	d8f0      	bhi.n	8005dcc <SEGGER_SYSVIEW_SendModule+0xa0>
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	61fa      	str	r2, [r7, #28]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2280      	movs	r2, #128	; 0x80
 8005e00:	4619      	mov	r1, r3
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f7fe ff40 	bl	8004c88 <_EncodeStr>
 8005e08:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005e0a:	2216      	movs	r2, #22
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	6938      	ldr	r0, [r7, #16]
 8005e10:	f7ff f87a 	bl	8004f08 <_SendPacket>
      RECORD_END();
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	3730      	adds	r7, #48	; 0x30
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	200133a8 	.word	0x200133a8
 8005e28:	200133b0 	.word	0x200133b0

08005e2c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00f      	beq.n	8005e5a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f2      	bne.n	8005e40 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200133a8 	.word	0x200133a8

08005e68 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e72:	f04f 0120 	mov.w	r1, #32
 8005e76:	f381 8811 	msr	BASEPRI, r1
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	4817      	ldr	r0, [pc, #92]	; (8005edc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005e7e:	f7fe ff53 	bl	8004d28 <_PreparePacket>
 8005e82:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	e00b      	b.n	8005eac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	6179      	str	r1, [r7, #20]
 8005e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	09db      	lsrs	r3, r3, #7
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb0:	d8f0      	bhi.n	8005e94 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	617a      	str	r2, [r7, #20]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005ec2:	221b      	movs	r2, #27
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	68b8      	ldr	r0, [r7, #8]
 8005ec8:	f7ff f81e 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f383 8811 	msr	BASEPRI, r3
}
 8005ed2:	bf00      	nop
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	200133b0 	.word	0x200133b0
 8005ee0:	200133ac 	.word	0x200133ac

08005ee4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005eec:	f3ef 8311 	mrs	r3, BASEPRI
 8005ef0:	f04f 0120 	mov.w	r1, #32
 8005ef4:	f381 8811 	msr	BASEPRI, r1
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	4827      	ldr	r0, [pc, #156]	; (8005f98 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005efc:	f7fe ff14 	bl	8004d28 <_PreparePacket>
 8005f00:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f02:	2280      	movs	r2, #128	; 0x80
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	6938      	ldr	r0, [r7, #16]
 8005f08:	f7fe febe 	bl	8004c88 <_EncodeStr>
 8005f0c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
 8005f12:	2301      	movs	r3, #1
 8005f14:	623b      	str	r3, [r7, #32]
 8005f16:	e00b      	b.n	8005f30 <SEGGER_SYSVIEW_Warn+0x4c>
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	1c59      	adds	r1, r3, #1
 8005f20:	6279      	str	r1, [r7, #36]	; 0x24
 8005f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	09db      	lsrs	r3, r3, #7
 8005f2e:	623b      	str	r3, [r7, #32]
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	2b7f      	cmp	r3, #127	; 0x7f
 8005f34:	d8f0      	bhi.n	8005f18 <SEGGER_SYSVIEW_Warn+0x34>
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	627a      	str	r2, [r7, #36]	; 0x24
 8005f3c:	6a3a      	ldr	r2, [r7, #32]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	e00b      	b.n	8005f68 <SEGGER_SYSVIEW_Warn+0x84>
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	1c59      	adds	r1, r3, #1
 8005f58:	61f9      	str	r1, [r7, #28]
 8005f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	09db      	lsrs	r3, r3, #7
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f6c:	d8f0      	bhi.n	8005f50 <SEGGER_SYSVIEW_Warn+0x6c>
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	61fa      	str	r2, [r7, #28]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f7e:	221a      	movs	r2, #26
 8005f80:	68f9      	ldr	r1, [r7, #12]
 8005f82:	6938      	ldr	r0, [r7, #16]
 8005f84:	f7fe ffc0 	bl	8004f08 <_SendPacket>
  RECORD_END();
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
 8005f90:	3728      	adds	r7, #40	; 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200133b0 	.word	0x200133b0

08005f9c <__libc_init_array>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4d0d      	ldr	r5, [pc, #52]	; (8005fd4 <__libc_init_array+0x38>)
 8005fa0:	4c0d      	ldr	r4, [pc, #52]	; (8005fd8 <__libc_init_array+0x3c>)
 8005fa2:	1b64      	subs	r4, r4, r5
 8005fa4:	10a4      	asrs	r4, r4, #2
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	42a6      	cmp	r6, r4
 8005faa:	d109      	bne.n	8005fc0 <__libc_init_array+0x24>
 8005fac:	4d0b      	ldr	r5, [pc, #44]	; (8005fdc <__libc_init_array+0x40>)
 8005fae:	4c0c      	ldr	r4, [pc, #48]	; (8005fe0 <__libc_init_array+0x44>)
 8005fb0:	f000 f83e 	bl	8006030 <_init>
 8005fb4:	1b64      	subs	r4, r4, r5
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	2600      	movs	r6, #0
 8005fba:	42a6      	cmp	r6, r4
 8005fbc:	d105      	bne.n	8005fca <__libc_init_array+0x2e>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc4:	4798      	blx	r3
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7ee      	b.n	8005fa8 <__libc_init_array+0xc>
 8005fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fce:	4798      	blx	r3
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	e7f2      	b.n	8005fba <__libc_init_array+0x1e>
 8005fd4:	0800612c 	.word	0x0800612c
 8005fd8:	0800612c 	.word	0x0800612c
 8005fdc:	0800612c 	.word	0x0800612c
 8005fe0:	08006130 	.word	0x08006130

08005fe4 <memcmp>:
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	3901      	subs	r1, #1
 8005fe8:	4402      	add	r2, r0
 8005fea:	4290      	cmp	r0, r2
 8005fec:	d101      	bne.n	8005ff2 <memcmp+0xe>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e005      	b.n	8005ffe <memcmp+0x1a>
 8005ff2:	7803      	ldrb	r3, [r0, #0]
 8005ff4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	d001      	beq.n	8006000 <memcmp+0x1c>
 8005ffc:	1b18      	subs	r0, r3, r4
 8005ffe:	bd10      	pop	{r4, pc}
 8006000:	3001      	adds	r0, #1
 8006002:	e7f2      	b.n	8005fea <memcmp+0x6>

08006004 <memcpy>:
 8006004:	440a      	add	r2, r1
 8006006:	4291      	cmp	r1, r2
 8006008:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800600c:	d100      	bne.n	8006010 <memcpy+0xc>
 800600e:	4770      	bx	lr
 8006010:	b510      	push	{r4, lr}
 8006012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800601a:	4291      	cmp	r1, r2
 800601c:	d1f9      	bne.n	8006012 <memcpy+0xe>
 800601e:	bd10      	pop	{r4, pc}

08006020 <memset>:
 8006020:	4402      	add	r2, r0
 8006022:	4603      	mov	r3, r0
 8006024:	4293      	cmp	r3, r2
 8006026:	d100      	bne.n	800602a <memset+0xa>
 8006028:	4770      	bx	lr
 800602a:	f803 1b01 	strb.w	r1, [r3], #1
 800602e:	e7f9      	b.n	8006024 <memset+0x4>

08006030 <_init>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr

0800603c <_fini>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	bf00      	nop
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr
