
005_LED_Tasks_Notify_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006680  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f8  080068f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006900  08006900  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013494  20000014  0800691c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200134a8  0800691c  000234a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141e3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cdb  00000000  00000000  00034227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00036f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  000381c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a84  00000000  00000000  00039320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b44  00000000  00000000  0005bda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6813  00000000  00000000  000708e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001470fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee0  00000000  00000000  0014714c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067f8 	.word	0x080067f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080067f8 	.word	0x080067f8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012edc 	.word	0x20012edc

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800056e:	f000 fc31 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f88f 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8f7 	bl	8000768 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(500000);

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 800057a:	4b38      	ldr	r3, [pc, #224]	; (800065c <main+0xf4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a37      	ldr	r2, [pc, #220]	; (800065c <main+0xf4>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &ledg_task_handle);
 8000586:	4b36      	ldr	r3, [pc, #216]	; (8000660 <main+0xf8>)
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2302      	movs	r3, #2
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	22c8      	movs	r2, #200	; 0xc8
 8000592:	4934      	ldr	r1, [pc, #208]	; (8000664 <main+0xfc>)
 8000594:	4834      	ldr	r0, [pc, #208]	; (8000668 <main+0x100>)
 8000596:	f002 fc91 	bl	8002ebc <xTaskCreate>
 800059a:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00a      	beq.n	80005b8 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b4:	bf00      	nop
 80005b6:	e7fe      	b.n	80005b6 <main+0x4e>

  next_task_handle = ledg_task_handle;
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <main+0xf8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <main+0x104>)
 80005be:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <main+0x108>)
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	22c8      	movs	r2, #200	; 0xc8
 80005cc:	4929      	ldr	r1, [pc, #164]	; (8000674 <main+0x10c>)
 80005ce:	482a      	ldr	r0, [pc, #168]	; (8000678 <main+0x110>)
 80005d0:	f002 fc74 	bl	8002ebc <xTaskCreate>
 80005d4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00a      	beq.n	80005f2 <main+0x8a>
        __asm volatile
 80005dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e0:	f383 8811 	msr	BASEPRI, r3
 80005e4:	f3bf 8f6f 	isb	sy
 80005e8:	f3bf 8f4f 	dsb	sy
 80005ec:	60fb      	str	r3, [r7, #12]
    }
 80005ee:	bf00      	nop
 80005f0:	e7fe      	b.n	80005f0 <main+0x88>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &ledr_task_handle);
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <main+0x114>)
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	22c8      	movs	r2, #200	; 0xc8
 80005fe:	4920      	ldr	r1, [pc, #128]	; (8000680 <main+0x118>)
 8000600:	4820      	ldr	r0, [pc, #128]	; (8000684 <main+0x11c>)
 8000602:	f002 fc5b 	bl	8002ebc <xTaskCreate>
 8000606:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d00a      	beq.n	8000624 <main+0xbc>
        __asm volatile
 800060e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000612:	f383 8811 	msr	BASEPRI, r3
 8000616:	f3bf 8f6f 	isb	sy
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	60bb      	str	r3, [r7, #8]
    }
 8000620:	bf00      	nop
 8000622:	e7fe      	b.n	8000622 <main+0xba>

  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 4, &btn_task_handle);
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <main+0x120>)
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	2304      	movs	r3, #4
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	22c8      	movs	r2, #200	; 0xc8
 8000630:	4916      	ldr	r1, [pc, #88]	; (800068c <main+0x124>)
 8000632:	4817      	ldr	r0, [pc, #92]	; (8000690 <main+0x128>)
 8000634:	f002 fc42 	bl	8002ebc <xTaskCreate>
 8000638:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d00a      	beq.n	8000656 <main+0xee>
        __asm volatile
 8000640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000644:	f383 8811 	msr	BASEPRI, r3
 8000648:	f3bf 8f6f 	isb	sy
 800064c:	f3bf 8f4f 	dsb	sy
 8000650:	607b      	str	r3, [r7, #4]
    }
 8000652:	bf00      	nop
 8000654:	e7fe      	b.n	8000654 <main+0xec>


  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000656:	f002 fe69 	bl	800332c <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0xf2>
 800065c:	e0001000 	.word	0xe0001000
 8000660:	20000030 	.word	0x20000030
 8000664:	08006810 	.word	0x08006810
 8000668:	08000a25 	.word	0x08000a25
 800066c:	20000040 	.word	0x20000040
 8000670:	20000034 	.word	0x20000034
 8000674:	08006820 	.word	0x08006820
 8000678:	08000a9d 	.word	0x08000a9d
 800067c:	20000038 	.word	0x20000038
 8000680:	08006830 	.word	0x08006830
 8000684:	08000b15 	.word	0x08000b15
 8000688:	2000003c 	.word	0x2000003c
 800068c:	08006840 	.word	0x08006840
 8000690:	08000b95 	.word	0x08000b95

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 f8a0 	bl	80067e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000708:	23a8      	movs	r3, #168	; 0xa8
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000710:	2307      	movs	r3, #7
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fe8b 	bl	8001434 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 fa70 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f8ec 	bl	8001924 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 fa59 	bl	8000c08 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	4ba2      	ldr	r3, [pc, #648]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4aa1      	ldr	r2, [pc, #644]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b9f      	ldr	r3, [pc, #636]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	4b9b      	ldr	r3, [pc, #620]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a9a      	ldr	r2, [pc, #616]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b98      	ldr	r3, [pc, #608]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b94      	ldr	r3, [pc, #592]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a93      	ldr	r2, [pc, #588]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b91      	ldr	r3, [pc, #580]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b8d      	ldr	r3, [pc, #564]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a8c      	ldr	r2, [pc, #560]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b8a      	ldr	r3, [pc, #552]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b86      	ldr	r3, [pc, #536]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a85      	ldr	r2, [pc, #532]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b83      	ldr	r3, [pc, #524]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b7f      	ldr	r3, [pc, #508]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a7e      	ldr	r2, [pc, #504]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b7c      	ldr	r3, [pc, #496]	; (8000a0c <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	4879      	ldr	r0, [pc, #484]	; (8000a10 <MX_GPIO_Init+0x2a8>)
 800082c:	f000 fdce 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2101      	movs	r1, #1
 8000834:	4877      	ldr	r0, [pc, #476]	; (8000a14 <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fdc9 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083a:	2200      	movs	r2, #0
 800083c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <MX_GPIO_Init+0x2b0>)
 8000842:	f000 fdc3 	bl	80013cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	486c      	ldr	r0, [pc, #432]	; (8000a10 <MX_GPIO_Init+0x2a8>)
 800085e:	f000 fc01 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4866      	ldr	r0, [pc, #408]	; (8000a14 <MX_GPIO_Init+0x2ac>)
 800087a:	f000 fbf3 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800087e:	2308      	movs	r3, #8
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088e:	2305      	movs	r3, #5
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	485e      	ldr	r0, [pc, #376]	; (8000a14 <MX_GPIO_Init+0x2ac>)
 800089a:	f000 fbe3 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	485a      	ldr	r0, [pc, #360]	; (8000a1c <MX_GPIO_Init+0x2b4>)
 80008b4:	f000 fbd6 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008b8:	2310      	movs	r3, #16
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c8:	2306      	movs	r3, #6
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4852      	ldr	r0, [pc, #328]	; (8000a1c <MX_GPIO_Init+0x2b4>)
 80008d4:	f000 fbc6 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008d8:	23e0      	movs	r3, #224	; 0xe0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e8:	2305      	movs	r3, #5
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	484a      	ldr	r0, [pc, #296]	; (8000a1c <MX_GPIO_Init+0x2b4>)
 80008f4:	f000 fbb6 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008f8:	2304      	movs	r3, #4
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4845      	ldr	r0, [pc, #276]	; (8000a20 <MX_GPIO_Init+0x2b8>)
 800090c:	f000 fbaa 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000922:	2305      	movs	r3, #5
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	483c      	ldr	r0, [pc, #240]	; (8000a20 <MX_GPIO_Init+0x2b8>)
 800092e:	f000 fb99 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000932:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000936:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4833      	ldr	r0, [pc, #204]	; (8000a18 <MX_GPIO_Init+0x2b0>)
 800094c:	f000 fb8a 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000950:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000962:	2306      	movs	r3, #6
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4829      	ldr	r0, [pc, #164]	; (8000a14 <MX_GPIO_Init+0x2ac>)
 800096e:	f000 fb79 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4825      	ldr	r0, [pc, #148]	; (8000a1c <MX_GPIO_Init+0x2b4>)
 8000988:	f000 fb6c 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800098c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800099e:	230a      	movs	r3, #10
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	481c      	ldr	r0, [pc, #112]	; (8000a1c <MX_GPIO_Init+0x2b4>)
 80009aa:	f000 fb5b 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4815      	ldr	r0, [pc, #84]	; (8000a18 <MX_GPIO_Init+0x2b0>)
 80009c2:	f000 fb4f 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009c6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d8:	2304      	movs	r3, #4
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x2b8>)
 80009e4:	f000 fb3e 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_GPIO_Init+0x2a8>)
 80009fe:	f000 fb31 	bl	8001064 <HAL_GPIO_Init>

}
 8000a02:	bf00      	nop
 8000a04:	3730      	adds	r7, #48	; 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40020400 	.word	0x40020400

08000a24 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void* parameters)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a30:	4816      	ldr	r0, [pc, #88]	; (8000a8c <led_green_handler+0x68>)
 8000a32:	f000 fce4 	bl	80013fe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3a:	f000 fa0d 	bl	8000e58 <HAL_Delay>
		//HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
		taskYIELD();
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <led_green_handler+0x6c>)
 8000a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	f3bf 8f4f 	dsb	sy
 8000a4a:	f3bf 8f6f 	isb	sy

		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2300      	movs	r3, #0
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f003 f906 	bl	8003c6c <xTaskGenericNotifyWait>
 8000a60:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d1e1      	bne.n	8000a2c <led_green_handler+0x8>
			vTaskSuspendAll();
 8000a68:	f002 fcc2 	bl	80033f0 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <led_green_handler+0x70>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <led_green_handler+0x74>)
 8000a72:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a74:	f002 fcca 	bl	800340c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN,GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <led_green_handler+0x68>)
 8000a80:	f000 fca4 	bl	80013cc <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
			vTaskDelete(NULL);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f002 fb6f 	bl	8003168 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a8a:	e7cf      	b.n	8000a2c <led_green_handler+0x8>
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	e000ed04 	.word	0xe000ed04
 8000a94:	20000034 	.word	0x20000034
 8000a98:	20000040 	.word	0x20000040

08000a9c <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	4816      	ldr	r0, [pc, #88]	; (8000b04 <led_orange_handler+0x68>)
 8000aaa:	f000 fca8 	bl	80013fe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000aae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab2:	f000 f9d1 	bl	8000e58 <HAL_Delay>
		//HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
		taskYIELD();
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <led_orange_handler+0x6c>)
 8000ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	f3bf 8f6f 	isb	sy

		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000ac6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2300      	movs	r3, #0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f003 f8ca 	bl	8003c6c <xTaskGenericNotifyWait>
 8000ad8:	60f8      	str	r0, [r7, #12]


		if(status == pdTRUE){
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d1e1      	bne.n	8000aa4 <led_orange_handler+0x8>
			vTaskSuspendAll();
 8000ae0:	f002 fc86 	bl	80033f0 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <led_orange_handler+0x70>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <led_orange_handler+0x74>)
 8000aea:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000aec:	f002 fc8e 	bl	800340c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <led_orange_handler+0x68>)
 8000af8:	f000 fc68 	bl	80013cc <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
			vTaskDelete(NULL);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f002 fb33 	bl	8003168 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
 8000b02:	e7cf      	b.n	8000aa4 <led_orange_handler+0x8>
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	e000ed04 	.word	0xe000ed04
 8000b0c:	20000038 	.word	0x20000038
 8000b10:	20000040 	.word	0x20000040

08000b14 <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b20:	4818      	ldr	r0, [pc, #96]	; (8000b84 <led_red_handler+0x70>)
 8000b22:	f000 fc6c 	bl	80013fe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2a:	f000 f995 	bl	8000e58 <HAL_Delay>
		//HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
		taskYIELD();
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <led_red_handler+0x74>)
 8000b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	f3bf 8f4f 	dsb	sy
 8000b3a:	f3bf 8f6f 	isb	sy

		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000b3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2300      	movs	r3, #0
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f003 f88e 	bl	8003c6c <xTaskGenericNotifyWait>
 8000b50:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d1e1      	bne.n	8000b1c <led_red_handler+0x8>
			vTaskSuspendAll();
 8000b58:	f002 fc4a 	bl	80033f0 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <led_red_handler+0x78>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b62:	f002 fc53 	bl	800340c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <led_red_handler+0x70>)
 8000b6e:	f000 fc2d 	bl	80013cc <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
			vTaskDelete(btn_task_handle);
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <led_red_handler+0x7c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 faf6 	bl	8003168 <vTaskDelete>
			vTaskDelete(NULL);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f002 faf3 	bl	8003168 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b82:	e7cb      	b.n	8000b1c <led_red_handler+0x8>
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	e000ed04 	.word	0xe000ed04
 8000b8c:	20000040 	.word	0x20000040
 8000b90:	2000003c 	.word	0x2000003c

08000b94 <button_handler>:

}


static void button_handler(void* parameters)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <button_handler+0x48>)
 8000ba8:	f000 fbf8 	bl	800139c <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	73bb      	strb	r3, [r7, #14]

		if(btn_read){
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00b      	beq.n	8000bce <button_handler+0x3a>

			if(! prev_read){
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d108      	bne.n	8000bce <button_handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <button_handler+0x4c>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f003 f8d7 	bl	8003d7c <xTaskGenericNotify>
			}
		}

		prev_read = btn_read;
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bd2:	200a      	movs	r0, #10
 8000bd4:	f002 fb72 	bl	80032bc <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bd8:	e7e4      	b.n	8000ba4 <button_handler+0x10>
 8000bda:	bf00      	nop
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	20000040 	.word	0x20000040

08000be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf6:	f000 f90f 	bl	8000e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40001000 	.word	0x40001000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000c56:	f003 fe2f 	bl	80048b8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	2036      	movs	r0, #54	; 0x36
 8000c7e:	f000 f9c7 	bl	8001010 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c82:	2036      	movs	r0, #54	; 0x36
 8000c84:	f000 f9e0 	bl	8001048 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_InitTick+0xa4>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_InitTick+0xa4>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_InitTick+0xa4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca4:	f107 0210 	add.w	r2, r7, #16
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 f844 	bl	8001d3c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cb4:	f001 f82e 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc0:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <HAL_InitTick+0xa8>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_InitTick+0xac>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <HAL_InitTick+0xb0>)
 8000cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_InitTick+0xac>)
 8000cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_InitTick+0xac>)
 8000cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_InitTick+0xac>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_InitTick+0xac>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <HAL_InitTick+0xac>)
 8000cee:	f001 f857 	bl	8001da0 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d104      	bne.n	8000d02 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cf8:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_InitTick+0xac>)
 8000cfa:	f001 f8ab 	bl	8001e54 <HAL_TIM_Base_Start_IT>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3730      	adds	r7, #48	; 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	431bde83 	.word	0x431bde83
 8000d14:	20000044 	.word	0x20000044
 8000d18:	40001000 	.word	0x40001000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM6_DAC_IRQHandler+0x10>)
 8000d4e:	f001 f8f1 	bl	8001f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000044 	.word	0x20000044

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d9c:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000daa:	f7ff ffd7 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f005 fcd9 	bl	8006764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fbd9 	bl	8000568 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dc4:	08006908 	.word	0x08006908
  ldr r2, =_sbss
 8000dc8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dcc:	200134a8 	.word	0x200134a8

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f8fc 	bl	8000ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ff30 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff ff06 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	2000008c 	.word	0x2000008c

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000008c 	.word	0x2000008c

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff4c 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001022:	f7ff ff61 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	6978      	ldr	r0, [r7, #20]
 800102e:	f7ff ffb1 	bl	8000f94 <NVIC_EncodePriority>
 8001032:	4602      	mov	r2, r0
 8001034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff80 	bl	8000f40 <__NVIC_SetPriority>
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff54 	bl	8000f04 <__NVIC_EnableIRQ>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e16b      	b.n	8001358 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 815a 	bne.w	8001352 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80b4 	beq.w	8001352 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b60      	ldr	r3, [pc, #384]	; (8001370 <HAL_GPIO_Init+0x30c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a5f      	ldr	r2, [pc, #380]	; (8001370 <HAL_GPIO_Init+0x30c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b5d      	ldr	r3, [pc, #372]	; (8001370 <HAL_GPIO_Init+0x30c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a5b      	ldr	r2, [pc, #364]	; (8001374 <HAL_GPIO_Init+0x310>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_GPIO_Init+0x314>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d02b      	beq.n	800128a <HAL_GPIO_Init+0x226>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a51      	ldr	r2, [pc, #324]	; (800137c <HAL_GPIO_Init+0x318>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x222>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a50      	ldr	r2, [pc, #320]	; (8001380 <HAL_GPIO_Init+0x31c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x21e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x320>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x21a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_GPIO_Init+0x324>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x216>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	; (800138c <HAL_GPIO_Init+0x328>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x212>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x32c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x330>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x20a>
 800126a:	2307      	movs	r3, #7
 800126c:	e00e      	b.n	800128c <HAL_GPIO_Init+0x228>
 800126e:	2308      	movs	r3, #8
 8001270:	e00c      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001272:	2306      	movs	r3, #6
 8001274:	e00a      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001276:	2305      	movs	r3, #5
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x228>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x228>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x228>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <HAL_GPIO_Init+0x310>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ce:	4a32      	ldr	r2, [pc, #200]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_GPIO_Init+0x334>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001322:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_GPIO_Init+0x334>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_GPIO_Init+0x334>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <HAL_GPIO_Init+0x334>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f ae90 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40021400 	.word	0x40021400
 8001390:	40021800 	.word	0x40021800
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e001      	b.n	80013be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001410:	887a      	ldrh	r2, [r7, #2]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	041a      	lsls	r2, r3, #16
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43d9      	mvns	r1, r3
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	400b      	ands	r3, r1
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e267      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d075      	beq.n	800153e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d00c      	beq.n	8001478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b85      	ldr	r3, [pc, #532]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d112      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b82      	ldr	r3, [pc, #520]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001476:	d10b      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d05b      	beq.n	800153c <HAL_RCC_OscConfig+0x108>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d157      	bne.n	800153c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e242      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	d106      	bne.n	80014a8 <HAL_RCC_OscConfig+0x74>
 800149a:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a75      	ldr	r2, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6f      	ldr	r2, [pc, #444]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6c      	ldr	r2, [pc, #432]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014cc:	4b69      	ldr	r3, [pc, #420]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a68      	ldr	r2, [pc, #416]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b66      	ldr	r3, [pc, #408]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a65      	ldr	r2, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fca8 	bl	8000e40 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fca4 	bl	8000e40 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e207      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xc0>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fc94 	bl	8000e40 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc90 	bl	8000e40 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1f3      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0xe8>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154a:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b44      	ldr	r3, [pc, #272]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1c7      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4937      	ldr	r1, [pc, #220]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_RCC_OscConfig+0x244>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc49 	bl	8000e40 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc45 	bl	8000e40 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1a8      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4925      	ldr	r1, [pc, #148]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_OscConfig+0x244>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc28 	bl	8000e40 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc24 	bl	8000e40 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e187      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d036      	beq.n	800168c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d016      	beq.n	8001654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_RCC_OscConfig+0x248>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fc08 	bl	8000e40 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fc04 	bl	8000e40 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e167      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x200>
 8001652:	e01b      	b.n	800168c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_OscConfig+0x248>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fbf1 	bl	8000e40 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	e00e      	b.n	8001680 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff fbed 	bl	8000e40 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d907      	bls.n	8001680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e150      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 8001674:	40023800 	.word	0x40023800
 8001678:	42470000 	.word	0x42470000
 800167c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ea      	bne.n	8001662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8097 	beq.w	80017c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10f      	bne.n	80016ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a7c      	ldr	r2, [pc, #496]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	4b77      	ldr	r3, [pc, #476]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d6:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a73      	ldr	r2, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fbad 	bl	8000e40 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7ff fba9 	bl	8000e40 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e10c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x2ea>
 8001710:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a63      	ldr	r2, [pc, #396]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x30c>
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a5b      	ldr	r2, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a57      	ldr	r2, [pc, #348]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0304 	bic.w	r3, r3, #4
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d015      	beq.n	800178c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fb6e 	bl	8000e40 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fb6a 	bl	8000e40 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0cb      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0ee      	beq.n	8001768 <HAL_RCC_OscConfig+0x334>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fb58 	bl	8000e40 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fb54 	bl	8000e40 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0b5      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ee      	bne.n	8001794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a38      	ldr	r2, [pc, #224]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a1 	beq.w	8001914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d05c      	beq.n	8001898 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d141      	bne.n	800186a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb28 	bl	8000e40 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fb24 	bl	8000e40 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e087      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fafd 	bl	8000e40 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff faf9 	bl	8000e40 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e05c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x416>
 8001868:	e054      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fae6 	bl	8000e40 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fae2 	bl	8000e40 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e045      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e038      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x4ec>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d028      	beq.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d121      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11a      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	3b01      	subs	r3, #1
 80018fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0cc      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d90c      	bls.n	8001960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b65      	ldr	r3, [pc, #404]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b8      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d020      	beq.n	80019ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001978:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a58      	ldr	r2, [pc, #352]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800199a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	494d      	ldr	r1, [pc, #308]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d044      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d119      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e07f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e067      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4934      	ldr	r1, [pc, #208]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff fa14 	bl	8000e40 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff fa10 	bl	8000e40 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e04f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20c      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e032      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4916      	ldr	r1, [pc, #88]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aaa:	f000 f821 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	490a      	ldr	r1, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	5ccb      	ldrb	r3, [r1, r3]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f8cc 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023c00 	.word	0x40023c00
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	080068d4 	.word	0x080068d4
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b094      	sub	sp, #80	; 0x50
 8001af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
 8001afc:	2300      	movs	r3, #0
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b00:	2300      	movs	r3, #0
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b08:	4b79      	ldr	r3, [pc, #484]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d00d      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x40>
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	f200 80e1 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b22:	e0db      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b28:	e0db      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2a:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2e:	e0d8      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b62:	4622      	mov	r2, r4
 8001b64:	462b      	mov	r3, r5
 8001b66:	f04f 0000 	mov.w	r0, #0
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	0159      	lsls	r1, r3, #5
 8001b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b74:	0150      	lsls	r0, r2, #5
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	1a51      	subs	r1, r2, r1
 8001b7e:	6139      	str	r1, [r7, #16]
 8001b80:	4629      	mov	r1, r5
 8001b82:	eb63 0301 	sbc.w	r3, r3, r1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b94:	4659      	mov	r1, fp
 8001b96:	018b      	lsls	r3, r1, #6
 8001b98:	4651      	mov	r1, sl
 8001b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	018a      	lsls	r2, r1, #6
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba8:	4659      	mov	r1, fp
 8001baa:	eb63 0901 	sbc.w	r9, r3, r1
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc2:	4690      	mov	r8, r2
 8001bc4:	4699      	mov	r9, r3
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	eb18 0303 	adds.w	r3, r8, r3
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	462b      	mov	r3, r5
 8001bd0:	eb49 0303 	adc.w	r3, r9, r3
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001be2:	4629      	mov	r1, r5
 8001be4:	024b      	lsls	r3, r1, #9
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bec:	4621      	mov	r1, r4
 8001bee:	024a      	lsls	r2, r1, #9
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c00:	f7fe fb30 	bl	8000264 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c0c:	e058      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	2200      	movs	r2, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	4611      	mov	r1, r2
 8001c1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
 8001c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c28:	4642      	mov	r2, r8
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	f04f 0000 	mov.w	r0, #0
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	0159      	lsls	r1, r3, #5
 8001c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3a:	0150      	lsls	r0, r2, #5
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4641      	mov	r1, r8
 8001c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c46:	4649      	mov	r1, r9
 8001c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c60:	ebb2 040a 	subs.w	r4, r2, sl
 8001c64:	eb63 050b 	sbc.w	r5, r3, fp
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	00eb      	lsls	r3, r5, #3
 8001c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c76:	00e2      	lsls	r2, r4, #3
 8001c78:	4614      	mov	r4, r2
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	18e3      	adds	r3, r4, r3
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	464b      	mov	r3, r9
 8001c84:	eb45 0303 	adc.w	r3, r5, r3
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c96:	4629      	mov	r1, r5
 8001c98:	028b      	lsls	r3, r1, #10
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	028a      	lsls	r2, r1, #10
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001caa:	2200      	movs	r2, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	61fa      	str	r2, [r7, #28]
 8001cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb4:	f7fe fad6 	bl	8000264 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3750      	adds	r7, #80	; 0x50
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	080068e4 	.word	0x080068e4

08001d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	220f      	movs	r2, #15
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_RCC_GetClockConfig+0x60>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0207 	and.w	r2, r3, #7
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e041      	b.n	8001e36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f839 	bl	8001e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f000 f9d8 	bl	8002194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d001      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e04e      	b.n	8001f0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d022      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e96:	d01d      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d018      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00e      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d009      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d004      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d111      	bne.n	8001ef8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d010      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef6:	e007      	b.n	8001f08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800
 8001f24:	40000c00 	.word	0x40000c00
 8001f28:	40010400 	.word	0x40010400
 8001f2c:	40014000 	.word	0x40014000
 8001f30:	40001800 	.word	0x40001800

08001f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d122      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d11b      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0202 	mvn.w	r2, #2
 8001f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8ee 	bl	8002158 <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e005      	b.n	8001f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8e0 	bl	8002144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f8f1 	bl	800216c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d122      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d11b      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0204 	mvn.w	r2, #4
 8001fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8c4 	bl	8002158 <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8b6 	bl	8002144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8c7 	bl	800216c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d122      	bne.n	8002038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d11b      	bne.n	8002038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0208 	mvn.w	r2, #8
 8002008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2204      	movs	r2, #4
 800200e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f89a 	bl	8002158 <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f88c 	bl	8002144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f89d 	bl	800216c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b10      	cmp	r3, #16
 8002044:	d122      	bne.n	800208c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b10      	cmp	r3, #16
 8002052:	d11b      	bne.n	800208c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0210 	mvn.w	r2, #16
 800205c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2208      	movs	r2, #8
 8002062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f870 	bl	8002158 <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f862 	bl	8002144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f873 	bl	800216c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0201 	mvn.w	r2, #1
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fd96 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c2:	2b80      	cmp	r3, #128	; 0x80
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f902 	bl	80022e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b40      	cmp	r3, #64	; 0x40
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fc:	2b40      	cmp	r3, #64	; 0x40
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f838 	bl	8002180 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b20      	cmp	r3, #32
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b20      	cmp	r3, #32
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0220 	mvn.w	r2, #32
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8cc 	bl	80022d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a40      	ldr	r2, [pc, #256]	; (80022a8 <TIM_Base_SetConfig+0x114>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b2:	d00f      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a3d      	ldr	r2, [pc, #244]	; (80022ac <TIM_Base_SetConfig+0x118>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00b      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3c      	ldr	r2, [pc, #240]	; (80022b0 <TIM_Base_SetConfig+0x11c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d007      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3b      	ldr	r2, [pc, #236]	; (80022b4 <TIM_Base_SetConfig+0x120>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3a      	ldr	r2, [pc, #232]	; (80022b8 <TIM_Base_SetConfig+0x124>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d108      	bne.n	80021e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2f      	ldr	r2, [pc, #188]	; (80022a8 <TIM_Base_SetConfig+0x114>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d02b      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d027      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <TIM_Base_SetConfig+0x118>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d023      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <TIM_Base_SetConfig+0x11c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01f      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <TIM_Base_SetConfig+0x120>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01b      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a29      	ldr	r2, [pc, #164]	; (80022b8 <TIM_Base_SetConfig+0x124>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d017      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a28      	ldr	r2, [pc, #160]	; (80022bc <TIM_Base_SetConfig+0x128>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <TIM_Base_SetConfig+0x12c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00f      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <TIM_Base_SetConfig+0x130>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00b      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <TIM_Base_SetConfig+0x134>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d007      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <TIM_Base_SetConfig+0x138>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d003      	beq.n	8002246 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <TIM_Base_SetConfig+0x13c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d108      	bne.n	8002258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <TIM_Base_SetConfig+0x114>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <TIM_Base_SetConfig+0xf8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <TIM_Base_SetConfig+0x124>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d103      	bne.n	8002294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	615a      	str	r2, [r3, #20]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40010000 	.word	0x40010000
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40000800 	.word	0x40000800
 80022b4:	40000c00 	.word	0x40000c00
 80022b8:	40010400 	.word	0x40010400
 80022bc:	40014000 	.word	0x40014000
 80022c0:	40014400 	.word	0x40014400
 80022c4:	40014800 	.word	0x40014800
 80022c8:	40001800 	.word	0x40001800
 80022cc:	40001c00 	.word	0x40001c00
 80022d0:	40002000 	.word	0x40002000

080022d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f103 0208 	add.w	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002314:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f103 0208 	add.w	r2, r3, #8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f103 0208 	add.w	r2, r3, #8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b4:	d103      	bne.n	80023be <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e00c      	b.n	80023d8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3308      	adds	r3, #8
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e002      	b.n	80023cc <vListInsert+0x2e>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d2f6      	bcs.n	80023c6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	601a      	str	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6892      	ldr	r2, [r2, #8]
 8002426:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6852      	ldr	r2, [r2, #4]
 8002430:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d103      	bne.n	8002444 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1e5a      	subs	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <xQueueGenericReset+0x2a>
        __asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	60bb      	str	r3, [r7, #8]
    }
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800248e:	f002 fa91 	bl	80049b4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	441a      	add	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	3b01      	subs	r3, #1
 80024c0:	68f9      	ldr	r1, [r7, #12]
 80024c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	441a      	add	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	22ff      	movs	r2, #255	; 0xff
 80024d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	22ff      	movs	r2, #255	; 0xff
 80024da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00f      	beq.n	800250c <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3310      	adds	r3, #16
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 f983 	bl	80037fc <xTaskRemoveFromEventList>
 80024f6:	e009      	b.n	800250c <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3310      	adds	r3, #16
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fefd 	bl	80022fc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3324      	adds	r3, #36	; 0x24
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fef8 	bl	80022fc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800250c:	f002 fa82 	bl	8004a14 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800251a:	b580      	push	{r7, lr}
 800251c:	b08c      	sub	sp, #48	; 0x30
 800251e:	af02      	add	r7, sp, #8
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	4613      	mov	r3, r2
 8002526:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <xQueueGenericCreate+0x2a>
        __asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	61bb      	str	r3, [r7, #24]
    }
 8002540:	bf00      	nop
 8002542:	e7fe      	b.n	8002542 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <xQueueGenericCreate+0x48>
 8002554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	429a      	cmp	r2, r3
 8002560:	d101      	bne.n	8002566 <xQueueGenericCreate+0x4c>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <xQueueGenericCreate+0x4e>
 8002566:	2300      	movs	r3, #0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <xQueueGenericCreate+0x68>
        __asm volatile
 800256c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002570:	f383 8811 	msr	BASEPRI, r3
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	617b      	str	r3, [r7, #20]
    }
 800257e:	bf00      	nop
 8002580:	e7fe      	b.n	8002580 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002588:	d90a      	bls.n	80025a0 <xQueueGenericCreate+0x86>
        __asm volatile
 800258a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	613b      	str	r3, [r7, #16]
    }
 800259c:	bf00      	nop
 800259e:	e7fe      	b.n	800259e <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	3350      	adds	r3, #80	; 0x50
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 fb31 	bl	8004c0c <pvPortMalloc>
 80025aa:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3350      	adds	r3, #80	; 0x50
 80025ba:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025bc:	79fa      	ldrb	r2, [r7, #7]
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f805 	bl	80025d8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025ce:	6a3b      	ldr	r3, [r7, #32]
    }
 80025d0:	4618      	mov	r0, r3
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d103      	bne.n	80025f4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e002      	b.n	80025fa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002606:	2101      	movs	r1, #1
 8002608:	69b8      	ldr	r0, [r7, #24]
 800260a:	f7ff ff2b 	bl	8002464 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	2073      	movs	r0, #115	; 0x73
 800261e:	f003 f9f1 	bl	8005a04 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b090      	sub	sp, #64	; 0x40
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800263a:	2300      	movs	r3, #0
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xQueueGenericSend+0x32>
        __asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <xQueueGenericSend+0x40>
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <xQueueGenericSend+0x44>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <xQueueGenericSend+0x46>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <xQueueGenericSend+0x60>
        __asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d103      	bne.n	800269a <xQueueGenericSend+0x6e>
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <xQueueGenericSend+0x72>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <xQueueGenericSend+0x74>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <xQueueGenericSend+0x8e>
        __asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	623b      	str	r3, [r7, #32]
    }
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026ba:	f001 fa39 	bl	8003b30 <xTaskGetSchedulerState>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <xQueueGenericSend+0x9e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <xQueueGenericSend+0xa2>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <xQueueGenericSend+0xa4>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <xQueueGenericSend+0xbe>
        __asm volatile
 80026d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	61fb      	str	r3, [r7, #28]
    }
 80026e6:	bf00      	nop
 80026e8:	e7fe      	b.n	80026e8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026ea:	f002 f963 	bl	80049b4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <xQueueGenericSend+0xd4>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d11f      	bne.n	8002740 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fee6 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	460b      	mov	r3, r1
 8002712:	4601      	mov	r1, r0
 8002714:	205a      	movs	r0, #90	; 0x5a
 8002716:	f003 f9eb 	bl	8005af0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002720:	f000 fa56 	bl	8002bd0 <prvCopyDataToQueue>
 8002724:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2b00      	cmp	r3, #0
 800272c:	d004      	beq.n	8002738 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	3324      	adds	r3, #36	; 0x24
 8002732:	4618      	mov	r0, r3
 8002734:	f001 f862 	bl	80037fc <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002738:	f002 f96c 	bl	8004a14 <vPortExitCritical>
                return pdPASS;
 800273c:	2301      	movs	r3, #1
 800273e:	e07d      	b.n	800283c <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d110      	bne.n	8002768 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002746:	f002 f965 	bl	8004a14 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fec1 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	460b      	mov	r3, r1
 800275c:	4601      	mov	r1, r0
 800275e:	205a      	movs	r0, #90	; 0x5a
 8002760:	f003 f9c6 	bl	8005af0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002764:	2300      	movs	r3, #0
 8002766:	e069      	b.n	800283c <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4618      	mov	r0, r3
 8002774:	f001 f8a8 	bl	80038c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002778:	2301      	movs	r3, #1
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800277c:	f002 f94a 	bl	8004a14 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002780:	f000 fe36 	bl	80033f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002784:	f002 f916 	bl	80049b4 <vPortEnterCritical>
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800278e:	b25b      	sxtb	r3, r3
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002794:	d103      	bne.n	800279e <xQueueGenericSend+0x172>
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a4:	b25b      	sxtb	r3, r3
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027aa:	d103      	bne.n	80027b4 <xQueueGenericSend+0x188>
 80027ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027b4:	f002 f92e 	bl	8004a14 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027b8:	1d3a      	adds	r2, r7, #4
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 f897 	bl	80038f4 <xTaskCheckForTimeOut>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d124      	bne.n	8002816 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ce:	f000 faf7 	bl	8002dc0 <prvIsQueueFull>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d018      	beq.n	800280a <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	3310      	adds	r3, #16
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 ffb9 	bl	8003758 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80027e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e8:	f000 fa82 	bl	8002cf0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027ec:	f000 fe0e 	bl	800340c <xTaskResumeAll>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f47f af79 	bne.w	80026ea <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <xQueueGenericSend+0x218>)
 80027fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	e76f      	b.n	80026ea <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800280a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280c:	f000 fa70 	bl	8002cf0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002810:	f000 fdfc 	bl	800340c <xTaskResumeAll>
 8002814:	e769      	b.n	80026ea <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002818:	f000 fa6a 	bl	8002cf0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800281c:	f000 fdf6 	bl	800340c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	4618      	mov	r0, r3
 8002824:	f003 fe56 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	460b      	mov	r3, r1
 8002832:	4601      	mov	r1, r0
 8002834:	205a      	movs	r0, #90	; 0x5a
 8002836:	f003 f95b 	bl	8005af0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800283a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800283c:	4618      	mov	r0, r3
 800283e:	3738      	adds	r7, #56	; 0x38
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b090      	sub	sp, #64	; 0x40
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002864:	f383 8811 	msr	BASEPRI, r3
 8002868:	f3bf 8f6f 	isb	sy
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002872:	bf00      	nop
 8002874:	e7fe      	b.n	8002874 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <xQueueGenericSendFromISR+0x3c>
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <xQueueGenericSendFromISR+0x40>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <xQueueGenericSendFromISR+0x42>
 8002888:	2300      	movs	r3, #0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80028a0:	bf00      	nop
 80028a2:	e7fe      	b.n	80028a2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d103      	bne.n	80028b2 <xQueueGenericSendFromISR+0x6a>
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <xQueueGenericSendFromISR+0x6e>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <xQueueGenericSendFromISR+0x70>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	623b      	str	r3, [r7, #32]
    }
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028d2:	f002 f95b 	bl	8004b8c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028d6:	f3ef 8211 	mrs	r2, BASEPRI
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	61fa      	str	r2, [r7, #28]
 80028ec:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028ee:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <xQueueGenericSendFromISR+0xbc>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d148      	bne.n	8002996 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800290a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fddc 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 800291c:	4601      	mov	r1, r0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	461a      	mov	r2, r3
 8002922:	2060      	movs	r0, #96	; 0x60
 8002924:	f003 f814 	bl	8005950 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800292e:	f000 f94f 	bl	8002bd0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002932:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293a:	d112      	bne.n	8002962 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	2b00      	cmp	r3, #0
 8002942:	d025      	beq.n	8002990 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002946:	3324      	adds	r3, #36	; 0x24
 8002948:	4618      	mov	r0, r3
 800294a:	f000 ff57 	bl	80037fc <xTaskRemoveFromEventList>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01d      	beq.n	8002990 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01a      	beq.n	8002990 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e016      	b.n	8002990 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002962:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002966:	2b7f      	cmp	r3, #127	; 0x7f
 8002968:	d10a      	bne.n	8002980 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800296a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	617b      	str	r3, [r7, #20]
    }
 800297c:	bf00      	nop
 800297e:	e7fe      	b.n	800297e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002980:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002984:	3301      	adds	r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	b25a      	sxtb	r2, r3
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002990:	2301      	movs	r3, #1
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002994:	e00b      	b.n	80029ae <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	4618      	mov	r0, r3
 800299a:	f003 fd9b 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 800299e:	4601      	mov	r1, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	461a      	mov	r2, r3
 80029a4:	2060      	movs	r0, #96	; 0x60
 80029a6:	f002 ffd3 	bl	8005950 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029b8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3740      	adds	r7, #64	; 0x40
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b08f      	sub	sp, #60	; 0x3c
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <xQueueReceive+0x30>
        __asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	623b      	str	r3, [r7, #32]
    }
 80029f0:	bf00      	nop
 80029f2:	e7fe      	b.n	80029f2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <xQueueReceive+0x3e>
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <xQueueReceive+0x42>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <xQueueReceive+0x44>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xQueueReceive+0x5e>
        __asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	61fb      	str	r3, [r7, #28]
    }
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a22:	f001 f885 	bl	8003b30 <xTaskGetSchedulerState>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <xQueueReceive+0x6e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <xQueueReceive+0x72>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xQueueReceive+0x74>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <xQueueReceive+0x8e>
        __asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	61bb      	str	r3, [r7, #24]
    }
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a52:	f001 ffaf 	bl	80049b4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d024      	beq.n	8002aac <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a66:	f000 f91d 	bl	8002ca4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fd31 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002a72:	4604      	mov	r4, r0
 8002a74:	2000      	movs	r0, #0
 8002a76:	f003 fd2d 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2101      	movs	r1, #1
 8002a80:	9100      	str	r1, [sp, #0]
 8002a82:	4621      	mov	r1, r4
 8002a84:	205c      	movs	r0, #92	; 0x5c
 8002a86:	f003 f833 	bl	8005af0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 feac 	bl	80037fc <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002aa4:	f001 ffb6 	bl	8004a14 <vPortExitCritical>
                return pdPASS;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e08a      	b.n	8002bc2 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d113      	bne.n	8002ada <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ab2:	f001 ffaf 	bl	8004a14 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fd0b 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002abe:	4604      	mov	r4, r0
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f003 fd07 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2101      	movs	r1, #1
 8002acc:	9100      	str	r1, [sp, #0]
 8002ace:	4621      	mov	r1, r4
 8002ad0:	205c      	movs	r0, #92	; 0x5c
 8002ad2:	f003 f80d 	bl	8005af0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e073      	b.n	8002bc2 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ae0:	f107 0310 	add.w	r3, r7, #16
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 feef 	bl	80038c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002aee:	f001 ff91 	bl	8004a14 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002af2:	f000 fc7d 	bl	80033f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002af6:	f001 ff5d 	bl	80049b4 <vPortEnterCritical>
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b06:	d103      	bne.n	8002b10 <xQueueReceive+0x14c>
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1c:	d103      	bne.n	8002b26 <xQueueReceive+0x162>
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b26:	f001 ff75 	bl	8004a14 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b2a:	1d3a      	adds	r2, r7, #4
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fede 	bl	80038f4 <xTaskCheckForTimeOut>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d124      	bne.n	8002b88 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b40:	f000 f928 	bl	8002d94 <prvIsQueueEmpty>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d018      	beq.n	8002b7c <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	3324      	adds	r3, #36	; 0x24
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fe00 	bl	8003758 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b5a:	f000 f8c9 	bl	8002cf0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b5e:	f000 fc55 	bl	800340c <xTaskResumeAll>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f af74 	bne.w	8002a52 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <xQueueReceive+0x208>)
 8002b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	e76a      	b.n	8002a52 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b7e:	f000 f8b7 	bl	8002cf0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b82:	f000 fc43 	bl	800340c <xTaskResumeAll>
 8002b86:	e764      	b.n	8002a52 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8a:	f000 f8b1 	bl	8002cf0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b8e:	f000 fc3d 	bl	800340c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b94:	f000 f8fe 	bl	8002d94 <prvIsQueueEmpty>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f43f af59 	beq.w	8002a52 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fc96 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	2000      	movs	r0, #0
 8002bac:	f003 fc92 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	9100      	str	r1, [sp, #0]
 8002bb8:	4621      	mov	r1, r4
 8002bba:	205c      	movs	r0, #92	; 0x5c
 8002bbc:	f002 ff98 	bl	8005af0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bc0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3734      	adds	r7, #52	; 0x34
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000ed04 	.word	0xe000ed04

08002bd0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10d      	bne.n	8002c0a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d14d      	bne.n	8002c92 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 ffb6 	bl	8003b6c <xTaskPriorityDisinherit>
 8002c00:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	e043      	b.n	8002c92 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d119      	bne.n	8002c44 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6858      	ldr	r0, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	f003 fdd6 	bl	80067cc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	441a      	add	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d32b      	bcc.n	8002c92 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	e026      	b.n	8002c92 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68d8      	ldr	r0, [r3, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	f003 fdbc 	bl	80067cc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	425b      	negs	r3, r3
 8002c5e:	441a      	add	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d207      	bcs.n	8002c80 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	425b      	negs	r3, r3
 8002c7a:	441a      	add	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d105      	bne.n	8002c92 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c9a:	697b      	ldr	r3, [r7, #20]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d018      	beq.n	8002ce8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	441a      	add	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d303      	bcc.n	8002cd8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68d9      	ldr	r1, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6838      	ldr	r0, [r7, #0]
 8002ce4:	f003 fd72 	bl	80067cc <memcpy>
    }
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cf8:	f001 fe5c 	bl	80049b4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d02:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d04:	e011      	b.n	8002d2a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3324      	adds	r3, #36	; 0x24
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fd72 	bl	80037fc <xTaskRemoveFromEventList>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d1e:	f000 fe4f 	bl	80039c0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	dce9      	bgt.n	8002d06 <prvUnlockQueue+0x16>
 8002d32:	e000      	b.n	8002d36 <prvUnlockQueue+0x46>
                        break;
 8002d34:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d3e:	f001 fe69 	bl	8004a14 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d42:	f001 fe37 	bl	80049b4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d4c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d4e:	e011      	b.n	8002d74 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3310      	adds	r3, #16
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fd4d 	bl	80037fc <xTaskRemoveFromEventList>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d68:	f000 fe2a 	bl	80039c0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	dce9      	bgt.n	8002d50 <prvUnlockQueue+0x60>
 8002d7c:	e000      	b.n	8002d80 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d7e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	22ff      	movs	r2, #255	; 0xff
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d88:	f001 fe44 	bl	8004a14 <vPortExitCritical>
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d9c:	f001 fe0a 	bl	80049b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e001      	b.n	8002db2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002db2:	f001 fe2f 	bl	8004a14 <vPortExitCritical>

    return xReturn;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dc8:	f001 fdf4 	bl	80049b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d102      	bne.n	8002dde <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e001      	b.n	8002de2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002de2:	f001 fe17 	bl	8004a14 <vPortExitCritical>

    return xReturn;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e01e      	b.n	8002e3e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <vQueueAddToRegistry+0x60>)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d115      	bne.n	8002e38 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e0c:	4910      	ldr	r1, [pc, #64]	; (8002e50 <vQueueAddToRegistry+0x60>)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <vQueueAddToRegistry+0x60>)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fb55 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2071      	movs	r0, #113	; 0x71
 8002e32:	f002 fd8d 	bl	8005950 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e36:	e006      	b.n	8002e46 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b07      	cmp	r3, #7
 8002e42:	d9dd      	bls.n	8002e00 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000090 	.word	0x20000090

08002e54 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e64:	f001 fda6 	bl	80049b4 <vPortEnterCritical>
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e74:	d103      	bne.n	8002e7e <vQueueWaitForMessageRestricted+0x2a>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e8a:	d103      	bne.n	8002e94 <vQueueWaitForMessageRestricted+0x40>
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e94:	f001 fdbe 	bl	8004a14 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3324      	adds	r3, #36	; 0x24
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fc79 	bl	80037a0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff1e 	bl	8002cf0 <prvUnlockQueue>
    }
 8002eb4:	bf00      	nop
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08c      	sub	sp, #48	; 0x30
 8002ec0:	af04      	add	r7, sp, #16
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 fe9b 	bl	8004c0c <pvPortMalloc>
 8002ed6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00e      	beq.n	8002efc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ede:	2058      	movs	r0, #88	; 0x58
 8002ee0:	f001 fe94 	bl	8004c0c <pvPortMalloc>
 8002ee4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef2:	e005      	b.n	8002f00 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ef4:	6978      	ldr	r0, [r7, #20]
 8002ef6:	f001 ff69 	bl	8004dcc <vPortFree>
 8002efa:	e001      	b.n	8002f00 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d013      	beq.n	8002f2e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9303      	str	r3, [sp, #12]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	9302      	str	r3, [sp, #8]
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f80e 	bl	8002f3e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f22:	69f8      	ldr	r0, [r7, #28]
 8002f24:	f000 f8a2 	bl	800306c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	e002      	b.n	8002f34 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f32:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f34:	69bb      	ldr	r3, [r7, #24]
    }
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b088      	sub	sp, #32
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	461a      	mov	r2, r3
 8002f56:	21a5      	movs	r1, #165	; 0xa5
 8002f58:	f003 fc46 	bl	80067e8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f66:	3b01      	subs	r3, #1
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f023 0307 	bic.w	r3, r3, #7
 8002f74:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	617b      	str	r3, [r7, #20]
    }
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01f      	beq.n	8002fdc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	e012      	b.n	8002fc8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	7819      	ldrb	r1, [r3, #0]
 8002faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	3334      	adds	r3, #52	; 0x34
 8002fb2:	460a      	mov	r2, r1
 8002fb4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	d9e9      	bls.n	8002fa2 <prvInitialiseNewTask+0x64>
 8002fce:	e000      	b.n	8002fd2 <prvInitialiseNewTask+0x94>
            {
                break;
 8002fd0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fda:	e003      	b.n	8002fe4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d901      	bls.n	8002fee <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fea:	2304      	movs	r3, #4
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f999 	bl	800233c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	3318      	adds	r3, #24
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f994 	bl	800233c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003018:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	f1c3 0205 	rsb	r2, r3, #5
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	3350      	adds	r3, #80	; 0x50
 800302e:	2204      	movs	r2, #4
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f003 fbd8 	bl	80067e8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	3354      	adds	r3, #84	; 0x54
 800303c:	2201      	movs	r2, #1
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fbd1 	bl	80067e8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	69b8      	ldr	r0, [r7, #24]
 800304c:	f001 fb02 	bl	8004654 <pxPortInitialiseStack>
 8003050:	4602      	mov	r2, r0
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003060:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af02      	add	r7, sp, #8
 8003072:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003074:	f001 fc9e 	bl	80049b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <prvAddNewTaskToReadyList+0xe4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	4a34      	ldr	r2, [pc, #208]	; (8003150 <prvAddNewTaskToReadyList+0xe4>)
 8003080:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003082:	4b34      	ldr	r3, [pc, #208]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800308a:	4a32      	ldr	r2, [pc, #200]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <prvAddNewTaskToReadyList+0xe4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d110      	bne.n	80030ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003098:	f000 fcb0 	bl	80039fc <prvInitialiseTaskLists>
 800309c:	e00d      	b.n	80030ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800309e:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <prvAddNewTaskToReadyList+0xec>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030a6:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d802      	bhi.n	80030ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030b4:	4a27      	ldr	r2, [pc, #156]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <prvAddNewTaskToReadyList+0xf0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <prvAddNewTaskToReadyList+0xf0>)
 80030c2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <prvAddNewTaskToReadyList+0xf0>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <prvAddNewTaskToReadyList+0x94>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 f8d7 	bl	8006288 <SEGGER_SYSVIEW_OnTaskCreate>
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	461d      	mov	r5, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461c      	mov	r4, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	1ae3      	subs	r3, r4, r3
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	462b      	mov	r3, r5
 80030fc:	f001 ff84 	bl	8005008 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 f944 	bl	8006390 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	2201      	movs	r2, #1
 800310e:	409a      	lsls	r2, r3
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <prvAddNewTaskToReadyList+0xf4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <prvAddNewTaskToReadyList+0xf4>)
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <prvAddNewTaskToReadyList+0xf8>)
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f7ff f910 	bl	8002356 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003136:	f001 fc6d 	bl	8004a14 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <prvAddNewTaskToReadyList+0xec>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003142:	4b04      	ldr	r3, [pc, #16]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 8003144:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bdb0      	pop	{r4, r5, r7, pc}
 800314e:	bf00      	nop
 8003150:	200001a8 	.word	0x200001a8
 8003154:	200000d0 	.word	0x200000d0
 8003158:	200001b4 	.word	0x200001b4
 800315c:	200001c4 	.word	0x200001c4
 8003160:	200001b0 	.word	0x200001b0
 8003164:	200000d4 	.word	0x200000d4

08003168 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003170:	f001 fc20 	bl	80049b4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <vTaskDelete+0x18>
 800317a:	4b46      	ldr	r3, [pc, #280]	; (8003294 <vTaskDelete+0x12c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e000      	b.n	8003182 <vTaskDelete+0x1a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3304      	adds	r3, #4
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff f941 	bl	8002410 <uxListRemove>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d115      	bne.n	80031c0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	493f      	ldr	r1, [pc, #252]	; (8003298 <vTaskDelete+0x130>)
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <vTaskDelete+0x58>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	2201      	movs	r2, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43da      	mvns	r2, r3
 80031b6:	4b39      	ldr	r3, [pc, #228]	; (800329c <vTaskDelete+0x134>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4013      	ands	r3, r2
 80031bc:	4a37      	ldr	r2, [pc, #220]	; (800329c <vTaskDelete+0x134>)
 80031be:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d004      	beq.n	80031d2 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3318      	adds	r3, #24
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff f91f 	bl	8002410 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80031d2:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <vTaskDelete+0x138>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	4a31      	ldr	r2, [pc, #196]	; (80032a0 <vTaskDelete+0x138>)
 80031da:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80031dc:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <vTaskDelete+0x12c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d118      	bne.n	8003218 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	482d      	ldr	r0, [pc, #180]	; (80032a4 <vTaskDelete+0x13c>)
 80031ee:	f7ff f8b2 	bl	8002356 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <vTaskDelete+0x140>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3301      	adds	r3, #1
 80031f8:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <vTaskDelete+0x140>)
 80031fa:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 f968 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8003204:	4603      	mov	r3, r0
 8003206:	4619      	mov	r1, r3
 8003208:	2022      	movs	r0, #34	; 0x22
 800320a:	f002 fb65 	bl	80058d8 <SEGGER_SYSVIEW_RecordU32>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4618      	mov	r0, r3
 8003212:	f001 ff61 	bl	80050d8 <SYSVIEW_DeleteTask>
 8003216:	e016      	b.n	8003246 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <vTaskDelete+0x144>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3b01      	subs	r3, #1
 800321e:	4a23      	ldr	r2, [pc, #140]	; (80032ac <vTaskDelete+0x144>)
 8003220:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 f955 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 800322a:	4603      	mov	r3, r0
 800322c:	4619      	mov	r1, r3
 800322e:	2022      	movs	r0, #34	; 0x22
 8003230:	f002 fb52 	bl	80058d8 <SEGGER_SYSVIEW_RecordU32>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4618      	mov	r0, r3
 8003238:	f001 ff4e 	bl	80050d8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fc4b 	bl	8003ad8 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003242:	f000 fc59 	bl	8003af8 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003246:	f001 fbe5 	bl	8004a14 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <vTaskDelete+0x148>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01b      	beq.n	800328a <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <vTaskDelete+0x12c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d116      	bne.n	800328a <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800325c:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <vTaskDelete+0x14c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <vTaskDelete+0x112>
        __asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	60bb      	str	r3, [r7, #8]
    }
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <vTaskDelete+0x150>)
 800327c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200000d0 	.word	0x200000d0
 8003298:	200000d4 	.word	0x200000d4
 800329c:	200001b0 	.word	0x200001b0
 80032a0:	200001c4 	.word	0x200001c4
 80032a4:	2000017c 	.word	0x2000017c
 80032a8:	20000190 	.word	0x20000190
 80032ac:	200001a8 	.word	0x200001a8
 80032b0:	200001b4 	.word	0x200001b4
 80032b4:	200001d0 	.word	0x200001d0
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01b      	beq.n	8003306 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <vTaskDelay+0x68>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <vTaskDelay+0x30>
        __asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	60bb      	str	r3, [r7, #8]
    }
 80032e8:	bf00      	nop
 80032ea:	e7fe      	b.n	80032ea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80032ec:	f000 f880 	bl	80033f0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	2023      	movs	r0, #35	; 0x23
 80032f4:	f002 faf0 	bl	80058d8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032f8:	2100      	movs	r1, #0
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fe20 	bl	8003f40 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003300:	f000 f884 	bl	800340c <xTaskResumeAll>
 8003304:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <vTaskDelay+0x6c>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	200001d0 	.word	0x200001d0
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <vTaskStartScheduler+0xa4>)
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	2300      	movs	r3, #0
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	2300      	movs	r3, #0
 800333c:	2282      	movs	r2, #130	; 0x82
 800333e:	4925      	ldr	r1, [pc, #148]	; (80033d4 <vTaskStartScheduler+0xa8>)
 8003340:	4825      	ldr	r0, [pc, #148]	; (80033d8 <vTaskStartScheduler+0xac>)
 8003342:	f7ff fdbb 	bl	8002ebc <xTaskCreate>
 8003346:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d102      	bne.n	8003354 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800334e:	f000 fe6f 	bl	8004030 <xTimerCreateTimerTask>
 8003352:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d124      	bne.n	80033a4 <vTaskStartScheduler+0x78>
        __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	60bb      	str	r3, [r7, #8]
    }
 800336c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <vTaskStartScheduler+0xb0>)
 8003370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003374:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <vTaskStartScheduler+0xb4>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <vTaskStartScheduler+0xb8>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <vTaskStartScheduler+0xbc>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <vTaskStartScheduler+0xa4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d102      	bne.n	8003394 <vTaskStartScheduler+0x68>
 800338e:	f002 ff5f 	bl	8006250 <SEGGER_SYSVIEW_OnIdle>
 8003392:	e004      	b.n	800339e <vTaskStartScheduler+0x72>
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <vTaskStartScheduler+0xbc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f002 ffb7 	bl	800630c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800339e:	f001 f9e9 	bl	8004774 <xPortStartScheduler>
 80033a2:	e00e      	b.n	80033c2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033aa:	d10a      	bne.n	80033c2 <vTaskStartScheduler+0x96>
        __asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	607b      	str	r3, [r7, #4]
    }
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <vTaskStartScheduler+0xc0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200001cc 	.word	0x200001cc
 80033d4:	0800684c 	.word	0x0800684c
 80033d8:	080039d9 	.word	0x080039d9
 80033dc:	200001c8 	.word	0x200001c8
 80033e0:	200001b4 	.word	0x200001b4
 80033e4:	200001ac 	.word	0x200001ac
 80033e8:	200000d0 	.word	0x200000d0
 80033ec:	2000000c 	.word	0x2000000c

080033f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <vTaskSuspendAll+0x18>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	4a03      	ldr	r2, [pc, #12]	; (8003408 <vTaskSuspendAll+0x18>)
 80033fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	200001d0 	.word	0x200001d0

0800340c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800341a:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <xTaskResumeAll+0x104>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <xTaskResumeAll+0x2c>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	603b      	str	r3, [r7, #0]
    }
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003438:	f001 fabc 	bl	80049b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800343c:	4b34      	ldr	r3, [pc, #208]	; (8003510 <xTaskResumeAll+0x104>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3b01      	subs	r3, #1
 8003442:	4a33      	ldr	r2, [pc, #204]	; (8003510 <xTaskResumeAll+0x104>)
 8003444:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <xTaskResumeAll+0x104>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d159      	bne.n	8003502 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <xTaskResumeAll+0x108>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d055      	beq.n	8003502 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003456:	e032      	b.n	80034be <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003458:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <xTaskResumeAll+0x10c>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3318      	adds	r3, #24
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe ffd3 	bl	8002410 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3304      	adds	r3, #4
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe ffce 	bl	8002410 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4618      	mov	r0, r3
 8003478:	f002 ff8a 	bl	8006390 <SEGGER_SYSVIEW_OnTaskStartReady>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <xTaskResumeAll+0x110>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	4a24      	ldr	r2, [pc, #144]	; (800351c <xTaskResumeAll+0x110>)
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <xTaskResumeAll+0x114>)
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7fe ff56 	bl	8002356 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <xTaskResumeAll+0x118>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <xTaskResumeAll+0x11c>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034be:	4b16      	ldr	r3, [pc, #88]	; (8003518 <xTaskResumeAll+0x10c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1c8      	bne.n	8003458 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80034cc:	f000 fb14 	bl	8003af8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <xTaskResumeAll+0x120>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d010      	beq.n	80034fe <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80034dc:	f000 f838 	bl	8003550 <xTaskIncrementTick>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <xTaskResumeAll+0x11c>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f1      	bne.n	80034dc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <xTaskResumeAll+0x120>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <xTaskResumeAll+0x11c>)
 8003500:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003502:	f001 fa87 	bl	8004a14 <vPortExitCritical>

    return xAlreadyYielded;
 8003506:	687b      	ldr	r3, [r7, #4]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200001d0 	.word	0x200001d0
 8003514:	200001a8 	.word	0x200001a8
 8003518:	20000168 	.word	0x20000168
 800351c:	200001b0 	.word	0x200001b0
 8003520:	200000d4 	.word	0x200000d4
 8003524:	200000d0 	.word	0x200000d0
 8003528:	200001bc 	.word	0x200001bc
 800352c:	200001b8 	.word	0x200001b8

08003530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <xTaskGetTickCount+0x1c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800353c:	687b      	ldr	r3, [r7, #4]
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	200001ac 	.word	0x200001ac

08003550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355a:	4b41      	ldr	r3, [pc, #260]	; (8003660 <xTaskIncrementTick+0x110>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d173      	bne.n	800364a <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003562:	4b40      	ldr	r3, [pc, #256]	; (8003664 <xTaskIncrementTick+0x114>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3301      	adds	r3, #1
 8003568:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800356a:	4a3e      	ldr	r2, [pc, #248]	; (8003664 <xTaskIncrementTick+0x114>)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d120      	bne.n	80035b8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003576:	4b3c      	ldr	r3, [pc, #240]	; (8003668 <xTaskIncrementTick+0x118>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <xTaskIncrementTick+0x46>
        __asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	603b      	str	r3, [r7, #0]
    }
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xTaskIncrementTick+0x44>
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <xTaskIncrementTick+0x118>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	4b33      	ldr	r3, [pc, #204]	; (800366c <xTaskIncrementTick+0x11c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a31      	ldr	r2, [pc, #196]	; (8003668 <xTaskIncrementTick+0x118>)
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4a31      	ldr	r2, [pc, #196]	; (800366c <xTaskIncrementTick+0x11c>)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b31      	ldr	r3, [pc, #196]	; (8003670 <xTaskIncrementTick+0x120>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <xTaskIncrementTick+0x120>)
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	f000 faa0 	bl	8003af8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <xTaskIncrementTick+0x124>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d348      	bcc.n	8003654 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <xTaskIncrementTick+0x118>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035cc:	4b29      	ldr	r3, [pc, #164]	; (8003674 <xTaskIncrementTick+0x124>)
 80035ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d2:	601a      	str	r2, [r3, #0]
                    break;
 80035d4:	e03e      	b.n	8003654 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <xTaskIncrementTick+0x118>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d203      	bcs.n	80035f6 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035ee:	4a21      	ldr	r2, [pc, #132]	; (8003674 <xTaskIncrementTick+0x124>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035f4:	e02e      	b.n	8003654 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3304      	adds	r3, #4
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe ff08 	bl	8002410 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	3318      	adds	r3, #24
 800360c:	4618      	mov	r0, r3
 800360e:	f7fe feff 	bl	8002410 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4618      	mov	r0, r3
 8003616:	f002 febb 	bl	8006390 <SEGGER_SYSVIEW_OnTaskStartReady>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	2201      	movs	r2, #1
 8003620:	409a      	lsls	r2, r3
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <xTaskIncrementTick+0x128>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <xTaskIncrementTick+0x128>)
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4a10      	ldr	r2, [pc, #64]	; (800367c <xTaskIncrementTick+0x12c>)
 800363a:	441a      	add	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7fe fe87 	bl	8002356 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003648:	e7bb      	b.n	80035c2 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <xTaskIncrementTick+0x130>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <xTaskIncrementTick+0x130>)
 8003652:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003654:	697b      	ldr	r3, [r7, #20]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200001d0 	.word	0x200001d0
 8003664:	200001ac 	.word	0x200001ac
 8003668:	20000160 	.word	0x20000160
 800366c:	20000164 	.word	0x20000164
 8003670:	200001c0 	.word	0x200001c0
 8003674:	200001c8 	.word	0x200001c8
 8003678:	200001b0 	.word	0x200001b0
 800367c:	200000d4 	.word	0x200000d4
 8003680:	200001b8 	.word	0x200001b8

08003684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <vTaskSwitchContext+0xbc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003692:	4b2c      	ldr	r3, [pc, #176]	; (8003744 <vTaskSwitchContext+0xc0>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003698:	e04d      	b.n	8003736 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800369a:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <vTaskSwitchContext+0xc0>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <vTaskSwitchContext+0xc4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80036ae:	7afb      	ldrb	r3, [r7, #11]
 80036b0:	f1c3 031f 	rsb	r3, r3, #31
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	4925      	ldr	r1, [pc, #148]	; (800374c <vTaskSwitchContext+0xc8>)
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	607b      	str	r3, [r7, #4]
    }
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <vTaskSwitchContext+0x5a>
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4a18      	ldr	r2, [pc, #96]	; (800374c <vTaskSwitchContext+0xc8>)
 80036ec:	4413      	add	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	3308      	adds	r3, #8
 8003702:	429a      	cmp	r2, r3
 8003704:	d104      	bne.n	8003710 <vTaskSwitchContext+0x8c>
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <vTaskSwitchContext+0xcc>)
 8003718:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <vTaskSwitchContext+0xcc>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <vTaskSwitchContext+0xd0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d102      	bne.n	800372c <vTaskSwitchContext+0xa8>
 8003726:	f002 fd93 	bl	8006250 <SEGGER_SYSVIEW_OnIdle>
}
 800372a:	e004      	b.n	8003736 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <vTaskSwitchContext+0xcc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f002 fdeb 	bl	800630c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200001d0 	.word	0x200001d0
 8003744:	200001bc 	.word	0x200001bc
 8003748:	200001b0 	.word	0x200001b0
 800374c:	200000d4 	.word	0x200000d4
 8003750:	200000d0 	.word	0x200000d0
 8003754:	200001cc 	.word	0x200001cc

08003758 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	60fb      	str	r3, [r7, #12]
    }
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <vTaskPlaceOnEventList+0x44>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3318      	adds	r3, #24
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe fe09 	bl	800239e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800378c:	2101      	movs	r1, #1
 800378e:	6838      	ldr	r0, [r7, #0]
 8003790:	f000 fbd6 	bl	8003f40 <prvAddCurrentTaskToDelayedList>
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200000d0 	.word	0x200000d0

080037a0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	617b      	str	r3, [r7, #20]
    }
 80037c4:	bf00      	nop
 80037c6:	e7fe      	b.n	80037c6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <vTaskPlaceOnEventListRestricted+0x58>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3318      	adds	r3, #24
 80037ce:	4619      	mov	r1, r3
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7fe fdc0 	bl	8002356 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037e0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037e2:	2024      	movs	r0, #36	; 0x24
 80037e4:	f002 f85a 	bl	800589c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	68b8      	ldr	r0, [r7, #8]
 80037ec:	f000 fba8 	bl	8003f40 <prvAddCurrentTaskToDelayedList>
    }
 80037f0:	bf00      	nop
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200000d0 	.word	0x200000d0

080037fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60fb      	str	r3, [r7, #12]
    }
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	3318      	adds	r3, #24
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fdef 	bl	8002410 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <xTaskRemoveFromEventList+0xb4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d120      	bne.n	800387c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3304      	adds	r3, #4
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fde6 	bl	8002410 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4618      	mov	r0, r3
 8003848:	f002 fda2 	bl	8006390 <SEGGER_SYSVIEW_OnTaskStartReady>
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	2201      	movs	r2, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <xTaskRemoveFromEventList+0xb8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	4a16      	ldr	r2, [pc, #88]	; (80038b4 <xTaskRemoveFromEventList+0xb8>)
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <xTaskRemoveFromEventList+0xbc>)
 800386c:	441a      	add	r2, r3
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fe fd6e 	bl	8002356 <vListInsertEnd>
 800387a:	e005      	b.n	8003888 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3318      	adds	r3, #24
 8003880:	4619      	mov	r1, r3
 8003882:	480e      	ldr	r0, [pc, #56]	; (80038bc <xTaskRemoveFromEventList+0xc0>)
 8003884:	f7fe fd67 	bl	8002356 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <xTaskRemoveFromEventList+0xc4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	429a      	cmp	r2, r3
 8003894:	d905      	bls.n	80038a2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003896:	2301      	movs	r3, #1
 8003898:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <xTaskRemoveFromEventList+0xc8>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e001      	b.n	80038a6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80038a6:	697b      	ldr	r3, [r7, #20]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	200001d0 	.word	0x200001d0
 80038b4:	200001b0 	.word	0x200001b0
 80038b8:	200000d4 	.word	0x200000d4
 80038bc:	20000168 	.word	0x20000168
 80038c0:	200000d0 	.word	0x200000d0
 80038c4:	200001bc 	.word	0x200001bc

080038c8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <vTaskInternalSetTimeOutState+0x24>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <vTaskInternalSetTimeOutState+0x28>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	605a      	str	r2, [r3, #4]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	200001c0 	.word	0x200001c0
 80038f0:	200001ac 	.word	0x200001ac

080038f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	613b      	str	r3, [r7, #16]
    }
 8003916:	bf00      	nop
 8003918:	e7fe      	b.n	8003918 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	60fb      	str	r3, [r7, #12]
    }
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003936:	f001 f83d 	bl	80049b4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800393a:	4b1f      	ldr	r3, [pc, #124]	; (80039b8 <xTaskCheckForTimeOut+0xc4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003952:	d102      	bne.n	800395a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	e026      	b.n	80039a8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b17      	ldr	r3, [pc, #92]	; (80039bc <xTaskCheckForTimeOut+0xc8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d00a      	beq.n	800397c <xTaskCheckForTimeOut+0x88>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	d305      	bcc.n	800397c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003970:	2301      	movs	r3, #1
 8003972:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e015      	b.n	80039a8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	429a      	cmp	r2, r3
 8003984:	d20b      	bcs.n	800399e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad2      	subs	r2, r2, r3
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ff98 	bl	80038c8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e004      	b.n	80039a8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039a8:	f001 f834 	bl	8004a14 <vPortExitCritical>

    return xReturn;
 80039ac:	69fb      	ldr	r3, [r7, #28]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200001ac 	.word	0x200001ac
 80039bc:	200001c0 	.word	0x200001c0

080039c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <vTaskMissedYield+0x14>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	200001bc 	.word	0x200001bc

080039d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039e0:	f000 f84c 	bl	8003a7c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <prvIdleTask+0x20>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039f4:	e7f4      	b.n	80039e0 <prvIdleTask+0x8>
 80039f6:	bf00      	nop
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	e00c      	b.n	8003a22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <prvInitialiseTaskLists+0x60>)
 8003a14:	4413      	add	r3, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fc70 	bl	80022fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	607b      	str	r3, [r7, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d9ef      	bls.n	8003a08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a28:	480d      	ldr	r0, [pc, #52]	; (8003a60 <prvInitialiseTaskLists+0x64>)
 8003a2a:	f7fe fc67 	bl	80022fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a2e:	480d      	ldr	r0, [pc, #52]	; (8003a64 <prvInitialiseTaskLists+0x68>)
 8003a30:	f7fe fc64 	bl	80022fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a34:	480c      	ldr	r0, [pc, #48]	; (8003a68 <prvInitialiseTaskLists+0x6c>)
 8003a36:	f7fe fc61 	bl	80022fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a3a:	480c      	ldr	r0, [pc, #48]	; (8003a6c <prvInitialiseTaskLists+0x70>)
 8003a3c:	f7fe fc5e 	bl	80022fc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a40:	480b      	ldr	r0, [pc, #44]	; (8003a70 <prvInitialiseTaskLists+0x74>)
 8003a42:	f7fe fc5b 	bl	80022fc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <prvInitialiseTaskLists+0x78>)
 8003a48:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <prvInitialiseTaskLists+0x64>)
 8003a4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <prvInitialiseTaskLists+0x7c>)
 8003a4e:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <prvInitialiseTaskLists+0x68>)
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200000d4 	.word	0x200000d4
 8003a60:	20000138 	.word	0x20000138
 8003a64:	2000014c 	.word	0x2000014c
 8003a68:	20000168 	.word	0x20000168
 8003a6c:	2000017c 	.word	0x2000017c
 8003a70:	20000194 	.word	0x20000194
 8003a74:	20000160 	.word	0x20000160
 8003a78:	20000164 	.word	0x20000164

08003a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a82:	e019      	b.n	8003ab8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a84:	f000 ff96 	bl	80049b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <prvCheckTasksWaitingTermination+0x50>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe fcbb 	bl	8002410 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <prvCheckTasksWaitingTermination+0x54>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <prvCheckTasksWaitingTermination+0x54>)
 8003aa2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <prvCheckTasksWaitingTermination+0x58>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <prvCheckTasksWaitingTermination+0x58>)
 8003aac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003aae:	f000 ffb1 	bl	8004a14 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f810 	bl	8003ad8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <prvCheckTasksWaitingTermination+0x58>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e1      	bne.n	8003a84 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	2000017c 	.word	0x2000017c
 8003ad0:	200001a8 	.word	0x200001a8
 8003ad4:	20000190 	.word	0x20000190

08003ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f971 	bl	8004dcc <vPortFree>
                vPortFree( pxTCB );
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f001 f96e 	bl	8004dcc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <prvResetNextTaskUnblockTime+0x30>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <prvResetNextTaskUnblockTime+0x34>)
 8003b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b0e:	e005      	b.n	8003b1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <prvResetNextTaskUnblockTime+0x30>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <prvResetNextTaskUnblockTime+0x34>)
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000160 	.word	0x20000160
 8003b2c:	200001c8 	.word	0x200001c8

08003b30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <xTaskGetSchedulerState+0x34>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	e008      	b.n	8003b56 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <xTaskGetSchedulerState+0x38>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	e001      	b.n	8003b56 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b56:	687b      	ldr	r3, [r7, #4]
    }
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	200001b4 	.word	0x200001b4
 8003b68:	200001d0 	.word	0x200001d0

08003b6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d068      	beq.n	8003c54 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b82:	4b37      	ldr	r3, [pc, #220]	; (8003c60 <xTaskPriorityDisinherit+0xf4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d00a      	beq.n	8003ba2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	60fb      	str	r3, [r7, #12]
    }
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	60bb      	str	r3, [r7, #8]
    }
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc4:	1e5a      	subs	r2, r3, #1
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d03e      	beq.n	8003c54 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d13a      	bne.n	8003c54 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fc14 	bl	8002410 <uxListRemove>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <xTaskPriorityDisinherit+0xf8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <xTaskPriorityDisinherit+0xf8>)
 8003c02:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4619      	mov	r1, r3
 8003c08:	204a      	movs	r0, #74	; 0x4a
 8003c0a:	f001 fe65 	bl	80058d8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f1c3 0205 	rsb	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	2201      	movs	r2, #1
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <xTaskPriorityDisinherit+0xf8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	4a0c      	ldr	r2, [pc, #48]	; (8003c64 <xTaskPriorityDisinherit+0xf8>)
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <xTaskPriorityDisinherit+0xfc>)
 8003c42:	441a      	add	r2, r3
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f7fe fb83 	bl	8002356 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c54:	697b      	ldr	r3, [r7, #20]
    }
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	200000d0 	.word	0x200000d0
 8003c64:	200001b0 	.word	0x200001b0
 8003c68:	200000d4 	.word	0x200000d4

08003c6c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	613b      	str	r3, [r7, #16]
    }
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003c96:	f000 fe8d 	bl	80049b4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003c9a:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <xTaskGenericNotifyWait+0x108>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3354      	adds	r3, #84	; 0x54
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d022      	beq.n	8003cf2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003cac:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <xTaskGenericNotifyWait+0x108>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	3214      	adds	r2, #20
 8003cb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	43d2      	mvns	r2, r2
 8003cbc:	4011      	ands	r1, r2
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	3214      	adds	r2, #20
 8003cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003cc6:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <xTaskGenericNotifyWait+0x108>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	3354      	adds	r3, #84	; 0x54
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cda:	2101      	movs	r1, #1
 8003cdc:	6a38      	ldr	r0, [r7, #32]
 8003cde:	f000 f92f 	bl	8003f40 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003ce2:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <xTaskGenericNotifyWait+0x10c>)
 8003ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cf2:	f000 fe8f 	bl	8004a14 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003cf6:	f000 fe5d 	bl	80049b4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	2040      	movs	r0, #64	; 0x40
 8003d08:	f001 fef2 	bl	8005af0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <xTaskGenericNotifyWait+0x108>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	3214      	adds	r2, #20
 8003d1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <xTaskGenericNotifyWait+0x108>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3354      	adds	r3, #84	; 0x54
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d002      	beq.n	8003d3a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e00e      	b.n	8003d58 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <xTaskGenericNotifyWait+0x108>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	3214      	adds	r2, #20
 8003d42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	43d2      	mvns	r2, r2
 8003d4a:	4011      	ands	r1, r2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	3214      	adds	r2, #20
 8003d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <xTaskGenericNotifyWait+0x108>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3354      	adds	r3, #84	; 0x54
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003d66:	f000 fe55 	bl	8004a14 <vPortExitCritical>

        return xReturn;
 8003d6a:	697b      	ldr	r3, [r7, #20]
    }
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200000d0 	.word	0x200000d0
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08e      	sub	sp, #56	; 0x38
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <xTaskGenericNotify+0x2e>
        __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	623b      	str	r3, [r7, #32]
    }
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	61fb      	str	r3, [r7, #28]
    }
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8003dca:	f000 fdf3 	bl	80049b4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d006      	beq.n	8003de2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	3214      	adds	r2, #20
 8003dda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4413      	add	r3, r2
 8003de8:	3354      	adds	r3, #84	; 0x54
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	3354      	adds	r3, #84	; 0x54
 8003df8:	2202      	movs	r2, #2
 8003dfa:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d83b      	bhi.n	8003e7a <xTaskGenericNotify+0xfe>
 8003e02:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <xTaskGenericNotify+0x8c>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e99 	.word	0x08003e99
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e51 	.word	0x08003e51
 8003e18:	08003e5f 	.word	0x08003e5f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	3214      	adds	r2, #20
 8003e22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	ea42 0103 	orr.w	r1, r2, r3
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	3214      	adds	r2, #20
 8003e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e36:	e032      	b.n	8003e9e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	3214      	adds	r2, #20
 8003e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e42:	1c59      	adds	r1, r3, #1
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	3214      	adds	r2, #20
 8003e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e4e:	e026      	b.n	8003e9e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	3214      	adds	r2, #20
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e5c:	e01f      	b.n	8003e9e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d006      	beq.n	8003e74 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	3214      	adds	r2, #20
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003e72:	e014      	b.n	8003e9e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8003e78:	e011      	b.n	8003e9e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003e7a:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <xTaskGenericNotify+0x1b4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <xTaskGenericNotify+0x120>
        __asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	61bb      	str	r3, [r7, #24]
    }
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <xTaskGenericNotify+0x11a>
                    break;
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <xTaskGenericNotify+0x122>

                    break;
 8003e9c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f002 fb17 	bl	80064d4 <SEGGER_SYSVIEW_ShrinkId>
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	203e      	movs	r0, #62	; 0x3e
 8003eb4:	f001 fe1c 	bl	8005af0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d130      	bne.n	8003f22 <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe faa3 	bl	8002410 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 fa5f 	bl	8006390 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <xTaskGenericNotify+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <xTaskGenericNotify+0x1b8>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4a11      	ldr	r2, [pc, #68]	; (8003f38 <xTaskGenericNotify+0x1bc>)
 8003ef2:	441a      	add	r2, r3
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fe fa2b 	bl	8002356 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <xTaskGenericNotify+0x1a2>
        __asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	617b      	str	r3, [r7, #20]
    }
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <xTaskGenericNotify+0x1c0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f22:	f000 fd77 	bl	8004a14 <vPortExitCritical>

        return xReturn;
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3730      	adds	r7, #48	; 0x30
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200001ac 	.word	0x200001ac
 8003f34:	200001b0 	.word	0x200001b0
 8003f38:	200000d4 	.word	0x200000d4
 8003f3c:	200000d0 	.word	0x200000d0

08003f40 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003f4a:	4b32      	ldr	r3, [pc, #200]	; (8004014 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f50:	4b31      	ldr	r3, [pc, #196]	; (8004018 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fa5a 	bl	8002410 <uxListRemove>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10b      	bne.n	8003f7a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f62:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	2201      	movs	r2, #1
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	4b2a      	ldr	r3, [pc, #168]	; (800401c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4013      	ands	r3, r2
 8003f76:	4a29      	ldr	r2, [pc, #164]	; (800401c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003f78:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f80:	d110      	bne.n	8003fa4 <prvAddCurrentTaskToDelayedList+0x64>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003f88:	4b23      	ldr	r3, [pc, #140]	; (8004018 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	211b      	movs	r1, #27
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f002 fa40 	bl	8006414 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f94:	4b20      	ldr	r3, [pc, #128]	; (8004018 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4820      	ldr	r0, [pc, #128]	; (8004020 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003f9e:	f7fe f9da 	bl	8002356 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003fa2:	e032      	b.n	800400a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d20f      	bcs.n	8003fdc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003fbc:	4b16      	ldr	r3, [pc, #88]	; (8004018 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f002 fa26 	bl	8006414 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc8:	4b16      	ldr	r3, [pc, #88]	; (8004024 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f7fe f9e2 	bl	800239e <vListInsert>
}
 8003fda:	e016      	b.n	800400a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003fdc:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f002 fa16 	bl	8006414 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe f9d2 	bl	800239e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	; (800402c <prvAddCurrentTaskToDelayedList+0xec>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d202      	bcs.n	800400a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004004:	4a09      	ldr	r2, [pc, #36]	; (800402c <prvAddCurrentTaskToDelayedList+0xec>)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6013      	str	r3, [r2, #0]
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	200001ac 	.word	0x200001ac
 8004018:	200000d0 	.word	0x200000d0
 800401c:	200001b0 	.word	0x200001b0
 8004020:	20000194 	.word	0x20000194
 8004024:	20000164 	.word	0x20000164
 8004028:	20000160 	.word	0x20000160
 800402c:	200001c8 	.word	0x200001c8

08004030 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800403a:	f000 fad5 	bl	80045e8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <xTimerCreateTimerTask+0x54>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <xTimerCreateTimerTask+0x58>)
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	2302      	movs	r3, #2
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	2300      	movs	r3, #0
 8004050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004054:	490d      	ldr	r1, [pc, #52]	; (800408c <xTimerCreateTimerTask+0x5c>)
 8004056:	480e      	ldr	r0, [pc, #56]	; (8004090 <xTimerCreateTimerTask+0x60>)
 8004058:	f7fe ff30 	bl	8002ebc <xTaskCreate>
 800405c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	603b      	str	r3, [r7, #0]
    }
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800407a:	687b      	ldr	r3, [r7, #4]
    }
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000204 	.word	0x20000204
 8004088:	20000208 	.word	0x20000208
 800408c:	08006854 	.word	0x08006854
 8004090:	080041c9 	.word	0x080041c9

08004094 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xTimerGenericCommand+0x2e>
        __asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	623b      	str	r3, [r7, #32]
    }
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80040c2:	4b1a      	ldr	r3, [pc, #104]	; (800412c <xTimerGenericCommand+0x98>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d02a      	beq.n	8004120 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b05      	cmp	r3, #5
 80040da:	dc18      	bgt.n	800410e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040dc:	f7ff fd28 	bl	8003b30 <xTaskGetSchedulerState>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d109      	bne.n	80040fa <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <xTimerGenericCommand+0x98>)
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	f107 0114 	add.w	r1, r7, #20
 80040ee:	2300      	movs	r3, #0
 80040f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f2:	f7fe fa9b 	bl	800262c <xQueueGenericSend>
 80040f6:	6278      	str	r0, [r7, #36]	; 0x24
 80040f8:	e012      	b.n	8004120 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <xTimerGenericCommand+0x98>)
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	f107 0114 	add.w	r1, r7, #20
 8004102:	2300      	movs	r3, #0
 8004104:	2200      	movs	r2, #0
 8004106:	f7fe fa91 	bl	800262c <xQueueGenericSend>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24
 800410c:	e008      	b.n	8004120 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <xTimerGenericCommand+0x98>)
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	f107 0114 	add.w	r1, r7, #20
 8004116:	2300      	movs	r3, #0
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	f7fe fb95 	bl	8002848 <xQueueGenericSendFromISR>
 800411e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004122:	4618      	mov	r0, r3
 8004124:	3728      	adds	r7, #40	; 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000204 	.word	0x20000204

08004130 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800413a:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <prvProcessExpiredTimer+0x94>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3304      	adds	r3, #4
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe f961 	bl	8002410 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d022      	beq.n	80041a2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	18d1      	adds	r1, r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	6978      	ldr	r0, [r7, #20]
 800416a:	f000 f8d1 	bl	8004310 <prvInsertTimerInActiveList>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01f      	beq.n	80041b4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004174:	2300      	movs	r3, #0
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2300      	movs	r3, #0
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	2100      	movs	r1, #0
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f7ff ff88 	bl	8004094 <xTimerGenericCommand>
 8004184:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d113      	bne.n	80041b4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	60fb      	str	r3, [r7, #12]
    }
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	6978      	ldr	r0, [r7, #20]
 80041ba:	4798      	blx	r3
    }
 80041bc:	bf00      	nop
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	200001fc 	.word	0x200001fc

080041c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f857 	bl	8004288 <prvGetNextExpireTime>
 80041da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4619      	mov	r1, r3
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f803 	bl	80041ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80041e6:	f000 f8d5 	bl	8004394 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ea:	e7f1      	b.n	80041d0 <prvTimerTask+0x8>

080041ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80041f6:	f7ff f8fb 	bl	80033f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f866 	bl	80042d0 <prvSampleTimeNow>
 8004204:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d130      	bne.n	800426e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <prvProcessTimerOrBlockTask+0x3c>
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	429a      	cmp	r2, r3
 8004218:	d806      	bhi.n	8004228 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800421a:	f7ff f8f7 	bl	800340c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ff85 	bl	8004130 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004226:	e024      	b.n	8004272 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <prvProcessTimerOrBlockTask+0x90>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <prvProcessTimerOrBlockTask+0x50>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <prvProcessTimerOrBlockTask+0x52>
 800423c:	2300      	movs	r3, #0
 800423e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004240:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <prvProcessTimerOrBlockTask+0x94>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	f7fe fe01 	bl	8002e54 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004252:	f7ff f8db 	bl	800340c <xTaskResumeAll>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <prvProcessTimerOrBlockTask+0x98>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	f3bf 8f6f 	isb	sy
    }
 800426c:	e001      	b.n	8004272 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800426e:	f7ff f8cd 	bl	800340c <xTaskResumeAll>
    }
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000200 	.word	0x20000200
 8004280:	20000204 	.word	0x20000204
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <prvGetNextExpireTime+0x44>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <prvGetNextExpireTime+0x16>
 800429a:	2201      	movs	r2, #1
 800429c:	e000      	b.n	80042a0 <prvGetNextExpireTime+0x18>
 800429e:	2200      	movs	r2, #0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042ac:	4b07      	ldr	r3, [pc, #28]	; (80042cc <prvGetNextExpireTime+0x44>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e001      	b.n	80042bc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80042bc:	68fb      	ldr	r3, [r7, #12]
    }
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	200001fc 	.word	0x200001fc

080042d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80042d8:	f7ff f92a 	bl	8003530 <xTaskGetTickCount>
 80042dc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <prvSampleTimeNow+0x3c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d205      	bcs.n	80042f4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80042e8:	f000 f91a 	bl	8004520 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e002      	b.n	80042fa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80042fa:	4a04      	ldr	r2, [pc, #16]	; (800430c <prvSampleTimeNow+0x3c>)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004300:	68fb      	ldr	r3, [r7, #12]
    }
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	2000020c 	.word	0x2000020c

08004310 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d812      	bhi.n	800435c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	1ad2      	subs	r2, r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004344:	2301      	movs	r3, #1
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e01b      	b.n	8004382 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <prvInsertTimerInActiveList+0x7c>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7fe f822 	bl	800239e <vListInsert>
 800435a:	e012      	b.n	8004382 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d206      	bcs.n	8004372 <prvInsertTimerInActiveList+0x62>
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d302      	bcc.n	8004372 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800436c:	2301      	movs	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e007      	b.n	8004382 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <prvInsertTimerInActiveList+0x80>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3304      	adds	r3, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f7fe f80e 	bl	800239e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004382:	697b      	ldr	r3, [r7, #20]
    }
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000200 	.word	0x20000200
 8004390:	200001fc 	.word	0x200001fc

08004394 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004394:	b580      	push	{r7, lr}
 8004396:	b08c      	sub	sp, #48	; 0x30
 8004398:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800439a:	e0ae      	b.n	80044fa <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f2c0 80aa 	blt.w	80044f8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	3304      	adds	r3, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe f82b 	bl	8002410 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff87 	bl	80042d0 <prvSampleTimeNow>
 80043c2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	f200 8097 	bhi.w	80044fa <prvProcessReceivedCommands+0x166>
 80043cc:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <prvProcessReceivedCommands+0x40>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	080043fd 	.word	0x080043fd
 80043e0:	08004471 	.word	0x08004471
 80043e4:	08004485 	.word	0x08004485
 80043e8:	080044cf 	.word	0x080044cf
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	080043fd 	.word	0x080043fd
 80043f4:	08004471 	.word	0x08004471
 80043f8:	08004485 	.word	0x08004485
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a3a      	ldr	r2, [r7, #32]
 800441a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800441c:	f7ff ff78 	bl	8004310 <prvInsertTimerInActiveList>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d069      	beq.n	80044fa <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800442c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d05e      	beq.n	80044fa <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	441a      	add	r2, r3
 8004444:	2300      	movs	r3, #0
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	2100      	movs	r1, #0
 800444c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800444e:	f7ff fe21 	bl	8004094 <xTimerGenericCommand>
 8004452:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d14f      	bne.n	80044fa <prvProcessReceivedCommands+0x166>
        __asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	61bb      	str	r3, [r7, #24]
    }
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004482:	e03a      	b.n	80044fa <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <prvProcessReceivedCommands+0x126>
        __asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	617b      	str	r3, [r7, #20]
    }
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	18d1      	adds	r1, r2, r3
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	6a3a      	ldr	r2, [r7, #32]
 80044c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044c8:	f7ff ff22 	bl	8004310 <prvInsertTimerInActiveList>
                        break;
 80044cc:	e015      	b.n	80044fa <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d103      	bne.n	80044e4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80044dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044de:	f000 fc75 	bl	8004dcc <vPortFree>
 80044e2:	e00a      	b.n	80044fa <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80044f6:	e000      	b.n	80044fa <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80044f8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <prvProcessReceivedCommands+0x188>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f107 0108 	add.w	r1, r7, #8
 8004502:	2200      	movs	r2, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fa5d 	bl	80029c4 <xQueueReceive>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f af45 	bne.w	800439c <prvProcessReceivedCommands+0x8>
        }
    }
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	3728      	adds	r7, #40	; 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000204 	.word	0x20000204

08004520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004526:	e048      	b.n	80045ba <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004528:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004532:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7fd ff65 	bl	8002410 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d02e      	beq.n	80045ba <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4413      	add	r3, r2
 8004564:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	429a      	cmp	r2, r3
 800456c:	d90e      	bls.n	800458c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800457a:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f7fd ff0a 	bl	800239e <vListInsert>
 800458a:	e016      	b.n	80045ba <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800458c:	2300      	movs	r3, #0
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	2100      	movs	r1, #0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff fd7c 	bl	8004094 <xTimerGenericCommand>
 800459c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <prvSwitchTimerLists+0x9a>
        __asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	603b      	str	r3, [r7, #0]
    }
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1b1      	bne.n	8004528 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <prvSwitchTimerLists+0xc4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 80045d0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80045d2:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <prvSwitchTimerLists+0xc4>)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	6013      	str	r3, [r2, #0]
    }
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	200001fc 	.word	0x200001fc
 80045e4:	20000200 	.word	0x20000200

080045e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80045ec:	f000 f9e2 	bl	80049b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <prvCheckForValidListAndQueue+0x54>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d11d      	bne.n	8004634 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80045f8:	4811      	ldr	r0, [pc, #68]	; (8004640 <prvCheckForValidListAndQueue+0x58>)
 80045fa:	f7fd fe7f 	bl	80022fc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80045fe:	4811      	ldr	r0, [pc, #68]	; (8004644 <prvCheckForValidListAndQueue+0x5c>)
 8004600:	f7fd fe7c 	bl	80022fc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004604:	4b10      	ldr	r3, [pc, #64]	; (8004648 <prvCheckForValidListAndQueue+0x60>)
 8004606:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <prvCheckForValidListAndQueue+0x58>)
 8004608:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <prvCheckForValidListAndQueue+0x64>)
 800460c:	4a0d      	ldr	r2, [pc, #52]	; (8004644 <prvCheckForValidListAndQueue+0x5c>)
 800460e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004610:	2200      	movs	r2, #0
 8004612:	210c      	movs	r1, #12
 8004614:	200a      	movs	r0, #10
 8004616:	f7fd ff80 	bl	800251a <xQueueGenericCreate>
 800461a:	4603      	mov	r3, r0
 800461c:	4a07      	ldr	r2, [pc, #28]	; (800463c <prvCheckForValidListAndQueue+0x54>)
 800461e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <prvCheckForValidListAndQueue+0x54>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <prvCheckForValidListAndQueue+0x54>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4908      	ldr	r1, [pc, #32]	; (8004650 <prvCheckForValidListAndQueue+0x68>)
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fbde 	bl	8002df0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004634:	f000 f9ee 	bl	8004a14 <vPortExitCritical>
    }
 8004638:	bf00      	nop
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20000204 	.word	0x20000204
 8004640:	200001d4 	.word	0x200001d4
 8004644:	200001e8 	.word	0x200001e8
 8004648:	200001fc 	.word	0x200001fc
 800464c:	20000200 	.word	0x20000200
 8004650:	0800685c 	.word	0x0800685c

08004654 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3b04      	subs	r3, #4
 8004664:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800466c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3b04      	subs	r3, #4
 8004672:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f023 0201 	bic.w	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b04      	subs	r3, #4
 8004682:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004684:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <pxPortInitialiseStack+0x64>)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3b14      	subs	r3, #20
 800468e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3b04      	subs	r3, #4
 800469a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f06f 0202 	mvn.w	r2, #2
 80046a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3b20      	subs	r3, #32
 80046a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80046aa:	68fb      	ldr	r3, [r7, #12]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	080046bd 	.word	0x080046bd

080046bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <prvTaskExitError+0x54>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ce:	d00a      	beq.n	80046e6 <prvTaskExitError+0x2a>
        __asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60fb      	str	r3, [r7, #12]
    }
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <prvTaskExitError+0x28>
        __asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60bb      	str	r3, [r7, #8]
    }
 80046f8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80046fa:	bf00      	nop
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0fc      	beq.n	80046fc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	20000010 	.word	0x20000010
	...

08004720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <pxCurrentTCBConst2>)
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	6808      	ldr	r0, [r1, #0]
 8004726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472a:	f380 8809 	msr	PSP, r0
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f380 8811 	msr	BASEPRI, r0
 800473a:	4770      	bx	lr
 800473c:	f3af 8000 	nop.w

08004740 <pxCurrentTCBConst2>:
 8004740:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004748:	4808      	ldr	r0, [pc, #32]	; (800476c <prvPortStartFirstTask+0x24>)
 800474a:	6800      	ldr	r0, [r0, #0]
 800474c:	6800      	ldr	r0, [r0, #0]
 800474e:	f380 8808 	msr	MSP, r0
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f380 8814 	msr	CONTROL, r0
 800475a:	b662      	cpsie	i
 800475c:	b661      	cpsie	f
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	df00      	svc	0
 8004768:	bf00      	nop
 800476a:	0000      	.short	0x0000
 800476c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop

08004774 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800477a:	4b46      	ldr	r3, [pc, #280]	; (8004894 <xPortStartScheduler+0x120>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a46      	ldr	r2, [pc, #280]	; (8004898 <xPortStartScheduler+0x124>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d10a      	bne.n	800479a <xPortStartScheduler+0x26>
        __asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	613b      	str	r3, [r7, #16]
    }
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800479a:	4b3e      	ldr	r3, [pc, #248]	; (8004894 <xPortStartScheduler+0x120>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a3f      	ldr	r2, [pc, #252]	; (800489c <xPortStartScheduler+0x128>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d10a      	bne.n	80047ba <xPortStartScheduler+0x46>
        __asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	60fb      	str	r3, [r7, #12]
    }
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047ba:	4b39      	ldr	r3, [pc, #228]	; (80048a0 <xPortStartScheduler+0x12c>)
 80047bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	22ff      	movs	r2, #255	; 0xff
 80047ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <xPortStartScheduler+0x130>)
 80047e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047e2:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <xPortStartScheduler+0x134>)
 80047e4:	2207      	movs	r2, #7
 80047e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047e8:	e009      	b.n	80047fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80047ea:	4b2f      	ldr	r3, [pc, #188]	; (80048a8 <xPortStartScheduler+0x134>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <xPortStartScheduler+0x134>)
 80047f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b80      	cmp	r3, #128	; 0x80
 8004808:	d0ef      	beq.n	80047ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800480a:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <xPortStartScheduler+0x134>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1c3 0307 	rsb	r3, r3, #7
 8004812:	2b04      	cmp	r3, #4
 8004814:	d00a      	beq.n	800482c <xPortStartScheduler+0xb8>
        __asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	60bb      	str	r3, [r7, #8]
    }
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800482c:	4b1e      	ldr	r3, [pc, #120]	; (80048a8 <xPortStartScheduler+0x134>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <xPortStartScheduler+0x134>)
 8004834:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <xPortStartScheduler+0x134>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800483e:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <xPortStartScheduler+0x134>)
 8004840:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800484a:	4b18      	ldr	r3, [pc, #96]	; (80048ac <xPortStartScheduler+0x138>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a17      	ldr	r2, [pc, #92]	; (80048ac <xPortStartScheduler+0x138>)
 8004850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004854:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <xPortStartScheduler+0x138>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a14      	ldr	r2, [pc, #80]	; (80048ac <xPortStartScheduler+0x138>)
 800485c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004860:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004862:	f000 f963 	bl	8004b2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <xPortStartScheduler+0x13c>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800486c:	f000 f982 	bl	8004b74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004870:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <xPortStartScheduler+0x140>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a0f      	ldr	r2, [pc, #60]	; (80048b4 <xPortStartScheduler+0x140>)
 8004876:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800487a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800487c:	f7ff ff64 	bl	8004748 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004880:	f7fe ff00 	bl	8003684 <vTaskSwitchContext>
    prvTaskExitError();
 8004884:	f7ff ff1a 	bl	80046bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	e000ed00 	.word	0xe000ed00
 8004898:	410fc271 	.word	0x410fc271
 800489c:	410fc270 	.word	0x410fc270
 80048a0:	e000e400 	.word	0xe000e400
 80048a4:	20000210 	.word	0x20000210
 80048a8:	20000214 	.word	0x20000214
 80048ac:	e000ed20 	.word	0xe000ed20
 80048b0:	20000010 	.word	0x20000010
 80048b4:	e000ef34 	.word	0xe000ef34

080048b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048be:	4b37      	ldr	r3, [pc, #220]	; (800499c <vInitPrioGroupValue+0xe4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a37      	ldr	r2, [pc, #220]	; (80049a0 <vInitPrioGroupValue+0xe8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d10a      	bne.n	80048de <vInitPrioGroupValue+0x26>
        __asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	613b      	str	r3, [r7, #16]
    }
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048de:	4b2f      	ldr	r3, [pc, #188]	; (800499c <vInitPrioGroupValue+0xe4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a30      	ldr	r2, [pc, #192]	; (80049a4 <vInitPrioGroupValue+0xec>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d10a      	bne.n	80048fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60fb      	str	r3, [r7, #12]
    }
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048fe:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <vInitPrioGroupValue+0xf0>)
 8004900:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	22ff      	movs	r2, #255	; 0xff
 800490e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004920:	b2da      	uxtb	r2, r3
 8004922:	4b22      	ldr	r3, [pc, #136]	; (80049ac <vInitPrioGroupValue+0xf4>)
 8004924:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004926:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <vInitPrioGroupValue+0xf8>)
 8004928:	2207      	movs	r2, #7
 800492a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800492c:	e009      	b.n	8004942 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <vInitPrioGroupValue+0xf8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3b01      	subs	r3, #1
 8004934:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <vInitPrioGroupValue+0xf8>)
 8004936:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	b2db      	uxtb	r3, r3
 8004940:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d0ef      	beq.n	800492e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800494e:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <vInitPrioGroupValue+0xf8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1c3 0307 	rsb	r3, r3, #7
 8004956:	2b04      	cmp	r3, #4
 8004958:	d00a      	beq.n	8004970 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	60bb      	str	r3, [r7, #8]
    }
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <vInitPrioGroupValue+0xf8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <vInitPrioGroupValue+0xf8>)
 8004978:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <vInitPrioGroupValue+0xf8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004982:	4a0b      	ldr	r2, [pc, #44]	; (80049b0 <vInitPrioGroupValue+0xf8>)
 8004984:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	e000ed00 	.word	0xe000ed00
 80049a0:	410fc271 	.word	0x410fc271
 80049a4:	410fc270 	.word	0x410fc270
 80049a8:	e000e400 	.word	0xe000e400
 80049ac:	20000210 	.word	0x20000210
 80049b0:	20000214 	.word	0x20000214

080049b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
        __asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	607b      	str	r3, [r7, #4]
    }
 80049cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <vPortEnterCritical+0x58>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <vPortEnterCritical+0x58>)
 80049d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <vPortEnterCritical+0x58>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d10f      	bne.n	8004a00 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <vPortEnterCritical+0x5c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <vPortEnterCritical+0x4c>
        __asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	603b      	str	r3, [r7, #0]
    }
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <vPortEnterCritical+0x4a>
    }
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	20000010 	.word	0x20000010
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <vPortExitCritical+0x50>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <vPortExitCritical+0x24>
        __asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	607b      	str	r3, [r7, #4]
    }
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <vPortExitCritical+0x50>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <vPortExitCritical+0x50>)
 8004a40:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <vPortExitCritical+0x50>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d105      	bne.n	8004a56 <vPortExitCritical+0x42>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f383 8811 	msr	BASEPRI, r3
    }
 8004a54:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000010 	.word	0x20000010
	...

08004a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004a70:	f3ef 8009 	mrs	r0, PSP
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <pxCurrentTCBConst>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f01e 0f10 	tst.w	lr, #16
 8004a80:	bf08      	it	eq
 8004a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a94:	f380 8811 	msr	BASEPRI, r0
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f7fe fdf0 	bl	8003684 <vTaskSwitchContext>
 8004aa4:	f04f 0000 	mov.w	r0, #0
 8004aa8:	f380 8811 	msr	BASEPRI, r0
 8004aac:	bc09      	pop	{r0, r3}
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	6808      	ldr	r0, [r1, #0]
 8004ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab6:	f01e 0f10 	tst.w	lr, #16
 8004aba:	bf08      	it	eq
 8004abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ac0:	f380 8809 	msr	PSP, r0
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w

08004ad0 <pxCurrentTCBConst>:
 8004ad0:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
        __asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	607b      	str	r3, [r7, #4]
    }
 8004af0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004af2:	f001 fb33 	bl	800615c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004af6:	f7fe fd2b 	bl	8003550 <xTaskIncrementTick>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d006      	beq.n	8004b0e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004b00:	f001 fb8a 	bl	8006218 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b04:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <SysTick_Handler+0x50>)
 8004b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	e001      	b.n	8004b12 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004b0e:	f001 fb67 	bl	80061e0 <SEGGER_SYSVIEW_RecordExitISR>
 8004b12:	2300      	movs	r3, #0
 8004b14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f383 8811 	msr	BASEPRI, r3
    }
 8004b1c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <vPortSetupTimerInterrupt+0x34>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <vPortSetupTimerInterrupt+0x38>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <vPortSetupTimerInterrupt+0x3c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <vPortSetupTimerInterrupt+0x40>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <vPortSetupTimerInterrupt+0x44>)
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <vPortSetupTimerInterrupt+0x34>)
 8004b50:	2207      	movs	r2, #7
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	e000e010 	.word	0xe000e010
 8004b64:	e000e018 	.word	0xe000e018
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	10624dd3 	.word	0x10624dd3
 8004b70:	e000e014 	.word	0xe000e014

08004b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b84 <vPortEnableVFP+0x10>
 8004b78:	6801      	ldr	r1, [r0, #0]
 8004b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b7e:	6001      	str	r1, [r0, #0]
 8004b80:	4770      	bx	lr
 8004b82:	0000      	.short	0x0000
 8004b84:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop

08004b8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004b92:	f3ef 8305 	mrs	r3, IPSR
 8004b96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b0f      	cmp	r3, #15
 8004b9c:	d914      	bls.n	8004bc8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <vPortValidateInterruptPriority+0x70>)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <vPortValidateInterruptPriority+0x74>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	7afa      	ldrb	r2, [r7, #11]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d20a      	bcs.n	8004bc8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	607b      	str	r3, [r7, #4]
    }
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	; (8004c04 <vPortValidateInterruptPriority+0x78>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bd0:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <vPortValidateInterruptPriority+0x7c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d90a      	bls.n	8004bee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	603b      	str	r3, [r7, #0]
    }
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <vPortValidateInterruptPriority+0x60>
    }
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	e000e3f0 	.word	0xe000e3f0
 8004c00:	20000210 	.word	0x20000210
 8004c04:	e000ed0c 	.word	0xe000ed0c
 8004c08:	20000214 	.word	0x20000214

08004c0c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004c18:	f7fe fbea 	bl	80033f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004c1c:	4b65      	ldr	r3, [pc, #404]	; (8004db4 <pvPortMalloc+0x1a8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004c24:	f000 f934 	bl	8004e90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c28:	4b63      	ldr	r3, [pc, #396]	; (8004db8 <pvPortMalloc+0x1ac>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f040 80a7 	bne.w	8004d84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d02d      	beq.n	8004c98 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d227      	bcs.n	8004c98 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004c48:	2208      	movs	r2, #8
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d021      	beq.n	8004c9e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f023 0307 	bic.w	r3, r3, #7
 8004c60:	3308      	adds	r3, #8
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d214      	bcs.n	8004c92 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	3308      	adds	r3, #8
 8004c70:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <pvPortMalloc+0x92>
        __asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	617b      	str	r3, [r7, #20]
    }
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c96:	e002      	b.n	8004c9e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	e000      	b.n	8004ca0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c9e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d06e      	beq.n	8004d84 <pvPortMalloc+0x178>
 8004ca6:	4b45      	ldr	r3, [pc, #276]	; (8004dbc <pvPortMalloc+0x1b0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d869      	bhi.n	8004d84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004cb0:	4b43      	ldr	r3, [pc, #268]	; (8004dc0 <pvPortMalloc+0x1b4>)
 8004cb2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004cb4:	4b42      	ldr	r3, [pc, #264]	; (8004dc0 <pvPortMalloc+0x1b4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cba:	e004      	b.n	8004cc6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d903      	bls.n	8004cd8 <pvPortMalloc+0xcc>
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f1      	bne.n	8004cbc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004cd8:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <pvPortMalloc+0x1a8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d050      	beq.n	8004d84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	4413      	add	r3, r2
 8004cea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	1ad2      	subs	r2, r2, r3
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d91f      	bls.n	8004d44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <pvPortMalloc+0x120>
        __asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	613b      	str	r3, [r7, #16]
    }
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d3e:	69b8      	ldr	r0, [r7, #24]
 8004d40:	f000 f908 	bl	8004f54 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d44:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <pvPortMalloc+0x1b0>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	4a1b      	ldr	r2, [pc, #108]	; (8004dbc <pvPortMalloc+0x1b0>)
 8004d50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d52:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <pvPortMalloc+0x1b0>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <pvPortMalloc+0x1b8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d203      	bcs.n	8004d66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d5e:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <pvPortMalloc+0x1b0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <pvPortMalloc+0x1b8>)
 8004d64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <pvPortMalloc+0x1ac>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <pvPortMalloc+0x1bc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <pvPortMalloc+0x1bc>)
 8004d82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004d84:	f7fe fb42 	bl	800340c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <pvPortMalloc+0x19c>
        __asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	60fb      	str	r3, [r7, #12]
    }
 8004da4:	bf00      	nop
 8004da6:	e7fe      	b.n	8004da6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004da8:	69fb      	ldr	r3, [r7, #28]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3728      	adds	r7, #40	; 0x28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20012e20 	.word	0x20012e20
 8004db8:	20012e34 	.word	0x20012e34
 8004dbc:	20012e24 	.word	0x20012e24
 8004dc0:	20012e18 	.word	0x20012e18
 8004dc4:	20012e28 	.word	0x20012e28
 8004dc8:	20012e2c 	.word	0x20012e2c

08004dcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04d      	beq.n	8004e7a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004dde:	2308      	movs	r3, #8
 8004de0:	425b      	negs	r3, r3
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4413      	add	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <vPortFree+0xb8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <vPortFree+0x44>
        __asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	60fb      	str	r3, [r7, #12]
    }
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <vPortFree+0x62>
        __asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	60bb      	str	r3, [r7, #8]
    }
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <vPortFree+0xb8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01e      	beq.n	8004e7a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11a      	bne.n	8004e7a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <vPortFree+0xb8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	401a      	ands	r2, r3
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004e54:	f7fe facc 	bl	80033f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <vPortFree+0xbc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4413      	add	r3, r2
 8004e62:	4a09      	ldr	r2, [pc, #36]	; (8004e88 <vPortFree+0xbc>)
 8004e64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e66:	6938      	ldr	r0, [r7, #16]
 8004e68:	f000 f874 	bl	8004f54 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <vPortFree+0xc0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	4a06      	ldr	r2, [pc, #24]	; (8004e8c <vPortFree+0xc0>)
 8004e74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004e76:	f7fe fac9 	bl	800340c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004e7a:	bf00      	nop
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20012e34 	.word	0x20012e34
 8004e88:	20012e24 	.word	0x20012e24
 8004e8c:	20012e30 	.word	0x20012e30

08004e90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e96:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004e9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004e9c:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <prvHeapInit+0xac>)
 8004e9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3307      	adds	r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0307 	bic.w	r3, r3, #7
 8004eb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <prvHeapInit+0xac>)
 8004ec0:	4413      	add	r3, r2
 8004ec2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ec8:	4a1d      	ldr	r2, [pc, #116]	; (8004f40 <prvHeapInit+0xb0>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004ece:	4b1c      	ldr	r3, [pc, #112]	; (8004f40 <prvHeapInit+0xb0>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4413      	add	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004edc:	2208      	movs	r2, #8
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0307 	bic.w	r3, r3, #7
 8004eea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <prvHeapInit+0xb4>)
 8004ef0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <prvHeapInit+0xb4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004efa:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <prvHeapInit+0xb4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	1ad2      	subs	r2, r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f10:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <prvHeapInit+0xb4>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <prvHeapInit+0xb8>)
 8004f1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <prvHeapInit+0xbc>)
 8004f26:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <prvHeapInit+0xc0>)
 8004f2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f2e:	601a      	str	r2, [r3, #0]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20000218 	.word	0x20000218
 8004f40:	20012e18 	.word	0x20012e18
 8004f44:	20012e20 	.word	0x20012e20
 8004f48:	20012e28 	.word	0x20012e28
 8004f4c:	20012e24 	.word	0x20012e24
 8004f50:	20012e34 	.word	0x20012e34

08004f54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f5c:	4b28      	ldr	r3, [pc, #160]	; (8005000 <prvInsertBlockIntoFreeList+0xac>)
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e002      	b.n	8004f68 <prvInsertBlockIntoFreeList+0x14>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d8f7      	bhi.n	8004f62 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d108      	bne.n	8004f96 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	441a      	add	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	441a      	add	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d118      	bne.n	8004fdc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4b15      	ldr	r3, [pc, #84]	; (8005004 <prvInsertBlockIntoFreeList+0xb0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d00d      	beq.n	8004fd2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e008      	b.n	8004fe4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <prvInsertBlockIntoFreeList+0xb0>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e003      	b.n	8004fe4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d002      	beq.n	8004ff2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20012e18 	.word	0x20012e18
 8005004:	20012e20 	.word	0x20012e20

08005008 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005016:	2205      	movs	r2, #5
 8005018:	492b      	ldr	r1, [pc, #172]	; (80050c8 <SYSVIEW_AddTask+0xc0>)
 800501a:	68b8      	ldr	r0, [r7, #8]
 800501c:	f001 fbc6 	bl	80067ac <memcmp>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d04b      	beq.n	80050be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005026:	4b29      	ldr	r3, [pc, #164]	; (80050cc <SYSVIEW_AddTask+0xc4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b07      	cmp	r3, #7
 800502c:	d903      	bls.n	8005036 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800502e:	4828      	ldr	r0, [pc, #160]	; (80050d0 <SYSVIEW_AddTask+0xc8>)
 8005030:	f001 fb3c 	bl	80066ac <SEGGER_SYSVIEW_Warn>
    return;
 8005034:	e044      	b.n	80050c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005036:	4b25      	ldr	r3, [pc, #148]	; (80050cc <SYSVIEW_AddTask+0xc4>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4926      	ldr	r1, [pc, #152]	; (80050d4 <SYSVIEW_AddTask+0xcc>)
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800504a:	4b20      	ldr	r3, [pc, #128]	; (80050cc <SYSVIEW_AddTask+0xc4>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4921      	ldr	r1, [pc, #132]	; (80050d4 <SYSVIEW_AddTask+0xcc>)
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	3304      	adds	r3, #4
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005060:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <SYSVIEW_AddTask+0xc4>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	491b      	ldr	r1, [pc, #108]	; (80050d4 <SYSVIEW_AddTask+0xcc>)
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	3308      	adds	r3, #8
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <SYSVIEW_AddTask+0xc4>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4916      	ldr	r1, [pc, #88]	; (80050d4 <SYSVIEW_AddTask+0xcc>)
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	330c      	adds	r3, #12
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <SYSVIEW_AddTask+0xc4>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	4910      	ldr	r1, [pc, #64]	; (80050d4 <SYSVIEW_AddTask+0xcc>)
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	3310      	adds	r3, #16
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <SYSVIEW_AddTask+0xc4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a08      	ldr	r2, [pc, #32]	; (80050cc <SYSVIEW_AddTask+0xc4>)
 80050aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f8ca 	bl	8005250 <SYSVIEW_SendTaskInfo>
 80050bc:	e000      	b.n	80050c0 <SYSVIEW_AddTask+0xb8>
    return;
 80050be:	bf00      	nop

}
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	08006864 	.word	0x08006864
 80050cc:	20012ed8 	.word	0x20012ed8
 80050d0:	0800686c 	.word	0x0800686c
 80050d4:	20012e38 	.word	0x20012e38

080050d8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80050e0:	4b59      	ldr	r3, [pc, #356]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80ab 	beq.w	8005240 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e00d      	b.n	800510c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80050f0:	4956      	ldr	r1, [pc, #344]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d008      	beq.n	8005118 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3301      	adds	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	4b4e      	ldr	r3, [pc, #312]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	429a      	cmp	r2, r3
 8005114:	d3ec      	bcc.n	80050f0 <SYSVIEW_DeleteTask+0x18>
 8005116:	e000      	b.n	800511a <SYSVIEW_DeleteTask+0x42>
      break;
 8005118:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800511a:	4b4b      	ldr	r3, [pc, #300]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3b01      	subs	r3, #1
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	429a      	cmp	r2, r3
 8005124:	d111      	bne.n	800514a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4a46      	ldr	r2, [pc, #280]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 8005132:	4413      	add	r3, r2
 8005134:	2214      	movs	r2, #20
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fb55 	bl	80067e8 <memset>
    _NumTasks--;
 800513e:	4b42      	ldr	r3, [pc, #264]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3b01      	subs	r3, #1
 8005144:	4a40      	ldr	r2, [pc, #256]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	e07b      	b.n	8005242 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800514a:	4b3f      	ldr	r3, [pc, #252]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d276      	bcs.n	8005242 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005154:	4b3c      	ldr	r3, [pc, #240]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	1e5a      	subs	r2, r3, #1
 800515a:	493c      	ldr	r1, [pc, #240]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	6819      	ldr	r1, [r3, #0]
 8005168:	4838      	ldr	r0, [pc, #224]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4403      	add	r3, r0
 8005176:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005178:	4b33      	ldr	r3, [pc, #204]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	1e5a      	subs	r2, r3, #1
 800517e:	4933      	ldr	r1, [pc, #204]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3304      	adds	r3, #4
 800518c:	6819      	ldr	r1, [r3, #0]
 800518e:	482f      	ldr	r0, [pc, #188]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4403      	add	r3, r0
 800519c:	3304      	adds	r3, #4
 800519e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80051a0:	4b29      	ldr	r3, [pc, #164]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	1e5a      	subs	r2, r3, #1
 80051a6:	4929      	ldr	r1, [pc, #164]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	3308      	adds	r3, #8
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	4825      	ldr	r0, [pc, #148]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4403      	add	r3, r0
 80051c4:	3308      	adds	r3, #8
 80051c6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80051c8:	4b1f      	ldr	r3, [pc, #124]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	1e5a      	subs	r2, r3, #1
 80051ce:	491f      	ldr	r1, [pc, #124]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	330c      	adds	r3, #12
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	481b      	ldr	r0, [pc, #108]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4403      	add	r3, r0
 80051ec:	330c      	adds	r3, #12
 80051ee:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80051f0:	4b15      	ldr	r3, [pc, #84]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	1e5a      	subs	r2, r3, #1
 80051f6:	4915      	ldr	r1, [pc, #84]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	3310      	adds	r3, #16
 8005204:	6819      	ldr	r1, [r3, #0]
 8005206:	4811      	ldr	r0, [pc, #68]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4403      	add	r3, r0
 8005214:	3310      	adds	r3, #16
 8005216:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	1e5a      	subs	r2, r3, #1
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <SYSVIEW_DeleteTask+0x174>)
 8005228:	4413      	add	r3, r2
 800522a:	2214      	movs	r2, #20
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f001 fada 	bl	80067e8 <memset>
    _NumTasks--;
 8005234:	4b04      	ldr	r3, [pc, #16]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3b01      	subs	r3, #1
 800523a:	4a03      	ldr	r2, [pc, #12]	; (8005248 <SYSVIEW_DeleteTask+0x170>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e000      	b.n	8005242 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005240:	bf00      	nop
  }
}
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20012ed8 	.word	0x20012ed8
 800524c:	20012e38 	.word	0x20012e38

08005250 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	; 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800525e:	f107 0314 	add.w	r3, r7, #20
 8005262:	2214      	movs	r2, #20
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fabe 	bl	80067e8 <memset>
  TaskInfo.TaskID     = TaskID;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005280:	f107 0314 	add.w	r3, r7, #20
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fe3f 	bl	8005f08 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800528a:	bf00      	nop
 800528c:	3728      	adds	r7, #40	; 0x28
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800529a:	4b24      	ldr	r3, [pc, #144]	; (800532c <_DoInit+0x98>)
 800529c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2203      	movs	r2, #3
 80052a2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2203      	movs	r2, #3
 80052a8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a20      	ldr	r2, [pc, #128]	; (8005330 <_DoInit+0x9c>)
 80052ae:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a20      	ldr	r2, [pc, #128]	; (8005334 <_DoInit+0xa0>)
 80052b4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052bc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a17      	ldr	r2, [pc, #92]	; (8005330 <_DoInit+0x9c>)
 80052d4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a17      	ldr	r2, [pc, #92]	; (8005338 <_DoInit+0xa4>)
 80052da:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2210      	movs	r2, #16
 80052e0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3307      	adds	r3, #7
 80052f8:	4a10      	ldr	r2, [pc, #64]	; (800533c <_DoInit+0xa8>)
 80052fa:	6810      	ldr	r0, [r2, #0]
 80052fc:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80052fe:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <_DoInit+0xac>)
 8005306:	6810      	ldr	r0, [r2, #0]
 8005308:	6018      	str	r0, [r3, #0]
 800530a:	8891      	ldrh	r1, [r2, #4]
 800530c:	7992      	ldrb	r2, [r2, #6]
 800530e:	8099      	strh	r1, [r3, #4]
 8005310:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005312:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800531c:	f3bf 8f5f 	dmb	sy
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20012edc 	.word	0x20012edc
 8005330:	080068bc 	.word	0x080068bc
 8005334:	20012f84 	.word	0x20012f84
 8005338:	20013384 	.word	0x20013384
 800533c:	080068c8 	.word	0x080068c8
 8005340:	080068cc 	.word	0x080068cc

08005344 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	; 0x30
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005350:	4b3e      	ldr	r3, [pc, #248]	; (800544c <SEGGER_RTT_ReadNoLock+0x108>)
 8005352:	623b      	str	r3, [r7, #32]
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <SEGGER_RTT_ReadNoLock+0x1e>
 800535e:	f7ff ff99 	bl	8005294 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	3360      	adds	r3, #96	; 0x60
 800536e:	4a37      	ldr	r2, [pc, #220]	; (800544c <SEGGER_RTT_ReadNoLock+0x108>)
 8005370:	4413      	add	r3, r2
 8005372:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005384:	2300      	movs	r3, #0
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	429a      	cmp	r2, r3
 800538e:	d92b      	bls.n	80053e8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4293      	cmp	r3, r2
 80053a0:	bf28      	it	cs
 80053a2:	4613      	movcs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	4413      	add	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	6939      	ldr	r1, [r7, #16]
 80053b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053b6:	f001 fa09 	bl	80067cc <memcpy>
    NumBytesRead += NumBytesRem;
 80053ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4413      	add	r3, r2
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d101      	bne.n	80053e8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80053e4:	2300      	movs	r3, #0
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4293      	cmp	r3, r2
 80053f6:	bf28      	it	cs
 80053f8:	4613      	movcs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d019      	beq.n	8005436 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	4413      	add	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005412:	f001 f9db 	bl	80067cc <memcpy>
    NumBytesRead += NumBytesRem;
 8005416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4413      	add	r3, r2
 800541c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800541e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	4413      	add	r3, r2
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800542e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005440:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005444:	4618      	mov	r0, r3
 8005446:	3730      	adds	r7, #48	; 0x30
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20012edc 	.word	0x20012edc

08005450 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00f      	beq.n	8005486 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005466:	e002      	b.n	800546e <_EncodeStr+0x1e>
      Len++;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3301      	adds	r3, #1
 800546c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4413      	add	r3, r2
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f6      	bne.n	8005468 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	429a      	cmp	r2, r3
 8005480:	d901      	bls.n	8005486 <_EncodeStr+0x36>
      Len = Limit;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2bfe      	cmp	r3, #254	; 0xfe
 800548a:	d806      	bhi.n	800549a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	60fa      	str	r2, [r7, #12]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e011      	b.n	80054be <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	60fa      	str	r2, [r7, #12]
 80054a0:	22ff      	movs	r2, #255	; 0xff
 80054a2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	60fa      	str	r2, [r7, #12]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	0a19      	lsrs	r1, r3, #8
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	60fa      	str	r2, [r7, #12]
 80054ba:	b2ca      	uxtb	r2, r1
 80054bc:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80054c2:	e00a      	b.n	80054da <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	1c53      	adds	r3, r2, #1
 80054c8:	60bb      	str	r3, [r7, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1c59      	adds	r1, r3, #1
 80054ce:	60f9      	str	r1, [r7, #12]
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	701a      	strb	r2, [r3, #0]
    n++;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	3301      	adds	r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d3f0      	bcc.n	80054c4 <_EncodeStr+0x74>
  }
  return pPayload;
 80054e2:	68fb      	ldr	r3, [r7, #12]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800550e:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <_HandleIncomingPacket+0xe0>)
 8005510:	7e1b      	ldrb	r3, [r3, #24]
 8005512:	4618      	mov	r0, r3
 8005514:	1cfb      	adds	r3, r7, #3
 8005516:	2201      	movs	r2, #1
 8005518:	4619      	mov	r1, r3
 800551a:	f7ff ff13 	bl	8005344 <SEGGER_RTT_ReadNoLock>
 800551e:	4603      	mov	r3, r0
 8005520:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	dd54      	ble.n	80055d2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	2b80      	cmp	r3, #128	; 0x80
 800552c:	d032      	beq.n	8005594 <_HandleIncomingPacket+0x8c>
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	dc42      	bgt.n	80055b8 <_HandleIncomingPacket+0xb0>
 8005532:	2b07      	cmp	r3, #7
 8005534:	dc16      	bgt.n	8005564 <_HandleIncomingPacket+0x5c>
 8005536:	2b00      	cmp	r3, #0
 8005538:	dd3e      	ble.n	80055b8 <_HandleIncomingPacket+0xb0>
 800553a:	3b01      	subs	r3, #1
 800553c:	2b06      	cmp	r3, #6
 800553e:	d83b      	bhi.n	80055b8 <_HandleIncomingPacket+0xb0>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <_HandleIncomingPacket+0x40>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	0800556b 	.word	0x0800556b
 800554c:	08005571 	.word	0x08005571
 8005550:	08005577 	.word	0x08005577
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005583 	.word	0x08005583
 800555c:	08005589 	.word	0x08005589
 8005560:	0800558f 	.word	0x0800558f
 8005564:	2b7f      	cmp	r3, #127	; 0x7f
 8005566:	d036      	beq.n	80055d6 <_HandleIncomingPacket+0xce>
 8005568:	e026      	b.n	80055b8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800556a:	f000 fb53 	bl	8005c14 <SEGGER_SYSVIEW_Start>
      break;
 800556e:	e037      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005570:	f000 fc0a 	bl	8005d88 <SEGGER_SYSVIEW_Stop>
      break;
 8005574:	e034      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005576:	f000 fdbf 	bl	80060f8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800557a:	e031      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800557c:	f000 fda8 	bl	80060d0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005580:	e02e      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005582:	f000 fc27 	bl	8005dd4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005586:	e02b      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005588:	f001 f852 	bl	8006630 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800558c:	e028      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800558e:	f001 f831 	bl	80065f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005592:	e025      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005594:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <_HandleIncomingPacket+0xe0>)
 8005596:	7e1b      	ldrb	r3, [r3, #24]
 8005598:	4618      	mov	r0, r3
 800559a:	1cfb      	adds	r3, r7, #3
 800559c:	2201      	movs	r2, #1
 800559e:	4619      	mov	r1, r3
 80055a0:	f7ff fed0 	bl	8005344 <SEGGER_RTT_ReadNoLock>
 80055a4:	4603      	mov	r3, r0
 80055a6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dd15      	ble.n	80055da <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 ff9f 	bl	80064f4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80055b6:	e010      	b.n	80055da <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da0e      	bge.n	80055de <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <_HandleIncomingPacket+0xe0>)
 80055c2:	7e1b      	ldrb	r3, [r3, #24]
 80055c4:	4618      	mov	r0, r3
 80055c6:	1cfb      	adds	r3, r7, #3
 80055c8:	2201      	movs	r2, #1
 80055ca:	4619      	mov	r1, r3
 80055cc:	f7ff feba 	bl	8005344 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80055d0:	e005      	b.n	80055de <_HandleIncomingPacket+0xd6>
    }
  }
 80055d2:	bf00      	nop
 80055d4:	e004      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
      break;
 80055d6:	bf00      	nop
 80055d8:	e002      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
      break;
 80055da:	bf00      	nop
 80055dc:	e000      	b.n	80055e0 <_HandleIncomingPacket+0xd8>
      break;
 80055de:	bf00      	nop
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20013394 	.word	0x20013394

080055ec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08c      	sub	sp, #48	; 0x30
 80055f0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055f2:	2301      	movs	r3, #1
 80055f4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	3301      	adds	r3, #1
 80055fa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005600:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <_TrySendOverflowPacket+0xdc>)
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
 8005606:	e00b      	b.n	8005620 <_TrySendOverflowPacket+0x34>
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	b2da      	uxtb	r2, r3
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	1c59      	adds	r1, r3, #1
 8005610:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	09db      	lsrs	r3, r3, #7
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	2b7f      	cmp	r3, #127	; 0x7f
 8005624:	d8f0      	bhi.n	8005608 <_TrySendOverflowPacket+0x1c>
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800562c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005636:	4b25      	ldr	r3, [pc, #148]	; (80056cc <_TrySendOverflowPacket+0xe0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800563c:	4b22      	ldr	r3, [pc, #136]	; (80056c8 <_TrySendOverflowPacket+0xdc>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	e00b      	b.n	8005668 <_TrySendOverflowPacket+0x7c>
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	6279      	str	r1, [r7, #36]	; 0x24
 800565a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	09db      	lsrs	r3, r3, #7
 8005666:	623b      	str	r3, [r7, #32]
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	2b7f      	cmp	r3, #127	; 0x7f
 800566c:	d8f0      	bhi.n	8005650 <_TrySendOverflowPacket+0x64>
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	627a      	str	r2, [r7, #36]	; 0x24
 8005674:	6a3a      	ldr	r2, [r7, #32]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <_TrySendOverflowPacket+0xdc>)
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	4618      	mov	r0, r3
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	461a      	mov	r2, r3
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	4619      	mov	r1, r3
 8005690:	f7fa fd9e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005694:	4603      	mov	r3, r0
 8005696:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800569e:	4a0a      	ldr	r2, [pc, #40]	; (80056c8 <_TrySendOverflowPacket+0xdc>)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80056a4:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <_TrySendOverflowPacket+0xdc>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <_TrySendOverflowPacket+0xdc>)
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	e004      	b.n	80056bc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <_TrySendOverflowPacket+0xdc>)
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	3301      	adds	r3, #1
 80056b8:	4a03      	ldr	r2, [pc, #12]	; (80056c8 <_TrySendOverflowPacket+0xdc>)
 80056ba:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80056bc:	693b      	ldr	r3, [r7, #16]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3730      	adds	r7, #48	; 0x30
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20013394 	.word	0x20013394
 80056cc:	e0001004 	.word	0xe0001004

080056d0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80056dc:	4b6c      	ldr	r3, [pc, #432]	; (8005890 <_SendPacket+0x1c0>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d010      	beq.n	8005706 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80056e4:	4b6a      	ldr	r3, [pc, #424]	; (8005890 <_SendPacket+0x1c0>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80a3 	beq.w	8005834 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056ee:	4b68      	ldr	r3, [pc, #416]	; (8005890 <_SendPacket+0x1c0>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d109      	bne.n	800570a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80056f6:	f7ff ff79 	bl	80055ec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80056fa:	4b65      	ldr	r3, [pc, #404]	; (8005890 <_SendPacket+0x1c0>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	f040 809a 	bne.w	8005838 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005704:	e001      	b.n	800570a <_SendPacket+0x3a>
    goto Send;
 8005706:	bf00      	nop
 8005708:	e000      	b.n	800570c <_SendPacket+0x3c>
Send:
 800570a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b1f      	cmp	r3, #31
 8005710:	d809      	bhi.n	8005726 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005712:	4b5f      	ldr	r3, [pc, #380]	; (8005890 <_SendPacket+0x1c0>)
 8005714:	69da      	ldr	r2, [r3, #28]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 808b 	bne.w	800583c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b17      	cmp	r3, #23
 800572a:	d807      	bhi.n	800573c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3b01      	subs	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e03d      	b.n	80057b8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	2b7f      	cmp	r3, #127	; 0x7f
 8005748:	d912      	bls.n	8005770 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	09da      	lsrs	r2, r3, #7
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3b01      	subs	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	3a01      	subs	r2, #1
 8005762:	60fa      	str	r2, [r7, #12]
 8005764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e006      	b.n	800577e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b7f      	cmp	r3, #127	; 0x7f
 8005782:	d912      	bls.n	80057aa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	09da      	lsrs	r2, r3, #7
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3b01      	subs	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	3a01      	subs	r2, #1
 800579c:	60fa      	str	r2, [r7, #12]
 800579e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	e006      	b.n	80057b8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057b8:	4b36      	ldr	r3, [pc, #216]	; (8005894 <_SendPacket+0x1c4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057be:	4b34      	ldr	r3, [pc, #208]	; (8005890 <_SendPacket+0x1c0>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	e00b      	b.n	80057ea <_SendPacket+0x11a>
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	1c59      	adds	r1, r3, #1
 80057da:	6279      	str	r1, [r7, #36]	; 0x24
 80057dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	09db      	lsrs	r3, r3, #7
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	2b7f      	cmp	r3, #127	; 0x7f
 80057ee:	d8f0      	bhi.n	80057d2 <_SendPacket+0x102>
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	627a      	str	r2, [r7, #36]	; 0x24
 80057f6:	6a3a      	ldr	r2, [r7, #32]
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005800:	4b23      	ldr	r3, [pc, #140]	; (8005890 <_SendPacket+0x1c0>)
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	4618      	mov	r0, r3
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	461a      	mov	r2, r3
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	f7fa fcde 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005814:	4603      	mov	r3, r0
 8005816:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800581e:	4a1c      	ldr	r2, [pc, #112]	; (8005890 <_SendPacket+0x1c0>)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	60d3      	str	r3, [r2, #12]
 8005824:	e00b      	b.n	800583e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <_SendPacket+0x1c0>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	b2da      	uxtb	r2, r3
 800582e:	4b18      	ldr	r3, [pc, #96]	; (8005890 <_SendPacket+0x1c0>)
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e004      	b.n	800583e <_SendPacket+0x16e>
    goto SendDone;
 8005834:	bf00      	nop
 8005836:	e002      	b.n	800583e <_SendPacket+0x16e>
      goto SendDone;
 8005838:	bf00      	nop
 800583a:	e000      	b.n	800583e <_SendPacket+0x16e>
      goto SendDone;
 800583c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800583e:	4b14      	ldr	r3, [pc, #80]	; (8005890 <_SendPacket+0x1c0>)
 8005840:	7e1b      	ldrb	r3, [r3, #24]
 8005842:	4619      	mov	r1, r3
 8005844:	4a14      	ldr	r2, [pc, #80]	; (8005898 <_SendPacket+0x1c8>)
 8005846:	460b      	mov	r3, r1
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	440b      	add	r3, r1
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4413      	add	r3, r2
 8005850:	336c      	adds	r3, #108	; 0x6c
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <_SendPacket+0x1c0>)
 8005856:	7e1b      	ldrb	r3, [r3, #24]
 8005858:	4618      	mov	r0, r3
 800585a:	490f      	ldr	r1, [pc, #60]	; (8005898 <_SendPacket+0x1c8>)
 800585c:	4603      	mov	r3, r0
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	4403      	add	r3, r0
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	440b      	add	r3, r1
 8005866:	3370      	adds	r3, #112	; 0x70
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d00b      	beq.n	8005886 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800586e:	4b08      	ldr	r3, [pc, #32]	; (8005890 <_SendPacket+0x1c0>)
 8005870:	789b      	ldrb	r3, [r3, #2]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d107      	bne.n	8005886 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <_SendPacket+0x1c0>)
 8005878:	2201      	movs	r2, #1
 800587a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800587c:	f7ff fe44 	bl	8005508 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <_SendPacket+0x1c0>)
 8005882:	2200      	movs	r2, #0
 8005884:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005886:	bf00      	nop
 8005888:	3728      	adds	r7, #40	; 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20013394 	.word	0x20013394
 8005894:	e0001004 	.word	0xe0001004
 8005898:	20012edc 	.word	0x20012edc

0800589c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058a4:	f3ef 8311 	mrs	r3, BASEPRI
 80058a8:	f04f 0120 	mov.w	r1, #32
 80058ac:	f381 8811 	msr	BASEPRI, r1
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	4808      	ldr	r0, [pc, #32]	; (80058d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80058b4:	f7ff fe1c 	bl	80054f0 <_PreparePacket>
 80058b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68b8      	ldr	r0, [r7, #8]
 80058c0:	f7ff ff06 	bl	80056d0 <_SendPacket>
  RECORD_END();
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f383 8811 	msr	BASEPRI, r3
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	200133c4 	.word	0x200133c4

080058d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058e2:	f3ef 8311 	mrs	r3, BASEPRI
 80058e6:	f04f 0120 	mov.w	r1, #32
 80058ea:	f381 8811 	msr	BASEPRI, r1
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	4816      	ldr	r0, [pc, #88]	; (800594c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80058f2:	f7ff fdfd 	bl	80054f0 <_PreparePacket>
 80058f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e00b      	b.n	800591e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1c59      	adds	r1, r3, #1
 800590e:	61f9      	str	r1, [r7, #28]
 8005910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	09db      	lsrs	r3, r3, #7
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b7f      	cmp	r3, #127	; 0x7f
 8005922:	d8f0      	bhi.n	8005906 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	61fa      	str	r2, [r7, #28]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	6938      	ldr	r0, [r7, #16]
 800593a:	f7ff fec9 	bl	80056d0 <_SendPacket>
  RECORD_END();
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f383 8811 	msr	BASEPRI, r3
}
 8005944:	bf00      	nop
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	200133c4 	.word	0x200133c4

08005950 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b08c      	sub	sp, #48	; 0x30
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800595c:	f3ef 8311 	mrs	r3, BASEPRI
 8005960:	f04f 0120 	mov.w	r1, #32
 8005964:	f381 8811 	msr	BASEPRI, r1
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	4825      	ldr	r0, [pc, #148]	; (8005a00 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800596c:	f7ff fdc0 	bl	80054f0 <_PreparePacket>
 8005970:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
 800597e:	e00b      	b.n	8005998 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	b2da      	uxtb	r2, r3
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	1c59      	adds	r1, r3, #1
 8005988:	62f9      	str	r1, [r7, #44]	; 0x2c
 800598a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	09db      	lsrs	r3, r3, #7
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2b7f      	cmp	r3, #127	; 0x7f
 800599c:	d8f0      	bhi.n	8005980 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	e00b      	b.n	80059d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	6279      	str	r1, [r7, #36]	; 0x24
 80059c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	09db      	lsrs	r3, r3, #7
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	2b7f      	cmp	r3, #127	; 0x7f
 80059d4:	d8f0      	bhi.n	80059b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	627a      	str	r2, [r7, #36]	; 0x24
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	6979      	ldr	r1, [r7, #20]
 80059ea:	69b8      	ldr	r0, [r7, #24]
 80059ec:	f7ff fe70 	bl	80056d0 <_SendPacket>
  RECORD_END();
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f383 8811 	msr	BASEPRI, r3
}
 80059f6:	bf00      	nop
 80059f8:	3730      	adds	r7, #48	; 0x30
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	200133c4 	.word	0x200133c4

08005a04 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08e      	sub	sp, #56	; 0x38
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a12:	f3ef 8311 	mrs	r3, BASEPRI
 8005a16:	f04f 0120 	mov.w	r1, #32
 8005a1a:	f381 8811 	msr	BASEPRI, r1
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	4832      	ldr	r0, [pc, #200]	; (8005aec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005a22:	f7ff fd65 	bl	80054f0 <_PreparePacket>
 8005a26:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	633b      	str	r3, [r7, #48]	; 0x30
 8005a34:	e00b      	b.n	8005a4e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3c:	1c59      	adds	r1, r3, #1
 8005a3e:	6379      	str	r1, [r7, #52]	; 0x34
 8005a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	09db      	lsrs	r3, r3, #7
 8005a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	2b7f      	cmp	r3, #127	; 0x7f
 8005a52:	d8f0      	bhi.n	8005a36 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	637a      	str	r2, [r7, #52]	; 0x34
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6c:	e00b      	b.n	8005a86 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	1c59      	adds	r1, r3, #1
 8005a76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	09db      	lsrs	r3, r3, #7
 8005a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8a:	d8f0      	bhi.n	8005a6e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	e00b      	b.n	8005abe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	1c59      	adds	r1, r3, #1
 8005aae:	6279      	str	r1, [r7, #36]	; 0x24
 8005ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	09db      	lsrs	r3, r3, #7
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac2:	d8f0      	bhi.n	8005aa6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	6979      	ldr	r1, [r7, #20]
 8005ad8:	69b8      	ldr	r0, [r7, #24]
 8005ada:	f7ff fdf9 	bl	80056d0 <_SendPacket>
  RECORD_END();
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	f383 8811 	msr	BASEPRI, r3
}
 8005ae4:	bf00      	nop
 8005ae6:	3738      	adds	r7, #56	; 0x38
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	200133c4 	.word	0x200133c4

08005af0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b090      	sub	sp, #64	; 0x40
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005afe:	f3ef 8311 	mrs	r3, BASEPRI
 8005b02:	f04f 0120 	mov.w	r1, #32
 8005b06:	f381 8811 	msr	BASEPRI, r1
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	4840      	ldr	r0, [pc, #256]	; (8005c10 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005b0e:	f7ff fcef 	bl	80054f0 <_PreparePacket>
 8005b12:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b20:	e00b      	b.n	8005b3a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b28:	1c59      	adds	r1, r3, #1
 8005b2a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	09db      	lsrs	r3, r3, #7
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b3e:	d8f0      	bhi.n	8005b22 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30
 8005b58:	e00b      	b.n	8005b72 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b60:	1c59      	adds	r1, r3, #1
 8005b62:	6379      	str	r1, [r7, #52]	; 0x34
 8005b64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	09db      	lsrs	r3, r3, #7
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	2b7f      	cmp	r3, #127	; 0x7f
 8005b76:	d8f0      	bhi.n	8005b5a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b90:	e00b      	b.n	8005baa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	1c59      	adds	r1, r3, #1
 8005b9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	09db      	lsrs	r3, r3, #7
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	2b7f      	cmp	r3, #127	; 0x7f
 8005bae:	d8f0      	bhi.n	8005b92 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	e00b      	b.n	8005be2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b7f      	cmp	r3, #127	; 0x7f
 8005be6:	d8f0      	bhi.n	8005bca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	627a      	str	r2, [r7, #36]	; 0x24
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	6979      	ldr	r1, [r7, #20]
 8005bfc:	69b8      	ldr	r0, [r7, #24]
 8005bfe:	f7ff fd67 	bl	80056d0 <_SendPacket>
  RECORD_END();
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f383 8811 	msr	BASEPRI, r3
}
 8005c08:	bf00      	nop
 8005c0a:	3740      	adds	r7, #64	; 0x40
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200133c4 	.word	0x200133c4

08005c14 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	; 0x30
 8005c18:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005c1a:	4b58      	ldr	r3, [pc, #352]	; (8005d7c <SEGGER_SYSVIEW_Start+0x168>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005c20:	f3ef 8311 	mrs	r3, BASEPRI
 8005c24:	f04f 0120 	mov.w	r1, #32
 8005c28:	f381 8811 	msr	BASEPRI, r1
 8005c2c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c2e:	4b53      	ldr	r3, [pc, #332]	; (8005d7c <SEGGER_SYSVIEW_Start+0x168>)
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	220a      	movs	r2, #10
 8005c34:	4952      	ldr	r1, [pc, #328]	; (8005d80 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fa faca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c42:	200a      	movs	r0, #10
 8005c44:	f7ff fe2a 	bl	800589c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c48:	f3ef 8311 	mrs	r3, BASEPRI
 8005c4c:	f04f 0120 	mov.w	r1, #32
 8005c50:	f381 8811 	msr	BASEPRI, r1
 8005c54:	60bb      	str	r3, [r7, #8]
 8005c56:	484b      	ldr	r0, [pc, #300]	; (8005d84 <SEGGER_SYSVIEW_Start+0x170>)
 8005c58:	f7ff fc4a 	bl	80054f0 <_PreparePacket>
 8005c5c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c66:	4b45      	ldr	r3, [pc, #276]	; (8005d7c <SEGGER_SYSVIEW_Start+0x168>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6c:	e00b      	b.n	8005c86 <SEGGER_SYSVIEW_Start+0x72>
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	1c59      	adds	r1, r3, #1
 8005c76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	09db      	lsrs	r3, r3, #7
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	2b7f      	cmp	r3, #127	; 0x7f
 8005c8a:	d8f0      	bhi.n	8005c6e <SEGGER_SYSVIEW_Start+0x5a>
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca0:	4b36      	ldr	r3, [pc, #216]	; (8005d7c <SEGGER_SYSVIEW_Start+0x168>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	623b      	str	r3, [r7, #32]
 8005ca6:	e00b      	b.n	8005cc0 <SEGGER_SYSVIEW_Start+0xac>
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	6279      	str	r1, [r7, #36]	; 0x24
 8005cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	09db      	lsrs	r3, r3, #7
 8005cbe:	623b      	str	r3, [r7, #32]
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc4:	d8f0      	bhi.n	8005ca8 <SEGGER_SYSVIEW_Start+0x94>
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	627a      	str	r2, [r7, #36]	; 0x24
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	61fb      	str	r3, [r7, #28]
 8005cda:	4b28      	ldr	r3, [pc, #160]	; (8005d7c <SEGGER_SYSVIEW_Start+0x168>)
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	e00b      	b.n	8005cfa <SEGGER_SYSVIEW_Start+0xe6>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	1c59      	adds	r1, r3, #1
 8005cea:	61f9      	str	r1, [r7, #28]
 8005cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	09db      	lsrs	r3, r3, #7
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfe:	d8f0      	bhi.n	8005ce2 <SEGGER_SYSVIEW_Start+0xce>
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	61fa      	str	r2, [r7, #28]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	e00b      	b.n	8005d32 <SEGGER_SYSVIEW_Start+0x11e>
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	1c59      	adds	r1, r3, #1
 8005d22:	6179      	str	r1, [r7, #20]
 8005d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	09db      	lsrs	r3, r3, #7
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b7f      	cmp	r3, #127	; 0x7f
 8005d36:	d8f0      	bhi.n	8005d1a <SEGGER_SYSVIEW_Start+0x106>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	617a      	str	r2, [r7, #20]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d48:	2218      	movs	r2, #24
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff fcbf 	bl	80056d0 <_SendPacket>
      RECORD_END();
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d58:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <SEGGER_SYSVIEW_Start+0x168>)
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <SEGGER_SYSVIEW_Start+0x168>)
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d66:	f000 f9c7 	bl	80060f8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d6a:	f000 f9b1 	bl	80060d0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d6e:	f000 fc5f 	bl	8006630 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d72:	bf00      	nop
 8005d74:	3730      	adds	r7, #48	; 0x30
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20013394 	.word	0x20013394
 8005d80:	080068ec 	.word	0x080068ec
 8005d84:	200133c4 	.word	0x200133c4

08005d88 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d92:	f04f 0120 	mov.w	r1, #32
 8005d96:	f381 8811 	msr	BASEPRI, r1
 8005d9a:	607b      	str	r3, [r7, #4]
 8005d9c:	480b      	ldr	r0, [pc, #44]	; (8005dcc <SEGGER_SYSVIEW_Stop+0x44>)
 8005d9e:	f7ff fba7 	bl	80054f0 <_PreparePacket>
 8005da2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005da4:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005dac:	220b      	movs	r2, #11
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6838      	ldr	r0, [r7, #0]
 8005db2:	f7ff fc8d 	bl	80056d0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f383 8811 	msr	BASEPRI, r3
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	200133c4 	.word	0x200133c4
 8005dd0:	20013394 	.word	0x20013394

08005dd4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08c      	sub	sp, #48	; 0x30
 8005dd8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dda:	f3ef 8311 	mrs	r3, BASEPRI
 8005dde:	f04f 0120 	mov.w	r1, #32
 8005de2:	f381 8811 	msr	BASEPRI, r1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	4845      	ldr	r0, [pc, #276]	; (8005f00 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005dea:	f7ff fb81 	bl	80054f0 <_PreparePacket>
 8005dee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df8:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfe:	e00b      	b.n	8005e18 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	1c59      	adds	r1, r3, #1
 8005e08:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	09db      	lsrs	r3, r3, #7
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1c:	d8f0      	bhi.n	8005e00 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
 8005e32:	4b34      	ldr	r3, [pc, #208]	; (8005f04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	623b      	str	r3, [r7, #32]
 8005e38:	e00b      	b.n	8005e52 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	1c59      	adds	r1, r3, #1
 8005e42:	6279      	str	r1, [r7, #36]	; 0x24
 8005e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	623b      	str	r3, [r7, #32]
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	2b7f      	cmp	r3, #127	; 0x7f
 8005e56:	d8f0      	bhi.n	8005e3a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e5e:	6a3a      	ldr	r2, [r7, #32]
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	4b25      	ldr	r3, [pc, #148]	; (8005f04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	61bb      	str	r3, [r7, #24]
 8005e72:	e00b      	b.n	8005e8c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	1c59      	adds	r1, r3, #1
 8005e7c:	61f9      	str	r1, [r7, #28]
 8005e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	09db      	lsrs	r3, r3, #7
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e90:	d8f0      	bhi.n	8005e74 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	61fa      	str	r2, [r7, #28]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	e00b      	b.n	8005ec4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	6179      	str	r1, [r7, #20]
 8005eb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	09db      	lsrs	r3, r3, #7
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec8:	d8f0      	bhi.n	8005eac <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	617a      	str	r2, [r7, #20]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005eda:	2218      	movs	r2, #24
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	68b8      	ldr	r0, [r7, #8]
 8005ee0:	f7ff fbf6 	bl	80056d0 <_SendPacket>
  RECORD_END();
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005eea:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ef2:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	4798      	blx	r3
  }
}
 8005ef8:	bf00      	nop
 8005efa:	3730      	adds	r7, #48	; 0x30
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	200133c4 	.word	0x200133c4
 8005f04:	20013394 	.word	0x20013394

08005f08 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b092      	sub	sp, #72	; 0x48
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005f10:	f3ef 8311 	mrs	r3, BASEPRI
 8005f14:	f04f 0120 	mov.w	r1, #32
 8005f18:	f381 8811 	msr	BASEPRI, r1
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	486a      	ldr	r0, [pc, #424]	; (80060c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005f20:	f7ff fae6 	bl	80054f0 <_PreparePacket>
 8005f24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b66      	ldr	r3, [pc, #408]	; (80060cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	643b      	str	r3, [r7, #64]	; 0x40
 8005f3a:	e00b      	b.n	8005f54 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f42:	1c59      	adds	r1, r3, #1
 8005f44:	6479      	str	r1, [r7, #68]	; 0x44
 8005f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f50:	09db      	lsrs	r3, r3, #7
 8005f52:	643b      	str	r3, [r7, #64]	; 0x40
 8005f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f56:	2b7f      	cmp	r3, #127	; 0x7f
 8005f58:	d8f0      	bhi.n	8005f3c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f74:	e00b      	b.n	8005f8e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7c:	1c59      	adds	r1, r3, #1
 8005f7e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	09db      	lsrs	r3, r3, #7
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	2b7f      	cmp	r3, #127	; 0x7f
 8005f92:	d8f0      	bhi.n	8005f76 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	4619      	mov	r1, r3
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff fa4f 	bl	8005450 <_EncodeStr>
 8005fb2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005fb4:	2209      	movs	r2, #9
 8005fb6:	68f9      	ldr	r1, [r7, #12]
 8005fb8:	6938      	ldr	r0, [r7, #16]
 8005fba:	f7ff fb89 	bl	80056d0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b40      	ldr	r3, [pc, #256]	; (80060cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd2:	e00b      	b.n	8005fec <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	1c59      	adds	r1, r3, #1
 8005fdc:	6379      	str	r1, [r7, #52]	; 0x34
 8005fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	09db      	lsrs	r3, r3, #7
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff0:	d8f0      	bhi.n	8005fd4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
 800600c:	e00b      	b.n	8006026 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	b2da      	uxtb	r2, r3
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	1c59      	adds	r1, r3, #1
 8006016:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	09db      	lsrs	r3, r3, #7
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	2b7f      	cmp	r3, #127	; 0x7f
 800602a:	d8f0      	bhi.n	800600e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	623b      	str	r3, [r7, #32]
 8006046:	e00b      	b.n	8006060 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	b2da      	uxtb	r2, r3
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	6279      	str	r1, [r7, #36]	; 0x24
 8006052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	09db      	lsrs	r3, r3, #7
 800605e:	623b      	str	r3, [r7, #32]
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	2b7f      	cmp	r3, #127	; 0x7f
 8006064:	d8f0      	bhi.n	8006048 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	627a      	str	r2, [r7, #36]	; 0x24
 800606c:	6a3a      	ldr	r2, [r7, #32]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	2300      	movs	r3, #0
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	e00b      	b.n	8006098 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	1c59      	adds	r1, r3, #1
 8006088:	61f9      	str	r1, [r7, #28]
 800608a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	09db      	lsrs	r3, r3, #7
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2b7f      	cmp	r3, #127	; 0x7f
 800609c:	d8f0      	bhi.n	8006080 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	61fa      	str	r2, [r7, #28]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80060ae:	2215      	movs	r2, #21
 80060b0:	68f9      	ldr	r1, [r7, #12]
 80060b2:	6938      	ldr	r0, [r7, #16]
 80060b4:	f7ff fb0c 	bl	80056d0 <_SendPacket>
  RECORD_END();
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f383 8811 	msr	BASEPRI, r3
}
 80060be:	bf00      	nop
 80060c0:	3748      	adds	r7, #72	; 0x48
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200133c4 	.word	0x200133c4
 80060cc:	20013394 	.word	0x20013394

080060d0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060e6:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	4798      	blx	r3
  }
}
 80060ee:	bf00      	nop
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20013394 	.word	0x20013394

080060f8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80060f8:	b590      	push	{r4, r7, lr}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80060fe:	4b15      	ldr	r3, [pc, #84]	; (8006154 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01a      	beq.n	800613c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d015      	beq.n	800613c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006110:	4b10      	ldr	r3, [pc, #64]	; (8006154 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4798      	blx	r3
 8006118:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800611c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800611e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	000a      	movs	r2, r1
 800612c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800612e:	4613      	mov	r3, r2
 8006130:	461a      	mov	r2, r3
 8006132:	4621      	mov	r1, r4
 8006134:	200d      	movs	r0, #13
 8006136:	f7ff fc0b 	bl	8005950 <SEGGER_SYSVIEW_RecordU32x2>
 800613a:	e006      	b.n	800614a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	200c      	movs	r0, #12
 8006144:	f7ff fbc8 	bl	80058d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	bd90      	pop	{r4, r7, pc}
 8006152:	bf00      	nop
 8006154:	20013394 	.word	0x20013394
 8006158:	e0001004 	.word	0xe0001004

0800615c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006162:	f3ef 8311 	mrs	r3, BASEPRI
 8006166:	f04f 0120 	mov.w	r1, #32
 800616a:	f381 8811 	msr	BASEPRI, r1
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	4819      	ldr	r0, [pc, #100]	; (80061d8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006172:	f7ff f9bd 	bl	80054f0 <_PreparePacket>
 8006176:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800617c:	4b17      	ldr	r3, [pc, #92]	; (80061dc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006184:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	e00b      	b.n	80061a8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	b2da      	uxtb	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	1c59      	adds	r1, r3, #1
 8006198:	6179      	str	r1, [r7, #20]
 800619a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	09db      	lsrs	r3, r3, #7
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2b7f      	cmp	r3, #127	; 0x7f
 80061ac:	d8f0      	bhi.n	8006190 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	617a      	str	r2, [r7, #20]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80061be:	2202      	movs	r2, #2
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	68b8      	ldr	r0, [r7, #8]
 80061c4:	f7ff fa84 	bl	80056d0 <_SendPacket>
  RECORD_END();
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f383 8811 	msr	BASEPRI, r3
}
 80061ce:	bf00      	nop
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200133c4 	.word	0x200133c4
 80061dc:	e000ed04 	.word	0xe000ed04

080061e0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061e6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ea:	f04f 0120 	mov.w	r1, #32
 80061ee:	f381 8811 	msr	BASEPRI, r1
 80061f2:	607b      	str	r3, [r7, #4]
 80061f4:	4807      	ldr	r0, [pc, #28]	; (8006214 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80061f6:	f7ff f97b 	bl	80054f0 <_PreparePacket>
 80061fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80061fc:	2203      	movs	r2, #3
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6838      	ldr	r0, [r7, #0]
 8006202:	f7ff fa65 	bl	80056d0 <_SendPacket>
  RECORD_END();
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f383 8811 	msr	BASEPRI, r3
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	200133c4 	.word	0x200133c4

08006218 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800621e:	f3ef 8311 	mrs	r3, BASEPRI
 8006222:	f04f 0120 	mov.w	r1, #32
 8006226:	f381 8811 	msr	BASEPRI, r1
 800622a:	607b      	str	r3, [r7, #4]
 800622c:	4807      	ldr	r0, [pc, #28]	; (800624c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800622e:	f7ff f95f 	bl	80054f0 <_PreparePacket>
 8006232:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006234:	2212      	movs	r2, #18
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6838      	ldr	r0, [r7, #0]
 800623a:	f7ff fa49 	bl	80056d0 <_SendPacket>
  RECORD_END();
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f383 8811 	msr	BASEPRI, r3
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	200133c4 	.word	0x200133c4

08006250 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006256:	f3ef 8311 	mrs	r3, BASEPRI
 800625a:	f04f 0120 	mov.w	r1, #32
 800625e:	f381 8811 	msr	BASEPRI, r1
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	4807      	ldr	r0, [pc, #28]	; (8006284 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006266:	f7ff f943 	bl	80054f0 <_PreparePacket>
 800626a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800626c:	2211      	movs	r2, #17
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6838      	ldr	r0, [r7, #0]
 8006272:	f7ff fa2d 	bl	80056d0 <_SendPacket>
  RECORD_END();
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f383 8811 	msr	BASEPRI, r3
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	200133c4 	.word	0x200133c4

08006288 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006290:	f3ef 8311 	mrs	r3, BASEPRI
 8006294:	f04f 0120 	mov.w	r1, #32
 8006298:	f381 8811 	msr	BASEPRI, r1
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	4819      	ldr	r0, [pc, #100]	; (8006304 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80062a0:	f7ff f926 	bl	80054f0 <_PreparePacket>
 80062a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062aa:	4b17      	ldr	r3, [pc, #92]	; (8006308 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e00b      	b.n	80062d6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	1c59      	adds	r1, r3, #1
 80062c6:	61f9      	str	r1, [r7, #28]
 80062c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	09db      	lsrs	r3, r3, #7
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b7f      	cmp	r3, #127	; 0x7f
 80062da:	d8f0      	bhi.n	80062be <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	61fa      	str	r2, [r7, #28]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80062ec:	2208      	movs	r2, #8
 80062ee:	68f9      	ldr	r1, [r7, #12]
 80062f0:	6938      	ldr	r0, [r7, #16]
 80062f2:	f7ff f9ed 	bl	80056d0 <_SendPacket>
  RECORD_END();
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f383 8811 	msr	BASEPRI, r3
}
 80062fc:	bf00      	nop
 80062fe:	3720      	adds	r7, #32
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	200133c4 	.word	0x200133c4
 8006308:	20013394 	.word	0x20013394

0800630c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006314:	f3ef 8311 	mrs	r3, BASEPRI
 8006318:	f04f 0120 	mov.w	r1, #32
 800631c:	f381 8811 	msr	BASEPRI, r1
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	4819      	ldr	r0, [pc, #100]	; (8006388 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006324:	f7ff f8e4 	bl	80054f0 <_PreparePacket>
 8006328:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	61bb      	str	r3, [r7, #24]
 8006340:	e00b      	b.n	800635a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	61f9      	str	r1, [r7, #28]
 800634c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	09db      	lsrs	r3, r3, #7
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b7f      	cmp	r3, #127	; 0x7f
 800635e:	d8f0      	bhi.n	8006342 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	61fa      	str	r2, [r7, #28]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006370:	2204      	movs	r2, #4
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	6938      	ldr	r0, [r7, #16]
 8006376:	f7ff f9ab 	bl	80056d0 <_SendPacket>
  RECORD_END();
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f383 8811 	msr	BASEPRI, r3
}
 8006380:	bf00      	nop
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	200133c4 	.word	0x200133c4
 800638c:	20013394 	.word	0x20013394

08006390 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006398:	f3ef 8311 	mrs	r3, BASEPRI
 800639c:	f04f 0120 	mov.w	r1, #32
 80063a0:	f381 8811 	msr	BASEPRI, r1
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	4819      	ldr	r0, [pc, #100]	; (800640c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80063a8:	f7ff f8a2 	bl	80054f0 <_PreparePacket>
 80063ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063b2:	4b17      	ldr	r3, [pc, #92]	; (8006410 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e00b      	b.n	80063de <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	61f9      	str	r1, [r7, #28]
 80063d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	09db      	lsrs	r3, r3, #7
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b7f      	cmp	r3, #127	; 0x7f
 80063e2:	d8f0      	bhi.n	80063c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	61fa      	str	r2, [r7, #28]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80063f4:	2206      	movs	r2, #6
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	6938      	ldr	r0, [r7, #16]
 80063fa:	f7ff f969 	bl	80056d0 <_SendPacket>
  RECORD_END();
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f383 8811 	msr	BASEPRI, r3
}
 8006404:	bf00      	nop
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200133c4 	.word	0x200133c4
 8006410:	20013394 	.word	0x20013394

08006414 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	; 0x28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800641e:	f3ef 8311 	mrs	r3, BASEPRI
 8006422:	f04f 0120 	mov.w	r1, #32
 8006426:	f381 8811 	msr	BASEPRI, r1
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	4827      	ldr	r0, [pc, #156]	; (80064cc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800642e:	f7ff f85f 	bl	80054f0 <_PreparePacket>
 8006432:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006438:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	623b      	str	r3, [r7, #32]
 800644a:	e00b      	b.n	8006464 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	1c59      	adds	r1, r3, #1
 8006454:	6279      	str	r1, [r7, #36]	; 0x24
 8006456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	09db      	lsrs	r3, r3, #7
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	2b7f      	cmp	r3, #127	; 0x7f
 8006468:	d8f0      	bhi.n	800644c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	627a      	str	r2, [r7, #36]	; 0x24
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e00b      	b.n	800649c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	1c59      	adds	r1, r3, #1
 800648c:	61f9      	str	r1, [r7, #28]
 800648e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	09db      	lsrs	r3, r3, #7
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	2b7f      	cmp	r3, #127	; 0x7f
 80064a0:	d8f0      	bhi.n	8006484 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	61fa      	str	r2, [r7, #28]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80064b2:	2207      	movs	r2, #7
 80064b4:	68f9      	ldr	r1, [r7, #12]
 80064b6:	6938      	ldr	r0, [r7, #16]
 80064b8:	f7ff f90a 	bl	80056d0 <_SendPacket>
  RECORD_END();
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f383 8811 	msr	BASEPRI, r3
}
 80064c2:	bf00      	nop
 80064c4:	3728      	adds	r7, #40	; 0x28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	200133c4 	.word	0x200133c4
 80064d0:	20013394 	.word	0x20013394

080064d4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80064dc:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	1ad3      	subs	r3, r2, r3
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	20013394 	.word	0x20013394

080064f4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08c      	sub	sp, #48	; 0x30
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80064fe:	4b3b      	ldr	r3, [pc, #236]	; (80065ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d06d      	beq.n	80065e2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006506:	4b39      	ldr	r3, [pc, #228]	; (80065ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800650c:	2300      	movs	r3, #0
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006510:	e008      	b.n	8006524 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	3301      	adds	r3, #1
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006528:	429a      	cmp	r2, r3
 800652a:	d3f2      	bcc.n	8006512 <SEGGER_SYSVIEW_SendModule+0x1e>
 800652c:	e000      	b.n	8006530 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800652e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d055      	beq.n	80065e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006536:	f3ef 8311 	mrs	r3, BASEPRI
 800653a:	f04f 0120 	mov.w	r1, #32
 800653e:	f381 8811 	msr	BASEPRI, r1
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	482a      	ldr	r0, [pc, #168]	; (80065f0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006546:	f7fe ffd3 	bl	80054f0 <_PreparePacket>
 800654a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	e00b      	b.n	8006572 <SEGGER_SYSVIEW_SendModule+0x7e>
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	1c59      	adds	r1, r3, #1
 8006562:	6279      	str	r1, [r7, #36]	; 0x24
 8006564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	09db      	lsrs	r3, r3, #7
 8006570:	623b      	str	r3, [r7, #32]
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	2b7f      	cmp	r3, #127	; 0x7f
 8006576:	d8f0      	bhi.n	800655a <SEGGER_SYSVIEW_SendModule+0x66>
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	627a      	str	r2, [r7, #36]	; 0x24
 800657e:	6a3a      	ldr	r2, [r7, #32]
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	e00b      	b.n	80065ac <SEGGER_SYSVIEW_SendModule+0xb8>
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	1c59      	adds	r1, r3, #1
 800659c:	61f9      	str	r1, [r7, #28]
 800659e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	09db      	lsrs	r3, r3, #7
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b7f      	cmp	r3, #127	; 0x7f
 80065b0:	d8f0      	bhi.n	8006594 <SEGGER_SYSVIEW_SendModule+0xa0>
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	61fa      	str	r2, [r7, #28]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2280      	movs	r2, #128	; 0x80
 80065c8:	4619      	mov	r1, r3
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7fe ff40 	bl	8005450 <_EncodeStr>
 80065d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80065d2:	2216      	movs	r2, #22
 80065d4:	68f9      	ldr	r1, [r7, #12]
 80065d6:	6938      	ldr	r0, [r7, #16]
 80065d8:	f7ff f87a 	bl	80056d0 <_SendPacket>
      RECORD_END();
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80065e2:	bf00      	nop
 80065e4:	3730      	adds	r7, #48	; 0x30
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200133bc 	.word	0x200133bc
 80065f0:	200133c4 	.word	0x200133c4

080065f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00f      	beq.n	8006622 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006602:	4b0a      	ldr	r3, [pc, #40]	; (800662c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f2      	bne.n	8006608 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200133bc 	.word	0x200133bc

08006630 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006636:	f3ef 8311 	mrs	r3, BASEPRI
 800663a:	f04f 0120 	mov.w	r1, #32
 800663e:	f381 8811 	msr	BASEPRI, r1
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	4817      	ldr	r0, [pc, #92]	; (80066a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006646:	f7fe ff53 	bl	80054f0 <_PreparePacket>
 800664a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	e00b      	b.n	8006674 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	1c59      	adds	r1, r3, #1
 8006664:	6179      	str	r1, [r7, #20]
 8006666:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	09db      	lsrs	r3, r3, #7
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b7f      	cmp	r3, #127	; 0x7f
 8006678:	d8f0      	bhi.n	800665c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	617a      	str	r2, [r7, #20]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800668a:	221b      	movs	r2, #27
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	68b8      	ldr	r0, [r7, #8]
 8006690:	f7ff f81e 	bl	80056d0 <_SendPacket>
  RECORD_END();
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f383 8811 	msr	BASEPRI, r3
}
 800669a:	bf00      	nop
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	200133c4 	.word	0x200133c4
 80066a8:	200133c0 	.word	0x200133c0

080066ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066b4:	f3ef 8311 	mrs	r3, BASEPRI
 80066b8:	f04f 0120 	mov.w	r1, #32
 80066bc:	f381 8811 	msr	BASEPRI, r1
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	4827      	ldr	r0, [pc, #156]	; (8006760 <SEGGER_SYSVIEW_Warn+0xb4>)
 80066c4:	f7fe ff14 	bl	80054f0 <_PreparePacket>
 80066c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066ca:	2280      	movs	r2, #128	; 0x80
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	6938      	ldr	r0, [r7, #16]
 80066d0:	f7fe febe 	bl	8005450 <_EncodeStr>
 80066d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
 80066da:	2301      	movs	r3, #1
 80066dc:	623b      	str	r3, [r7, #32]
 80066de:	e00b      	b.n	80066f8 <SEGGER_SYSVIEW_Warn+0x4c>
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	1c59      	adds	r1, r3, #1
 80066e8:	6279      	str	r1, [r7, #36]	; 0x24
 80066ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	09db      	lsrs	r3, r3, #7
 80066f6:	623b      	str	r3, [r7, #32]
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	2b7f      	cmp	r3, #127	; 0x7f
 80066fc:	d8f0      	bhi.n	80066e0 <SEGGER_SYSVIEW_Warn+0x34>
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	627a      	str	r2, [r7, #36]	; 0x24
 8006704:	6a3a      	ldr	r2, [r7, #32]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	2300      	movs	r3, #0
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	e00b      	b.n	8006730 <SEGGER_SYSVIEW_Warn+0x84>
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	b2da      	uxtb	r2, r3
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	1c59      	adds	r1, r3, #1
 8006720:	61f9      	str	r1, [r7, #28]
 8006722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	09db      	lsrs	r3, r3, #7
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b7f      	cmp	r3, #127	; 0x7f
 8006734:	d8f0      	bhi.n	8006718 <SEGGER_SYSVIEW_Warn+0x6c>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	61fa      	str	r2, [r7, #28]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006746:	221a      	movs	r2, #26
 8006748:	68f9      	ldr	r1, [r7, #12]
 800674a:	6938      	ldr	r0, [r7, #16]
 800674c:	f7fe ffc0 	bl	80056d0 <_SendPacket>
  RECORD_END();
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f383 8811 	msr	BASEPRI, r3
}
 8006756:	bf00      	nop
 8006758:	3728      	adds	r7, #40	; 0x28
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	200133c4 	.word	0x200133c4

08006764 <__libc_init_array>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	4d0d      	ldr	r5, [pc, #52]	; (800679c <__libc_init_array+0x38>)
 8006768:	4c0d      	ldr	r4, [pc, #52]	; (80067a0 <__libc_init_array+0x3c>)
 800676a:	1b64      	subs	r4, r4, r5
 800676c:	10a4      	asrs	r4, r4, #2
 800676e:	2600      	movs	r6, #0
 8006770:	42a6      	cmp	r6, r4
 8006772:	d109      	bne.n	8006788 <__libc_init_array+0x24>
 8006774:	4d0b      	ldr	r5, [pc, #44]	; (80067a4 <__libc_init_array+0x40>)
 8006776:	4c0c      	ldr	r4, [pc, #48]	; (80067a8 <__libc_init_array+0x44>)
 8006778:	f000 f83e 	bl	80067f8 <_init>
 800677c:	1b64      	subs	r4, r4, r5
 800677e:	10a4      	asrs	r4, r4, #2
 8006780:	2600      	movs	r6, #0
 8006782:	42a6      	cmp	r6, r4
 8006784:	d105      	bne.n	8006792 <__libc_init_array+0x2e>
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	f855 3b04 	ldr.w	r3, [r5], #4
 800678c:	4798      	blx	r3
 800678e:	3601      	adds	r6, #1
 8006790:	e7ee      	b.n	8006770 <__libc_init_array+0xc>
 8006792:	f855 3b04 	ldr.w	r3, [r5], #4
 8006796:	4798      	blx	r3
 8006798:	3601      	adds	r6, #1
 800679a:	e7f2      	b.n	8006782 <__libc_init_array+0x1e>
 800679c:	08006900 	.word	0x08006900
 80067a0:	08006900 	.word	0x08006900
 80067a4:	08006900 	.word	0x08006900
 80067a8:	08006904 	.word	0x08006904

080067ac <memcmp>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	3901      	subs	r1, #1
 80067b0:	4402      	add	r2, r0
 80067b2:	4290      	cmp	r0, r2
 80067b4:	d101      	bne.n	80067ba <memcmp+0xe>
 80067b6:	2000      	movs	r0, #0
 80067b8:	e005      	b.n	80067c6 <memcmp+0x1a>
 80067ba:	7803      	ldrb	r3, [r0, #0]
 80067bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d001      	beq.n	80067c8 <memcmp+0x1c>
 80067c4:	1b18      	subs	r0, r3, r4
 80067c6:	bd10      	pop	{r4, pc}
 80067c8:	3001      	adds	r0, #1
 80067ca:	e7f2      	b.n	80067b2 <memcmp+0x6>

080067cc <memcpy>:
 80067cc:	440a      	add	r2, r1
 80067ce:	4291      	cmp	r1, r2
 80067d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067d4:	d100      	bne.n	80067d8 <memcpy+0xc>
 80067d6:	4770      	bx	lr
 80067d8:	b510      	push	{r4, lr}
 80067da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067e2:	4291      	cmp	r1, r2
 80067e4:	d1f9      	bne.n	80067da <memcpy+0xe>
 80067e6:	bd10      	pop	{r4, pc}

080067e8 <memset>:
 80067e8:	4402      	add	r2, r0
 80067ea:	4603      	mov	r3, r0
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d100      	bne.n	80067f2 <memset+0xa>
 80067f0:	4770      	bx	lr
 80067f2:	f803 1b01 	strb.w	r1, [r3], #1
 80067f6:	e7f9      	b.n	80067ec <memset+0x4>

080067f8 <_init>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr

08006804 <_fini>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr
