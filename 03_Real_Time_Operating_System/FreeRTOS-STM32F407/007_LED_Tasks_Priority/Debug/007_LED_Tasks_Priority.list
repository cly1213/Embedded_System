
007_LED_Tasks_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006414  08006414  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800641c  0800641c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013484  20000014  08006438  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013498  08006438  00023498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001434c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d06  00000000  00000000  00034390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00037098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00038358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ae0  00000000  00000000  000394b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001493c  00000000  00000000  0005bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d693a  00000000  00000000  000708cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee0  00000000  00000000  00147258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006340 	.word	0x08006340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006340 	.word	0x08006340

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ecc 	.word	0x20012ecc

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb85 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f849 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8b1 	bl	80006dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(500000);

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 800057a:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <main+0x8c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a1d      	ldr	r2, [pc, #116]	; (80005f4 <main+0x8c>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2302      	movs	r3, #2
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	22c8      	movs	r2, #200	; 0xc8
 8000594:	4918      	ldr	r1, [pc, #96]	; (80005f8 <main+0x90>)
 8000596:	4819      	ldr	r0, [pc, #100]	; (80005fc <main+0x94>)
 8000598:	f002 fbf0 	bl	8002d7c <xTaskCreate>
 800059c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d00a      	beq.n	80005ba <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a8:	f383 8811 	msr	BASEPRI, r3
 80005ac:	f3bf 8f6f 	isb	sy
 80005b0:	f3bf 8f4f 	dsb	sy
 80005b4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <main+0x50>

  status = xTaskCreate(task2_handler, "Task-2", 200,NULL, 3, &task2_handle);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2303      	movs	r3, #3
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <main+0x98>)
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <main+0x9c>)
 80005ca:	f002 fbd7 	bl	8002d7c <xTaskCreate>
 80005ce:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x84>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	60fb      	str	r3, [r7, #12]
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x82>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005ec:	f002 fdea 	bl	80031c4 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x88>
 80005f2:	bf00      	nop
 80005f4:	e0001000 	.word	0xe0001000
 80005f8:	08006358 	.word	0x08006358
 80005fc:	08000a29 	.word	0x08000a29
 8000600:	08006360 	.word	0x08006360
 8000604:	08000a4d 	.word	0x08000a4d

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fe8a 	bl	8006330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800067c:	23a8      	movs	r3, #168	; 0xa8
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fe31 	bl	80012f4 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 fa08 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f892 	bl	80017e4 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f9f1 	bl	8000aac <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	4ba6      	ldr	r3, [pc, #664]	; (8000990 <MX_GPIO_Init+0x2b4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4aa5      	ldr	r2, [pc, #660]	; (8000990 <MX_GPIO_Init+0x2b4>)
 80006fc:	f043 0310 	orr.w	r3, r3, #16
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4ba3      	ldr	r3, [pc, #652]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	4b9f      	ldr	r3, [pc, #636]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a9e      	ldr	r2, [pc, #632]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b9c      	ldr	r3, [pc, #624]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b98      	ldr	r3, [pc, #608]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a97      	ldr	r2, [pc, #604]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b95      	ldr	r3, [pc, #596]	; (8000990 <MX_GPIO_Init+0x2b4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b91      	ldr	r3, [pc, #580]	; (8000990 <MX_GPIO_Init+0x2b4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a90      	ldr	r2, [pc, #576]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b8e      	ldr	r3, [pc, #568]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b8a      	ldr	r3, [pc, #552]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a89      	ldr	r2, [pc, #548]	; (8000990 <MX_GPIO_Init+0x2b4>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b87      	ldr	r3, [pc, #540]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b83      	ldr	r3, [pc, #524]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a82      	ldr	r2, [pc, #520]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b80      	ldr	r3, [pc, #512]	; (8000990 <MX_GPIO_Init+0x2b4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	487d      	ldr	r0, [pc, #500]	; (8000994 <MX_GPIO_Init+0x2b8>)
 80007a0:	f000 fd50 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2101      	movs	r1, #1
 80007a8:	487b      	ldr	r0, [pc, #492]	; (8000998 <MX_GPIO_Init+0x2bc>)
 80007aa:	f000 fd4b 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ae:	2200      	movs	r2, #0
 80007b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007b4:	4879      	ldr	r0, [pc, #484]	; (800099c <MX_GPIO_Init+0x2c0>)
 80007b6:	f000 fd45 	bl	8001244 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ba:	2308      	movs	r3, #8
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4870      	ldr	r0, [pc, #448]	; (8000994 <MX_GPIO_Init+0x2b8>)
 80007d2:	f000 fb9b 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	486a      	ldr	r0, [pc, #424]	; (8000998 <MX_GPIO_Init+0x2bc>)
 80007ee:	f000 fb8d 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000802:	2305      	movs	r3, #5
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4862      	ldr	r0, [pc, #392]	; (8000998 <MX_GPIO_Init+0x2bc>)
 800080e:	f000 fb7d 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000816:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	485e      	ldr	r0, [pc, #376]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 8000828:	f000 fb70 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800082c:	2310      	movs	r3, #16
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083c:	2306      	movs	r3, #6
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4856      	ldr	r0, [pc, #344]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 8000848:	f000 fb60 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800084c:	23e0      	movs	r3, #224	; 0xe0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800085c:	2305      	movs	r3, #5
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	484e      	ldr	r0, [pc, #312]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 8000868:	f000 fb50 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800086c:	2304      	movs	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4849      	ldr	r0, [pc, #292]	; (80009a4 <MX_GPIO_Init+0x2c8>)
 8000880:	f000 fb44 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4840      	ldr	r0, [pc, #256]	; (80009a4 <MX_GPIO_Init+0x2c8>)
 80008a2:	f000 fb33 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4837      	ldr	r0, [pc, #220]	; (800099c <MX_GPIO_Init+0x2c0>)
 80008c0:	f000 fb24 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d6:	2306      	movs	r3, #6
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	482d      	ldr	r0, [pc, #180]	; (8000998 <MX_GPIO_Init+0x2bc>)
 80008e2:	f000 fb13 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4829      	ldr	r0, [pc, #164]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 80008fc:	f000 fb06 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000900:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000912:	230a      	movs	r3, #10
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4820      	ldr	r0, [pc, #128]	; (80009a0 <MX_GPIO_Init+0x2c4>)
 800091e:	f000 faf5 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000922:	2320      	movs	r3, #32
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4819      	ldr	r0, [pc, #100]	; (800099c <MX_GPIO_Init+0x2c0>)
 8000936:	f000 fae9 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800093a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000940:	2312      	movs	r3, #18
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	2301      	movs	r3, #1
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_GPIO_Init+0x2c8>)
 8000958:	f000 fad8 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000960:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <MX_GPIO_Init+0x2b8>)
 8000972:	f000 facb 	bl	8000f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2106      	movs	r1, #6
 800097a:	2006      	movs	r0, #6
 800097c:	f000 fa9c 	bl	8000eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000980:	2006      	movs	r0, #6
 8000982:	f000 fab5 	bl	8000ef0 <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400

080009a8 <switch_priority>:

/* USER CODE BEGIN 4 */

void switch_priority(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]

	//Disables those interrupts whose priority is less than the configuration macro
	portENTER_CRITICAL();
 80009b2:	f003 fdef 	bl	8004594 <vPortEnterCritical>
	if(status_button){
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <switch_priority+0x7c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d004      	beq.n	80009c8 <switch_priority+0x20>
		status_button = 0;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <switch_priority+0x7c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 80009c8:	f003 fe14 	bl	80045f4 <vPortExitCritical>

	if(switch_priority){
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d023      	beq.n	8000a1a <switch_priority+0x72>

		//t1 = xTaskGetHandle("Task-1"); //2
		t1 = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	613b      	str	r3, [r7, #16]

		//t2 = xTaskGetHandle("Task-2"); //3
        t2 = 3;
 80009d6:	2303      	movs	r3, #3
 80009d8:	60fb      	str	r3, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 80009da:	6938      	ldr	r0, [r7, #16]
 80009dc:	f002 fb24 	bl	8003028 <uxTaskPriorityGet>
 80009e0:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f002 fb20 	bl	8003028 <uxTaskPriorityGet>
 80009e8:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 80009ea:	f002 ffed 	bl	80039c8 <xTaskGetCurrentTaskHandle>
 80009ee:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d108      	bne.n	8000a0a <switch_priority+0x62>
			vTaskPrioritySet(t1,p2);
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	6938      	ldr	r0, [r7, #16]
 80009fc:	f002 fb2e 	bl	800305c <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f002 fb2a 	bl	800305c <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000a08:	e007      	b.n	8000a1a <switch_priority+0x72>
			vTaskPrioritySet(t2,p1);
 8000a0a:	68b9      	ldr	r1, [r7, #8]
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f002 fb25 	bl	800305c <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	6938      	ldr	r0, [r7, #16]
 8000a16:	f002 fb21 	bl	800305c <vTaskPrioritySet>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000030 	.word	0x20000030

08000a28 <task1_handler>:

static void task1_handler(void* parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <task1_handler+0x20>)
 8000a36:	f000 fc1e 	bl	8001276 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a3a:	2064      	movs	r0, #100	; 0x64
 8000a3c:	f000 f960 	bl	8000d00 <HAL_Delay>
		switch_priority();
 8000a40:	f7ff ffb2 	bl	80009a8 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a44:	e7f4      	b.n	8000a30 <task1_handler+0x8>
 8000a46:	bf00      	nop
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <task2_handler+0x20>)
 8000a5a:	f000 fc0c 	bl	8001276 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a62:	f000 f94d 	bl	8000d00 <HAL_Delay>
		switch_priority();
 8000a66:	f7ff ff9f 	bl	80009a8 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a6a:	e7f3      	b.n	8000a54 <task2_handler+0x8>
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <button_interrupt_handler>:

}


void button_interrupt_handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	//traceISR_ENTER();
	status_button = 1;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <button_interrupt_handler+0x14>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
	//traceISR_EXIT();
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	20000030 	.word	0x20000030

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 f911 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40001000 	.word	0x40001000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000afa:	f003 fccd 	bl	8004498 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2036      	movs	r0, #54	; 0x36
 8000b22:	f000 f9c9 	bl	8000eb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b26:	2036      	movs	r0, #54	; 0x36
 8000b28:	f000 f9e2 	bl	8000ef0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 0310 	and.w	r3, r3, #16
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b48:	f107 0210 	add.w	r2, r7, #16
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 f852 	bl	8001bfc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b58:	f001 f83c 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_InitTick+0xb0>)
 8000b74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b92:	f001 f865 	bl	8001c60 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b9c:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b9e:	f001 f8b9 	bl	8001d14 <HAL_TIM_Base_Start_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	20000034 	.word	0x20000034
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8000be2:	f7ff ff45 	bl	8000a70 <button_interrupt_handler>

	//clear EXTI 0 pending bit in the exti pending register
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f000 fb60 	bl	80012ac <HAL_GPIO_EXTI_IRQHandler>
  //HAL_GPIO_EXTI_IRQHandler(B1_Pin);

  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM6_DAC_IRQHandler+0x10>)
 8000bf6:	f001 f8fd 	bl	8001df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000034 	.word	0x20000034

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f005 fb29 	bl	80062ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fc85 	bl	8000568 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c6c:	08006424 	.word	0x08006424
  ldr r2, =_sbss
 8000c70:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c74:	20013498 	.word	0x20013498

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8fc 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff ff2e 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff ff04 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	2000007c 	.word	0x2000007c

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000007c 	.word	0x2000007c

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff61 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb1 	bl	8000e3c <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff80 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e16b      	b.n	8001200 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f040 815a 	bne.w	80011fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d005      	beq.n	8000f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d017      	beq.n	8000ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d123      	bne.n	8001050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0203 	and.w	r2, r3, #3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80b4 	beq.w	80011fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b60      	ldr	r3, [pc, #384]	; (8001218 <HAL_GPIO_Init+0x30c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a5f      	ldr	r2, [pc, #380]	; (8001218 <HAL_GPIO_Init+0x30c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <HAL_GPIO_Init+0x30c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ae:	4a5b      	ldr	r2, [pc, #364]	; (800121c <HAL_GPIO_Init+0x310>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a52      	ldr	r2, [pc, #328]	; (8001220 <HAL_GPIO_Init+0x314>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d02b      	beq.n	8001132 <HAL_GPIO_Init+0x226>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a51      	ldr	r2, [pc, #324]	; (8001224 <HAL_GPIO_Init+0x318>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d025      	beq.n	800112e <HAL_GPIO_Init+0x222>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a50      	ldr	r2, [pc, #320]	; (8001228 <HAL_GPIO_Init+0x31c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01f      	beq.n	800112a <HAL_GPIO_Init+0x21e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4f      	ldr	r2, [pc, #316]	; (800122c <HAL_GPIO_Init+0x320>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x21a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <HAL_GPIO_Init+0x324>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x216>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4d      	ldr	r2, [pc, #308]	; (8001234 <HAL_GPIO_Init+0x328>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x212>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <HAL_GPIO_Init+0x32c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x20e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4b      	ldr	r2, [pc, #300]	; (800123c <HAL_GPIO_Init+0x330>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x20a>
 8001112:	2307      	movs	r3, #7
 8001114:	e00e      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001116:	2308      	movs	r3, #8
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800111a:	2306      	movs	r3, #6
 800111c:	e00a      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	; (800121c <HAL_GPIO_Init+0x310>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <HAL_GPIO_Init+0x334>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a32      	ldr	r2, [pc, #200]	; (8001240 <HAL_GPIO_Init+0x334>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <HAL_GPIO_Init+0x334>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a27      	ldr	r2, [pc, #156]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a12      	ldr	r2, [pc, #72]	; (8001240 <HAL_GPIO_Init+0x334>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f ae90 	bls.w	8000f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40021c00 	.word	0x40021c00
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	041a      	lsls	r2, r3, #16
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43d9      	mvns	r1, r3
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	400b      	ands	r3, r1
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f806 	bl	80012dc <HAL_GPIO_EXTI_Callback>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e267      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d075      	beq.n	80013fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001312:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b04      	cmp	r3, #4
 800131c:	d00c      	beq.n	8001338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131e:	4b85      	ldr	r3, [pc, #532]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001326:	2b08      	cmp	r3, #8
 8001328:	d112      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132a:	4b82      	ldr	r3, [pc, #520]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001336:	d10b      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	4b7e      	ldr	r3, [pc, #504]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d05b      	beq.n	80013fc <HAL_RCC_OscConfig+0x108>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d157      	bne.n	80013fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e242      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x74>
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a75      	ldr	r2, [pc, #468]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b70      	ldr	r3, [pc, #448]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6f      	ldr	r2, [pc, #444]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6c      	ldr	r2, [pc, #432]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a68      	ldr	r2, [pc, #416]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b66      	ldr	r3, [pc, #408]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a65      	ldr	r2, [pc, #404]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc9c 	bl	8000ce8 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc98 	bl	8000ce8 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e207      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xc0>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc88 	bl	8000ce8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc84 	bl	8000ce8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1f3      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b51      	ldr	r3, [pc, #324]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0xe8>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140a:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001422:	4b44      	ldr	r3, [pc, #272]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1c7      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4937      	ldr	r1, [pc, #220]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_OscConfig+0x244>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff fc3d 	bl	8000ce8 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fc39 	bl	8000ce8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1a8      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4925      	ldr	r1, [pc, #148]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_OscConfig+0x244>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc1c 	bl	8000ce8 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc18 	bl	8000ce8 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e187      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d036      	beq.n	800154c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d016      	beq.n	8001514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_RCC_OscConfig+0x248>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fbfc 	bl	8000ce8 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fbf8 	bl	8000ce8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e167      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x200>
 8001512:	e01b      	b.n	800154c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RCC_OscConfig+0x248>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fbe5 	bl	8000ce8 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	e00e      	b.n	8001540 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fbe1 	bl	8000ce8 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d907      	bls.n	8001540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e150      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
 8001534:	40023800 	.word	0x40023800
 8001538:	42470000 	.word	0x42470000
 800153c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ea      	bne.n	8001522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8097 	beq.w	8001688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155e:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b7a      	ldr	r3, [pc, #488]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b77      	ldr	r3, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d118      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001596:	4b74      	ldr	r3, [pc, #464]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a73      	ldr	r2, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fba1 	bl	8000ce8 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015aa:	f7ff fb9d 	bl	8000ce8 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e10c      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x2ea>
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	e01c      	b.n	8001618 <HAL_RCC_OscConfig+0x324>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x30c>
 80015e6:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a5e      	ldr	r2, [pc, #376]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	4b5c      	ldr	r3, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a5b      	ldr	r2, [pc, #364]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0x324>
 8001600:	4b58      	ldr	r3, [pc, #352]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	4a57      	ldr	r2, [pc, #348]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
 800160c:	4b55      	ldr	r3, [pc, #340]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	4a54      	ldr	r2, [pc, #336]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fb62 	bl	8000ce8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fb5e 	bl	8000ce8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0cb      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163e:	4b49      	ldr	r3, [pc, #292]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ee      	beq.n	8001628 <HAL_RCC_OscConfig+0x334>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff fb4c 	bl	8000ce8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff fb48 	bl	8000ce8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0b5      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166a:	4b3e      	ldr	r3, [pc, #248]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ee      	bne.n	8001654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a38      	ldr	r2, [pc, #224]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a1 	beq.w	80017d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b08      	cmp	r3, #8
 800169c:	d05c      	beq.n	8001758 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d141      	bne.n	800172a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x478>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb1c 	bl	8000ce8 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fb18 	bl	8000ce8 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e087      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	019b      	lsls	r3, r3, #6
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	3b01      	subs	r3, #1
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	491b      	ldr	r1, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x478>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff faf1 	bl	8000ce8 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff faed 	bl	8000ce8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e05c      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x416>
 8001728:	e054      	b.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x478>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fada 	bl	8000ce8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fad6 	bl	8000ce8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e045      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x444>
 8001756:	e03d      	b.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e038      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
 8001764:	40023800 	.word	0x40023800
 8001768:	40007000 	.word	0x40007000
 800176c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x4ec>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d028      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d121      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d11a      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a0:	4013      	ands	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d111      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0cc      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d90c      	bls.n	8001820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b65      	ldr	r3, [pc, #404]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0b8      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800185a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	494d      	ldr	r1, [pc, #308]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d044      	beq.n	8001904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d119      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e07f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e067      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4934      	ldr	r1, [pc, #208]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff fa08 	bl	8000ce8 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7ff fa04 	bl	8000ce8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e04f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d20c      	bcs.n	800192c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e032      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4916      	ldr	r1, [pc, #88]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	490e      	ldr	r1, [pc, #56]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800196a:	f000 f821 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	490a      	ldr	r1, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f8be 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	080063f0 	.word	0x080063f0
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b094      	sub	sp, #80	; 0x50
 80019b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	647b      	str	r3, [r7, #68]	; 0x44
 80019bc:	2300      	movs	r3, #0
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c0:	2300      	movs	r3, #0
 80019c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c8:	4b79      	ldr	r3, [pc, #484]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d00d      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x40>
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	f200 80e1 	bhi.w	8001b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x34>
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x3a>
 80019e2:	e0db      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019e8:	e0db      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ea:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80019ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ee:	e0d8      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fa:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d063      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a06:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a22:	4622      	mov	r2, r4
 8001a24:	462b      	mov	r3, r5
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	0159      	lsls	r1, r3, #5
 8001a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a34:	0150      	lsls	r0, r2, #5
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	1a51      	subs	r1, r2, r1
 8001a3e:	6139      	str	r1, [r7, #16]
 8001a40:	4629      	mov	r1, r5
 8001a42:	eb63 0301 	sbc.w	r3, r3, r1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a54:	4659      	mov	r1, fp
 8001a56:	018b      	lsls	r3, r1, #6
 8001a58:	4651      	mov	r1, sl
 8001a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a5e:	4651      	mov	r1, sl
 8001a60:	018a      	lsls	r2, r1, #6
 8001a62:	4651      	mov	r1, sl
 8001a64:	ebb2 0801 	subs.w	r8, r2, r1
 8001a68:	4659      	mov	r1, fp
 8001a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a82:	4690      	mov	r8, r2
 8001a84:	4699      	mov	r9, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	eb18 0303 	adds.w	r3, r8, r3
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	462b      	mov	r3, r5
 8001a90:	eb49 0303 	adc.w	r3, r9, r3
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	024b      	lsls	r3, r1, #9
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aac:	4621      	mov	r1, r4
 8001aae:	024a      	lsls	r2, r1, #9
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ac0:	f7fe fbd0 	bl	8000264 <__aeabi_uldivmod>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001acc:	e058      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4611      	mov	r1, r2
 8001ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ae8:	4642      	mov	r2, r8
 8001aea:	464b      	mov	r3, r9
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	0159      	lsls	r1, r3, #5
 8001af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afa:	0150      	lsls	r0, r2, #5
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4641      	mov	r1, r8
 8001b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b06:	4649      	mov	r1, r9
 8001b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b20:	ebb2 040a 	subs.w	r4, r2, sl
 8001b24:	eb63 050b 	sbc.w	r5, r3, fp
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	00eb      	lsls	r3, r5, #3
 8001b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b36:	00e2      	lsls	r2, r4, #3
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	4643      	mov	r3, r8
 8001b3e:	18e3      	adds	r3, r4, r3
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	464b      	mov	r3, r9
 8001b44:	eb45 0303 	adc.w	r3, r5, r3
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b56:	4629      	mov	r1, r5
 8001b58:	028b      	lsls	r3, r1, #10
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b60:	4621      	mov	r1, r4
 8001b62:	028a      	lsls	r2, r1, #10
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	61fa      	str	r2, [r7, #28]
 8001b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b74:	f7fe fb76 	bl	8000264 <__aeabi_uldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3750      	adds	r7, #80	; 0x50
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08006400 	.word	0x08006400

08001bfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	220f      	movs	r2, #15
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_GetClockConfig+0x5c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <HAL_RCC_GetClockConfig+0x60>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0207 	and.w	r2, r3, #7
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	601a      	str	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e041      	b.n	8001cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f839 	bl	8001cfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 f9d8 	bl	8002054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d001      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e04e      	b.n	8001dca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a23      	ldr	r2, [pc, #140]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d022      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d56:	d01d      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d018      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00e      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_TIM_Base_Start_IT+0xd8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d111      	bne.n	8001db8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d010      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db6:	e007      	b.n	8001dc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40000800 	.word	0x40000800
 8001de4:	40000c00 	.word	0x40000c00
 8001de8:	40010400 	.word	0x40010400
 8001dec:	40014000 	.word	0x40014000
 8001df0:	40001800 	.word	0x40001800

08001df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0202 	mvn.w	r2, #2
 8001e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8ee 	bl	8002018 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8e0 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8f1 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0204 	mvn.w	r2, #4
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8c4 	bl	8002018 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8b6 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f8c7 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0208 	mvn.w	r2, #8
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f89a 	bl	8002018 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f88c 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f89d 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b10      	cmp	r3, #16
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b10      	cmp	r3, #16
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0210 	mvn.w	r2, #16
 8001f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2208      	movs	r2, #8
 8001f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f870 	bl	8002018 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f862 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f873 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10e      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d107      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0201 	mvn.w	r2, #1
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fd88 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	2b80      	cmp	r3, #128	; 0x80
 8001f84:	d10e      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f90:	2b80      	cmp	r3, #128	; 0x80
 8001f92:	d107      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f902 	bl	80021a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	2b40      	cmp	r3, #64	; 0x40
 8001fbe:	d107      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f838 	bl	8002040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d10e      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d107      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0220 	mvn.w	r2, #32
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8cc 	bl	8002194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a40      	ldr	r2, [pc, #256]	; (8002168 <TIM_Base_SetConfig+0x114>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <TIM_Base_SetConfig+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d00f      	beq.n	8002094 <TIM_Base_SetConfig+0x40>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a3d      	ldr	r2, [pc, #244]	; (800216c <TIM_Base_SetConfig+0x118>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00b      	beq.n	8002094 <TIM_Base_SetConfig+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a3c      	ldr	r2, [pc, #240]	; (8002170 <TIM_Base_SetConfig+0x11c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d007      	beq.n	8002094 <TIM_Base_SetConfig+0x40>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <TIM_Base_SetConfig+0x120>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d003      	beq.n	8002094 <TIM_Base_SetConfig+0x40>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3a      	ldr	r2, [pc, #232]	; (8002178 <TIM_Base_SetConfig+0x124>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d108      	bne.n	80020a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2f      	ldr	r2, [pc, #188]	; (8002168 <TIM_Base_SetConfig+0x114>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d02b      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d027      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2c      	ldr	r2, [pc, #176]	; (800216c <TIM_Base_SetConfig+0x118>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d023      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <TIM_Base_SetConfig+0x11c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01f      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2a      	ldr	r2, [pc, #168]	; (8002174 <TIM_Base_SetConfig+0x120>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01b      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a29      	ldr	r2, [pc, #164]	; (8002178 <TIM_Base_SetConfig+0x124>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d017      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a28      	ldr	r2, [pc, #160]	; (800217c <TIM_Base_SetConfig+0x128>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a27      	ldr	r2, [pc, #156]	; (8002180 <TIM_Base_SetConfig+0x12c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00f      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <TIM_Base_SetConfig+0x130>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00b      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a25      	ldr	r2, [pc, #148]	; (8002188 <TIM_Base_SetConfig+0x134>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d007      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a24      	ldr	r2, [pc, #144]	; (800218c <TIM_Base_SetConfig+0x138>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d003      	beq.n	8002106 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a23      	ldr	r2, [pc, #140]	; (8002190 <TIM_Base_SetConfig+0x13c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d108      	bne.n	8002118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <TIM_Base_SetConfig+0x114>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <TIM_Base_SetConfig+0xf8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <TIM_Base_SetConfig+0x124>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d103      	bne.n	8002154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	615a      	str	r2, [r3, #20]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40010000 	.word	0x40010000
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800
 8002174:	40000c00 	.word	0x40000c00
 8002178:	40010400 	.word	0x40010400
 800217c:	40014000 	.word	0x40014000
 8002180:	40014400 	.word	0x40014400
 8002184:	40014800 	.word	0x40014800
 8002188:	40001800 	.word	0x40001800
 800218c:	40001c00 	.word	0x40001c00
 8002190:	40002000 	.word	0x40002000

08002194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f103 0208 	add.w	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f103 0208 	add.w	r2, r3, #8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 0208 	add.w	r2, r3, #8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002274:	d103      	bne.n	800227e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e00c      	b.n	8002298 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3308      	adds	r3, #8
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e002      	b.n	800228c <vListInsert+0x2e>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d2f6      	bcs.n	8002286 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	601a      	str	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6852      	ldr	r2, [r2, #4]
 80022f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d103      	bne.n	8002304 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <xQueueGenericReset+0x2a>
        __asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	60bb      	str	r3, [r7, #8]
    }
 800234a:	bf00      	nop
 800234c:	e7fe      	b.n	800234c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800234e:	f002 f921 	bl	8004594 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	441a      	add	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	3b01      	subs	r3, #1
 8002380:	68f9      	ldr	r1, [r7, #12]
 8002382:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	441a      	add	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	22ff      	movs	r2, #255	; 0xff
 8002392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	22ff      	movs	r2, #255	; 0xff
 800239a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00f      	beq.n	80023cc <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3310      	adds	r3, #16
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 f96f 	bl	8003694 <xTaskRemoveFromEventList>
 80023b6:	e009      	b.n	80023cc <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3310      	adds	r3, #16
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fefd 	bl	80021bc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3324      	adds	r3, #36	; 0x24
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fef8 	bl	80021bc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80023cc:	f002 f912 	bl	80045f4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023da:	b580      	push	{r7, lr}
 80023dc:	b08c      	sub	sp, #48	; 0x30
 80023de:	af02      	add	r7, sp, #8
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	4613      	mov	r3, r2
 80023e6:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <xQueueGenericCreate+0x2a>
        __asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	61bb      	str	r3, [r7, #24]
    }
 8002400:	bf00      	nop
 8002402:	e7fe      	b.n	8002402 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <xQueueGenericCreate+0x48>
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	429a      	cmp	r2, r3
 8002420:	d101      	bne.n	8002426 <xQueueGenericCreate+0x4c>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <xQueueGenericCreate+0x4e>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <xQueueGenericCreate+0x68>
        __asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	617b      	str	r3, [r7, #20]
    }
 800243e:	bf00      	nop
 8002440:	e7fe      	b.n	8002440 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002448:	d90a      	bls.n	8002460 <xQueueGenericCreate+0x86>
        __asm volatile
 800244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	613b      	str	r3, [r7, #16]
    }
 800245c:	bf00      	nop
 800245e:	e7fe      	b.n	800245e <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	3350      	adds	r3, #80	; 0x50
 8002464:	4618      	mov	r0, r3
 8002466:	f002 f9c1 	bl	80047ec <pvPortMalloc>
 800246a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3350      	adds	r3, #80	; 0x50
 800247a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800247c:	79fa      	ldrb	r2, [r7, #7]
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f805 	bl	8002498 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800248e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002490:	4618      	mov	r0, r3
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e002      	b.n	80024ba <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024c6:	2101      	movs	r1, #1
 80024c8:	69b8      	ldr	r0, [r7, #24]
 80024ca:	f7ff ff2b 	bl	8002324 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	68f9      	ldr	r1, [r7, #12]
 80024dc:	2073      	movs	r0, #115	; 0x73
 80024de:	f003 f835 	bl	800554c <SEGGER_SYSVIEW_RecordU32x3>
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b090      	sub	sp, #64	; 0x40
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xQueueGenericSend+0x32>
        __asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <xQueueGenericSend+0x40>
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <xQueueGenericSend+0x44>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <xQueueGenericSend+0x46>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <xQueueGenericSend+0x60>
        __asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002548:	bf00      	nop
 800254a:	e7fe      	b.n	800254a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d103      	bne.n	800255a <xQueueGenericSend+0x6e>
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <xQueueGenericSend+0x72>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <xQueueGenericSend+0x74>
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <xQueueGenericSend+0x8e>
        __asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	623b      	str	r3, [r7, #32]
    }
 8002576:	bf00      	nop
 8002578:	e7fe      	b.n	8002578 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800257a:	f001 fa35 	bl	80039e8 <xTaskGetSchedulerState>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <xQueueGenericSend+0x9e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <xQueueGenericSend+0xa2>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <xQueueGenericSend+0xa4>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <xQueueGenericSend+0xbe>
        __asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	61fb      	str	r3, [r7, #28]
    }
 80025a6:	bf00      	nop
 80025a8:	e7fe      	b.n	80025a8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025aa:	f001 fff3 	bl	8004594 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <xQueueGenericSend+0xd4>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d11f      	bne.n	8002600 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fd2a 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	460b      	mov	r3, r1
 80025d2:	4601      	mov	r1, r0
 80025d4:	205a      	movs	r0, #90	; 0x5a
 80025d6:	f003 f82f 	bl	8005638 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e0:	f000 fa56 	bl	8002a90 <prvCopyDataToQueue>
 80025e4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	3324      	adds	r3, #36	; 0x24
 80025f2:	4618      	mov	r0, r3
 80025f4:	f001 f84e 	bl	8003694 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025f8:	f001 fffc 	bl	80045f4 <vPortExitCritical>
                return pdPASS;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e07d      	b.n	80026fc <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d110      	bne.n	8002628 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002606:	f001 fff5 	bl	80045f4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	4618      	mov	r0, r3
 800260e:	f003 fd05 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	460b      	mov	r3, r1
 800261c:	4601      	mov	r1, r0
 800261e:	205a      	movs	r0, #90	; 0x5a
 8002620:	f003 f80a 	bl	8005638 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002624:	2300      	movs	r3, #0
 8002626:	e069      	b.n	80026fc <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4618      	mov	r0, r3
 8002634:	f001 f894 	bl	8003760 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002638:	2301      	movs	r3, #1
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800263c:	f001 ffda 	bl	80045f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002640:	f000 fe22 	bl	8003288 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002644:	f001 ffa6 	bl	8004594 <vPortEnterCritical>
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800264e:	b25b      	sxtb	r3, r3
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002654:	d103      	bne.n	800265e <xQueueGenericSend+0x172>
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002664:	b25b      	sxtb	r3, r3
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800266a:	d103      	bne.n	8002674 <xQueueGenericSend+0x188>
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002674:	f001 ffbe 	bl	80045f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002678:	1d3a      	adds	r2, r7, #4
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f001 f883 	bl	800378c <xTaskCheckForTimeOut>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d124      	bne.n	80026d6 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800268c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800268e:	f000 faf7 	bl	8002c80 <prvIsQueueFull>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d018      	beq.n	80026ca <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	3310      	adds	r3, #16
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 ffa5 	bl	80035f0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a8:	f000 fa82 	bl	8002bb0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026ac:	f000 fdfa 	bl	80032a4 <xTaskResumeAll>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f47f af79 	bne.w	80025aa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <xQueueGenericSend+0x218>)
 80026ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	e76f      	b.n	80025aa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026cc:	f000 fa70 	bl	8002bb0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026d0:	f000 fde8 	bl	80032a4 <xTaskResumeAll>
 80026d4:	e769      	b.n	80025aa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d8:	f000 fa6a 	bl	8002bb0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026dc:	f000 fde2 	bl	80032a4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fc9a 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	460b      	mov	r3, r1
 80026f2:	4601      	mov	r1, r0
 80026f4:	205a      	movs	r0, #90	; 0x5a
 80026f6:	f002 ff9f 	bl	8005638 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80026fa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3738      	adds	r7, #56	; 0x38
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	e000ed04 	.word	0xe000ed04

08002708 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b090      	sub	sp, #64	; 0x40
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002732:	bf00      	nop
 8002734:	e7fe      	b.n	8002734 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d103      	bne.n	8002744 <xQueueGenericSendFromISR+0x3c>
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <xQueueGenericSendFromISR+0x40>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <xQueueGenericSendFromISR+0x42>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002760:	bf00      	nop
 8002762:	e7fe      	b.n	8002762 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d103      	bne.n	8002772 <xQueueGenericSendFromISR+0x6a>
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <xQueueGenericSendFromISR+0x6e>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <xQueueGenericSendFromISR+0x70>
 8002776:	2300      	movs	r3, #0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	623b      	str	r3, [r7, #32]
    }
 800278e:	bf00      	nop
 8002790:	e7fe      	b.n	8002790 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002792:	f001 ffeb 	bl	800476c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002796:	f3ef 8211 	mrs	r2, BASEPRI
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	61fa      	str	r2, [r7, #28]
 80027ac:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027ae:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d302      	bcc.n	80027c4 <xQueueGenericSendFromISR+0xbc>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d148      	bne.n	8002856 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 fc20 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 80027dc:	4601      	mov	r1, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	461a      	mov	r2, r3
 80027e2:	2060      	movs	r0, #96	; 0x60
 80027e4:	f002 fe58 	bl	8005498 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027ee:	f000 f94f 	bl	8002a90 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80027f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fa:	d112      	bne.n	8002822 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2b00      	cmp	r3, #0
 8002802:	d025      	beq.n	8002850 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002806:	3324      	adds	r3, #36	; 0x24
 8002808:	4618      	mov	r0, r3
 800280a:	f000 ff43 	bl	8003694 <xTaskRemoveFromEventList>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01d      	beq.n	8002850 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01a      	beq.n	8002850 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e016      	b.n	8002850 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002822:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002826:	2b7f      	cmp	r3, #127	; 0x7f
 8002828:	d10a      	bne.n	8002840 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	617b      	str	r3, [r7, #20]
    }
 800283c:	bf00      	nop
 800283e:	e7fe      	b.n	800283e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002844:	3301      	adds	r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	b25a      	sxtb	r2, r3
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002850:	2301      	movs	r3, #1
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002854:	e00b      	b.n	800286e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002858:	4618      	mov	r0, r3
 800285a:	f003 fbdf 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 800285e:	4601      	mov	r1, r0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	461a      	mov	r2, r3
 8002864:	2060      	movs	r0, #96	; 0x60
 8002866:	f002 fe17 	bl	8005498 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800286a:	2300      	movs	r3, #0
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002870:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002878:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800287a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800287c:	4618      	mov	r0, r3
 800287e:	3740      	adds	r7, #64	; 0x40
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b08f      	sub	sp, #60	; 0x3c
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002890:	2300      	movs	r3, #0
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <xQueueReceive+0x30>
        __asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	623b      	str	r3, [r7, #32]
    }
 80028b0:	bf00      	nop
 80028b2:	e7fe      	b.n	80028b2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <xQueueReceive+0x3e>
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <xQueueReceive+0x42>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <xQueueReceive+0x44>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <xQueueReceive+0x5e>
        __asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	61fb      	str	r3, [r7, #28]
    }
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028e2:	f001 f881 	bl	80039e8 <xTaskGetSchedulerState>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <xQueueReceive+0x6e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <xQueueReceive+0x72>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <xQueueReceive+0x74>
 80028f6:	2300      	movs	r3, #0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xQueueReceive+0x8e>
        __asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	61bb      	str	r3, [r7, #24]
    }
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002912:	f001 fe3f 	bl	8004594 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d024      	beq.n	800296c <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002926:	f000 f91d 	bl	8002b64 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	4618      	mov	r0, r3
 800292e:	f003 fb75 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 8002932:	4604      	mov	r4, r0
 8002934:	2000      	movs	r0, #0
 8002936:	f003 fb71 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2101      	movs	r1, #1
 8002940:	9100      	str	r1, [sp, #0]
 8002942:	4621      	mov	r1, r4
 8002944:	205c      	movs	r0, #92	; 0x5c
 8002946:	f002 fe77 	bl	8005638 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d004      	beq.n	8002964 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	3310      	adds	r3, #16
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fe98 	bl	8003694 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002964:	f001 fe46 	bl	80045f4 <vPortExitCritical>
                return pdPASS;
 8002968:	2301      	movs	r3, #1
 800296a:	e08a      	b.n	8002a82 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d113      	bne.n	800299a <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002972:	f001 fe3f 	bl	80045f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fb4f 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 800297e:	4604      	mov	r4, r0
 8002980:	2000      	movs	r0, #0
 8002982:	f003 fb4b 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 8002986:	4602      	mov	r2, r0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2101      	movs	r1, #1
 800298c:	9100      	str	r1, [sp, #0]
 800298e:	4621      	mov	r1, r4
 8002990:	205c      	movs	r0, #92	; 0x5c
 8002992:	f002 fe51 	bl	8005638 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002996:	2300      	movs	r3, #0
 8002998:	e073      	b.n	8002a82 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d106      	bne.n	80029ae <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fedb 	bl	8003760 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029aa:	2301      	movs	r3, #1
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029ae:	f001 fe21 	bl	80045f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029b2:	f000 fc69 	bl	8003288 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029b6:	f001 fded 	bl	8004594 <vPortEnterCritical>
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c6:	d103      	bne.n	80029d0 <xQueueReceive+0x14c>
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029dc:	d103      	bne.n	80029e6 <xQueueReceive+0x162>
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e6:	f001 fe05 	bl	80045f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029ea:	1d3a      	adds	r2, r7, #4
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 feca 	bl	800378c <xTaskCheckForTimeOut>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d124      	bne.n	8002a48 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a00:	f000 f928 	bl	8002c54 <prvIsQueueEmpty>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	3324      	adds	r3, #36	; 0x24
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fdec 	bl	80035f0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a1a:	f000 f8c9 	bl	8002bb0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a1e:	f000 fc41 	bl	80032a4 <xTaskResumeAll>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f47f af74 	bne.w	8002912 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <xQueueReceive+0x208>)
 8002a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	e76a      	b.n	8002912 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a3e:	f000 f8b7 	bl	8002bb0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a42:	f000 fc2f 	bl	80032a4 <xTaskResumeAll>
 8002a46:	e764      	b.n	8002912 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4a:	f000 f8b1 	bl	8002bb0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a4e:	f000 fc29 	bl	80032a4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a54:	f000 f8fe 	bl	8002c54 <prvIsQueueEmpty>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f43f af59 	beq.w	8002912 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fada 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 8002a68:	4604      	mov	r4, r0
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f003 fad6 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2101      	movs	r1, #1
 8002a76:	9100      	str	r1, [sp, #0]
 8002a78:	4621      	mov	r1, r4
 8002a7a:	205c      	movs	r0, #92	; 0x5c
 8002a7c:	f002 fddc 	bl	8005638 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a80:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3734      	adds	r7, #52	; 0x34
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	e000ed04 	.word	0xe000ed04

08002a90 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d14d      	bne.n	8002b52 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 ffb2 	bl	8003a24 <xTaskPriorityDisinherit>
 8002ac0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	e043      	b.n	8002b52 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d119      	bne.n	8002b04 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6858      	ldr	r0, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	f003 fc1a 	bl	8006314 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	441a      	add	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d32b      	bcc.n	8002b52 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	e026      	b.n	8002b52 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68d8      	ldr	r0, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	f003 fc00 	bl	8006314 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	425b      	negs	r3, r3
 8002b1e:	441a      	add	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d207      	bcs.n	8002b40 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	425b      	negs	r3, r3
 8002b3a:	441a      	add	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d105      	bne.n	8002b52 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002b5a:	697b      	ldr	r3, [r7, #20]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d018      	beq.n	8002ba8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	441a      	add	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d303      	bcc.n	8002b98 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68d9      	ldr	r1, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6838      	ldr	r0, [r7, #0]
 8002ba4:	f003 fbb6 	bl	8006314 <memcpy>
    }
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002bb8:	f001 fcec 	bl	8004594 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bc4:	e011      	b.n	8002bea <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d012      	beq.n	8002bf4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3324      	adds	r3, #36	; 0x24
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fd5e 	bl	8003694 <xTaskRemoveFromEventList>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002bde:	f000 fe3b 	bl	8003858 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	dce9      	bgt.n	8002bc6 <prvUnlockQueue+0x16>
 8002bf2:	e000      	b.n	8002bf6 <prvUnlockQueue+0x46>
                        break;
 8002bf4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002bfe:	f001 fcf9 	bl	80045f4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c02:	f001 fcc7 	bl	8004594 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c0c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c0e:	e011      	b.n	8002c34 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d012      	beq.n	8002c3e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3310      	adds	r3, #16
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fd39 	bl	8003694 <xTaskRemoveFromEventList>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c28:	f000 fe16 	bl	8003858 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c2c:	7bbb      	ldrb	r3, [r7, #14]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	dce9      	bgt.n	8002c10 <prvUnlockQueue+0x60>
 8002c3c:	e000      	b.n	8002c40 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c3e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	22ff      	movs	r2, #255	; 0xff
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c48:	f001 fcd4 	bl	80045f4 <vPortExitCritical>
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c5c:	f001 fc9a 	bl	8004594 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e001      	b.n	8002c72 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c72:	f001 fcbf 	bl	80045f4 <vPortExitCritical>

    return xReturn;
 8002c76:	68fb      	ldr	r3, [r7, #12]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c88:	f001 fc84 	bl	8004594 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d102      	bne.n	8002c9e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e001      	b.n	8002ca2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ca2:	f001 fca7 	bl	80045f4 <vPortExitCritical>

    return xReturn;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e01e      	b.n	8002cfe <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cc0:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <vQueueAddToRegistry+0x60>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d115      	bne.n	8002cf8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ccc:	4910      	ldr	r1, [pc, #64]	; (8002d10 <vQueueAddToRegistry+0x60>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002cd6:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <vQueueAddToRegistry+0x60>)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f003 f999 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 8002cea:	4601      	mov	r1, r0
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2071      	movs	r0, #113	; 0x71
 8002cf2:	f002 fbd1 	bl	8005498 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002cf6:	e006      	b.n	8002d06 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b07      	cmp	r3, #7
 8002d02:	d9dd      	bls.n	8002cc0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000080 	.word	0x20000080

08002d14 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d24:	f001 fc36 	bl	8004594 <vPortEnterCritical>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d34:	d103      	bne.n	8002d3e <vQueueWaitForMessageRestricted+0x2a>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4a:	d103      	bne.n	8002d54 <vQueueWaitForMessageRestricted+0x40>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d54:	f001 fc4e 	bl	80045f4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3324      	adds	r3, #36	; 0x24
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fc65 	bl	8003638 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7ff ff1e 	bl	8002bb0 <prvUnlockQueue>
    }
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	; 0x30
 8002d80:	af04      	add	r7, sp, #16
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 fd2b 	bl	80047ec <pvPortMalloc>
 8002d96:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00e      	beq.n	8002dbc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d9e:	2058      	movs	r0, #88	; 0x58
 8002da0:	f001 fd24 	bl	80047ec <pvPortMalloc>
 8002da4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
 8002db2:	e005      	b.n	8002dc0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002db4:	6978      	ldr	r0, [r7, #20]
 8002db6:	f001 fdf9 	bl	80049ac <vPortFree>
 8002dba:	e001      	b.n	8002dc0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d013      	beq.n	8002dee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9303      	str	r3, [sp, #12]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f80e 	bl	8002dfe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002de2:	69f8      	ldr	r0, [r7, #28]
 8002de4:	f000 f8a2 	bl	8002f2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002de8:	2301      	movs	r3, #1
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	e002      	b.n	8002df4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002df2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002df4:	69bb      	ldr	r3, [r7, #24]
    }
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b088      	sub	sp, #32
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	461a      	mov	r2, r3
 8002e16:	21a5      	movs	r1, #165	; 0xa5
 8002e18:	f003 fa8a 	bl	8006330 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e26:	3b01      	subs	r3, #1
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f023 0307 	bic.w	r3, r3, #7
 8002e34:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	617b      	str	r3, [r7, #20]
    }
 8002e52:	bf00      	nop
 8002e54:	e7fe      	b.n	8002e54 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01f      	beq.n	8002e9c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	e012      	b.n	8002e88 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	7819      	ldrb	r1, [r3, #0]
 8002e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	3334      	adds	r3, #52	; 0x34
 8002e72:	460a      	mov	r2, r1
 8002e74:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b09      	cmp	r3, #9
 8002e8c:	d9e9      	bls.n	8002e62 <prvInitialiseNewTask+0x64>
 8002e8e:	e000      	b.n	8002e92 <prvInitialiseNewTask+0x94>
            {
                break;
 8002e90:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e9a:	e003      	b.n	8002ea4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d901      	bls.n	8002eae <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f999 	bl	80021fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	3318      	adds	r3, #24
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f994 	bl	80021fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	f1c3 0205 	rsb	r2, r3, #5
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	3350      	adds	r3, #80	; 0x50
 8002eee:	2204      	movs	r2, #4
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fa1c 	bl	8006330 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	3354      	adds	r3, #84	; 0x54
 8002efc:	2201      	movs	r2, #1
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f003 fa15 	bl	8006330 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	68f9      	ldr	r1, [r7, #12]
 8002f0a:	69b8      	ldr	r0, [r7, #24]
 8002f0c:	f001 f994 	bl	8004238 <pxPortInitialiseStack>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f2c:	b5b0      	push	{r4, r5, r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f34:	f001 fb2e 	bl	8004594 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f38:	4b35      	ldr	r3, [pc, #212]	; (8003010 <prvAddNewTaskToReadyList+0xe4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a34      	ldr	r2, [pc, #208]	; (8003010 <prvAddNewTaskToReadyList+0xe4>)
 8002f40:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <prvAddNewTaskToReadyList+0xe8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f4a:	4a32      	ldr	r2, [pc, #200]	; (8003014 <prvAddNewTaskToReadyList+0xe8>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f50:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <prvAddNewTaskToReadyList+0xe4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d110      	bne.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f58:	f000 fc9c 	bl	8003894 <prvInitialiseTaskLists>
 8002f5c:	e00d      	b.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <prvAddNewTaskToReadyList+0xec>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <prvAddNewTaskToReadyList+0xe8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d802      	bhi.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f74:	4a27      	ldr	r2, [pc, #156]	; (8003014 <prvAddNewTaskToReadyList+0xe8>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f7a:	4b28      	ldr	r3, [pc, #160]	; (800301c <prvAddNewTaskToReadyList+0xf0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	4a26      	ldr	r2, [pc, #152]	; (800301c <prvAddNewTaskToReadyList+0xf0>)
 8002f82:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <prvAddNewTaskToReadyList+0xf0>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <prvAddNewTaskToReadyList+0x94>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 ff1b 	bl	8005dd0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	461d      	mov	r5, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	461c      	mov	r4, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	1ae3      	subs	r3, r4, r3
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	462b      	mov	r3, r5
 8002fbc:	f001 fe14 	bl	8004be8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 ff88 	bl	8005ed8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	2201      	movs	r2, #1
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <prvAddNewTaskToReadyList+0xf4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <prvAddNewTaskToReadyList+0xf4>)
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <prvAddNewTaskToReadyList+0xf8>)
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7ff f910 	bl	8002216 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ff6:	f001 fafd 	bl	80045f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <prvAddNewTaskToReadyList+0xec>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <prvAddNewTaskToReadyList+0xe8>)
 8003004:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bdb0      	pop	{r4, r5, r7, pc}
 800300e:	bf00      	nop
 8003010:	20000198 	.word	0x20000198
 8003014:	200000c0 	.word	0x200000c0
 8003018:	200001a4 	.word	0x200001a4
 800301c:	200001b4 	.word	0x200001b4
 8003020:	200001a0 	.word	0x200001a0
 8003024:	200000c4 	.word	0x200000c4

08003028 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8003030:	f001 fab0 	bl	8004594 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <uxTaskPriorityGet+0x18>
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <uxTaskPriorityGet+0x30>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	e000      	b.n	8003042 <uxTaskPriorityGet+0x1a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800304a:	f001 fad3 	bl	80045f4 <vPortExitCritical>

        return uxReturn;
 800304e:	68bb      	ldr	r3, [r7, #8]
    }
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200000c0 	.word	0x200000c0

0800305c <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af02      	add	r7, sp, #8
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d90a      	bls.n	8003086 <vTaskPrioritySet+0x2a>
        __asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	60fb      	str	r3, [r7, #12]
    }
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b04      	cmp	r3, #4
 800308a:	d901      	bls.n	8003090 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800308c:	2304      	movs	r3, #4
 800308e:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003090:	f001 fa80 	bl	8004594 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <vTaskPrioritySet+0x44>
 800309a:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <vTaskPrioritySet+0x15c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	e000      	b.n	80030a2 <vTaskPrioritySet+0x46>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 ffb8 	bl	800601c <SEGGER_SYSVIEW_ShrinkId>
 80030ac:	4603      	mov	r3, r0
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	2028      	movs	r0, #40	; 0x28
 80030b4:	f002 f9f0 	bl	8005498 <SEGGER_SYSVIEW_RecordU32x2>
 80030b8:	69b8      	ldr	r0, [r7, #24]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	461a      	mov	r2, r3
 80030c6:	2300      	movs	r3, #0
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	f001 fdf3 	bl	8004cb8 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d6:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d064      	beq.n	80031aa <vTaskPrioritySet+0x14e>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d90d      	bls.n	8003104 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 80030e8:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <vTaskPrioritySet+0x15c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d00f      	beq.n	8003112 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80030f2:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <vTaskPrioritySet+0x15c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d309      	bcc.n	8003112 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 80030fe:	2301      	movs	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e006      	b.n	8003112 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <vTaskPrioritySet+0x15c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	429a      	cmp	r2, r3
 800310c:	d101      	bne.n	8003112 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800310e:	2301      	movs	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	429a      	cmp	r2, r3
 8003122:	d102      	bne.n	800312a <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db04      	blt.n	8003142 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f1c3 0205 	rsb	r2, r3, #5
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	6959      	ldr	r1, [r3, #20]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4a1a      	ldr	r2, [pc, #104]	; (80031bc <vTaskPrioritySet+0x160>)
 8003152:	4413      	add	r3, r2
 8003154:	4299      	cmp	r1, r3
 8003156:	d128      	bne.n	80031aa <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	3304      	adds	r3, #4
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff f8b7 	bl	80022d0 <uxListRemove>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003168:	2201      	movs	r2, #1
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43da      	mvns	r2, r3
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <vTaskPrioritySet+0x164>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4013      	ands	r3, r2
 8003178:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <vTaskPrioritySet+0x164>)
 800317a:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <vTaskPrioritySet+0x164>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <vTaskPrioritySet+0x164>)
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <vTaskPrioritySet+0x160>)
 800319c:	441a      	add	r2, r3
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	3304      	adds	r3, #4
 80031a2:	4619      	mov	r1, r3
 80031a4:	4610      	mov	r0, r2
 80031a6:	f7ff f836 	bl	8002216 <vListInsertEnd>
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80031aa:	f001 fa23 	bl	80045f4 <vPortExitCritical>
    }
 80031ae:	bf00      	nop
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200000c0 	.word	0x200000c0
 80031bc:	200000c4 	.word	0x200000c4
 80031c0:	200001a0 	.word	0x200001a0

080031c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80031ca:	4b27      	ldr	r3, [pc, #156]	; (8003268 <vTaskStartScheduler+0xa4>)
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	2300      	movs	r3, #0
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2300      	movs	r3, #0
 80031d4:	2282      	movs	r2, #130	; 0x82
 80031d6:	4925      	ldr	r1, [pc, #148]	; (800326c <vTaskStartScheduler+0xa8>)
 80031d8:	4825      	ldr	r0, [pc, #148]	; (8003270 <vTaskStartScheduler+0xac>)
 80031da:	f7ff fdcf 	bl	8002d7c <xTaskCreate>
 80031de:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80031e6:	f000 fd15 	bl	8003c14 <xTimerCreateTimerTask>
 80031ea:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d124      	bne.n	800323c <vTaskStartScheduler+0x78>
        __asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	60bb      	str	r3, [r7, #8]
    }
 8003204:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <vTaskStartScheduler+0xb0>)
 8003208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800320c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800320e:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <vTaskStartScheduler+0xb4>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <vTaskStartScheduler+0xb8>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800321a:	4b19      	ldr	r3, [pc, #100]	; (8003280 <vTaskStartScheduler+0xbc>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <vTaskStartScheduler+0xa4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d102      	bne.n	800322c <vTaskStartScheduler+0x68>
 8003226:	f002 fdb7 	bl	8005d98 <SEGGER_SYSVIEW_OnIdle>
 800322a:	e004      	b.n	8003236 <vTaskStartScheduler+0x72>
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <vTaskStartScheduler+0xbc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f002 fe0f 	bl	8005e54 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003236:	f001 f88d 	bl	8004354 <xPortStartScheduler>
 800323a:	e00e      	b.n	800325a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003242:	d10a      	bne.n	800325a <vTaskStartScheduler+0x96>
        __asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	607b      	str	r3, [r7, #4]
    }
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <vTaskStartScheduler+0xc0>)
 800325c:	681b      	ldr	r3, [r3, #0]
}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	200001bc 	.word	0x200001bc
 800326c:	08006368 	.word	0x08006368
 8003270:	08003871 	.word	0x08003871
 8003274:	200001b8 	.word	0x200001b8
 8003278:	200001a4 	.word	0x200001a4
 800327c:	2000019c 	.word	0x2000019c
 8003280:	200000c0 	.word	0x200000c0
 8003284:	2000000c 	.word	0x2000000c

08003288 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <vTaskSuspendAll+0x18>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	4a03      	ldr	r2, [pc, #12]	; (80032a0 <vTaskSuspendAll+0x18>)
 8003294:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	200001c0 	.word	0x200001c0

080032a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80032b2:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <xTaskResumeAll+0x104>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <xTaskResumeAll+0x2c>
        __asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	603b      	str	r3, [r7, #0]
    }
 80032cc:	bf00      	nop
 80032ce:	e7fe      	b.n	80032ce <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80032d0:	f001 f960 	bl	8004594 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80032d4:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <xTaskResumeAll+0x104>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3b01      	subs	r3, #1
 80032da:	4a33      	ldr	r2, [pc, #204]	; (80033a8 <xTaskResumeAll+0x104>)
 80032dc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032de:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <xTaskResumeAll+0x104>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d159      	bne.n	800339a <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <xTaskResumeAll+0x108>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d055      	beq.n	800339a <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032ee:	e032      	b.n	8003356 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f0:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <xTaskResumeAll+0x10c>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3318      	adds	r3, #24
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe ffe7 	bl	80022d0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3304      	adds	r3, #4
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe ffe2 	bl	80022d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4618      	mov	r0, r3
 8003310:	f002 fde2 	bl	8005ed8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	2201      	movs	r2, #1
 800331a:	409a      	lsls	r2, r3
 800331c:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <xTaskResumeAll+0x110>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4313      	orrs	r3, r2
 8003322:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <xTaskResumeAll+0x110>)
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4a21      	ldr	r2, [pc, #132]	; (80033b8 <xTaskResumeAll+0x114>)
 8003334:	441a      	add	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3304      	adds	r3, #4
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f7fe ff6a 	bl	8002216 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <xTaskResumeAll+0x118>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	429a      	cmp	r2, r3
 800334e:	d302      	bcc.n	8003356 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <xTaskResumeAll+0x11c>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <xTaskResumeAll+0x10c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1c8      	bne.n	80032f0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003364:	f000 fb14 	bl	8003990 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <xTaskResumeAll+0x120>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003374:	f000 f838 	bl	80033e8 <xTaskIncrementTick>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <xTaskResumeAll+0x11c>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	3b01      	subs	r3, #1
 8003388:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f1      	bne.n	8003374 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <xTaskResumeAll+0x120>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <xTaskResumeAll+0x11c>)
 8003398:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800339a:	f001 f92b 	bl	80045f4 <vPortExitCritical>

    return xAlreadyYielded;
 800339e:	687b      	ldr	r3, [r7, #4]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	200001c0 	.word	0x200001c0
 80033ac:	20000198 	.word	0x20000198
 80033b0:	20000158 	.word	0x20000158
 80033b4:	200001a0 	.word	0x200001a0
 80033b8:	200000c4 	.word	0x200000c4
 80033bc:	200000c0 	.word	0x200000c0
 80033c0:	200001ac 	.word	0x200001ac
 80033c4:	200001a8 	.word	0x200001a8

080033c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <xTaskGetTickCount+0x1c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80033d4:	687b      	ldr	r3, [r7, #4]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000019c 	.word	0x2000019c

080033e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033f2:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <xTaskIncrementTick+0x110>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d173      	bne.n	80034e2 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033fa:	4b40      	ldr	r3, [pc, #256]	; (80034fc <xTaskIncrementTick+0x114>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003402:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <xTaskIncrementTick+0x114>)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d120      	bne.n	8003450 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800340e:	4b3c      	ldr	r3, [pc, #240]	; (8003500 <xTaskIncrementTick+0x118>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <xTaskIncrementTick+0x46>
        __asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	603b      	str	r3, [r7, #0]
    }
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <xTaskIncrementTick+0x44>
 800342e:	4b34      	ldr	r3, [pc, #208]	; (8003500 <xTaskIncrementTick+0x118>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	4b33      	ldr	r3, [pc, #204]	; (8003504 <xTaskIncrementTick+0x11c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a31      	ldr	r2, [pc, #196]	; (8003500 <xTaskIncrementTick+0x118>)
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4a31      	ldr	r2, [pc, #196]	; (8003504 <xTaskIncrementTick+0x11c>)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b31      	ldr	r3, [pc, #196]	; (8003508 <xTaskIncrementTick+0x120>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	4a2f      	ldr	r2, [pc, #188]	; (8003508 <xTaskIncrementTick+0x120>)
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	f000 faa0 	bl	8003990 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003450:	4b2e      	ldr	r3, [pc, #184]	; (800350c <xTaskIncrementTick+0x124>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	429a      	cmp	r2, r3
 8003458:	d348      	bcc.n	80034ec <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <xTaskIncrementTick+0x118>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003464:	4b29      	ldr	r3, [pc, #164]	; (800350c <xTaskIncrementTick+0x124>)
 8003466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346a:	601a      	str	r2, [r3, #0]
                    break;
 800346c:	e03e      	b.n	80034ec <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <xTaskIncrementTick+0x118>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d203      	bcs.n	800348e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003486:	4a21      	ldr	r2, [pc, #132]	; (800350c <xTaskIncrementTick+0x124>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800348c:	e02e      	b.n	80034ec <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3304      	adds	r3, #4
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe ff1c 	bl	80022d0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3318      	adds	r3, #24
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe ff13 	bl	80022d0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 fd13 	bl	8005ed8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	2201      	movs	r2, #1
 80034b8:	409a      	lsls	r2, r3
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <xTaskIncrementTick+0x128>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <xTaskIncrementTick+0x128>)
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4a10      	ldr	r2, [pc, #64]	; (8003514 <xTaskIncrementTick+0x12c>)
 80034d2:	441a      	add	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f7fe fe9b 	bl	8002216 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e0:	e7bb      	b.n	800345a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <xTaskIncrementTick+0x130>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <xTaskIncrementTick+0x130>)
 80034ea:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80034ec:	697b      	ldr	r3, [r7, #20]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200001c0 	.word	0x200001c0
 80034fc:	2000019c 	.word	0x2000019c
 8003500:	20000150 	.word	0x20000150
 8003504:	20000154 	.word	0x20000154
 8003508:	200001b0 	.word	0x200001b0
 800350c:	200001b8 	.word	0x200001b8
 8003510:	200001a0 	.word	0x200001a0
 8003514:	200000c4 	.word	0x200000c4
 8003518:	200001a8 	.word	0x200001a8

0800351c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <vTaskSwitchContext+0xbc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800352a:	4b2c      	ldr	r3, [pc, #176]	; (80035dc <vTaskSwitchContext+0xc0>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003530:	e04d      	b.n	80035ce <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003532:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <vTaskSwitchContext+0xc0>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <vTaskSwitchContext+0xc4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003546:	7afb      	ldrb	r3, [r7, #11]
 8003548:	f1c3 031f 	rsb	r3, r3, #31
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	4925      	ldr	r1, [pc, #148]	; (80035e4 <vTaskSwitchContext+0xc8>)
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	607b      	str	r3, [r7, #4]
    }
 8003574:	bf00      	nop
 8003576:	e7fe      	b.n	8003576 <vTaskSwitchContext+0x5a>
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <vTaskSwitchContext+0xc8>)
 8003584:	4413      	add	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	3308      	adds	r3, #8
 800359a:	429a      	cmp	r2, r3
 800359c:	d104      	bne.n	80035a8 <vTaskSwitchContext+0x8c>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <vTaskSwitchContext+0xcc>)
 80035b0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <vTaskSwitchContext+0xcc>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <vTaskSwitchContext+0xd0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d102      	bne.n	80035c4 <vTaskSwitchContext+0xa8>
 80035be:	f002 fbeb 	bl	8005d98 <SEGGER_SYSVIEW_OnIdle>
}
 80035c2:	e004      	b.n	80035ce <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <vTaskSwitchContext+0xcc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f002 fc43 	bl	8005e54 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	200001c0 	.word	0x200001c0
 80035dc:	200001ac 	.word	0x200001ac
 80035e0:	200001a0 	.word	0x200001a0
 80035e4:	200000c4 	.word	0x200000c4
 80035e8:	200000c0 	.word	0x200000c0
 80035ec:	200001bc 	.word	0x200001bc

080035f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	60fb      	str	r3, [r7, #12]
    }
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003616:	4b07      	ldr	r3, [pc, #28]	; (8003634 <vTaskPlaceOnEventList+0x44>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3318      	adds	r3, #24
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe fe1d 	bl	800225e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003624:	2101      	movs	r1, #1
 8003626:	6838      	ldr	r0, [r7, #0]
 8003628:	f000 fa7c 	bl	8003b24 <prvAddCurrentTaskToDelayedList>
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	200000c0 	.word	0x200000c0

08003638 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	617b      	str	r3, [r7, #20]
    }
 800365c:	bf00      	nop
 800365e:	e7fe      	b.n	800365e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <vTaskPlaceOnEventListRestricted+0x58>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3318      	adds	r3, #24
 8003666:	4619      	mov	r1, r3
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7fe fdd4 	bl	8002216 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003678:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800367a:	2024      	movs	r0, #36	; 0x24
 800367c:	f001 feb2 	bl	80053e4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	68b8      	ldr	r0, [r7, #8]
 8003684:	f000 fa4e 	bl	8003b24 <prvAddCurrentTaskToDelayedList>
    }
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200000c0 	.word	0x200000c0

08003694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60fb      	str	r3, [r7, #12]
    }
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	3318      	adds	r3, #24
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fe03 	bl	80022d0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ca:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <xTaskRemoveFromEventList+0xb4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d120      	bne.n	8003714 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	3304      	adds	r3, #4
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe fdfa 	bl	80022d0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 fbfa 	bl	8005ed8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	4b17      	ldr	r3, [pc, #92]	; (800374c <xTaskRemoveFromEventList+0xb8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	4a16      	ldr	r2, [pc, #88]	; (800374c <xTaskRemoveFromEventList+0xb8>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <xTaskRemoveFromEventList+0xbc>)
 8003704:	441a      	add	r2, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	3304      	adds	r3, #4
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f7fe fd82 	bl	8002216 <vListInsertEnd>
 8003712:	e005      	b.n	8003720 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	3318      	adds	r3, #24
 8003718:	4619      	mov	r1, r3
 800371a:	480e      	ldr	r0, [pc, #56]	; (8003754 <xTaskRemoveFromEventList+0xc0>)
 800371c:	f7fe fd7b 	bl	8002216 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <xTaskRemoveFromEventList+0xc4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	429a      	cmp	r2, r3
 800372c:	d905      	bls.n	800373a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800372e:	2301      	movs	r3, #1
 8003730:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <xTaskRemoveFromEventList+0xc8>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e001      	b.n	800373e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800373e:	697b      	ldr	r3, [r7, #20]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200001c0 	.word	0x200001c0
 800374c:	200001a0 	.word	0x200001a0
 8003750:	200000c4 	.word	0x200000c4
 8003754:	20000158 	.word	0x20000158
 8003758:	200000c0 	.word	0x200000c0
 800375c:	200001ac 	.word	0x200001ac

08003760 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <vTaskInternalSetTimeOutState+0x24>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <vTaskInternalSetTimeOutState+0x28>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	605a      	str	r2, [r3, #4]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	200001b0 	.word	0x200001b0
 8003788:	2000019c 	.word	0x2000019c

0800378c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	613b      	str	r3, [r7, #16]
    }
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	60fb      	str	r3, [r7, #12]
    }
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80037ce:	f000 fee1 	bl	8004594 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037d2:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <xTaskCheckForTimeOut+0xc4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ea:	d102      	bne.n	80037f2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	e026      	b.n	8003840 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <xTaskCheckForTimeOut+0xc8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d00a      	beq.n	8003814 <xTaskCheckForTimeOut+0x88>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	429a      	cmp	r2, r3
 8003806:	d305      	bcc.n	8003814 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e015      	b.n	8003840 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	429a      	cmp	r2, r3
 800381c:	d20b      	bcs.n	8003836 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad2      	subs	r2, r2, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ff98 	bl	8003760 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003830:	2300      	movs	r3, #0
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	e004      	b.n	8003840 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003840:	f000 fed8 	bl	80045f4 <vPortExitCritical>

    return xReturn;
 8003844:	69fb      	ldr	r3, [r7, #28]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	2000019c 	.word	0x2000019c
 8003854:	200001b0 	.word	0x200001b0

08003858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <vTaskMissedYield+0x14>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]
}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	200001ac 	.word	0x200001ac

08003870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003878:	f000 f84c 	bl	8003914 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <prvIdleTask+0x20>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800388c:	e7f4      	b.n	8003878 <prvIdleTask+0x8>
 800388e:	bf00      	nop
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	e00c      	b.n	80038ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <prvInitialiseTaskLists+0x60>)
 80038ac:	4413      	add	r3, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fc84 	bl	80021bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3301      	adds	r3, #1
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d9ef      	bls.n	80038a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038c0:	480d      	ldr	r0, [pc, #52]	; (80038f8 <prvInitialiseTaskLists+0x64>)
 80038c2:	f7fe fc7b 	bl	80021bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038c6:	480d      	ldr	r0, [pc, #52]	; (80038fc <prvInitialiseTaskLists+0x68>)
 80038c8:	f7fe fc78 	bl	80021bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038cc:	480c      	ldr	r0, [pc, #48]	; (8003900 <prvInitialiseTaskLists+0x6c>)
 80038ce:	f7fe fc75 	bl	80021bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80038d2:	480c      	ldr	r0, [pc, #48]	; (8003904 <prvInitialiseTaskLists+0x70>)
 80038d4:	f7fe fc72 	bl	80021bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038d8:	480b      	ldr	r0, [pc, #44]	; (8003908 <prvInitialiseTaskLists+0x74>)
 80038da:	f7fe fc6f 	bl	80021bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <prvInitialiseTaskLists+0x78>)
 80038e0:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <prvInitialiseTaskLists+0x64>)
 80038e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038e4:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <prvInitialiseTaskLists+0x7c>)
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <prvInitialiseTaskLists+0x68>)
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200000c4 	.word	0x200000c4
 80038f8:	20000128 	.word	0x20000128
 80038fc:	2000013c 	.word	0x2000013c
 8003900:	20000158 	.word	0x20000158
 8003904:	2000016c 	.word	0x2000016c
 8003908:	20000184 	.word	0x20000184
 800390c:	20000150 	.word	0x20000150
 8003910:	20000154 	.word	0x20000154

08003914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800391a:	e019      	b.n	8003950 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800391c:	f000 fe3a 	bl	8004594 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003920:	4b10      	ldr	r3, [pc, #64]	; (8003964 <prvCheckTasksWaitingTermination+0x50>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fccf 	bl	80022d0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <prvCheckTasksWaitingTermination+0x54>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3b01      	subs	r3, #1
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <prvCheckTasksWaitingTermination+0x54>)
 800393a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <prvCheckTasksWaitingTermination+0x58>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3b01      	subs	r3, #1
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <prvCheckTasksWaitingTermination+0x58>)
 8003944:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003946:	f000 fe55 	bl	80045f4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f810 	bl	8003970 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <prvCheckTasksWaitingTermination+0x58>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e1      	bne.n	800391c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	2000016c 	.word	0x2000016c
 8003968:	20000198 	.word	0x20000198
 800396c:	20000180 	.word	0x20000180

08003970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	4618      	mov	r0, r3
 800397e:	f001 f815 	bl	80049ac <vPortFree>
                vPortFree( pxTCB );
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f001 f812 	bl	80049ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <prvResetNextTaskUnblockTime+0x30>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <prvResetNextTaskUnblockTime+0x34>)
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039a6:	e005      	b.n	80039b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <prvResetNextTaskUnblockTime+0x30>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <prvResetNextTaskUnblockTime+0x34>)
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000150 	.word	0x20000150
 80039c4:	200001b8 	.word	0x200001b8

080039c8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <xTaskGetCurrentTaskHandle+0x1c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	607b      	str	r3, [r7, #4]

        return xReturn;
 80039d4:	687b      	ldr	r3, [r7, #4]
    }
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	200000c0 	.word	0x200000c0

080039e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039ee:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <xTaskGetSchedulerState+0x34>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039f6:	2301      	movs	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	e008      	b.n	8003a0e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <xTaskGetSchedulerState+0x38>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a04:	2302      	movs	r3, #2
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	e001      	b.n	8003a0e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a0e:	687b      	ldr	r3, [r7, #4]
    }
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	200001a4 	.word	0x200001a4
 8003a20:	200001c0 	.word	0x200001c0

08003a24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d068      	beq.n	8003b0c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <xTaskPriorityDisinherit+0xf4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d00a      	beq.n	8003a5a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
    }
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	60bb      	str	r3, [r7, #8]
    }
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d03e      	beq.n	8003b0c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d13a      	bne.n	8003b0c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fc18 	bl	80022d0 <uxListRemove>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	2201      	movs	r2, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <xTaskPriorityDisinherit+0xf8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <xTaskPriorityDisinherit+0xf8>)
 8003aba:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	204a      	movs	r0, #74	; 0x4a
 8003ac2:	f001 fcad 	bl	8005420 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	f1c3 0205 	rsb	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	2201      	movs	r2, #1
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <xTaskPriorityDisinherit+0xf8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <xTaskPriorityDisinherit+0xf8>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <xTaskPriorityDisinherit+0xfc>)
 8003afa:	441a      	add	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7fe fb87 	bl	8002216 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b0c:	697b      	ldr	r3, [r7, #20]
    }
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200000c0 	.word	0x200000c0
 8003b1c:	200001a0 	.word	0x200001a0
 8003b20:	200000c4 	.word	0x200000c4

08003b24 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b2e:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b34:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fbc8 	bl	80022d0 <uxListRemove>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10b      	bne.n	8003b5e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43da      	mvns	r2, r3
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b5c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b64:	d110      	bne.n	8003b88 <prvAddCurrentTaskToDelayedList+0x64>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003b6c:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	211b      	movs	r1, #27
 8003b72:	4618      	mov	r0, r3
 8003b74:	f002 f9f2 	bl	8005f5c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b78:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4820      	ldr	r0, [pc, #128]	; (8003c04 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003b82:	f7fe fb48 	bl	8002216 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b86:	e032      	b.n	8003bee <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d20f      	bcs.n	8003bc0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003ba0:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f002 f9d8 	bl	8005f5c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bac:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f7fe fb50 	bl	800225e <vListInsert>
}
 8003bbe:	e016      	b.n	8003bee <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2104      	movs	r1, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 f9c8 	bl	8005f5c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f7fe fb40 	bl	800225e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xec>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d202      	bcs.n	8003bee <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003be8:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xec>)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6013      	str	r3, [r2, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	2000019c 	.word	0x2000019c
 8003bfc:	200000c0 	.word	0x200000c0
 8003c00:	200001a0 	.word	0x200001a0
 8003c04:	20000184 	.word	0x20000184
 8003c08:	20000154 	.word	0x20000154
 8003c0c:	20000150 	.word	0x20000150
 8003c10:	200001b8 	.word	0x200001b8

08003c14 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c1e:	f000 fad5 	bl	80041cc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <xTimerCreateTimerTask+0x54>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <xTimerCreateTimerTask+0x58>)
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	2302      	movs	r3, #2
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2300      	movs	r3, #0
 8003c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c38:	490d      	ldr	r1, [pc, #52]	; (8003c70 <xTimerCreateTimerTask+0x5c>)
 8003c3a:	480e      	ldr	r0, [pc, #56]	; (8003c74 <xTimerCreateTimerTask+0x60>)
 8003c3c:	f7ff f89e 	bl	8002d7c <xTaskCreate>
 8003c40:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	603b      	str	r3, [r7, #0]
    }
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c5e:	687b      	ldr	r3, [r7, #4]
    }
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200001f4 	.word	0x200001f4
 8003c6c:	200001f8 	.word	0x200001f8
 8003c70:	08006370 	.word	0x08006370
 8003c74:	08003dad 	.word	0x08003dad

08003c78 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	623b      	str	r3, [r7, #32]
    }
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <xTimerGenericCommand+0x98>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d02a      	beq.n	8003d04 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b05      	cmp	r3, #5
 8003cbe:	dc18      	bgt.n	8003cf2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cc0:	f7ff fe92 	bl	80039e8 <xTaskGetSchedulerState>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d109      	bne.n	8003cde <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <xTimerGenericCommand+0x98>)
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	f107 0114 	add.w	r1, r7, #20
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd6:	f7fe fc09 	bl	80024ec <xQueueGenericSend>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24
 8003cdc:	e012      	b.n	8003d04 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <xTimerGenericCommand+0x98>)
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	f107 0114 	add.w	r1, r7, #20
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f7fe fbff 	bl	80024ec <xQueueGenericSend>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24
 8003cf0:	e008      	b.n	8003d04 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <xTimerGenericCommand+0x98>)
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	f107 0114 	add.w	r1, r7, #20
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f7fe fd03 	bl	8002708 <xQueueGenericSendFromISR>
 8003d02:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d06:	4618      	mov	r0, r3
 8003d08:	3728      	adds	r7, #40	; 0x28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200001f4 	.word	0x200001f4

08003d14 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <prvProcessExpiredTimer+0x94>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe facf 	bl	80022d0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d022      	beq.n	8003d86 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	18d1      	adds	r1, r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	6978      	ldr	r0, [r7, #20]
 8003d4e:	f000 f8d1 	bl	8003ef4 <prvInsertTimerInActiveList>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01f      	beq.n	8003d98 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	2100      	movs	r1, #0
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f7ff ff88 	bl	8003c78 <xTimerGenericCommand>
 8003d68:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d113      	bne.n	8003d98 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
    }
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	6978      	ldr	r0, [r7, #20]
 8003d9e:	4798      	blx	r3
    }
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200001ec 	.word	0x200001ec

08003dac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003db4:	f107 0308 	add.w	r3, r7, #8
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f857 	bl	8003e6c <prvGetNextExpireTime>
 8003dbe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f803 	bl	8003dd0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003dca:	f000 f8d5 	bl	8003f78 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dce:	e7f1      	b.n	8003db4 <prvTimerTask+0x8>

08003dd0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003dda:	f7ff fa55 	bl	8003288 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f866 	bl	8003eb4 <prvSampleTimeNow>
 8003de8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d130      	bne.n	8003e52 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <prvProcessTimerOrBlockTask+0x3c>
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d806      	bhi.n	8003e0c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dfe:	f7ff fa51 	bl	80032a4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ff85 	bl	8003d14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e0a:	e024      	b.n	8003e56 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e12:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <prvProcessTimerOrBlockTask+0x90>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <prvProcessTimerOrBlockTask+0x50>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <prvProcessTimerOrBlockTask+0x52>
 8003e20:	2300      	movs	r3, #0
 8003e22:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <prvProcessTimerOrBlockTask+0x94>)
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	4619      	mov	r1, r3
 8003e32:	f7fe ff6f 	bl	8002d14 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e36:	f7ff fa35 	bl	80032a4 <xTaskResumeAll>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <prvProcessTimerOrBlockTask+0x98>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
    }
 8003e50:	e001      	b.n	8003e56 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e52:	f7ff fa27 	bl	80032a4 <xTaskResumeAll>
    }
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200001f0 	.word	0x200001f0
 8003e64:	200001f4 	.word	0x200001f4
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <prvGetNextExpireTime+0x44>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <prvGetNextExpireTime+0x16>
 8003e7e:	2201      	movs	r2, #1
 8003e80:	e000      	b.n	8003e84 <prvGetNextExpireTime+0x18>
 8003e82:	2200      	movs	r2, #0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <prvGetNextExpireTime+0x44>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e001      	b.n	8003ea0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	200001ec 	.word	0x200001ec

08003eb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ebc:	f7ff fa84 	bl	80033c8 <xTaskGetTickCount>
 8003ec0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <prvSampleTimeNow+0x3c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d205      	bcs.n	8003ed8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ecc:	f000 f91a 	bl	8004104 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e002      	b.n	8003ede <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ede:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <prvSampleTimeNow+0x3c>)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200001fc 	.word	0x200001fc

08003ef4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d812      	bhi.n	8003f40 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	1ad2      	subs	r2, r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e01b      	b.n	8003f66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <prvInsertTimerInActiveList+0x7c>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f7fe f990 	bl	800225e <vListInsert>
 8003f3e:	e012      	b.n	8003f66 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d206      	bcs.n	8003f56 <prvInsertTimerInActiveList+0x62>
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e007      	b.n	8003f66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <prvInsertTimerInActiveList+0x80>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7fe f97c 	bl	800225e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f66:	697b      	ldr	r3, [r7, #20]
    }
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	200001f0 	.word	0x200001f0
 8003f74:	200001ec 	.word	0x200001ec

08003f78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f7e:	e0ae      	b.n	80040de <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f2c0 80aa 	blt.w	80040dc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	3304      	adds	r3, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe f999 	bl	80022d0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff87 	bl	8003eb4 <prvSampleTimeNow>
 8003fa6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b09      	cmp	r3, #9
 8003fac:	f200 8097 	bhi.w	80040de <prvProcessReceivedCommands+0x166>
 8003fb0:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <prvProcessReceivedCommands+0x40>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe1 	.word	0x08003fe1
 8003fc4:	08004055 	.word	0x08004055
 8003fc8:	08004069 	.word	0x08004069
 8003fcc:	080040b3 	.word	0x080040b3
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003fe1 	.word	0x08003fe1
 8003fd8:	08004055 	.word	0x08004055
 8003fdc:	08004069 	.word	0x08004069
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	18d1      	adds	r1, r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a3a      	ldr	r2, [r7, #32]
 8003ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004000:	f7ff ff78 	bl	8003ef4 <prvInsertTimerInActiveList>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d069      	beq.n	80040de <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004010:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05e      	beq.n	80040de <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	441a      	add	r2, r3
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	2100      	movs	r1, #0
 8004030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004032:	f7ff fe21 	bl	8003c78 <xTimerGenericCommand>
 8004036:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d14f      	bne.n	80040de <prvProcessReceivedCommands+0x166>
        __asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	61bb      	str	r3, [r7, #24]
    }
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004066:	e03a      	b.n	80040de <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	617b      	str	r3, [r7, #20]
    }
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	18d1      	adds	r1, r2, r3
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	6a3a      	ldr	r2, [r7, #32]
 80040aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ac:	f7ff ff22 	bl	8003ef4 <prvInsertTimerInActiveList>
                        break;
 80040b0:	e015      	b.n	80040de <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d103      	bne.n	80040c8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80040c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040c2:	f000 fc73 	bl	80049ac <vPortFree>
 80040c6:	e00a      	b.n	80040de <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040da:	e000      	b.n	80040de <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040dc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <prvProcessReceivedCommands+0x188>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f107 0108 	add.w	r1, r7, #8
 80040e6:	2200      	movs	r2, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fbcb 	bl	8002884 <xQueueReceive>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f47f af45 	bne.w	8003f80 <prvProcessReceivedCommands+0x8>
        }
    }
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200001f4 	.word	0x200001f4

08004104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800410a:	e048      	b.n	800419e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800410c:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004116:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe f8d3 	bl	80022d0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02e      	beq.n	800419e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4413      	add	r3, r2
 8004148:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90e      	bls.n	8004170 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800415e:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3304      	adds	r3, #4
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f7fe f878 	bl	800225e <vListInsert>
 800416e:	e016      	b.n	800419e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004170:	2300      	movs	r3, #0
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2300      	movs	r3, #0
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	2100      	movs	r1, #0
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff fd7c 	bl	8003c78 <xTimerGenericCommand>
 8004180:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	603b      	str	r3, [r7, #0]
    }
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1b1      	bne.n	800410c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <prvSwitchTimerLists+0xc4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 80041b4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80041b6:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <prvSwitchTimerLists+0xc4>)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	6013      	str	r3, [r2, #0]
    }
 80041bc:	bf00      	nop
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	200001ec 	.word	0x200001ec
 80041c8:	200001f0 	.word	0x200001f0

080041cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80041d0:	f000 f9e0 	bl	8004594 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <prvCheckForValidListAndQueue+0x54>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11d      	bne.n	8004218 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80041dc:	4811      	ldr	r0, [pc, #68]	; (8004224 <prvCheckForValidListAndQueue+0x58>)
 80041de:	f7fd ffed 	bl	80021bc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80041e2:	4811      	ldr	r0, [pc, #68]	; (8004228 <prvCheckForValidListAndQueue+0x5c>)
 80041e4:	f7fd ffea 	bl	80021bc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80041e8:	4b10      	ldr	r3, [pc, #64]	; (800422c <prvCheckForValidListAndQueue+0x60>)
 80041ea:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <prvCheckForValidListAndQueue+0x58>)
 80041ec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <prvCheckForValidListAndQueue+0x64>)
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <prvCheckForValidListAndQueue+0x5c>)
 80041f2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80041f4:	2200      	movs	r2, #0
 80041f6:	210c      	movs	r1, #12
 80041f8:	200a      	movs	r0, #10
 80041fa:	f7fe f8ee 	bl	80023da <xQueueGenericCreate>
 80041fe:	4603      	mov	r3, r0
 8004200:	4a07      	ldr	r2, [pc, #28]	; (8004220 <prvCheckForValidListAndQueue+0x54>)
 8004202:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <prvCheckForValidListAndQueue+0x54>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800420c:	4b04      	ldr	r3, [pc, #16]	; (8004220 <prvCheckForValidListAndQueue+0x54>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4908      	ldr	r1, [pc, #32]	; (8004234 <prvCheckForValidListAndQueue+0x68>)
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fd4c 	bl	8002cb0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004218:	f000 f9ec 	bl	80045f4 <vPortExitCritical>
    }
 800421c:	bf00      	nop
 800421e:	bd80      	pop	{r7, pc}
 8004220:	200001f4 	.word	0x200001f4
 8004224:	200001c4 	.word	0x200001c4
 8004228:	200001d8 	.word	0x200001d8
 800422c:	200001ec 	.word	0x200001ec
 8004230:	200001f0 	.word	0x200001f0
 8004234:	08006378 	.word	0x08006378

08004238 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3b04      	subs	r3, #4
 8004248:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004250:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3b04      	subs	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f023 0201 	bic.w	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b04      	subs	r3, #4
 8004266:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004268:	4a0c      	ldr	r2, [pc, #48]	; (800429c <pxPortInitialiseStack+0x64>)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b14      	subs	r3, #20
 8004272:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b04      	subs	r3, #4
 800427e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f06f 0202 	mvn.w	r2, #2
 8004286:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3b20      	subs	r3, #32
 800428c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800428e:	68fb      	ldr	r3, [r7, #12]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	080042a1 	.word	0x080042a1

080042a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <prvTaskExitError+0x54>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b2:	d00a      	beq.n	80042ca <prvTaskExitError+0x2a>
        __asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	60fb      	str	r3, [r7, #12]
    }
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <prvTaskExitError+0x28>
        __asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60bb      	str	r3, [r7, #8]
    }
 80042dc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042de:	bf00      	nop
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0fc      	beq.n	80042e0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	20000010 	.word	0x20000010
	...

08004300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <pxCurrentTCBConst2>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	f380 8809 	msr	PSP, r0
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	4770      	bx	lr
 800431c:	f3af 8000 	nop.w

08004320 <pxCurrentTCBConst2>:
 8004320:	200000c0 	.word	0x200000c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004328:	4808      	ldr	r0, [pc, #32]	; (800434c <prvPortStartFirstTask+0x24>)
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f380 8808 	msr	MSP, r0
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8814 	msr	CONTROL, r0
 800433a:	b662      	cpsie	i
 800433c:	b661      	cpsie	f
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	df00      	svc	0
 8004348:	bf00      	nop
 800434a:	0000      	.short	0x0000
 800434c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop

08004354 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800435a:	4b46      	ldr	r3, [pc, #280]	; (8004474 <xPortStartScheduler+0x120>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a46      	ldr	r2, [pc, #280]	; (8004478 <xPortStartScheduler+0x124>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10a      	bne.n	800437a <xPortStartScheduler+0x26>
        __asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	613b      	str	r3, [r7, #16]
    }
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800437a:	4b3e      	ldr	r3, [pc, #248]	; (8004474 <xPortStartScheduler+0x120>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a3f      	ldr	r2, [pc, #252]	; (800447c <xPortStartScheduler+0x128>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10a      	bne.n	800439a <xPortStartScheduler+0x46>
        __asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
    }
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800439a:	4b39      	ldr	r3, [pc, #228]	; (8004480 <xPortStartScheduler+0x12c>)
 800439c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	22ff      	movs	r2, #255	; 0xff
 80043aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b31      	ldr	r3, [pc, #196]	; (8004484 <xPortStartScheduler+0x130>)
 80043c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <xPortStartScheduler+0x134>)
 80043c4:	2207      	movs	r2, #7
 80043c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043c8:	e009      	b.n	80043de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80043ca:	4b2f      	ldr	r3, [pc, #188]	; (8004488 <xPortStartScheduler+0x134>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4a2d      	ldr	r2, [pc, #180]	; (8004488 <xPortStartScheduler+0x134>)
 80043d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	2b80      	cmp	r3, #128	; 0x80
 80043e8:	d0ef      	beq.n	80043ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ea:	4b27      	ldr	r3, [pc, #156]	; (8004488 <xPortStartScheduler+0x134>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1c3 0307 	rsb	r3, r3, #7
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00a      	beq.n	800440c <xPortStartScheduler+0xb8>
        __asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60bb      	str	r3, [r7, #8]
    }
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800440c:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <xPortStartScheduler+0x134>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <xPortStartScheduler+0x134>)
 8004414:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004416:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <xPortStartScheduler+0x134>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800441e:	4a1a      	ldr	r2, [pc, #104]	; (8004488 <xPortStartScheduler+0x134>)
 8004420:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800442a:	4b18      	ldr	r3, [pc, #96]	; (800448c <xPortStartScheduler+0x138>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a17      	ldr	r2, [pc, #92]	; (800448c <xPortStartScheduler+0x138>)
 8004430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004434:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <xPortStartScheduler+0x138>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a14      	ldr	r2, [pc, #80]	; (800448c <xPortStartScheduler+0x138>)
 800443c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004440:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004442:	f000 f963 	bl	800470c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <xPortStartScheduler+0x13c>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800444c:	f000 f982 	bl	8004754 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004450:	4b10      	ldr	r3, [pc, #64]	; (8004494 <xPortStartScheduler+0x140>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <xPortStartScheduler+0x140>)
 8004456:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800445a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800445c:	f7ff ff64 	bl	8004328 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004460:	f7ff f85c 	bl	800351c <vTaskSwitchContext>
    prvTaskExitError();
 8004464:	f7ff ff1c 	bl	80042a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	e000ed00 	.word	0xe000ed00
 8004478:	410fc271 	.word	0x410fc271
 800447c:	410fc270 	.word	0x410fc270
 8004480:	e000e400 	.word	0xe000e400
 8004484:	20000200 	.word	0x20000200
 8004488:	20000204 	.word	0x20000204
 800448c:	e000ed20 	.word	0xe000ed20
 8004490:	20000010 	.word	0x20000010
 8004494:	e000ef34 	.word	0xe000ef34

08004498 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800449e:	4b37      	ldr	r3, [pc, #220]	; (800457c <vInitPrioGroupValue+0xe4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a37      	ldr	r2, [pc, #220]	; (8004580 <vInitPrioGroupValue+0xe8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d10a      	bne.n	80044be <vInitPrioGroupValue+0x26>
        __asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	613b      	str	r3, [r7, #16]
    }
 80044ba:	bf00      	nop
 80044bc:	e7fe      	b.n	80044bc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044be:	4b2f      	ldr	r3, [pc, #188]	; (800457c <vInitPrioGroupValue+0xe4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a30      	ldr	r2, [pc, #192]	; (8004584 <vInitPrioGroupValue+0xec>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10a      	bne.n	80044de <vInitPrioGroupValue+0x46>
        __asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60fb      	str	r3, [r7, #12]
    }
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <vInitPrioGroupValue+0xf0>)
 80044e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4b22      	ldr	r3, [pc, #136]	; (800458c <vInitPrioGroupValue+0xf4>)
 8004504:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004506:	4b22      	ldr	r3, [pc, #136]	; (8004590 <vInitPrioGroupValue+0xf8>)
 8004508:	2207      	movs	r2, #7
 800450a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800450c:	e009      	b.n	8004522 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800450e:	4b20      	ldr	r3, [pc, #128]	; (8004590 <vInitPrioGroupValue+0xf8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3b01      	subs	r3, #1
 8004514:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <vInitPrioGroupValue+0xf8>)
 8004516:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b80      	cmp	r3, #128	; 0x80
 800452c:	d0ef      	beq.n	800450e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800452e:	4b18      	ldr	r3, [pc, #96]	; (8004590 <vInitPrioGroupValue+0xf8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1c3 0307 	rsb	r3, r3, #7
 8004536:	2b04      	cmp	r3, #4
 8004538:	d00a      	beq.n	8004550 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	60bb      	str	r3, [r7, #8]
    }
 800454c:	bf00      	nop
 800454e:	e7fe      	b.n	800454e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <vInitPrioGroupValue+0xf8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <vInitPrioGroupValue+0xf8>)
 8004558:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800455a:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <vInitPrioGroupValue+0xf8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004562:	4a0b      	ldr	r2, [pc, #44]	; (8004590 <vInitPrioGroupValue+0xf8>)
 8004564:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	e000ed00 	.word	0xe000ed00
 8004580:	410fc271 	.word	0x410fc271
 8004584:	410fc270 	.word	0x410fc270
 8004588:	e000e400 	.word	0xe000e400
 800458c:	20000200 	.word	0x20000200
 8004590:	20000204 	.word	0x20000204

08004594 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
        __asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	607b      	str	r3, [r7, #4]
    }
 80045ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <vPortEnterCritical+0x58>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3301      	adds	r3, #1
 80045b4:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <vPortEnterCritical+0x58>)
 80045b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <vPortEnterCritical+0x58>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d10f      	bne.n	80045e0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <vPortEnterCritical+0x5c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <vPortEnterCritical+0x4c>
        __asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	603b      	str	r3, [r7, #0]
    }
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <vPortEnterCritical+0x4a>
    }
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	20000010 	.word	0x20000010
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <vPortExitCritical+0x50>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <vPortExitCritical+0x24>
        __asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	607b      	str	r3, [r7, #4]
    }
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <vPortExitCritical+0x50>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3b01      	subs	r3, #1
 800461e:	4a09      	ldr	r2, [pc, #36]	; (8004644 <vPortExitCritical+0x50>)
 8004620:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <vPortExitCritical+0x50>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <vPortExitCritical+0x42>
 800462a:	2300      	movs	r3, #0
 800462c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f383 8811 	msr	BASEPRI, r3
    }
 8004634:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000010 	.word	0x20000010
	...

08004650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004650:	f3ef 8009 	mrs	r0, PSP
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <pxCurrentTCBConst>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	f01e 0f10 	tst.w	lr, #16
 8004660:	bf08      	it	eq
 8004662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004674:	f380 8811 	msr	BASEPRI, r0
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f7fe ff4c 	bl	800351c <vTaskSwitchContext>
 8004684:	f04f 0000 	mov.w	r0, #0
 8004688:	f380 8811 	msr	BASEPRI, r0
 800468c:	bc09      	pop	{r0, r3}
 800468e:	6819      	ldr	r1, [r3, #0]
 8004690:	6808      	ldr	r0, [r1, #0]
 8004692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004696:	f01e 0f10 	tst.w	lr, #16
 800469a:	bf08      	it	eq
 800469c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046a0:	f380 8809 	msr	PSP, r0
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	f3af 8000 	nop.w

080046b0 <pxCurrentTCBConst>:
 80046b0:	200000c0 	.word	0x200000c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop

080046b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
        __asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	607b      	str	r3, [r7, #4]
    }
 80046d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80046d2:	f001 fae7 	bl	8005ca4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80046d6:	f7fe fe87 	bl	80033e8 <xTaskIncrementTick>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80046e0:	f001 fb3e 	bl	8005d60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <SysTick_Handler+0x50>)
 80046e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e001      	b.n	80046f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80046ee:	f001 fb1b 	bl	8005d28 <SEGGER_SYSVIEW_RecordExitISR>
 80046f2:	2300      	movs	r3, #0
 80046f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f383 8811 	msr	BASEPRI, r3
    }
 80046fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <vPortSetupTimerInterrupt+0x34>)
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <vPortSetupTimerInterrupt+0x38>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <vPortSetupTimerInterrupt+0x3c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0a      	ldr	r2, [pc, #40]	; (800474c <vPortSetupTimerInterrupt+0x40>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <vPortSetupTimerInterrupt+0x44>)
 800472a:	3b01      	subs	r3, #1
 800472c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800472e:	4b04      	ldr	r3, [pc, #16]	; (8004740 <vPortSetupTimerInterrupt+0x34>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	e000e010 	.word	0xe000e010
 8004744:	e000e018 	.word	0xe000e018
 8004748:	20000000 	.word	0x20000000
 800474c:	10624dd3 	.word	0x10624dd3
 8004750:	e000e014 	.word	0xe000e014

08004754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004764 <vPortEnableVFP+0x10>
 8004758:	6801      	ldr	r1, [r0, #0]
 800475a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800475e:	6001      	str	r1, [r0, #0]
 8004760:	4770      	bx	lr
 8004762:	0000      	.short	0x0000
 8004764:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop

0800476c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004772:	f3ef 8305 	mrs	r3, IPSR
 8004776:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b0f      	cmp	r3, #15
 800477c:	d914      	bls.n	80047a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <vPortValidateInterruptPriority+0x70>)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <vPortValidateInterruptPriority+0x74>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	7afa      	ldrb	r2, [r7, #11]
 800478e:	429a      	cmp	r2, r3
 8004790:	d20a      	bcs.n	80047a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	607b      	str	r3, [r7, #4]
    }
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047a8:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <vPortValidateInterruptPriority+0x78>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <vPortValidateInterruptPriority+0x7c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d90a      	bls.n	80047ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	603b      	str	r3, [r7, #0]
    }
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <vPortValidateInterruptPriority+0x60>
    }
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000e3f0 	.word	0xe000e3f0
 80047e0:	20000200 	.word	0x20000200
 80047e4:	e000ed0c 	.word	0xe000ed0c
 80047e8:	20000204 	.word	0x20000204

080047ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80047f8:	f7fe fd46 	bl	8003288 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80047fc:	4b65      	ldr	r3, [pc, #404]	; (8004994 <pvPortMalloc+0x1a8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004804:	f000 f934 	bl	8004a70 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004808:	4b63      	ldr	r3, [pc, #396]	; (8004998 <pvPortMalloc+0x1ac>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 80a7 	bne.w	8004964 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02d      	beq.n	8004878 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800481c:	2208      	movs	r2, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d227      	bcs.n	8004878 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004828:	2208      	movs	r2, #8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	2b00      	cmp	r3, #0
 8004838:	d021      	beq.n	800487e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f023 0307 	bic.w	r3, r3, #7
 8004840:	3308      	adds	r3, #8
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	d214      	bcs.n	8004872 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f023 0307 	bic.w	r3, r3, #7
 800484e:	3308      	adds	r3, #8
 8004850:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	2b00      	cmp	r3, #0
 800485a:	d010      	beq.n	800487e <pvPortMalloc+0x92>
        __asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	617b      	str	r3, [r7, #20]
    }
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004876:	e002      	b.n	800487e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	e000      	b.n	8004880 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800487e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d06e      	beq.n	8004964 <pvPortMalloc+0x178>
 8004886:	4b45      	ldr	r3, [pc, #276]	; (800499c <pvPortMalloc+0x1b0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d869      	bhi.n	8004964 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004890:	4b43      	ldr	r3, [pc, #268]	; (80049a0 <pvPortMalloc+0x1b4>)
 8004892:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004894:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <pvPortMalloc+0x1b4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800489a:	e004      	b.n	80048a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d903      	bls.n	80048b8 <pvPortMalloc+0xcc>
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f1      	bne.n	800489c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80048b8:	4b36      	ldr	r3, [pc, #216]	; (8004994 <pvPortMalloc+0x1a8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048be:	429a      	cmp	r2, r3
 80048c0:	d050      	beq.n	8004964 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2208      	movs	r2, #8
 80048c8:	4413      	add	r3, r2
 80048ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	2308      	movs	r3, #8
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d91f      	bls.n	8004924 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4413      	add	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <pvPortMalloc+0x120>
        __asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	613b      	str	r3, [r7, #16]
    }
 8004908:	bf00      	nop
 800490a:	e7fe      	b.n	800490a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800491e:	69b8      	ldr	r0, [r7, #24]
 8004920:	f000 f908 	bl	8004b34 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004924:	4b1d      	ldr	r3, [pc, #116]	; (800499c <pvPortMalloc+0x1b0>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	4a1b      	ldr	r2, [pc, #108]	; (800499c <pvPortMalloc+0x1b0>)
 8004930:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004932:	4b1a      	ldr	r3, [pc, #104]	; (800499c <pvPortMalloc+0x1b0>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <pvPortMalloc+0x1b8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d203      	bcs.n	8004946 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800493e:	4b17      	ldr	r3, [pc, #92]	; (800499c <pvPortMalloc+0x1b0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <pvPortMalloc+0x1b8>)
 8004944:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	4b13      	ldr	r3, [pc, #76]	; (8004998 <pvPortMalloc+0x1ac>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	431a      	orrs	r2, r3
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <pvPortMalloc+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <pvPortMalloc+0x1bc>)
 8004962:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004964:	f7fe fc9e 	bl	80032a4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <pvPortMalloc+0x19c>
        __asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60fb      	str	r3, [r7, #12]
    }
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <pvPortMalloc+0x19a>
    return pvReturn;
 8004988:	69fb      	ldr	r3, [r7, #28]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3728      	adds	r7, #40	; 0x28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20012e10 	.word	0x20012e10
 8004998:	20012e24 	.word	0x20012e24
 800499c:	20012e14 	.word	0x20012e14
 80049a0:	20012e08 	.word	0x20012e08
 80049a4:	20012e18 	.word	0x20012e18
 80049a8:	20012e1c 	.word	0x20012e1c

080049ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d04d      	beq.n	8004a5a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80049be:	2308      	movs	r3, #8
 80049c0:	425b      	negs	r3, r3
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4413      	add	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <vPortFree+0xb8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <vPortFree+0x44>
        __asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	60fb      	str	r3, [r7, #12]
    }
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <vPortFree+0x62>
        __asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	60bb      	str	r3, [r7, #8]
    }
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <vPortFree+0xb8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01e      	beq.n	8004a5a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11a      	bne.n	8004a5a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <vPortFree+0xb8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	401a      	ands	r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004a34:	f7fe fc28 	bl	8003288 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <vPortFree+0xbc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4413      	add	r3, r2
 8004a42:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <vPortFree+0xbc>)
 8004a44:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a46:	6938      	ldr	r0, [r7, #16]
 8004a48:	f000 f874 	bl	8004b34 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <vPortFree+0xc0>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	4a06      	ldr	r2, [pc, #24]	; (8004a6c <vPortFree+0xc0>)
 8004a54:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004a56:	f7fe fc25 	bl	80032a4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004a5a:	bf00      	nop
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20012e24 	.word	0x20012e24
 8004a68:	20012e14 	.word	0x20012e14
 8004a6c:	20012e20 	.word	0x20012e20

08004a70 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a76:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004a7a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a7c:	4b27      	ldr	r3, [pc, #156]	; (8004b1c <prvHeapInit+0xac>)
 8004a7e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3307      	adds	r3, #7
 8004a8e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0307 	bic.w	r3, r3, #7
 8004a96:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <prvHeapInit+0xac>)
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <prvHeapInit+0xb0>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004aae:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <prvHeapInit+0xb0>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	4413      	add	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004abc:	2208      	movs	r2, #8
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0307 	bic.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <prvHeapInit+0xb4>)
 8004ad0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ad2:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <prvHeapInit+0xb4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <prvHeapInit+0xb4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <prvHeapInit+0xb4>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <prvHeapInit+0xb8>)
 8004afe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <prvHeapInit+0xbc>)
 8004b06:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b08:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <prvHeapInit+0xc0>)
 8004b0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b0e:	601a      	str	r2, [r3, #0]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	20000208 	.word	0x20000208
 8004b20:	20012e08 	.word	0x20012e08
 8004b24:	20012e10 	.word	0x20012e10
 8004b28:	20012e18 	.word	0x20012e18
 8004b2c:	20012e14 	.word	0x20012e14
 8004b30:	20012e24 	.word	0x20012e24

08004b34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <prvInsertBlockIntoFreeList+0xac>)
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	e002      	b.n	8004b48 <prvInsertBlockIntoFreeList+0x14>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d8f7      	bhi.n	8004b42 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d108      	bne.n	8004b76 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	441a      	add	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	441a      	add	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d118      	bne.n	8004bbc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <prvInsertBlockIntoFreeList+0xb0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d00d      	beq.n	8004bb2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	441a      	add	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e008      	b.n	8004bc4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <prvInsertBlockIntoFreeList+0xb0>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e003      	b.n	8004bc4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d002      	beq.n	8004bd2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20012e08 	.word	0x20012e08
 8004be4:	20012e10 	.word	0x20012e10

08004be8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004bf6:	2205      	movs	r2, #5
 8004bf8:	492b      	ldr	r1, [pc, #172]	; (8004ca8 <SYSVIEW_AddTask+0xc0>)
 8004bfa:	68b8      	ldr	r0, [r7, #8]
 8004bfc:	f001 fb7a 	bl	80062f4 <memcmp>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d04b      	beq.n	8004c9e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c06:	4b29      	ldr	r3, [pc, #164]	; (8004cac <SYSVIEW_AddTask+0xc4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b07      	cmp	r3, #7
 8004c0c:	d903      	bls.n	8004c16 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c0e:	4828      	ldr	r0, [pc, #160]	; (8004cb0 <SYSVIEW_AddTask+0xc8>)
 8004c10:	f001 faf0 	bl	80061f4 <SEGGER_SYSVIEW_Warn>
    return;
 8004c14:	e044      	b.n	8004ca0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c16:	4b25      	ldr	r3, [pc, #148]	; (8004cac <SYSVIEW_AddTask+0xc4>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4926      	ldr	r1, [pc, #152]	; (8004cb4 <SYSVIEW_AddTask+0xcc>)
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c2a:	4b20      	ldr	r3, [pc, #128]	; (8004cac <SYSVIEW_AddTask+0xc4>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4921      	ldr	r1, [pc, #132]	; (8004cb4 <SYSVIEW_AddTask+0xcc>)
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <SYSVIEW_AddTask+0xc4>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	491b      	ldr	r1, [pc, #108]	; (8004cb4 <SYSVIEW_AddTask+0xcc>)
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	3308      	adds	r3, #8
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c56:	4b15      	ldr	r3, [pc, #84]	; (8004cac <SYSVIEW_AddTask+0xc4>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <SYSVIEW_AddTask+0xcc>)
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	330c      	adds	r3, #12
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <SYSVIEW_AddTask+0xc4>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4910      	ldr	r1, [pc, #64]	; (8004cb4 <SYSVIEW_AddTask+0xcc>)
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3310      	adds	r3, #16
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <SYSVIEW_AddTask+0xc4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3301      	adds	r3, #1
 8004c88:	4a08      	ldr	r2, [pc, #32]	; (8004cac <SYSVIEW_AddTask+0xc4>)
 8004c8a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f87e 	bl	8004d98 <SYSVIEW_SendTaskInfo>
 8004c9c:	e000      	b.n	8004ca0 <SYSVIEW_AddTask+0xb8>
    return;
 8004c9e:	bf00      	nop

}
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	08006380 	.word	0x08006380
 8004cac:	20012ec8 	.word	0x20012ec8
 8004cb0:	08006388 	.word	0x08006388
 8004cb4:	20012e28 	.word	0x20012e28

08004cb8 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004cc6:	2205      	movs	r2, #5
 8004cc8:	4930      	ldr	r1, [pc, #192]	; (8004d8c <SYSVIEW_UpdateTask+0xd4>)
 8004cca:	68b8      	ldr	r0, [r7, #8]
 8004ccc:	f001 fb12 	bl	80062f4 <memcmp>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d056      	beq.n	8004d84 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	e00d      	b.n	8004cf8 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004cdc:	492c      	ldr	r1, [pc, #176]	; (8004d90 <SYSVIEW_UpdateTask+0xd8>)
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d008      	beq.n	8004d04 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <SYSVIEW_UpdateTask+0xdc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d3ec      	bcc.n	8004cdc <SYSVIEW_UpdateTask+0x24>
 8004d02:	e000      	b.n	8004d06 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004d04:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <SYSVIEW_UpdateTask+0xdc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d230      	bcs.n	8004d72 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004d10:	491f      	ldr	r1, [pc, #124]	; (8004d90 <SYSVIEW_UpdateTask+0xd8>)
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3304      	adds	r3, #4
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004d24:	491a      	ldr	r1, [pc, #104]	; (8004d90 <SYSVIEW_UpdateTask+0xd8>)
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	3308      	adds	r3, #8
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004d38:	4915      	ldr	r1, [pc, #84]	; (8004d90 <SYSVIEW_UpdateTask+0xd8>)
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	330c      	adds	r3, #12
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004d4c:	4910      	ldr	r1, [pc, #64]	; (8004d90 <SYSVIEW_UpdateTask+0xd8>)
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3310      	adds	r3, #16
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f814 	bl	8004d98 <SYSVIEW_SendTaskInfo>
 8004d70:	e009      	b.n	8004d86 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff ff33 	bl	8004be8 <SYSVIEW_AddTask>
 8004d82:	e000      	b.n	8004d86 <SYSVIEW_UpdateTask+0xce>
    return;
 8004d84:	bf00      	nop
  }
}
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	08006380 	.word	0x08006380
 8004d90:	20012e28 	.word	0x20012e28
 8004d94:	20012ec8 	.word	0x20012ec8

08004d98 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004da6:	f107 0314 	add.w	r3, r7, #20
 8004daa:	2214      	movs	r2, #20
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 fabe 	bl	8006330 <memset>
  TaskInfo.TaskID     = TaskID;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004dc8:	f107 0314 	add.w	r3, r7, #20
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fe3f 	bl	8005a50 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004dd2:	bf00      	nop
 8004dd4:	3728      	adds	r7, #40	; 0x28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <_DoInit+0x98>)
 8004de4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2203      	movs	r2, #3
 8004dea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2203      	movs	r2, #3
 8004df0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <_DoInit+0x9c>)
 8004df6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <_DoInit+0xa0>)
 8004dfc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e04:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <_DoInit+0x9c>)
 8004e1c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <_DoInit+0xa4>)
 8004e22:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2210      	movs	r2, #16
 8004e28:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3307      	adds	r3, #7
 8004e40:	4a10      	ldr	r2, [pc, #64]	; (8004e84 <_DoInit+0xa8>)
 8004e42:	6810      	ldr	r0, [r2, #0]
 8004e44:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e46:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a0e      	ldr	r2, [pc, #56]	; (8004e88 <_DoInit+0xac>)
 8004e4e:	6810      	ldr	r0, [r2, #0]
 8004e50:	6018      	str	r0, [r3, #0]
 8004e52:	8891      	ldrh	r1, [r2, #4]
 8004e54:	7992      	ldrb	r2, [r2, #6]
 8004e56:	8099      	strh	r1, [r3, #4]
 8004e58:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e5a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e64:	f3bf 8f5f 	dmb	sy
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	20012ecc 	.word	0x20012ecc
 8004e78:	080063d8 	.word	0x080063d8
 8004e7c:	20012f74 	.word	0x20012f74
 8004e80:	20013374 	.word	0x20013374
 8004e84:	080063e4 	.word	0x080063e4
 8004e88:	080063e8 	.word	0x080063e8

08004e8c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08c      	sub	sp, #48	; 0x30
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e98:	4b3e      	ldr	r3, [pc, #248]	; (8004f94 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <SEGGER_RTT_ReadNoLock+0x1e>
 8004ea6:	f7ff ff99 	bl	8004ddc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	3360      	adds	r3, #96	; 0x60
 8004eb6:	4a37      	ldr	r2, [pc, #220]	; (8004f94 <SEGGER_RTT_ReadNoLock+0x108>)
 8004eb8:	4413      	add	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d92b      	bls.n	8004f30 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	bf28      	it	cs
 8004eea:	4613      	movcs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	4413      	add	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004efe:	f001 fa09 	bl	8006314 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4413      	add	r3, r2
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4413      	add	r3, r2
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d101      	bne.n	8004f30 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bf28      	it	cs
 8004f40:	4613      	movcs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d019      	beq.n	8004f7e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	4413      	add	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f5a:	f001 f9db 	bl	8006314 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3730      	adds	r7, #48	; 0x30
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20012ecc 	.word	0x20012ecc

08004f98 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00f      	beq.n	8004fce <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004fae:	e002      	b.n	8004fb6 <_EncodeStr+0x1e>
      Len++;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4413      	add	r3, r2
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f6      	bne.n	8004fb0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d901      	bls.n	8004fce <_EncodeStr+0x36>
      Len = Limit;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2bfe      	cmp	r3, #254	; 0xfe
 8004fd2:	d806      	bhi.n	8004fe2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	60fa      	str	r2, [r7, #12]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e011      	b.n	8005006 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	60fa      	str	r2, [r7, #12]
 8004fe8:	22ff      	movs	r2, #255	; 0xff
 8004fea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	60fa      	str	r2, [r7, #12]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	0a19      	lsrs	r1, r3, #8
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	60fa      	str	r2, [r7, #12]
 8005002:	b2ca      	uxtb	r2, r1
 8005004:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800500a:	e00a      	b.n	8005022 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	1c53      	adds	r3, r2, #1
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1c59      	adds	r1, r3, #1
 8005016:	60f9      	str	r1, [r7, #12]
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	701a      	strb	r2, [r3, #0]
    n++;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3301      	adds	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d3f0      	bcc.n	800500c <_EncodeStr+0x74>
  }
  return pPayload;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	4618      	mov	r0, r3
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005056:	4b36      	ldr	r3, [pc, #216]	; (8005130 <_HandleIncomingPacket+0xe0>)
 8005058:	7e1b      	ldrb	r3, [r3, #24]
 800505a:	4618      	mov	r0, r3
 800505c:	1cfb      	adds	r3, r7, #3
 800505e:	2201      	movs	r2, #1
 8005060:	4619      	mov	r1, r3
 8005062:	f7ff ff13 	bl	8004e8c <SEGGER_RTT_ReadNoLock>
 8005066:	4603      	mov	r3, r0
 8005068:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dd54      	ble.n	800511a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d032      	beq.n	80050dc <_HandleIncomingPacket+0x8c>
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	dc42      	bgt.n	8005100 <_HandleIncomingPacket+0xb0>
 800507a:	2b07      	cmp	r3, #7
 800507c:	dc16      	bgt.n	80050ac <_HandleIncomingPacket+0x5c>
 800507e:	2b00      	cmp	r3, #0
 8005080:	dd3e      	ble.n	8005100 <_HandleIncomingPacket+0xb0>
 8005082:	3b01      	subs	r3, #1
 8005084:	2b06      	cmp	r3, #6
 8005086:	d83b      	bhi.n	8005100 <_HandleIncomingPacket+0xb0>
 8005088:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <_HandleIncomingPacket+0x40>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050b3 	.word	0x080050b3
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050bf 	.word	0x080050bf
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050cb 	.word	0x080050cb
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	080050d7 	.word	0x080050d7
 80050ac:	2b7f      	cmp	r3, #127	; 0x7f
 80050ae:	d036      	beq.n	800511e <_HandleIncomingPacket+0xce>
 80050b0:	e026      	b.n	8005100 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80050b2:	f000 fb53 	bl	800575c <SEGGER_SYSVIEW_Start>
      break;
 80050b6:	e037      	b.n	8005128 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80050b8:	f000 fc0a 	bl	80058d0 <SEGGER_SYSVIEW_Stop>
      break;
 80050bc:	e034      	b.n	8005128 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80050be:	f000 fdbf 	bl	8005c40 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80050c2:	e031      	b.n	8005128 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80050c4:	f000 fda8 	bl	8005c18 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80050c8:	e02e      	b.n	8005128 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80050ca:	f000 fc27 	bl	800591c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80050ce:	e02b      	b.n	8005128 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80050d0:	f001 f852 	bl	8006178 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80050d4:	e028      	b.n	8005128 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80050d6:	f001 f831 	bl	800613c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80050da:	e025      	b.n	8005128 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050dc:	4b14      	ldr	r3, [pc, #80]	; (8005130 <_HandleIncomingPacket+0xe0>)
 80050de:	7e1b      	ldrb	r3, [r3, #24]
 80050e0:	4618      	mov	r0, r3
 80050e2:	1cfb      	adds	r3, r7, #3
 80050e4:	2201      	movs	r2, #1
 80050e6:	4619      	mov	r1, r3
 80050e8:	f7ff fed0 	bl	8004e8c <SEGGER_RTT_ReadNoLock>
 80050ec:	4603      	mov	r3, r0
 80050ee:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	dd15      	ble.n	8005122 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 ff9f 	bl	800603c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80050fe:	e010      	b.n	8005122 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	b25b      	sxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	da0e      	bge.n	8005126 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <_HandleIncomingPacket+0xe0>)
 800510a:	7e1b      	ldrb	r3, [r3, #24]
 800510c:	4618      	mov	r0, r3
 800510e:	1cfb      	adds	r3, r7, #3
 8005110:	2201      	movs	r2, #1
 8005112:	4619      	mov	r1, r3
 8005114:	f7ff feba 	bl	8004e8c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005118:	e005      	b.n	8005126 <_HandleIncomingPacket+0xd6>
    }
  }
 800511a:	bf00      	nop
 800511c:	e004      	b.n	8005128 <_HandleIncomingPacket+0xd8>
      break;
 800511e:	bf00      	nop
 8005120:	e002      	b.n	8005128 <_HandleIncomingPacket+0xd8>
      break;
 8005122:	bf00      	nop
 8005124:	e000      	b.n	8005128 <_HandleIncomingPacket+0xd8>
      break;
 8005126:	bf00      	nop
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20013384 	.word	0x20013384

08005134 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005134:	b580      	push	{r7, lr}
 8005136:	b08c      	sub	sp, #48	; 0x30
 8005138:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800513a:	2301      	movs	r3, #1
 800513c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800513e:	1d3b      	adds	r3, r7, #4
 8005140:	3301      	adds	r3, #1
 8005142:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005148:	4b31      	ldr	r3, [pc, #196]	; (8005210 <_TrySendOverflowPacket+0xdc>)
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
 800514e:	e00b      	b.n	8005168 <_TrySendOverflowPacket+0x34>
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	b2da      	uxtb	r2, r3
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	1c59      	adds	r1, r3, #1
 8005158:	62f9      	str	r1, [r7, #44]	; 0x2c
 800515a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	09db      	lsrs	r3, r3, #7
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	2b7f      	cmp	r3, #127	; 0x7f
 800516c:	d8f0      	bhi.n	8005150 <_TrySendOverflowPacket+0x1c>
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800517e:	4b25      	ldr	r3, [pc, #148]	; (8005214 <_TrySendOverflowPacket+0xe0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005184:	4b22      	ldr	r3, [pc, #136]	; (8005210 <_TrySendOverflowPacket+0xdc>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	623b      	str	r3, [r7, #32]
 8005196:	e00b      	b.n	80051b0 <_TrySendOverflowPacket+0x7c>
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	1c59      	adds	r1, r3, #1
 80051a0:	6279      	str	r1, [r7, #36]	; 0x24
 80051a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	09db      	lsrs	r3, r3, #7
 80051ae:	623b      	str	r3, [r7, #32]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	2b7f      	cmp	r3, #127	; 0x7f
 80051b4:	d8f0      	bhi.n	8005198 <_TrySendOverflowPacket+0x64>
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	627a      	str	r2, [r7, #36]	; 0x24
 80051bc:	6a3a      	ldr	r2, [r7, #32]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <_TrySendOverflowPacket+0xdc>)
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	4618      	mov	r0, r3
 80051cc:	1d3b      	adds	r3, r7, #4
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	1d3b      	adds	r3, r7, #4
 80051d6:	4619      	mov	r1, r3
 80051d8:	f7fa fffa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051dc:	4603      	mov	r3, r0
 80051de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80051e6:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <_TrySendOverflowPacket+0xdc>)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <_TrySendOverflowPacket+0xdc>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <_TrySendOverflowPacket+0xdc>)
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e004      	b.n	8005204 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <_TrySendOverflowPacket+0xdc>)
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	3301      	adds	r3, #1
 8005200:	4a03      	ldr	r2, [pc, #12]	; (8005210 <_TrySendOverflowPacket+0xdc>)
 8005202:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005204:	693b      	ldr	r3, [r7, #16]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3730      	adds	r7, #48	; 0x30
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20013384 	.word	0x20013384
 8005214:	e0001004 	.word	0xe0001004

08005218 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005224:	4b6c      	ldr	r3, [pc, #432]	; (80053d8 <_SendPacket+0x1c0>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d010      	beq.n	800524e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800522c:	4b6a      	ldr	r3, [pc, #424]	; (80053d8 <_SendPacket+0x1c0>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80a3 	beq.w	800537c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005236:	4b68      	ldr	r3, [pc, #416]	; (80053d8 <_SendPacket+0x1c0>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d109      	bne.n	8005252 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800523e:	f7ff ff79 	bl	8005134 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005242:	4b65      	ldr	r3, [pc, #404]	; (80053d8 <_SendPacket+0x1c0>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b01      	cmp	r3, #1
 8005248:	f040 809a 	bne.w	8005380 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800524c:	e001      	b.n	8005252 <_SendPacket+0x3a>
    goto Send;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <_SendPacket+0x3c>
Send:
 8005252:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b1f      	cmp	r3, #31
 8005258:	d809      	bhi.n	800526e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800525a:	4b5f      	ldr	r3, [pc, #380]	; (80053d8 <_SendPacket+0x1c0>)
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	f040 808b 	bne.w	8005384 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b17      	cmp	r3, #23
 8005272:	d807      	bhi.n	8005284 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3b01      	subs	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e03d      	b.n	8005300 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2b7f      	cmp	r3, #127	; 0x7f
 8005290:	d912      	bls.n	80052b8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	09da      	lsrs	r2, r3, #7
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3b01      	subs	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	3a01      	subs	r2, #1
 80052aa:	60fa      	str	r2, [r7, #12]
 80052ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e006      	b.n	80052c6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b7f      	cmp	r3, #127	; 0x7f
 80052ca:	d912      	bls.n	80052f2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	09da      	lsrs	r2, r3, #7
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	3a01      	subs	r2, #1
 80052e4:	60fa      	str	r2, [r7, #12]
 80052e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	e006      	b.n	8005300 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005300:	4b36      	ldr	r3, [pc, #216]	; (80053dc <_SendPacket+0x1c4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005306:	4b34      	ldr	r3, [pc, #208]	; (80053d8 <_SendPacket+0x1c0>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	e00b      	b.n	8005332 <_SendPacket+0x11a>
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	1c59      	adds	r1, r3, #1
 8005322:	6279      	str	r1, [r7, #36]	; 0x24
 8005324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	09db      	lsrs	r3, r3, #7
 8005330:	623b      	str	r3, [r7, #32]
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	2b7f      	cmp	r3, #127	; 0x7f
 8005336:	d8f0      	bhi.n	800531a <_SendPacket+0x102>
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	627a      	str	r2, [r7, #36]	; 0x24
 800533e:	6a3a      	ldr	r2, [r7, #32]
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005348:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <_SendPacket+0x1c0>)
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	4618      	mov	r0, r3
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	461a      	mov	r2, r3
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	f7fa ff3a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800535c:	4603      	mov	r3, r0
 800535e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005366:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <_SendPacket+0x1c0>)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	60d3      	str	r3, [r2, #12]
 800536c:	e00b      	b.n	8005386 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800536e:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <_SendPacket+0x1c0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	3301      	adds	r3, #1
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <_SendPacket+0x1c0>)
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e004      	b.n	8005386 <_SendPacket+0x16e>
    goto SendDone;
 800537c:	bf00      	nop
 800537e:	e002      	b.n	8005386 <_SendPacket+0x16e>
      goto SendDone;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <_SendPacket+0x16e>
      goto SendDone;
 8005384:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <_SendPacket+0x1c0>)
 8005388:	7e1b      	ldrb	r3, [r3, #24]
 800538a:	4619      	mov	r1, r3
 800538c:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <_SendPacket+0x1c8>)
 800538e:	460b      	mov	r3, r1
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	440b      	add	r3, r1
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4413      	add	r3, r2
 8005398:	336c      	adds	r3, #108	; 0x6c
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <_SendPacket+0x1c0>)
 800539e:	7e1b      	ldrb	r3, [r3, #24]
 80053a0:	4618      	mov	r0, r3
 80053a2:	490f      	ldr	r1, [pc, #60]	; (80053e0 <_SendPacket+0x1c8>)
 80053a4:	4603      	mov	r3, r0
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	4403      	add	r3, r0
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	440b      	add	r3, r1
 80053ae:	3370      	adds	r3, #112	; 0x70
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d00b      	beq.n	80053ce <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053b6:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <_SendPacket+0x1c0>)
 80053b8:	789b      	ldrb	r3, [r3, #2]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d107      	bne.n	80053ce <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <_SendPacket+0x1c0>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80053c4:	f7ff fe44 	bl	8005050 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80053c8:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <_SendPacket+0x1c0>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80053ce:	bf00      	nop
 80053d0:	3728      	adds	r7, #40	; 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20013384 	.word	0x20013384
 80053dc:	e0001004 	.word	0xe0001004
 80053e0:	20012ecc 	.word	0x20012ecc

080053e4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053ec:	f3ef 8311 	mrs	r3, BASEPRI
 80053f0:	f04f 0120 	mov.w	r1, #32
 80053f4:	f381 8811 	msr	BASEPRI, r1
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	4808      	ldr	r0, [pc, #32]	; (800541c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80053fc:	f7ff fe1c 	bl	8005038 <_PreparePacket>
 8005400:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68b8      	ldr	r0, [r7, #8]
 8005408:	f7ff ff06 	bl	8005218 <_SendPacket>
  RECORD_END();
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f383 8811 	msr	BASEPRI, r3
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	200133b4 	.word	0x200133b4

08005420 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800542a:	f3ef 8311 	mrs	r3, BASEPRI
 800542e:	f04f 0120 	mov.w	r1, #32
 8005432:	f381 8811 	msr	BASEPRI, r1
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	4816      	ldr	r0, [pc, #88]	; (8005494 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800543a:	f7ff fdfd 	bl	8005038 <_PreparePacket>
 800543e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	e00b      	b.n	8005466 <SEGGER_SYSVIEW_RecordU32+0x46>
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	1c59      	adds	r1, r3, #1
 8005456:	61f9      	str	r1, [r7, #28]
 8005458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	09db      	lsrs	r3, r3, #7
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b7f      	cmp	r3, #127	; 0x7f
 800546a:	d8f0      	bhi.n	800544e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68f9      	ldr	r1, [r7, #12]
 8005480:	6938      	ldr	r0, [r7, #16]
 8005482:	f7ff fec9 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f383 8811 	msr	BASEPRI, r3
}
 800548c:	bf00      	nop
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	200133b4 	.word	0x200133b4

08005498 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b08c      	sub	sp, #48	; 0x30
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80054a4:	f3ef 8311 	mrs	r3, BASEPRI
 80054a8:	f04f 0120 	mov.w	r1, #32
 80054ac:	f381 8811 	msr	BASEPRI, r1
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	4825      	ldr	r0, [pc, #148]	; (8005548 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80054b4:	f7ff fdc0 	bl	8005038 <_PreparePacket>
 80054b8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c6:	e00b      	b.n	80054e0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	1c59      	adds	r1, r3, #1
 80054d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	09db      	lsrs	r3, r3, #7
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	2b7f      	cmp	r3, #127	; 0x7f
 80054e4:	d8f0      	bhi.n	80054c8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	623b      	str	r3, [r7, #32]
 80054fe:	e00b      	b.n	8005518 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	1c59      	adds	r1, r3, #1
 8005508:	6279      	str	r1, [r7, #36]	; 0x24
 800550a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	09db      	lsrs	r3, r3, #7
 8005516:	623b      	str	r3, [r7, #32]
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b7f      	cmp	r3, #127	; 0x7f
 800551c:	d8f0      	bhi.n	8005500 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	627a      	str	r2, [r7, #36]	; 0x24
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	6979      	ldr	r1, [r7, #20]
 8005532:	69b8      	ldr	r0, [r7, #24]
 8005534:	f7ff fe70 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f383 8811 	msr	BASEPRI, r3
}
 800553e:	bf00      	nop
 8005540:	3730      	adds	r7, #48	; 0x30
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	200133b4 	.word	0x200133b4

0800554c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b08e      	sub	sp, #56	; 0x38
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800555a:	f3ef 8311 	mrs	r3, BASEPRI
 800555e:	f04f 0120 	mov.w	r1, #32
 8005562:	f381 8811 	msr	BASEPRI, r1
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	4832      	ldr	r0, [pc, #200]	; (8005634 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800556a:	f7ff fd65 	bl	8005038 <_PreparePacket>
 800556e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
 800557c:	e00b      	b.n	8005596 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	b2da      	uxtb	r2, r3
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	1c59      	adds	r1, r3, #1
 8005586:	6379      	str	r1, [r7, #52]	; 0x34
 8005588:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	09db      	lsrs	r3, r3, #7
 8005594:	633b      	str	r3, [r7, #48]	; 0x30
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	2b7f      	cmp	r3, #127	; 0x7f
 800559a:	d8f0      	bhi.n	800557e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	637a      	str	r2, [r7, #52]	; 0x34
 80055a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b4:	e00b      	b.n	80055ce <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	1c59      	adds	r1, r3, #1
 80055be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	09db      	lsrs	r3, r3, #7
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	2b7f      	cmp	r3, #127	; 0x7f
 80055d2:	d8f0      	bhi.n	80055b6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	e00b      	b.n	8005606 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1c59      	adds	r1, r3, #1
 80055f6:	6279      	str	r1, [r7, #36]	; 0x24
 80055f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	09db      	lsrs	r3, r3, #7
 8005604:	623b      	str	r3, [r7, #32]
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	2b7f      	cmp	r3, #127	; 0x7f
 800560a:	d8f0      	bhi.n	80055ee <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	627a      	str	r2, [r7, #36]	; 0x24
 8005612:	6a3a      	ldr	r2, [r7, #32]
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	6979      	ldr	r1, [r7, #20]
 8005620:	69b8      	ldr	r0, [r7, #24]
 8005622:	f7ff fdf9 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f383 8811 	msr	BASEPRI, r3
}
 800562c:	bf00      	nop
 800562e:	3738      	adds	r7, #56	; 0x38
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200133b4 	.word	0x200133b4

08005638 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b090      	sub	sp, #64	; 0x40
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005646:	f3ef 8311 	mrs	r3, BASEPRI
 800564a:	f04f 0120 	mov.w	r1, #32
 800564e:	f381 8811 	msr	BASEPRI, r1
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	4840      	ldr	r0, [pc, #256]	; (8005758 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005656:	f7ff fcef 	bl	8005038 <_PreparePacket>
 800565a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	63bb      	str	r3, [r7, #56]	; 0x38
 8005668:	e00b      	b.n	8005682 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	b2da      	uxtb	r2, r3
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	09db      	lsrs	r3, r3, #7
 8005680:	63bb      	str	r3, [r7, #56]	; 0x38
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	2b7f      	cmp	r3, #127	; 0x7f
 8005686:	d8f0      	bhi.n	800566a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800568e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005696:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	637b      	str	r3, [r7, #52]	; 0x34
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	633b      	str	r3, [r7, #48]	; 0x30
 80056a0:	e00b      	b.n	80056ba <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	1c59      	adds	r1, r3, #1
 80056aa:	6379      	str	r1, [r7, #52]	; 0x34
 80056ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	09db      	lsrs	r3, r3, #7
 80056b8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2b7f      	cmp	r3, #127	; 0x7f
 80056be:	d8f0      	bhi.n	80056a2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	637a      	str	r2, [r7, #52]	; 0x34
 80056c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d8:	e00b      	b.n	80056f2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	1c59      	adds	r1, r3, #1
 80056e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	09db      	lsrs	r3, r3, #7
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	2b7f      	cmp	r3, #127	; 0x7f
 80056f6:	d8f0      	bhi.n	80056da <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
 800570c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570e:	623b      	str	r3, [r7, #32]
 8005710:	e00b      	b.n	800572a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	1c59      	adds	r1, r3, #1
 800571a:	6279      	str	r1, [r7, #36]	; 0x24
 800571c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	09db      	lsrs	r3, r3, #7
 8005728:	623b      	str	r3, [r7, #32]
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	2b7f      	cmp	r3, #127	; 0x7f
 800572e:	d8f0      	bhi.n	8005712 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	627a      	str	r2, [r7, #36]	; 0x24
 8005736:	6a3a      	ldr	r2, [r7, #32]
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	6979      	ldr	r1, [r7, #20]
 8005744:	69b8      	ldr	r0, [r7, #24]
 8005746:	f7ff fd67 	bl	8005218 <_SendPacket>
  RECORD_END();
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f383 8811 	msr	BASEPRI, r3
}
 8005750:	bf00      	nop
 8005752:	3740      	adds	r7, #64	; 0x40
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	200133b4 	.word	0x200133b4

0800575c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	; 0x30
 8005760:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005762:	4b58      	ldr	r3, [pc, #352]	; (80058c4 <SEGGER_SYSVIEW_Start+0x168>)
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005768:	f3ef 8311 	mrs	r3, BASEPRI
 800576c:	f04f 0120 	mov.w	r1, #32
 8005770:	f381 8811 	msr	BASEPRI, r1
 8005774:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005776:	4b53      	ldr	r3, [pc, #332]	; (80058c4 <SEGGER_SYSVIEW_Start+0x168>)
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	220a      	movs	r2, #10
 800577c:	4952      	ldr	r1, [pc, #328]	; (80058c8 <SEGGER_SYSVIEW_Start+0x16c>)
 800577e:	4618      	mov	r0, r3
 8005780:	f7fa fd26 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800578a:	200a      	movs	r0, #10
 800578c:	f7ff fe2a 	bl	80053e4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005790:	f3ef 8311 	mrs	r3, BASEPRI
 8005794:	f04f 0120 	mov.w	r1, #32
 8005798:	f381 8811 	msr	BASEPRI, r1
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	484b      	ldr	r0, [pc, #300]	; (80058cc <SEGGER_SYSVIEW_Start+0x170>)
 80057a0:	f7ff fc4a 	bl	8005038 <_PreparePacket>
 80057a4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ae:	4b45      	ldr	r3, [pc, #276]	; (80058c4 <SEGGER_SYSVIEW_Start+0x168>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b4:	e00b      	b.n	80057ce <SEGGER_SYSVIEW_Start+0x72>
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	1c59      	adds	r1, r3, #1
 80057be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	09db      	lsrs	r3, r3, #7
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	2b7f      	cmp	r3, #127	; 0x7f
 80057d2:	d8f0      	bhi.n	80057b6 <SEGGER_SYSVIEW_Start+0x5a>
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
 80057e8:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <SEGGER_SYSVIEW_Start+0x168>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	623b      	str	r3, [r7, #32]
 80057ee:	e00b      	b.n	8005808 <SEGGER_SYSVIEW_Start+0xac>
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	6279      	str	r1, [r7, #36]	; 0x24
 80057fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	09db      	lsrs	r3, r3, #7
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2b7f      	cmp	r3, #127	; 0x7f
 800580c:	d8f0      	bhi.n	80057f0 <SEGGER_SYSVIEW_Start+0x94>
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	627a      	str	r2, [r7, #36]	; 0x24
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <SEGGER_SYSVIEW_Start+0x168>)
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e00b      	b.n	8005842 <SEGGER_SYSVIEW_Start+0xe6>
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	1c59      	adds	r1, r3, #1
 8005832:	61f9      	str	r1, [r7, #28]
 8005834:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	09db      	lsrs	r3, r3, #7
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b7f      	cmp	r3, #127	; 0x7f
 8005846:	d8f0      	bhi.n	800582a <SEGGER_SYSVIEW_Start+0xce>
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	61fa      	str	r2, [r7, #28]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	e00b      	b.n	800587a <SEGGER_SYSVIEW_Start+0x11e>
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	1c59      	adds	r1, r3, #1
 800586a:	6179      	str	r1, [r7, #20]
 800586c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	09db      	lsrs	r3, r3, #7
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b7f      	cmp	r3, #127	; 0x7f
 800587e:	d8f0      	bhi.n	8005862 <SEGGER_SYSVIEW_Start+0x106>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	617a      	str	r2, [r7, #20]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005890:	2218      	movs	r2, #24
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fcbf 	bl	8005218 <_SendPacket>
      RECORD_END();
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <SEGGER_SYSVIEW_Start+0x168>)
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80058a8:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <SEGGER_SYSVIEW_Start+0x168>)
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80058ae:	f000 f9c7 	bl	8005c40 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80058b2:	f000 f9b1 	bl	8005c18 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80058b6:	f000 fc5f 	bl	8006178 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80058ba:	bf00      	nop
 80058bc:	3730      	adds	r7, #48	; 0x30
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20013384 	.word	0x20013384
 80058c8:	08006408 	.word	0x08006408
 80058cc:	200133b4 	.word	0x200133b4

080058d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058d6:	f3ef 8311 	mrs	r3, BASEPRI
 80058da:	f04f 0120 	mov.w	r1, #32
 80058de:	f381 8811 	msr	BASEPRI, r1
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	480b      	ldr	r0, [pc, #44]	; (8005914 <SEGGER_SYSVIEW_Stop+0x44>)
 80058e6:	f7ff fba7 	bl	8005038 <_PreparePacket>
 80058ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <SEGGER_SYSVIEW_Stop+0x48>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80058f4:	220b      	movs	r2, #11
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6838      	ldr	r0, [r7, #0]
 80058fa:	f7ff fc8d 	bl	8005218 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <SEGGER_SYSVIEW_Stop+0x48>)
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f383 8811 	msr	BASEPRI, r3
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200133b4 	.word	0x200133b4
 8005918:	20013384 	.word	0x20013384

0800591c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b08c      	sub	sp, #48	; 0x30
 8005920:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005922:	f3ef 8311 	mrs	r3, BASEPRI
 8005926:	f04f 0120 	mov.w	r1, #32
 800592a:	f381 8811 	msr	BASEPRI, r1
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	4845      	ldr	r0, [pc, #276]	; (8005a48 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005932:	f7ff fb81 	bl	8005038 <_PreparePacket>
 8005936:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005940:	4b42      	ldr	r3, [pc, #264]	; (8005a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
 8005946:	e00b      	b.n	8005960 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	b2da      	uxtb	r2, r3
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	09db      	lsrs	r3, r3, #7
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b7f      	cmp	r3, #127	; 0x7f
 8005964:	d8f0      	bhi.n	8005948 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800596c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
 800597a:	4b34      	ldr	r3, [pc, #208]	; (8005a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	623b      	str	r3, [r7, #32]
 8005980:	e00b      	b.n	800599a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	b2da      	uxtb	r2, r3
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	1c59      	adds	r1, r3, #1
 800598a:	6279      	str	r1, [r7, #36]	; 0x24
 800598c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	09db      	lsrs	r3, r3, #7
 8005998:	623b      	str	r3, [r7, #32]
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	2b7f      	cmp	r3, #127	; 0x7f
 800599e:	d8f0      	bhi.n	8005982 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	627a      	str	r2, [r7, #36]	; 0x24
 80059a6:	6a3a      	ldr	r2, [r7, #32]
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	e00b      	b.n	80059d4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	1c59      	adds	r1, r3, #1
 80059c4:	61f9      	str	r1, [r7, #28]
 80059c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	09db      	lsrs	r3, r3, #7
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b7f      	cmp	r3, #127	; 0x7f
 80059d8:	d8f0      	bhi.n	80059bc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	61fa      	str	r2, [r7, #28]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	2300      	movs	r3, #0
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	e00b      	b.n	8005a0c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	1c59      	adds	r1, r3, #1
 80059fc:	6179      	str	r1, [r7, #20]
 80059fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	09db      	lsrs	r3, r3, #7
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a10:	d8f0      	bhi.n	80059f4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	617a      	str	r2, [r7, #20]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a22:	2218      	movs	r2, #24
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	68b8      	ldr	r0, [r7, #8]
 8005a28:	f7ff fbf6 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005a3a:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	4798      	blx	r3
  }
}
 8005a40:	bf00      	nop
 8005a42:	3730      	adds	r7, #48	; 0x30
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	200133b4 	.word	0x200133b4
 8005a4c:	20013384 	.word	0x20013384

08005a50 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b092      	sub	sp, #72	; 0x48
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005a58:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5c:	f04f 0120 	mov.w	r1, #32
 8005a60:	f381 8811 	msr	BASEPRI, r1
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	486a      	ldr	r0, [pc, #424]	; (8005c10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005a68:	f7ff fae6 	bl	8005038 <_PreparePacket>
 8005a6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	647b      	str	r3, [r7, #68]	; 0x44
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b66      	ldr	r3, [pc, #408]	; (8005c14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	643b      	str	r3, [r7, #64]	; 0x40
 8005a82:	e00b      	b.n	8005a9c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	6479      	str	r1, [r7, #68]	; 0x44
 8005a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a98:	09db      	lsrs	r3, r3, #7
 8005a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa0:	d8f0      	bhi.n	8005a84 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	647a      	str	r2, [r7, #68]	; 0x44
 8005aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005abc:	e00b      	b.n	8005ad6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac4:	1c59      	adds	r1, r3, #1
 8005ac6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	09db      	lsrs	r3, r3, #7
 8005ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8005ada:	d8f0      	bhi.n	8005abe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	4619      	mov	r1, r3
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7ff fa4f 	bl	8004f98 <_EncodeStr>
 8005afa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005afc:	2209      	movs	r2, #9
 8005afe:	68f9      	ldr	r1, [r7, #12]
 8005b00:	6938      	ldr	r0, [r7, #16]
 8005b02:	f7ff fb89 	bl	8005218 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b40      	ldr	r3, [pc, #256]	; (8005c14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30
 8005b1a:	e00b      	b.n	8005b34 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b22:	1c59      	adds	r1, r3, #1
 8005b24:	6379      	str	r1, [r7, #52]	; 0x34
 8005b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	09db      	lsrs	r3, r3, #7
 8005b32:	633b      	str	r3, [r7, #48]	; 0x30
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	2b7f      	cmp	r3, #127	; 0x7f
 8005b38:	d8f0      	bhi.n	8005b1c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	637a      	str	r2, [r7, #52]	; 0x34
 8005b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b54:	e00b      	b.n	8005b6e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	1c59      	adds	r1, r3, #1
 8005b5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	09db      	lsrs	r3, r3, #7
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	2b7f      	cmp	r3, #127	; 0x7f
 8005b72:	d8f0      	bhi.n	8005b56 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	623b      	str	r3, [r7, #32]
 8005b8e:	e00b      	b.n	8005ba8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	1c59      	adds	r1, r3, #1
 8005b98:	6279      	str	r1, [r7, #36]	; 0x24
 8005b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	09db      	lsrs	r3, r3, #7
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	2b7f      	cmp	r3, #127	; 0x7f
 8005bac:	d8f0      	bhi.n	8005b90 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	627a      	str	r2, [r7, #36]	; 0x24
 8005bb4:	6a3a      	ldr	r2, [r7, #32]
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	e00b      	b.n	8005be0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	61f9      	str	r1, [r7, #28]
 8005bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	09db      	lsrs	r3, r3, #7
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b7f      	cmp	r3, #127	; 0x7f
 8005be4:	d8f0      	bhi.n	8005bc8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	61fa      	str	r2, [r7, #28]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005bf6:	2215      	movs	r2, #21
 8005bf8:	68f9      	ldr	r1, [r7, #12]
 8005bfa:	6938      	ldr	r0, [r7, #16]
 8005bfc:	f7ff fb0c 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f383 8811 	msr	BASEPRI, r3
}
 8005c06:	bf00      	nop
 8005c08:	3748      	adds	r7, #72	; 0x48
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	200133b4 	.word	0x200133b4
 8005c14:	20013384 	.word	0x20013384

08005c18 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c2e:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	4798      	blx	r3
  }
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20013384 	.word	0x20013384

08005c40 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005c40:	b590      	push	{r4, r7, lr}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005c46:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01a      	beq.n	8005c84 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d015      	beq.n	8005c84 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005c58:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4798      	blx	r3
 8005c60:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005c64:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	000a      	movs	r2, r1
 8005c74:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005c76:	4613      	mov	r3, r2
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	200d      	movs	r0, #13
 8005c7e:	f7ff fc0b 	bl	8005498 <SEGGER_SYSVIEW_RecordU32x2>
 8005c82:	e006      	b.n	8005c92 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005c84:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	200c      	movs	r0, #12
 8005c8c:	f7ff fbc8 	bl	8005420 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd90      	pop	{r4, r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20013384 	.word	0x20013384
 8005ca0:	e0001004 	.word	0xe0001004

08005ca4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005caa:	f3ef 8311 	mrs	r3, BASEPRI
 8005cae:	f04f 0120 	mov.w	r1, #32
 8005cb2:	f381 8811 	msr	BASEPRI, r1
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	4819      	ldr	r0, [pc, #100]	; (8005d20 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005cba:	f7ff f9bd 	bl	8005038 <_PreparePacket>
 8005cbe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005cc4:	4b17      	ldr	r3, [pc, #92]	; (8005d24 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ccc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	e00b      	b.n	8005cf0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	1c59      	adds	r1, r3, #1
 8005ce0:	6179      	str	r1, [r7, #20]
 8005ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	09db      	lsrs	r3, r3, #7
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf4:	d8f0      	bhi.n	8005cd8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	617a      	str	r2, [r7, #20]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005d06:	2202      	movs	r2, #2
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	68b8      	ldr	r0, [r7, #8]
 8005d0c:	f7ff fa84 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f383 8811 	msr	BASEPRI, r3
}
 8005d16:	bf00      	nop
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200133b4 	.word	0x200133b4
 8005d24:	e000ed04 	.word	0xe000ed04

08005d28 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d32:	f04f 0120 	mov.w	r1, #32
 8005d36:	f381 8811 	msr	BASEPRI, r1
 8005d3a:	607b      	str	r3, [r7, #4]
 8005d3c:	4807      	ldr	r0, [pc, #28]	; (8005d5c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005d3e:	f7ff f97b 	bl	8005038 <_PreparePacket>
 8005d42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005d44:	2203      	movs	r2, #3
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6838      	ldr	r0, [r7, #0]
 8005d4a:	f7ff fa65 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f383 8811 	msr	BASEPRI, r3
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	200133b4 	.word	0x200133b4

08005d60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d66:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6a:	f04f 0120 	mov.w	r1, #32
 8005d6e:	f381 8811 	msr	BASEPRI, r1
 8005d72:	607b      	str	r3, [r7, #4]
 8005d74:	4807      	ldr	r0, [pc, #28]	; (8005d94 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005d76:	f7ff f95f 	bl	8005038 <_PreparePacket>
 8005d7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005d7c:	2212      	movs	r2, #18
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6838      	ldr	r0, [r7, #0]
 8005d82:	f7ff fa49 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f383 8811 	msr	BASEPRI, r3
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	200133b4 	.word	0x200133b4

08005d98 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005da2:	f04f 0120 	mov.w	r1, #32
 8005da6:	f381 8811 	msr	BASEPRI, r1
 8005daa:	607b      	str	r3, [r7, #4]
 8005dac:	4807      	ldr	r0, [pc, #28]	; (8005dcc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005dae:	f7ff f943 	bl	8005038 <_PreparePacket>
 8005db2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005db4:	2211      	movs	r2, #17
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6838      	ldr	r0, [r7, #0]
 8005dba:	f7ff fa2d 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f383 8811 	msr	BASEPRI, r3
}
 8005dc4:	bf00      	nop
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	200133b4 	.word	0x200133b4

08005dd0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dd8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ddc:	f04f 0120 	mov.w	r1, #32
 8005de0:	f381 8811 	msr	BASEPRI, r1
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	4819      	ldr	r0, [pc, #100]	; (8005e4c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005de8:	f7ff f926 	bl	8005038 <_PreparePacket>
 8005dec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005df2:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	e00b      	b.n	8005e1e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	1c59      	adds	r1, r3, #1
 8005e0e:	61f9      	str	r1, [r7, #28]
 8005e10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	09db      	lsrs	r3, r3, #7
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b7f      	cmp	r3, #127	; 0x7f
 8005e22:	d8f0      	bhi.n	8005e06 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	61fa      	str	r2, [r7, #28]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005e34:	2208      	movs	r2, #8
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	6938      	ldr	r0, [r7, #16]
 8005e3a:	f7ff f9ed 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f383 8811 	msr	BASEPRI, r3
}
 8005e44:	bf00      	nop
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	200133b4 	.word	0x200133b4
 8005e50:	20013384 	.word	0x20013384

08005e54 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e60:	f04f 0120 	mov.w	r1, #32
 8005e64:	f381 8811 	msr	BASEPRI, r1
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	4819      	ldr	r0, [pc, #100]	; (8005ed0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005e6c:	f7ff f8e4 	bl	8005038 <_PreparePacket>
 8005e70:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e76:	4b17      	ldr	r3, [pc, #92]	; (8005ed4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	e00b      	b.n	8005ea2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	1c59      	adds	r1, r3, #1
 8005e92:	61f9      	str	r1, [r7, #28]
 8005e94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	09db      	lsrs	r3, r3, #7
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea6:	d8f0      	bhi.n	8005e8a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	61fa      	str	r2, [r7, #28]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005eb8:	2204      	movs	r2, #4
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	6938      	ldr	r0, [r7, #16]
 8005ebe:	f7ff f9ab 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f383 8811 	msr	BASEPRI, r3
}
 8005ec8:	bf00      	nop
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	200133b4 	.word	0x200133b4
 8005ed4:	20013384 	.word	0x20013384

08005ed8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ee0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee4:	f04f 0120 	mov.w	r1, #32
 8005ee8:	f381 8811 	msr	BASEPRI, r1
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	4819      	ldr	r0, [pc, #100]	; (8005f54 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005ef0:	f7ff f8a2 	bl	8005038 <_PreparePacket>
 8005ef4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005efa:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	e00b      	b.n	8005f26 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	1c59      	adds	r1, r3, #1
 8005f16:	61f9      	str	r1, [r7, #28]
 8005f18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	09db      	lsrs	r3, r3, #7
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2a:	d8f0      	bhi.n	8005f0e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	61fa      	str	r2, [r7, #28]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005f3c:	2206      	movs	r2, #6
 8005f3e:	68f9      	ldr	r1, [r7, #12]
 8005f40:	6938      	ldr	r0, [r7, #16]
 8005f42:	f7ff f969 	bl	8005218 <_SendPacket>
  RECORD_END();
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f383 8811 	msr	BASEPRI, r3
}
 8005f4c:	bf00      	nop
 8005f4e:	3720      	adds	r7, #32
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	200133b4 	.word	0x200133b4
 8005f58:	20013384 	.word	0x20013384

08005f5c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f66:	f3ef 8311 	mrs	r3, BASEPRI
 8005f6a:	f04f 0120 	mov.w	r1, #32
 8005f6e:	f381 8811 	msr	BASEPRI, r1
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	4827      	ldr	r0, [pc, #156]	; (8006014 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005f76:	f7ff f85f 	bl	8005038 <_PreparePacket>
 8005f7a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f80:	4b25      	ldr	r3, [pc, #148]	; (8006018 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	623b      	str	r3, [r7, #32]
 8005f92:	e00b      	b.n	8005fac <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	1c59      	adds	r1, r3, #1
 8005f9c:	6279      	str	r1, [r7, #36]	; 0x24
 8005f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	09db      	lsrs	r3, r3, #7
 8005faa:	623b      	str	r3, [r7, #32]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb0:	d8f0      	bhi.n	8005f94 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	627a      	str	r2, [r7, #36]	; 0x24
 8005fb8:	6a3a      	ldr	r2, [r7, #32]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	e00b      	b.n	8005fe4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	1c59      	adds	r1, r3, #1
 8005fd4:	61f9      	str	r1, [r7, #28]
 8005fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	09db      	lsrs	r3, r3, #7
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe8:	d8f0      	bhi.n	8005fcc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	61fa      	str	r2, [r7, #28]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005ffa:	2207      	movs	r2, #7
 8005ffc:	68f9      	ldr	r1, [r7, #12]
 8005ffe:	6938      	ldr	r0, [r7, #16]
 8006000:	f7ff f90a 	bl	8005218 <_SendPacket>
  RECORD_END();
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f383 8811 	msr	BASEPRI, r3
}
 800600a:	bf00      	nop
 800600c:	3728      	adds	r7, #40	; 0x28
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	200133b4 	.word	0x200133b4
 8006018:	20013384 	.word	0x20013384

0800601c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	1ad3      	subs	r3, r2, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	20013384 	.word	0x20013384

0800603c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800603c:	b580      	push	{r7, lr}
 800603e:	b08c      	sub	sp, #48	; 0x30
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006046:	4b3b      	ldr	r3, [pc, #236]	; (8006134 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d06d      	beq.n	800612a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800604e:	4b39      	ldr	r3, [pc, #228]	; (8006134 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006054:	2300      	movs	r3, #0
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
 8006058:	e008      	b.n	800606c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	3301      	adds	r3, #1
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006070:	429a      	cmp	r2, r3
 8006072:	d3f2      	bcc.n	800605a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006074:	e000      	b.n	8006078 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006076:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d055      	beq.n	800612a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800607e:	f3ef 8311 	mrs	r3, BASEPRI
 8006082:	f04f 0120 	mov.w	r1, #32
 8006086:	f381 8811 	msr	BASEPRI, r1
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	482a      	ldr	r0, [pc, #168]	; (8006138 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800608e:	f7fe ffd3 	bl	8005038 <_PreparePacket>
 8006092:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	623b      	str	r3, [r7, #32]
 80060a0:	e00b      	b.n	80060ba <SEGGER_SYSVIEW_SendModule+0x7e>
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	1c59      	adds	r1, r3, #1
 80060aa:	6279      	str	r1, [r7, #36]	; 0x24
 80060ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	09db      	lsrs	r3, r3, #7
 80060b8:	623b      	str	r3, [r7, #32]
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	2b7f      	cmp	r3, #127	; 0x7f
 80060be:	d8f0      	bhi.n	80060a2 <SEGGER_SYSVIEW_SendModule+0x66>
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	627a      	str	r2, [r7, #36]	; 0x24
 80060c6:	6a3a      	ldr	r2, [r7, #32]
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e00b      	b.n	80060f4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	61f9      	str	r1, [r7, #28]
 80060e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	09db      	lsrs	r3, r3, #7
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b7f      	cmp	r3, #127	; 0x7f
 80060f8:	d8f0      	bhi.n	80060dc <SEGGER_SYSVIEW_SendModule+0xa0>
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	61fa      	str	r2, [r7, #28]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2280      	movs	r2, #128	; 0x80
 8006110:	4619      	mov	r1, r3
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7fe ff40 	bl	8004f98 <_EncodeStr>
 8006118:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800611a:	2216      	movs	r2, #22
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	6938      	ldr	r0, [r7, #16]
 8006120:	f7ff f87a 	bl	8005218 <_SendPacket>
      RECORD_END();
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800612a:	bf00      	nop
 800612c:	3730      	adds	r7, #48	; 0x30
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200133ac 	.word	0x200133ac
 8006138:	200133b4 	.word	0x200133b4

0800613c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006142:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00f      	beq.n	800616a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f2      	bne.n	8006150 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200133ac 	.word	0x200133ac

08006178 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800617e:	f3ef 8311 	mrs	r3, BASEPRI
 8006182:	f04f 0120 	mov.w	r1, #32
 8006186:	f381 8811 	msr	BASEPRI, r1
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	4817      	ldr	r0, [pc, #92]	; (80061ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800618e:	f7fe ff53 	bl	8005038 <_PreparePacket>
 8006192:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e00b      	b.n	80061bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	1c59      	adds	r1, r3, #1
 80061ac:	6179      	str	r1, [r7, #20]
 80061ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	09db      	lsrs	r3, r3, #7
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b7f      	cmp	r3, #127	; 0x7f
 80061c0:	d8f0      	bhi.n	80061a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	617a      	str	r2, [r7, #20]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80061d2:	221b      	movs	r2, #27
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	68b8      	ldr	r0, [r7, #8]
 80061d8:	f7ff f81e 	bl	8005218 <_SendPacket>
  RECORD_END();
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f383 8811 	msr	BASEPRI, r3
}
 80061e2:	bf00      	nop
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200133b4 	.word	0x200133b4
 80061f0:	200133b0 	.word	0x200133b0

080061f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006200:	f04f 0120 	mov.w	r1, #32
 8006204:	f381 8811 	msr	BASEPRI, r1
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	4827      	ldr	r0, [pc, #156]	; (80062a8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800620c:	f7fe ff14 	bl	8005038 <_PreparePacket>
 8006210:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	6938      	ldr	r0, [r7, #16]
 8006218:	f7fe febe 	bl	8004f98 <_EncodeStr>
 800621c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
 8006222:	2301      	movs	r3, #1
 8006224:	623b      	str	r3, [r7, #32]
 8006226:	e00b      	b.n	8006240 <SEGGER_SYSVIEW_Warn+0x4c>
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	1c59      	adds	r1, r3, #1
 8006230:	6279      	str	r1, [r7, #36]	; 0x24
 8006232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	09db      	lsrs	r3, r3, #7
 800623e:	623b      	str	r3, [r7, #32]
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	2b7f      	cmp	r3, #127	; 0x7f
 8006244:	d8f0      	bhi.n	8006228 <SEGGER_SYSVIEW_Warn+0x34>
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	627a      	str	r2, [r7, #36]	; 0x24
 800624c:	6a3a      	ldr	r2, [r7, #32]
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	2300      	movs	r3, #0
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e00b      	b.n	8006278 <SEGGER_SYSVIEW_Warn+0x84>
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	61f9      	str	r1, [r7, #28]
 800626a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	09db      	lsrs	r3, r3, #7
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b7f      	cmp	r3, #127	; 0x7f
 800627c:	d8f0      	bhi.n	8006260 <SEGGER_SYSVIEW_Warn+0x6c>
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	61fa      	str	r2, [r7, #28]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800628e:	221a      	movs	r2, #26
 8006290:	68f9      	ldr	r1, [r7, #12]
 8006292:	6938      	ldr	r0, [r7, #16]
 8006294:	f7fe ffc0 	bl	8005218 <_SendPacket>
  RECORD_END();
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f383 8811 	msr	BASEPRI, r3
}
 800629e:	bf00      	nop
 80062a0:	3728      	adds	r7, #40	; 0x28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	200133b4 	.word	0x200133b4

080062ac <__libc_init_array>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	4d0d      	ldr	r5, [pc, #52]	; (80062e4 <__libc_init_array+0x38>)
 80062b0:	4c0d      	ldr	r4, [pc, #52]	; (80062e8 <__libc_init_array+0x3c>)
 80062b2:	1b64      	subs	r4, r4, r5
 80062b4:	10a4      	asrs	r4, r4, #2
 80062b6:	2600      	movs	r6, #0
 80062b8:	42a6      	cmp	r6, r4
 80062ba:	d109      	bne.n	80062d0 <__libc_init_array+0x24>
 80062bc:	4d0b      	ldr	r5, [pc, #44]	; (80062ec <__libc_init_array+0x40>)
 80062be:	4c0c      	ldr	r4, [pc, #48]	; (80062f0 <__libc_init_array+0x44>)
 80062c0:	f000 f83e 	bl	8006340 <_init>
 80062c4:	1b64      	subs	r4, r4, r5
 80062c6:	10a4      	asrs	r4, r4, #2
 80062c8:	2600      	movs	r6, #0
 80062ca:	42a6      	cmp	r6, r4
 80062cc:	d105      	bne.n	80062da <__libc_init_array+0x2e>
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d4:	4798      	blx	r3
 80062d6:	3601      	adds	r6, #1
 80062d8:	e7ee      	b.n	80062b8 <__libc_init_array+0xc>
 80062da:	f855 3b04 	ldr.w	r3, [r5], #4
 80062de:	4798      	blx	r3
 80062e0:	3601      	adds	r6, #1
 80062e2:	e7f2      	b.n	80062ca <__libc_init_array+0x1e>
 80062e4:	0800641c 	.word	0x0800641c
 80062e8:	0800641c 	.word	0x0800641c
 80062ec:	0800641c 	.word	0x0800641c
 80062f0:	08006420 	.word	0x08006420

080062f4 <memcmp>:
 80062f4:	b510      	push	{r4, lr}
 80062f6:	3901      	subs	r1, #1
 80062f8:	4402      	add	r2, r0
 80062fa:	4290      	cmp	r0, r2
 80062fc:	d101      	bne.n	8006302 <memcmp+0xe>
 80062fe:	2000      	movs	r0, #0
 8006300:	e005      	b.n	800630e <memcmp+0x1a>
 8006302:	7803      	ldrb	r3, [r0, #0]
 8006304:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006308:	42a3      	cmp	r3, r4
 800630a:	d001      	beq.n	8006310 <memcmp+0x1c>
 800630c:	1b18      	subs	r0, r3, r4
 800630e:	bd10      	pop	{r4, pc}
 8006310:	3001      	adds	r0, #1
 8006312:	e7f2      	b.n	80062fa <memcmp+0x6>

08006314 <memcpy>:
 8006314:	440a      	add	r2, r1
 8006316:	4291      	cmp	r1, r2
 8006318:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800631c:	d100      	bne.n	8006320 <memcpy+0xc>
 800631e:	4770      	bx	lr
 8006320:	b510      	push	{r4, lr}
 8006322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800632a:	4291      	cmp	r1, r2
 800632c:	d1f9      	bne.n	8006322 <memcpy+0xe>
 800632e:	bd10      	pop	{r4, pc}

08006330 <memset>:
 8006330:	4402      	add	r2, r0
 8006332:	4603      	mov	r3, r0
 8006334:	4293      	cmp	r3, r2
 8006336:	d100      	bne.n	800633a <memset+0xa>
 8006338:	4770      	bx	lr
 800633a:	f803 1b01 	strb.w	r1, [r3], #1
 800633e:	e7f9      	b.n	8006334 <memset+0x4>

08006340 <_init>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	bf00      	nop
 8006344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006346:	bc08      	pop	{r3}
 8006348:	469e      	mov	lr, r3
 800634a:	4770      	bx	lr

0800634c <_fini>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	bf00      	nop
 8006350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006352:	bc08      	pop	{r3}
 8006354:	469e      	mov	lr, r3
 8006356:	4770      	bx	lr
