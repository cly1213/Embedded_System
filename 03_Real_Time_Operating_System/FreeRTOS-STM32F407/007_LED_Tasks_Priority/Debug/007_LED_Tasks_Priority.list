
007_LED_Tasks_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006604  08006604  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006604  08006604  00016604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800660c  0800660c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006610  08006610  00016610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013484  20000014  08006628  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013498  08006628  00023498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144b1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d06  00000000  00000000  000344f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00037200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  000384d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ae1  00000000  00000000  00039638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a2e  00000000  00000000  0005c119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6996  00000000  00000000  00070b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001474dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f2c  00000000  00000000  00147530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006530 	.word	0x08006530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006530 	.word	0x08006530

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ecc 	.word	0x20012ecc

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fba1 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f849 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8b1 	bl	80006ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(500000);

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <main+0x8c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <main+0x8c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2302      	movs	r3, #2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	22c8      	movs	r2, #200	; 0xc8
 80005a4:	4918      	ldr	r1, [pc, #96]	; (8000608 <main+0x90>)
 80005a6:	4819      	ldr	r0, [pc, #100]	; (800060c <main+0x94>)
 80005a8:	f002 fc0c 	bl	8002dc4 <xTaskCreate>
 80005ac:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d00a      	beq.n	80005ca <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b8:	f383 8811 	msr	BASEPRI, r3
 80005bc:	f3bf 8f6f 	isb	sy
 80005c0:	f3bf 8f4f 	dsb	sy
 80005c4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c6:	bf00      	nop
 80005c8:	e7fe      	b.n	80005c8 <main+0x50>

  status = xTaskCreate(task2_handler, "Task-2", 200,NULL, 3, &task2_handle);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2303      	movs	r3, #3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	490e      	ldr	r1, [pc, #56]	; (8000610 <main+0x98>)
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <main+0x9c>)
 80005da:	f002 fbf3 	bl	8002dc4 <xTaskCreate>
 80005de:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x84>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x82>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005fc:	f002 fe06 	bl	800320c <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x88>
 8000602:	bf00      	nop
 8000604:	e0001000 	.word	0xe0001000
 8000608:	08006548 	.word	0x08006548
 800060c:	08000a49 	.word	0x08000a49
 8000610:	08006550 	.word	0x08006550
 8000614:	08000a81 	.word	0x08000a81

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 ff7a 	bl	8006520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800068c:	23a8      	movs	r3, #168	; 0xa8
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fe4d 	bl	800133c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 fa24 	bl	8000af4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f8ae 	bl	800182c <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 fa0d 	bl	8000af4 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	4ba6      	ldr	r3, [pc, #664]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4aa5      	ldr	r2, [pc, #660]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4ba3      	ldr	r3, [pc, #652]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	4b9f      	ldr	r3, [pc, #636]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a9e      	ldr	r2, [pc, #632]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b9c      	ldr	r3, [pc, #624]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b98      	ldr	r3, [pc, #608]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a97      	ldr	r2, [pc, #604]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b95      	ldr	r3, [pc, #596]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b91      	ldr	r3, [pc, #580]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a90      	ldr	r2, [pc, #576]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b8e      	ldr	r3, [pc, #568]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b8a      	ldr	r3, [pc, #552]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a89      	ldr	r2, [pc, #548]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b87      	ldr	r3, [pc, #540]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b83      	ldr	r3, [pc, #524]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a82      	ldr	r2, [pc, #520]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b80      	ldr	r3, [pc, #512]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2108      	movs	r1, #8
 80007ae:	487d      	ldr	r0, [pc, #500]	; (80009a4 <MX_GPIO_Init+0x2b8>)
 80007b0:	f000 fd6c 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2101      	movs	r1, #1
 80007b8:	487b      	ldr	r0, [pc, #492]	; (80009a8 <MX_GPIO_Init+0x2bc>)
 80007ba:	f000 fd67 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007be:	2200      	movs	r2, #0
 80007c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c4:	4879      	ldr	r0, [pc, #484]	; (80009ac <MX_GPIO_Init+0x2c0>)
 80007c6:	f000 fd61 	bl	800128c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ca:	2308      	movs	r3, #8
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4870      	ldr	r0, [pc, #448]	; (80009a4 <MX_GPIO_Init+0x2b8>)
 80007e2:	f000 fbb7 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	486a      	ldr	r0, [pc, #424]	; (80009a8 <MX_GPIO_Init+0x2bc>)
 80007fe:	f000 fba9 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000812:	2305      	movs	r3, #5
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4862      	ldr	r0, [pc, #392]	; (80009a8 <MX_GPIO_Init+0x2bc>)
 800081e:	f000 fb99 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000826:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	485e      	ldr	r0, [pc, #376]	; (80009b0 <MX_GPIO_Init+0x2c4>)
 8000838:	f000 fb8c 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800083c:	2310      	movs	r3, #16
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800084c:	2306      	movs	r3, #6
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4856      	ldr	r0, [pc, #344]	; (80009b0 <MX_GPIO_Init+0x2c4>)
 8000858:	f000 fb7c 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800085c:	23e0      	movs	r3, #224	; 0xe0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800086c:	2305      	movs	r3, #5
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	484e      	ldr	r0, [pc, #312]	; (80009b0 <MX_GPIO_Init+0x2c4>)
 8000878:	f000 fb6c 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087c:	2304      	movs	r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4849      	ldr	r0, [pc, #292]	; (80009b4 <MX_GPIO_Init+0x2c8>)
 8000890:	f000 fb60 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4840      	ldr	r0, [pc, #256]	; (80009b4 <MX_GPIO_Init+0x2c8>)
 80008b2:	f000 fb4f 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4837      	ldr	r0, [pc, #220]	; (80009ac <MX_GPIO_Init+0x2c0>)
 80008d0:	f000 fb40 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e6:	2306      	movs	r3, #6
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	482d      	ldr	r0, [pc, #180]	; (80009a8 <MX_GPIO_Init+0x2bc>)
 80008f2:	f000 fb2f 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4829      	ldr	r0, [pc, #164]	; (80009b0 <MX_GPIO_Init+0x2c4>)
 800090c:	f000 fb22 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000910:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000922:	230a      	movs	r3, #10
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4820      	ldr	r0, [pc, #128]	; (80009b0 <MX_GPIO_Init+0x2c4>)
 800092e:	f000 fb11 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4819      	ldr	r0, [pc, #100]	; (80009ac <MX_GPIO_Init+0x2c0>)
 8000946:	f000 fb05 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800094a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	2312      	movs	r3, #18
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000954:	2301      	movs	r3, #1
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095c:	2304      	movs	r3, #4
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4813      	ldr	r0, [pc, #76]	; (80009b4 <MX_GPIO_Init+0x2c8>)
 8000968:	f000 faf4 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000970:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <MX_GPIO_Init+0x2b8>)
 8000982:	f000 fae7 	bl	8000f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2106      	movs	r1, #6
 800098a:	2006      	movs	r0, #6
 800098c:	f000 fab8 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000990:	2006      	movs	r0, #6
 8000992:	f000 fad1 	bl	8000f38 <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400

080009b8 <switch_priority>:

/* USER CODE BEGIN 4 */

void switch_priority(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]

	//Disables those interrupts whose priority is less than the configuration macro
	portENTER_CRITICAL();
 80009c2:	f003 fedf 	bl	8004784 <vPortEnterCritical>
	if(status_button){
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <switch_priority+0x84>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d004      	beq.n	80009d8 <switch_priority+0x20>
		status_button = 0;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <switch_priority+0x84>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 80009d8:	f003 ff04 	bl	80047e4 <vPortExitCritical>

	if(switch_priority){
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d027      	beq.n	8000a32 <switch_priority+0x7a>

		t1 = xTaskGetHandle("Task-1");
 80009e2:	4817      	ldr	r0, [pc, #92]	; (8000a40 <switch_priority+0x88>)
 80009e4:	f002 fd92 	bl	800350c <xTaskGetHandle>
 80009e8:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task-2");
 80009ea:	4816      	ldr	r0, [pc, #88]	; (8000a44 <switch_priority+0x8c>)
 80009ec:	f002 fd8e 	bl	800350c <xTaskGetHandle>
 80009f0:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 80009f2:	6938      	ldr	r0, [r7, #16]
 80009f4:	f002 fb3c 	bl	8003070 <uxTaskPriorityGet>
 80009f8:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	f002 fb38 	bl	8003070 <uxTaskPriorityGet>
 8000a00:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000a02:	f003 f8d9 	bl	8003bb8 <xTaskGetCurrentTaskHandle>
 8000a06:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d108      	bne.n	8000a22 <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	6938      	ldr	r0, [r7, #16]
 8000a14:	f002 fb46 	bl	80030a4 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f002 fb42 	bl	80030a4 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000a20:	e007      	b.n	8000a32 <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f002 fb3d 	bl	80030a4 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	6938      	ldr	r0, [r7, #16]
 8000a2e:	f002 fb39 	bl	80030a4 <vTaskPrioritySet>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000030 	.word	0x20000030
 8000a40:	08006548 	.word	0x08006548
 8000a44:	08006550 	.word	0x08006550

08000a48 <task1_handler>:

static void task1_handler(void* parameters)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <task1_handler+0x30>)
 8000a56:	f000 fc32 	bl	80012be <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5e:	f000 f973 	bl	8000d48 <HAL_Delay>
		switch_priority();
 8000a62:	f7ff ffa9 	bl	80009b8 <switch_priority>
		taskYIELD(); //leave processor
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <task1_handler+0x34>)
 8000a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	f3bf 8f4f 	dsb	sy
 8000a72:	f3bf 8f6f 	isb	sy
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a76:	e7eb      	b.n	8000a50 <task1_handler+0x8>
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	e000ed04 	.word	0xe000ed04

08000a80 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <task2_handler+0x30>)
 8000a8e:	f000 fc16 	bl	80012be <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a96:	f000 f957 	bl	8000d48 <HAL_Delay>
		switch_priority();
 8000a9a:	f7ff ff8d 	bl	80009b8 <switch_priority>
		taskYIELD(); //leave processor
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <task2_handler+0x34>)
 8000aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	f3bf 8f4f 	dsb	sy
 8000aaa:	f3bf 8f6f 	isb	sy
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000aae:	e7eb      	b.n	8000a88 <task2_handler+0x8>
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	e000ed04 	.word	0xe000ed04

08000ab8 <button_interrupt_handler>:

}


void button_interrupt_handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
	//traceISR_ENTER();
	status_button = 1;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <button_interrupt_handler+0x14>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
			prev_read = btn_read;
			vTaskDelay(pdMS_TO_TICKS(10));
		}
*/

}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	20000030 	.word	0x20000030

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 f911 	bl	8000d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001000 	.word	0x40001000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b42:	f003 fda1 	bl	8004688 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	2036      	movs	r0, #54	; 0x36
 8000b6a:	f000 f9c9 	bl	8000f00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b6e:	2036      	movs	r0, #54	; 0x36
 8000b70:	f000 f9e2 	bl	8000f38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 f852 	bl	8001c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ba0:	f001 f83c 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bac:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <HAL_InitTick+0xa8>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	0c9b      	lsrs	r3, r3, #18
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_InitTick+0xac>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <HAL_InitTick+0xb0>)
 8000bbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_InitTick+0xac>)
 8000bc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <HAL_InitTick+0xac>)
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_InitTick+0xac>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_InitTick+0xac>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <HAL_InitTick+0xac>)
 8000bda:	f001 f865 	bl	8001ca8 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d104      	bne.n	8000bee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <HAL_InitTick+0xac>)
 8000be6:	f001 f8b9 	bl	8001d5c <HAL_TIM_Base_Start_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3730      	adds	r7, #48	; 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	431bde83 	.word	0x431bde83
 8000c00:	20000034 	.word	0x20000034
 8000c04:	40001000 	.word	0x40001000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8000c2a:	f7ff ff45 	bl	8000ab8 <button_interrupt_handler>

	//clear EXTI 0 pending bit in the exti pending register
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 fb60 	bl	80012f4 <HAL_GPIO_EXTI_IRQHandler>
  //HAL_GPIO_EXTI_IRQHandler(B1_Pin);

  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM6_DAC_IRQHandler+0x10>)
 8000c3e:	f001 f8fd 	bl	8001e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000034 	.word	0x20000034

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ffd7 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f005 fbfd 	bl	800649c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc69 	bl	8000578 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cb4:	08006614 	.word	0x08006614
  ldr r2, =_sbss
 8000cb8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cbc:	20013498 	.word	0x20013498

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f8fc 	bl	8000eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ff2e 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff ff04 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	2000007c 	.word	0x2000007c

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000007c 	.word	0x2000007c

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff ffee 	bl	8000d30 <HAL_GetTick>
 8000d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d60:	d005      	beq.n	8000d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_Delay+0x44>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6e:	bf00      	nop
 8000d70:	f7ff ffde 	bl	8000d30 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8f7      	bhi.n	8000d70 <HAL_Delay+0x28>
  {
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	f003 0307 	and.w	r3, r3, #7
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db0b      	blt.n	8000e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 021f 	and.w	r2, r3, #31
 8000e0c:	4907      	ldr	r1, [pc, #28]	; (8000e2c <__NVIC_EnableIRQ+0x38>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff4c 	bl	8000d90 <__NVIC_SetPriorityGrouping>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f12:	f7ff ff61 	bl	8000dd8 <__NVIC_GetPriorityGrouping>
 8000f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	f7ff ffb1 	bl	8000e84 <NVIC_EncodePriority>
 8000f22:	4602      	mov	r2, r0
 8000f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff80 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff54 	bl	8000df4 <__NVIC_EnableIRQ>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e16b      	b.n	8001248 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 815a 	bne.w	8001242 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80b4 	beq.w	8001242 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b60      	ldr	r3, [pc, #384]	; (8001260 <HAL_GPIO_Init+0x30c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a5f      	ldr	r2, [pc, #380]	; (8001260 <HAL_GPIO_Init+0x30c>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b5d      	ldr	r3, [pc, #372]	; (8001260 <HAL_GPIO_Init+0x30c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a5b      	ldr	r2, [pc, #364]	; (8001264 <HAL_GPIO_Init+0x310>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a52      	ldr	r2, [pc, #328]	; (8001268 <HAL_GPIO_Init+0x314>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d02b      	beq.n	800117a <HAL_GPIO_Init+0x226>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a51      	ldr	r2, [pc, #324]	; (800126c <HAL_GPIO_Init+0x318>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d025      	beq.n	8001176 <HAL_GPIO_Init+0x222>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a50      	ldr	r2, [pc, #320]	; (8001270 <HAL_GPIO_Init+0x31c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01f      	beq.n	8001172 <HAL_GPIO_Init+0x21e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4f      	ldr	r2, [pc, #316]	; (8001274 <HAL_GPIO_Init+0x320>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x21a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <HAL_GPIO_Init+0x324>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x216>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4d      	ldr	r2, [pc, #308]	; (800127c <HAL_GPIO_Init+0x328>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x212>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <HAL_GPIO_Init+0x32c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x20e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <HAL_GPIO_Init+0x330>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x20a>
 800115a:	2307      	movs	r3, #7
 800115c:	e00e      	b.n	800117c <HAL_GPIO_Init+0x228>
 800115e:	2308      	movs	r3, #8
 8001160:	e00c      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001162:	2306      	movs	r3, #6
 8001164:	e00a      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001166:	2305      	movs	r3, #5
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x228>
 800116a:	2304      	movs	r3, #4
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x228>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x228>
 800117a:	2300      	movs	r3, #0
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f002 0203 	and.w	r2, r2, #3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4093      	lsls	r3, r2
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118c:	4935      	ldr	r1, [pc, #212]	; (8001264 <HAL_GPIO_Init+0x310>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <HAL_GPIO_Init+0x334>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a32      	ldr	r2, [pc, #200]	; (8001288 <HAL_GPIO_Init+0x334>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b30      	ldr	r3, [pc, #192]	; (8001288 <HAL_GPIO_Init+0x334>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a27      	ldr	r2, [pc, #156]	; (8001288 <HAL_GPIO_Init+0x334>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <HAL_GPIO_Init+0x334>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_GPIO_Init+0x334>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_GPIO_Init+0x334>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <HAL_GPIO_Init+0x334>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f67f ae90 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40021000 	.word	0x40021000
 800127c:	40021400 	.word	0x40021400
 8001280:	40021800 	.word	0x40021800
 8001284:	40021c00 	.word	0x40021c00
 8001288:	40013c00 	.word	0x40013c00

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	619a      	str	r2, [r3, #24]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d0:	887a      	ldrh	r2, [r7, #2]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	041a      	lsls	r2, r3, #16
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43d9      	mvns	r1, r3
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	400b      	ands	r3, r1
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f806 	bl	8001324 <HAL_GPIO_EXTI_Callback>
  }
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40013c00 	.word	0x40013c00

08001324 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e267      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d075      	beq.n	8001446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00c      	beq.n	8001380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d112      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	4b82      	ldr	r3, [pc, #520]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137e:	d10b      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b7e      	ldr	r3, [pc, #504]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d05b      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d157      	bne.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e242      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x74>
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a75      	ldr	r2, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x98>
 80013ba:	4b70      	ldr	r3, [pc, #448]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6f      	ldr	r2, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b6d      	ldr	r3, [pc, #436]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6c      	ldr	r2, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a68      	ldr	r2, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b66      	ldr	r3, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a65      	ldr	r2, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc9c 	bl	8000d30 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fc98 	bl	8000d30 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e207      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xc0>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fc88 	bl	8000d30 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fc84 	bl	8000d30 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1f3      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d063      	beq.n	800151a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1c7      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4937      	ldr	r1, [pc, #220]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e03a      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_RCC_OscConfig+0x244>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fc3d 	bl	8000d30 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc39 	bl	8000d30 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1a8      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4925      	ldr	r1, [pc, #148]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x244>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc1c 	bl	8000d30 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fc18 	bl	8000d30 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e187      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d036      	beq.n	8001594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d016      	beq.n	800155c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_RCC_OscConfig+0x248>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fbfc 	bl	8000d30 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fbf8 	bl	8000d30 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e167      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x200>
 800155a:	e01b      	b.n	8001594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_RCC_OscConfig+0x248>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fbe5 	bl	8000d30 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	e00e      	b.n	8001588 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fbe1 	bl	8000d30 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d907      	bls.n	8001588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e150      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 800157c:	40023800 	.word	0x40023800
 8001580:	42470000 	.word	0x42470000
 8001584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800158a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ea      	bne.n	800156a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8097 	beq.w	80016d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b7d      	ldr	r3, [pc, #500]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a7c      	ldr	r2, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ce:	2301      	movs	r3, #1
 80015d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b77      	ldr	r3, [pc, #476]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015de:	4b74      	ldr	r3, [pc, #464]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a73      	ldr	r2, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fba1 	bl	8000d30 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff fb9d 	bl	8000d30 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e10c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x2ea>
 8001618:	4b64      	ldr	r3, [pc, #400]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	4a63      	ldr	r2, [pc, #396]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6713      	str	r3, [r2, #112]	; 0x70
 8001624:	e01c      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x30c>
 800162e:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4a5e      	ldr	r2, [pc, #376]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6713      	str	r3, [r2, #112]	; 0x70
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	4a5b      	ldr	r2, [pc, #364]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	; 0x70
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001648:	4b58      	ldr	r3, [pc, #352]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a57      	ldr	r2, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	4b55      	ldr	r3, [pc, #340]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a54      	ldr	r2, [pc, #336]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800165a:	f023 0304 	bic.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d015      	beq.n	8001694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fb62 	bl	8000d30 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff fb5e 	bl	8000d30 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0cb      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ee      	beq.n	8001670 <HAL_RCC_OscConfig+0x334>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fb4c 	bl	8000d30 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff fb48 	bl	8000d30 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0b5      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ee      	bne.n	800169c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a38      	ldr	r2, [pc, #224]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80a1 	beq.w	800181c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d05c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d141      	bne.n	8001772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb1c 	bl	8000d30 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fb18 	bl	8000d30 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e087      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	491b      	ldr	r1, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff faf1 	bl	8000d30 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff faed 	bl	8000d30 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e05c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x416>
 8001770:	e054      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fada 	bl	8000d30 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fad6 	bl	8000d30 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e045      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x444>
 800179e:	e03d      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e038      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000
 80017b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d028      	beq.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d121      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d11a      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d111      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	3b01      	subs	r3, #1
 8001802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0cc      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d90c      	bls.n	8001868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800188a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d044      	beq.n	800194c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d119      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e067      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 0203 	bic.w	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4934      	ldr	r1, [pc, #208]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800191c:	f7ff fa08 	bl	8000d30 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	e00a      	b.n	800193a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff fa04 	bl	8000d30 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 020c 	and.w	r2, r3, #12
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	429a      	cmp	r2, r3
 800194a:	d1eb      	bne.n	8001924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d20c      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f8be 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	080065e0 	.word	0x080065e0
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019fc:	b094      	sub	sp, #80	; 0x50
 80019fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	647b      	str	r3, [r7, #68]	; 0x44
 8001a04:	2300      	movs	r3, #0
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a08:	2300      	movs	r3, #0
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a10:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d00d      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	f200 80e1 	bhi.w	8001be4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x34>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2a:	e0db      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001a2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a30:	e0db      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a32:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a36:	e0d8      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a38:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a42:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	2200      	movs	r2, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
 8001a66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	462b      	mov	r3, r5
 8001a6e:	f04f 0000 	mov.w	r0, #0
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	0159      	lsls	r1, r3, #5
 8001a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7c:	0150      	lsls	r0, r2, #5
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4621      	mov	r1, r4
 8001a84:	1a51      	subs	r1, r2, r1
 8001a86:	6139      	str	r1, [r7, #16]
 8001a88:	4629      	mov	r1, r5
 8001a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a9c:	4659      	mov	r1, fp
 8001a9e:	018b      	lsls	r3, r1, #6
 8001aa0:	4651      	mov	r1, sl
 8001aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa6:	4651      	mov	r1, sl
 8001aa8:	018a      	lsls	r2, r1, #6
 8001aaa:	4651      	mov	r1, sl
 8001aac:	ebb2 0801 	subs.w	r8, r2, r1
 8001ab0:	4659      	mov	r1, fp
 8001ab2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aca:	4690      	mov	r8, r2
 8001acc:	4699      	mov	r9, r3
 8001ace:	4623      	mov	r3, r4
 8001ad0:	eb18 0303 	adds.w	r3, r8, r3
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	eb49 0303 	adc.w	r3, r9, r3
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aea:	4629      	mov	r1, r5
 8001aec:	024b      	lsls	r3, r1, #9
 8001aee:	4621      	mov	r1, r4
 8001af0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af4:	4621      	mov	r1, r4
 8001af6:	024a      	lsls	r2, r1, #9
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afe:	2200      	movs	r2, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b08:	f7fe fbb4 	bl	8000274 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b14:	e058      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b16:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4611      	mov	r1, r2
 8001b22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b30:	4642      	mov	r2, r8
 8001b32:	464b      	mov	r3, r9
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	0159      	lsls	r1, r3, #5
 8001b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b42:	0150      	lsls	r0, r2, #5
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4641      	mov	r1, r8
 8001b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b4e:	4649      	mov	r1, r9
 8001b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b68:	ebb2 040a 	subs.w	r4, r2, sl
 8001b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	00eb      	lsls	r3, r5, #3
 8001b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7e:	00e2      	lsls	r2, r4, #3
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	18e3      	adds	r3, r4, r3
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	eb45 0303 	adc.w	r3, r5, r3
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	61fa      	str	r2, [r7, #28]
 8001bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bbc:	f7fe fb5a 	bl	8000274 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be2:	e002      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3750      	adds	r7, #80	; 0x50
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a9b      	lsrs	r3, r3, #10
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	080065f0 	.word	0x080065f0

08001c44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	220f      	movs	r2, #15
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0203 	and.w	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_RCC_GetClockConfig+0x60>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0207 	and.w	r2, r3, #7
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	601a      	str	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f839 	bl	8001d46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 f9d8 	bl	800209c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d001      	beq.n	8001d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e04e      	b.n	8001e12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d022      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9e:	d01d      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_TIM_Base_Start_IT+0xc8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d018      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_TIM_Base_Start_IT+0xcc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d013      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00e      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d004      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <HAL_TIM_Base_Start_IT+0xdc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d111      	bne.n	8001e00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d010      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfe:	e007      	b.n	8001e10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	40000c00 	.word	0x40000c00
 8001e30:	40010400 	.word	0x40010400
 8001e34:	40014000 	.word	0x40014000
 8001e38:	40001800 	.word	0x40001800

08001e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0202 	mvn.w	r2, #2
 8001e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8ee 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8e0 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f8f1 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d122      	bne.n	8001eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d11b      	bne.n	8001eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0204 	mvn.w	r2, #4
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8c4 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8b6 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8c7 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d122      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d11b      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0208 	mvn.w	r2, #8
 8001f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2204      	movs	r2, #4
 8001f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f89a 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f88c 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f89d 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0210 	mvn.w	r2, #16
 8001f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f870 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f862 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f873 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0201 	mvn.w	r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fd88 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b80      	cmp	r3, #128	; 0x80
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d107      	bne.n	8001fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f902 	bl	80021f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002004:	2b40      	cmp	r3, #64	; 0x40
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f838 	bl	8002088 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b20      	cmp	r3, #32
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b20      	cmp	r3, #32
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0220 	mvn.w	r2, #32
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8cc 	bl	80021dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a40      	ldr	r2, [pc, #256]	; (80021b0 <TIM_Base_SetConfig+0x114>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ba:	d00f      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a3d      	ldr	r2, [pc, #244]	; (80021b4 <TIM_Base_SetConfig+0x118>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00b      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a3c      	ldr	r2, [pc, #240]	; (80021b8 <TIM_Base_SetConfig+0x11c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d007      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3b      	ldr	r2, [pc, #236]	; (80021bc <TIM_Base_SetConfig+0x120>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3a      	ldr	r2, [pc, #232]	; (80021c0 <TIM_Base_SetConfig+0x124>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d108      	bne.n	80020ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a2f      	ldr	r2, [pc, #188]	; (80021b0 <TIM_Base_SetConfig+0x114>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02b      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d027      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <TIM_Base_SetConfig+0x118>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d023      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2b      	ldr	r2, [pc, #172]	; (80021b8 <TIM_Base_SetConfig+0x11c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01f      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2a      	ldr	r2, [pc, #168]	; (80021bc <TIM_Base_SetConfig+0x120>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01b      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <TIM_Base_SetConfig+0x124>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d017      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <TIM_Base_SetConfig+0x128>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <TIM_Base_SetConfig+0x12c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00f      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a26      	ldr	r2, [pc, #152]	; (80021cc <TIM_Base_SetConfig+0x130>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00b      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <TIM_Base_SetConfig+0x134>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <TIM_Base_SetConfig+0x138>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d003      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <TIM_Base_SetConfig+0x13c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d108      	bne.n	8002160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <TIM_Base_SetConfig+0x114>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_Base_SetConfig+0xf8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <TIM_Base_SetConfig+0x124>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d103      	bne.n	800219c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	615a      	str	r2, [r3, #20]
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40000c00 	.word	0x40000c00
 80021c0:	40010400 	.word	0x40010400
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40014400 	.word	0x40014400
 80021cc:	40014800 	.word	0x40014800
 80021d0:	40001800 	.word	0x40001800
 80021d4:	40001c00 	.word	0x40001c00
 80021d8:	40002000 	.word	0x40002000

080021dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f103 0208 	add.w	r2, r3, #8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800221c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f103 0208 	add.w	r2, r3, #8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f103 0208 	add.w	r2, r3, #8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022bc:	d103      	bne.n	80022c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e00c      	b.n	80022e0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3308      	adds	r3, #8
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e002      	b.n	80022d4 <vListInsert+0x2e>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d2f6      	bcs.n	80022ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	601a      	str	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6892      	ldr	r2, [r2, #8]
 800232e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6852      	ldr	r2, [r2, #4]
 8002338:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d103      	bne.n	800234c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <xQueueGenericReset+0x2a>
        __asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	60bb      	str	r3, [r7, #8]
    }
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002396:	f002 f9f5 	bl	8004784 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	68f9      	ldr	r1, [r7, #12]
 80023a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	441a      	add	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	3b01      	subs	r3, #1
 80023c8:	68f9      	ldr	r1, [r7, #12]
 80023ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	441a      	add	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	22ff      	movs	r2, #255	; 0xff
 80023e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00f      	beq.n	8002414 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3310      	adds	r3, #16
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 fa43 	bl	8003884 <xTaskRemoveFromEventList>
 80023fe:	e009      	b.n	8002414 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3310      	adds	r3, #16
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fefd 	bl	8002204 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3324      	adds	r3, #36	; 0x24
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fef8 	bl	8002204 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002414:	f002 f9e6 	bl	80047e4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002422:	b580      	push	{r7, lr}
 8002424:	b08c      	sub	sp, #48	; 0x30
 8002426:	af02      	add	r7, sp, #8
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	4613      	mov	r3, r2
 800242e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <xQueueGenericCreate+0x2a>
        __asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	61bb      	str	r3, [r7, #24]
    }
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <xQueueGenericCreate+0x48>
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	429a      	cmp	r2, r3
 8002468:	d101      	bne.n	800246e <xQueueGenericCreate+0x4c>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <xQueueGenericCreate+0x4e>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <xQueueGenericCreate+0x68>
        __asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	617b      	str	r3, [r7, #20]
    }
 8002486:	bf00      	nop
 8002488:	e7fe      	b.n	8002488 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002490:	d90a      	bls.n	80024a8 <xQueueGenericCreate+0x86>
        __asm volatile
 8002492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	613b      	str	r3, [r7, #16]
    }
 80024a4:	bf00      	nop
 80024a6:	e7fe      	b.n	80024a6 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	3350      	adds	r3, #80	; 0x50
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fa95 	bl	80049dc <pvPortMalloc>
 80024b2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3350      	adds	r3, #80	; 0x50
 80024c2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024c4:	79fa      	ldrb	r2, [r7, #7]
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f805 	bl	80024e0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80024d6:	6a3b      	ldr	r3, [r7, #32]
    }
 80024d8:	4618      	mov	r0, r3
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e002      	b.n	8002502 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800250e:	2101      	movs	r1, #1
 8002510:	69b8      	ldr	r0, [r7, #24]
 8002512:	f7ff ff2b 	bl	800236c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	2073      	movs	r0, #115	; 0x73
 8002526:	f003 f909 	bl	800573c <SEGGER_SYSVIEW_RecordU32x3>
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b090      	sub	sp, #64	; 0x40
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <xQueueGenericSend+0x32>
        __asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002562:	bf00      	nop
 8002564:	e7fe      	b.n	8002564 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <xQueueGenericSend+0x40>
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <xQueueGenericSend+0x44>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <xQueueGenericSend+0x46>
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <xQueueGenericSend+0x60>
        __asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002590:	bf00      	nop
 8002592:	e7fe      	b.n	8002592 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d103      	bne.n	80025a2 <xQueueGenericSend+0x6e>
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <xQueueGenericSend+0x72>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <xQueueGenericSend+0x74>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xQueueGenericSend+0x8e>
        __asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	623b      	str	r3, [r7, #32]
    }
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025c2:	f001 fb09 	bl	8003bd8 <xTaskGetSchedulerState>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <xQueueGenericSend+0x9e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <xQueueGenericSend+0xa2>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <xQueueGenericSend+0xa4>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <xQueueGenericSend+0xbe>
        __asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	61fb      	str	r3, [r7, #28]
    }
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025f2:	f002 f8c7 	bl	8004784 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <xQueueGenericSend+0xd4>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d11f      	bne.n	8002648 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fdfe 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	460b      	mov	r3, r1
 800261a:	4601      	mov	r1, r0
 800261c:	205a      	movs	r0, #90	; 0x5a
 800261e:	f003 f903 	bl	8005828 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002628:	f000 fa56 	bl	8002ad8 <prvCopyDataToQueue>
 800262c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	3324      	adds	r3, #36	; 0x24
 800263a:	4618      	mov	r0, r3
 800263c:	f001 f922 	bl	8003884 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002640:	f002 f8d0 	bl	80047e4 <vPortExitCritical>
                return pdPASS;
 8002644:	2301      	movs	r3, #1
 8002646:	e07d      	b.n	8002744 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d110      	bne.n	8002670 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800264e:	f002 f8c9 	bl	80047e4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fdd9 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	460b      	mov	r3, r1
 8002664:	4601      	mov	r1, r0
 8002666:	205a      	movs	r0, #90	; 0x5a
 8002668:	f003 f8de 	bl	8005828 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800266c:	2300      	movs	r3, #0
 800266e:	e069      	b.n	8002744 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4618      	mov	r0, r3
 800267c:	f001 f968 	bl	8003950 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002680:	2301      	movs	r3, #1
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002684:	f002 f8ae 	bl	80047e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002688:	f000 fe22 	bl	80032d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800268c:	f002 f87a 	bl	8004784 <vPortEnterCritical>
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002696:	b25b      	sxtb	r3, r3
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269c:	d103      	bne.n	80026a6 <xQueueGenericSend+0x172>
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b2:	d103      	bne.n	80026bc <xQueueGenericSend+0x188>
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026bc:	f002 f892 	bl	80047e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026c0:	1d3a      	adds	r2, r7, #4
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 f957 	bl	800397c <xTaskCheckForTimeOut>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d124      	bne.n	800271e <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d6:	f000 faf7 	bl	8002cc8 <prvIsQueueFull>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d018      	beq.n	8002712 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	3310      	adds	r3, #16
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 f879 	bl	80037e0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f0:	f000 fa82 	bl	8002bf8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026f4:	f000 fdfa 	bl	80032ec <xTaskResumeAll>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f47f af79 	bne.w	80025f2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <xQueueGenericSend+0x218>)
 8002702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	e76f      	b.n	80025f2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002714:	f000 fa70 	bl	8002bf8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002718:	f000 fde8 	bl	80032ec <xTaskResumeAll>
 800271c:	e769      	b.n	80025f2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800271e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002720:	f000 fa6a 	bl	8002bf8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002724:	f000 fde2 	bl	80032ec <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	4618      	mov	r0, r3
 800272c:	f003 fd6e 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	460b      	mov	r3, r1
 800273a:	4601      	mov	r1, r0
 800273c:	205a      	movs	r0, #90	; 0x5a
 800273e:	f003 f873 	bl	8005828 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002742:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002744:	4618      	mov	r0, r3
 8002746:	3738      	adds	r7, #56	; 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	e000ed04 	.word	0xe000ed04

08002750 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b090      	sub	sp, #64	; 0x40
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <xQueueGenericSendFromISR+0x3c>
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <xQueueGenericSendFromISR+0x40>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <xQueueGenericSendFromISR+0x42>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80027a8:	bf00      	nop
 80027aa:	e7fe      	b.n	80027aa <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d103      	bne.n	80027ba <xQueueGenericSendFromISR+0x6a>
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <xQueueGenericSendFromISR+0x6e>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <xQueueGenericSendFromISR+0x70>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	623b      	str	r3, [r7, #32]
    }
 80027d6:	bf00      	nop
 80027d8:	e7fe      	b.n	80027d8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027da:	f002 f8bf 	bl	800495c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80027de:	f3ef 8211 	mrs	r2, BASEPRI
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	61fa      	str	r2, [r7, #28]
 80027f4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027f6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <xQueueGenericSendFromISR+0xbc>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d148      	bne.n	800289e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	4618      	mov	r0, r3
 8002820:	f003 fcf4 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 8002824:	4601      	mov	r1, r0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	461a      	mov	r2, r3
 800282a:	2060      	movs	r0, #96	; 0x60
 800282c:	f002 ff2c 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002836:	f000 f94f 	bl	8002ad8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800283a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002842:	d112      	bne.n	800286a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d025      	beq.n	8002898 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	3324      	adds	r3, #36	; 0x24
 8002850:	4618      	mov	r0, r3
 8002852:	f001 f817 	bl	8003884 <xTaskRemoveFromEventList>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01d      	beq.n	8002898 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01a      	beq.n	8002898 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e016      	b.n	8002898 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800286a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800286e:	2b7f      	cmp	r3, #127	; 0x7f
 8002870:	d10a      	bne.n	8002888 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	617b      	str	r3, [r7, #20]
    }
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002888:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800288c:	3301      	adds	r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	b25a      	sxtb	r2, r3
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002898:	2301      	movs	r3, #1
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800289c:	e00b      	b.n	80028b6 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 fcb3 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 80028a6:	4601      	mov	r1, r0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	461a      	mov	r2, r3
 80028ac:	2060      	movs	r0, #96	; 0x60
 80028ae:	f002 feeb 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80028c0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80028c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3740      	adds	r7, #64	; 0x40
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b08f      	sub	sp, #60	; 0x3c
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <xQueueReceive+0x30>
        __asm volatile
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	623b      	str	r3, [r7, #32]
    }
 80028f8:	bf00      	nop
 80028fa:	e7fe      	b.n	80028fa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <xQueueReceive+0x3e>
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <xQueueReceive+0x42>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <xQueueReceive+0x44>
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <xQueueReceive+0x5e>
        __asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	61fb      	str	r3, [r7, #28]
    }
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800292a:	f001 f955 	bl	8003bd8 <xTaskGetSchedulerState>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <xQueueReceive+0x6e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <xQueueReceive+0x72>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <xQueueReceive+0x74>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <xQueueReceive+0x8e>
        __asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	61bb      	str	r3, [r7, #24]
    }
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800295a:	f001 ff13 	bl	8004784 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d024      	beq.n	80029b4 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800296e:	f000 f91d 	bl	8002bac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fc49 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 800297a:	4604      	mov	r4, r0
 800297c:	2000      	movs	r0, #0
 800297e:	f003 fc45 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 8002982:	4602      	mov	r2, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2101      	movs	r1, #1
 8002988:	9100      	str	r1, [sp, #0]
 800298a:	4621      	mov	r1, r4
 800298c:	205c      	movs	r0, #92	; 0x5c
 800298e:	f002 ff4b 	bl	8005828 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	1e5a      	subs	r2, r3, #1
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	3310      	adds	r3, #16
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 ff6c 	bl	8003884 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80029ac:	f001 ff1a 	bl	80047e4 <vPortExitCritical>
                return pdPASS;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e08a      	b.n	8002aca <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d113      	bne.n	80029e2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029ba:	f001 ff13 	bl	80047e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fc23 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 80029c6:	4604      	mov	r4, r0
 80029c8:	2000      	movs	r0, #0
 80029ca:	f003 fc1f 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 80029ce:	4602      	mov	r2, r0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2101      	movs	r1, #1
 80029d4:	9100      	str	r1, [sp, #0]
 80029d6:	4621      	mov	r1, r4
 80029d8:	205c      	movs	r0, #92	; 0x5c
 80029da:	f002 ff25 	bl	8005828 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029de:	2300      	movs	r3, #0
 80029e0:	e073      	b.n	8002aca <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 ffaf 	bl	8003950 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029f2:	2301      	movs	r3, #1
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029f6:	f001 fef5 	bl	80047e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029fa:	f000 fc69 	bl	80032d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029fe:	f001 fec1 	bl	8004784 <vPortEnterCritical>
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a0e:	d103      	bne.n	8002a18 <xQueueReceive+0x14c>
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a1e:	b25b      	sxtb	r3, r3
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a24:	d103      	bne.n	8002a2e <xQueueReceive+0x162>
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a2e:	f001 fed9 	bl	80047e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a32:	1d3a      	adds	r2, r7, #4
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 ff9e 	bl	800397c <xTaskCheckForTimeOut>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d124      	bne.n	8002a90 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a48:	f000 f928 	bl	8002c9c <prvIsQueueEmpty>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d018      	beq.n	8002a84 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	3324      	adds	r3, #36	; 0x24
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fec0 	bl	80037e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a62:	f000 f8c9 	bl	8002bf8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a66:	f000 fc41 	bl	80032ec <xTaskResumeAll>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f af74 	bne.w	800295a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <xQueueReceive+0x208>)
 8002a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	e76a      	b.n	800295a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a86:	f000 f8b7 	bl	8002bf8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a8a:	f000 fc2f 	bl	80032ec <xTaskResumeAll>
 8002a8e:	e764      	b.n	800295a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a92:	f000 f8b1 	bl	8002bf8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a96:	f000 fc29 	bl	80032ec <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9c:	f000 f8fe 	bl	8002c9c <prvIsQueueEmpty>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f43f af59 	beq.w	800295a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fbae 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f003 fbaa 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2101      	movs	r1, #1
 8002abe:	9100      	str	r1, [sp, #0]
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	205c      	movs	r0, #92	; 0x5c
 8002ac4:	f002 feb0 	bl	8005828 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002ac8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3734      	adds	r7, #52	; 0x34
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd90      	pop	{r4, r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10d      	bne.n	8002b12 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d14d      	bne.n	8002b9a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f886 	bl	8003c14 <xTaskPriorityDisinherit>
 8002b08:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e043      	b.n	8002b9a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d119      	bne.n	8002b4c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6858      	ldr	r0, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	461a      	mov	r2, r3
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	f003 fcee 	bl	8006504 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	441a      	add	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d32b      	bcc.n	8002b9a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	e026      	b.n	8002b9a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68d8      	ldr	r0, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	461a      	mov	r2, r3
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	f003 fcd4 	bl	8006504 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	425b      	negs	r3, r3
 8002b66:	441a      	add	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d207      	bcs.n	8002b88 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	425b      	negs	r3, r3
 8002b82:	441a      	add	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d105      	bne.n	8002b9a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002ba2:	697b      	ldr	r3, [r7, #20]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d018      	beq.n	8002bf0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	441a      	add	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d303      	bcc.n	8002be0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68d9      	ldr	r1, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	461a      	mov	r2, r3
 8002bea:	6838      	ldr	r0, [r7, #0]
 8002bec:	f003 fc8a 	bl	8006504 <memcpy>
    }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c00:	f001 fdc0 	bl	8004784 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c0a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c0c:	e011      	b.n	8002c32 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3324      	adds	r3, #36	; 0x24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fe32 	bl	8003884 <xTaskRemoveFromEventList>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002c26:	f000 ff0f 	bl	8003a48 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	dce9      	bgt.n	8002c0e <prvUnlockQueue+0x16>
 8002c3a:	e000      	b.n	8002c3e <prvUnlockQueue+0x46>
                        break;
 8002c3c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	22ff      	movs	r2, #255	; 0xff
 8002c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002c46:	f001 fdcd 	bl	80047e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c4a:	f001 fd9b 	bl	8004784 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c54:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c56:	e011      	b.n	8002c7c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3310      	adds	r3, #16
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fe0d 	bl	8003884 <xTaskRemoveFromEventList>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c70:	f000 feea 	bl	8003a48 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c74:	7bbb      	ldrb	r3, [r7, #14]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	dce9      	bgt.n	8002c58 <prvUnlockQueue+0x60>
 8002c84:	e000      	b.n	8002c88 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c86:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	22ff      	movs	r2, #255	; 0xff
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c90:	f001 fda8 	bl	80047e4 <vPortExitCritical>
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ca4:	f001 fd6e 	bl	8004784 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e001      	b.n	8002cba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cba:	f001 fd93 	bl	80047e4 <vPortExitCritical>

    return xReturn;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002cd0:	f001 fd58 	bl	8004784 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d102      	bne.n	8002ce6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	e001      	b.n	8002cea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cea:	f001 fd7b 	bl	80047e4 <vPortExitCritical>

    return xReturn;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e01e      	b.n	8002d46 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d08:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <vQueueAddToRegistry+0x60>)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d115      	bne.n	8002d40 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d14:	4910      	ldr	r1, [pc, #64]	; (8002d58 <vQueueAddToRegistry+0x60>)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <vQueueAddToRegistry+0x60>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 fa6d 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 8002d32:	4601      	mov	r1, r0
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	2071      	movs	r0, #113	; 0x71
 8002d3a:	f002 fca5 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002d3e:	e006      	b.n	8002d4e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	d9dd      	bls.n	8002d08 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000080 	.word	0x20000080

08002d5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d6c:	f001 fd0a 	bl	8004784 <vPortEnterCritical>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7c:	d103      	bne.n	8002d86 <vQueueWaitForMessageRestricted+0x2a>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d92:	d103      	bne.n	8002d9c <vQueueWaitForMessageRestricted+0x40>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d9c:	f001 fd22 	bl	80047e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3324      	adds	r3, #36	; 0x24
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fd39 	bl	8003828 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7ff ff1e 	bl	8002bf8 <prvUnlockQueue>
    }
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	; 0x30
 8002dc8:	af04      	add	r7, sp, #16
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 fdff 	bl	80049dc <pvPortMalloc>
 8002dde:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00e      	beq.n	8002e04 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002de6:	2058      	movs	r0, #88	; 0x58
 8002de8:	f001 fdf8 	bl	80049dc <pvPortMalloc>
 8002dec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dfa:	e005      	b.n	8002e08 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002dfc:	6978      	ldr	r0, [r7, #20]
 8002dfe:	f001 fecd 	bl	8004b9c <vPortFree>
 8002e02:	e001      	b.n	8002e08 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d013      	beq.n	8002e36 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	2300      	movs	r3, #0
 8002e12:	9303      	str	r3, [sp, #12]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	9302      	str	r3, [sp, #8]
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f80e 	bl	8002e46 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e2a:	69f8      	ldr	r0, [r7, #28]
 8002e2c:	f000 f8a2 	bl	8002f74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e30:	2301      	movs	r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e002      	b.n	8002e3c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e3a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
    }
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b088      	sub	sp, #32
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	21a5      	movs	r1, #165	; 0xa5
 8002e60:	f003 fb5e 	bl	8006520 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f023 0307 	bic.w	r3, r3, #7
 8002e7c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	617b      	str	r3, [r7, #20]
    }
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01f      	beq.n	8002ee4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	e012      	b.n	8002ed0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	7819      	ldrb	r1, [r3, #0]
 8002eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3334      	adds	r3, #52	; 0x34
 8002eba:	460a      	mov	r2, r1
 8002ebc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	d9e9      	bls.n	8002eaa <prvInitialiseNewTask+0x64>
 8002ed6:	e000      	b.n	8002eda <prvInitialiseNewTask+0x94>
            {
                break;
 8002ed8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ee2:	e003      	b.n	8002eec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d901      	bls.n	8002ef6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f00:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	2200      	movs	r2, #0
 8002f06:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f999 	bl	8002244 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	3318      	adds	r3, #24
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f994 	bl	8002244 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	f1c3 0205 	rsb	r2, r3, #5
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	3350      	adds	r3, #80	; 0x50
 8002f36:	2204      	movs	r2, #4
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 faf0 	bl	8006520 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	3354      	adds	r3, #84	; 0x54
 8002f44:	2201      	movs	r2, #1
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fae9 	bl	8006520 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	69b8      	ldr	r0, [r7, #24]
 8002f54:	f001 fa68 	bl	8004428 <pxPortInitialiseStack>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f6a:	bf00      	nop
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f74:	b5b0      	push	{r4, r5, r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f7c:	f001 fc02 	bl	8004784 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f80:	4b35      	ldr	r3, [pc, #212]	; (8003058 <prvAddNewTaskToReadyList+0xe4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	4a34      	ldr	r2, [pc, #208]	; (8003058 <prvAddNewTaskToReadyList+0xe4>)
 8002f88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <prvAddNewTaskToReadyList+0xe8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f92:	4a32      	ldr	r2, [pc, #200]	; (800305c <prvAddNewTaskToReadyList+0xe8>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f98:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <prvAddNewTaskToReadyList+0xe4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d110      	bne.n	8002fc2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002fa0:	f000 fd70 	bl	8003a84 <prvInitialiseTaskLists>
 8002fa4:	e00d      	b.n	8002fc2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002fa6:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <prvAddNewTaskToReadyList+0xec>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fae:	4b2b      	ldr	r3, [pc, #172]	; (800305c <prvAddNewTaskToReadyList+0xe8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d802      	bhi.n	8002fc2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <prvAddNewTaskToReadyList+0xe8>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002fc2:	4b28      	ldr	r3, [pc, #160]	; (8003064 <prvAddNewTaskToReadyList+0xf0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a26      	ldr	r2, [pc, #152]	; (8003064 <prvAddNewTaskToReadyList+0xf0>)
 8002fca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <prvAddNewTaskToReadyList+0xf0>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <prvAddNewTaskToReadyList+0x94>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f002 ffef 	bl	8005fc0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	1ae3      	subs	r3, r4, r3
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	462b      	mov	r3, r5
 8003004:	f001 fee8 	bl	8004dd8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4618      	mov	r0, r3
 800300c:	f003 f85c 	bl	80060c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	2201      	movs	r2, #1
 8003016:	409a      	lsls	r2, r3
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <prvAddNewTaskToReadyList+0xf4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4313      	orrs	r3, r2
 800301e:	4a12      	ldr	r2, [pc, #72]	; (8003068 <prvAddNewTaskToReadyList+0xf4>)
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4a0f      	ldr	r2, [pc, #60]	; (800306c <prvAddNewTaskToReadyList+0xf8>)
 8003030:	441a      	add	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f7ff f910 	bl	800225e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800303e:	f001 fbd1 	bl	80047e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <prvAddNewTaskToReadyList+0xec>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800304a:	4b04      	ldr	r3, [pc, #16]	; (800305c <prvAddNewTaskToReadyList+0xe8>)
 800304c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bdb0      	pop	{r4, r5, r7, pc}
 8003056:	bf00      	nop
 8003058:	20000198 	.word	0x20000198
 800305c:	200000c0 	.word	0x200000c0
 8003060:	200001a4 	.word	0x200001a4
 8003064:	200001b4 	.word	0x200001b4
 8003068:	200001a0 	.word	0x200001a0
 800306c:	200000c4 	.word	0x200000c4

08003070 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8003078:	f001 fb84 	bl	8004784 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <uxTaskPriorityGet+0x18>
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <uxTaskPriorityGet+0x30>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	e000      	b.n	800308a <uxTaskPriorityGet+0x1a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8003092:	f001 fba7 	bl	80047e4 <vPortExitCritical>

        return uxReturn;
 8003096:	68bb      	ldr	r3, [r7, #8]
    }
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	200000c0 	.word	0x200000c0

080030a4 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d90a      	bls.n	80030ce <vTaskPrioritySet+0x2a>
        __asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	60fb      	str	r3, [r7, #12]
    }
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d901      	bls.n	80030d8 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030d4:	2304      	movs	r3, #4
 80030d6:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80030d8:	f001 fb54 	bl	8004784 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <vTaskPrioritySet+0x44>
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <vTaskPrioritySet+0x15c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	e000      	b.n	80030ea <vTaskPrioritySet+0x46>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 f88c 	bl	800620c <SEGGER_SYSVIEW_ShrinkId>
 80030f4:	4603      	mov	r3, r0
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	2028      	movs	r0, #40	; 0x28
 80030fc:	f002 fac4 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x2>
 8003100:	69b8      	ldr	r0, [r7, #24]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	461a      	mov	r2, r3
 800310e:	2300      	movs	r3, #0
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	f001 fec7 	bl	8004ea8 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311e:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d064      	beq.n	80031f2 <vTaskPrioritySet+0x14e>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	429a      	cmp	r2, r3
 800312e:	d90d      	bls.n	800314c <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 8003130:	4b33      	ldr	r3, [pc, #204]	; (8003200 <vTaskPrioritySet+0x15c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	429a      	cmp	r2, r3
 8003138:	d00f      	beq.n	800315a <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <vTaskPrioritySet+0x15c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d309      	bcc.n	800315a <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 8003146:	2301      	movs	r3, #1
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e006      	b.n	800315a <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 800314c:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <vTaskPrioritySet+0x15c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	429a      	cmp	r2, r3
 8003154:	d101      	bne.n	800315a <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8003156:	2301      	movs	r3, #1
 8003158:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d102      	bne.n	8003172 <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	db04      	blt.n	800318a <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f1c3 0205 	rsb	r2, r3, #5
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	6959      	ldr	r1, [r3, #20]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <vTaskPrioritySet+0x160>)
 800319a:	4413      	add	r3, r2
 800319c:	4299      	cmp	r1, r3
 800319e:	d128      	bne.n	80031f2 <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f8b7 	bl	8002318 <uxListRemove>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80031b0:	2201      	movs	r2, #1
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43da      	mvns	r2, r3
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <vTaskPrioritySet+0x164>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4013      	ands	r3, r2
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <vTaskPrioritySet+0x164>)
 80031c2:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2201      	movs	r2, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <vTaskPrioritySet+0x164>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <vTaskPrioritySet+0x164>)
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <vTaskPrioritySet+0x160>)
 80031e4:	441a      	add	r2, r3
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7ff f836 	bl	800225e <vListInsertEnd>
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80031f2:	f001 faf7 	bl	80047e4 <vPortExitCritical>
    }
 80031f6:	bf00      	nop
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200000c0 	.word	0x200000c0
 8003204:	200000c4 	.word	0x200000c4
 8003208:	200001a0 	.word	0x200001a0

0800320c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003212:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <vTaskStartScheduler+0xa4>)
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	2300      	movs	r3, #0
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	2282      	movs	r2, #130	; 0x82
 800321e:	4925      	ldr	r1, [pc, #148]	; (80032b4 <vTaskStartScheduler+0xa8>)
 8003220:	4825      	ldr	r0, [pc, #148]	; (80032b8 <vTaskStartScheduler+0xac>)
 8003222:	f7ff fdcf 	bl	8002dc4 <xTaskCreate>
 8003226:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800322e:	f000 fde9 	bl	8003e04 <xTimerCreateTimerTask>
 8003232:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d124      	bne.n	8003284 <vTaskStartScheduler+0x78>
        __asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	60bb      	str	r3, [r7, #8]
    }
 800324c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800324e:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <vTaskStartScheduler+0xb0>)
 8003250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003254:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <vTaskStartScheduler+0xb4>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <vTaskStartScheduler+0xb8>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <vTaskStartScheduler+0xbc>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <vTaskStartScheduler+0xa4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d102      	bne.n	8003274 <vTaskStartScheduler+0x68>
 800326e:	f002 fe8b 	bl	8005f88 <SEGGER_SYSVIEW_OnIdle>
 8003272:	e004      	b.n	800327e <vTaskStartScheduler+0x72>
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <vTaskStartScheduler+0xbc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f002 fee3 	bl	8006044 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800327e:	f001 f961 	bl	8004544 <xPortStartScheduler>
 8003282:	e00e      	b.n	80032a2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328a:	d10a      	bne.n	80032a2 <vTaskStartScheduler+0x96>
        __asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	607b      	str	r3, [r7, #4]
    }
 800329e:	bf00      	nop
 80032a0:	e7fe      	b.n	80032a0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <vTaskStartScheduler+0xc0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200001bc 	.word	0x200001bc
 80032b4:	08006558 	.word	0x08006558
 80032b8:	08003a61 	.word	0x08003a61
 80032bc:	200001b8 	.word	0x200001b8
 80032c0:	200001a4 	.word	0x200001a4
 80032c4:	2000019c 	.word	0x2000019c
 80032c8:	200000c0 	.word	0x200000c0
 80032cc:	2000000c 	.word	0x2000000c

080032d0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <vTaskSuspendAll+0x18>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <vTaskSuspendAll+0x18>)
 80032dc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	200001c0 	.word	0x200001c0

080032ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <xTaskResumeAll+0x104>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <xTaskResumeAll+0x2c>
        __asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	603b      	str	r3, [r7, #0]
    }
 8003314:	bf00      	nop
 8003316:	e7fe      	b.n	8003316 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003318:	f001 fa34 	bl	8004784 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800331c:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <xTaskResumeAll+0x104>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3b01      	subs	r3, #1
 8003322:	4a33      	ldr	r2, [pc, #204]	; (80033f0 <xTaskResumeAll+0x104>)
 8003324:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003326:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <xTaskResumeAll+0x104>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d159      	bne.n	80033e2 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <xTaskResumeAll+0x108>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d055      	beq.n	80033e2 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003336:	e032      	b.n	800339e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <xTaskResumeAll+0x10c>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3318      	adds	r3, #24
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe ffe7 	bl	8002318 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3304      	adds	r3, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe ffe2 	bl	8002318 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4618      	mov	r0, r3
 8003358:	f002 feb6 	bl	80060c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <xTaskResumeAll+0x110>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4313      	orrs	r3, r2
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <xTaskResumeAll+0x110>)
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <xTaskResumeAll+0x114>)
 800337c:	441a      	add	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3304      	adds	r3, #4
 8003382:	4619      	mov	r1, r3
 8003384:	4610      	mov	r0, r2
 8003386:	f7fe ff6a 	bl	800225e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <xTaskResumeAll+0x118>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <xTaskResumeAll+0x11c>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <xTaskResumeAll+0x10c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1c8      	bne.n	8003338 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033ac:	f000 fbe8 	bl	8003b80 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <xTaskResumeAll+0x120>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80033bc:	f000 f90c 	bl	80035d8 <xTaskIncrementTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <xTaskResumeAll+0x11c>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f1      	bne.n	80033bc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <xTaskResumeAll+0x120>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <xTaskResumeAll+0x11c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80033e2:	f001 f9ff 	bl	80047e4 <vPortExitCritical>

    return xAlreadyYielded;
 80033e6:	687b      	ldr	r3, [r7, #4]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	200001c0 	.word	0x200001c0
 80033f4:	20000198 	.word	0x20000198
 80033f8:	20000158 	.word	0x20000158
 80033fc:	200001a0 	.word	0x200001a0
 8003400:	200000c4 	.word	0x200000c4
 8003404:	200000c0 	.word	0x200000c0
 8003408:	200001ac 	.word	0x200001ac
 800340c:	200001a8 	.word	0x200001a8

08003410 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <xTaskGetTickCount+0x1c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800341c:	687b      	ldr	r3, [r7, #4]
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	2000019c 	.word	0x2000019c

08003430 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8003430:	b480      	push	{r7}
 8003432:	b08b      	sub	sp, #44	; 0x2c
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d05b      	beq.n	80034fe <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	3308      	adds	r3, #8
 800345c:	429a      	cmp	r2, r3
 800345e:	d104      	bne.n	800346a <prvSearchForNameWithinSingleList+0x3a>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	3308      	adds	r3, #8
 8003488:	429a      	cmp	r2, r3
 800348a:	d104      	bne.n	8003496 <prvSearchForNameWithinSingleList+0x66>
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034a2:	2300      	movs	r3, #0
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	e01c      	b.n	80034e2 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	4413      	add	r3, r2
 80034ae:	3334      	adds	r3, #52	; 0x34
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	4413      	add	r3, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	7afa      	ldrb	r2, [r7, #11]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d002      	beq.n	80034c8 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 80034c2:	2301      	movs	r3, #1
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e006      	b.n	80034d6 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 80034c8:	7afb      	ldrb	r3, [r7, #11]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 80034d2:	2301      	movs	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	3301      	adds	r3, #1
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d9df      	bls.n	80034a8 <prvSearchForNameWithinSingleList+0x78>
 80034e8:	e000      	b.n	80034ec <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 80034ea:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d104      	bne.n	80034fc <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d1bb      	bne.n	8003472 <prvSearchForNameWithinSingleList+0x42>
 80034fa:	e000      	b.n	80034fe <prvSearchForNameWithinSingleList+0xce>
                    break;
 80034fc:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003500:	4618      	mov	r0, r3
 8003502:	372c      	adds	r7, #44	; 0x2c
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003514:	2305      	movs	r3, #5
 8003516:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fc fea3 	bl	8000264 <strlen>
 800351e:	4603      	mov	r3, r0
 8003520:	2b09      	cmp	r3, #9
 8003522:	d90a      	bls.n	800353a <xTaskGetHandle+0x2e>
        __asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	60fb      	str	r3, [r7, #12]
    }
 8003536:	bf00      	nop
 8003538:	e7fe      	b.n	8003538 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 800353a:	f7ff fec9 	bl	80032d0 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3b01      	subs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <xTaskGetHandle+0xb8>)
 8003550:	4413      	add	r3, r2
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff6b 	bl	8003430 <prvSearchForNameWithinSingleList>
 800355a:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ea      	bne.n	800353e <xTaskGetHandle+0x32>
 8003568:	e000      	b.n	800356c <xTaskGetHandle+0x60>
                    break;
 800356a:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <xTaskGetHandle+0xbc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff59 	bl	8003430 <prvSearchForNameWithinSingleList>
 800357e:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <xTaskGetHandle+0xc0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff4f 	bl	8003430 <prvSearchForNameWithinSingleList>
 8003592:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <xTaskGetHandle+0xc4>)
 800359e:	f7ff ff47 	bl	8003430 <prvSearchForNameWithinSingleList>
 80035a2:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4809      	ldr	r0, [pc, #36]	; (80035d4 <xTaskGetHandle+0xc8>)
 80035ae:	f7ff ff3f 	bl	8003430 <prvSearchForNameWithinSingleList>
 80035b2:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 80035b4:	f7ff fe9a 	bl	80032ec <xTaskResumeAll>

        return pxTCB;
 80035b8:	693b      	ldr	r3, [r7, #16]
    }
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200000c4 	.word	0x200000c4
 80035c8:	20000150 	.word	0x20000150
 80035cc:	20000154 	.word	0x20000154
 80035d0:	20000184 	.word	0x20000184
 80035d4:	2000016c 	.word	0x2000016c

080035d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e2:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <xTaskIncrementTick+0x110>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d173      	bne.n	80036d2 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035ea:	4b40      	ldr	r3, [pc, #256]	; (80036ec <xTaskIncrementTick+0x114>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80035f2:	4a3e      	ldr	r2, [pc, #248]	; (80036ec <xTaskIncrementTick+0x114>)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d120      	bne.n	8003640 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80035fe:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <xTaskIncrementTick+0x118>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <xTaskIncrementTick+0x46>
        __asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	603b      	str	r3, [r7, #0]
    }
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTaskIncrementTick+0x44>
 800361e:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <xTaskIncrementTick+0x118>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	4b33      	ldr	r3, [pc, #204]	; (80036f4 <xTaskIncrementTick+0x11c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <xTaskIncrementTick+0x118>)
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <xTaskIncrementTick+0x11c>)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <xTaskIncrementTick+0x120>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a2f      	ldr	r2, [pc, #188]	; (80036f8 <xTaskIncrementTick+0x120>)
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	f000 faa0 	bl	8003b80 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003640:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <xTaskIncrementTick+0x124>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	429a      	cmp	r2, r3
 8003648:	d348      	bcc.n	80036dc <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800364a:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <xTaskIncrementTick+0x118>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d104      	bne.n	800365e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003654:	4b29      	ldr	r3, [pc, #164]	; (80036fc <xTaskIncrementTick+0x124>)
 8003656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800365a:	601a      	str	r2, [r3, #0]
                    break;
 800365c:	e03e      	b.n	80036dc <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <xTaskIncrementTick+0x118>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	d203      	bcs.n	800367e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <xTaskIncrementTick+0x124>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800367c:	e02e      	b.n	80036dc <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3304      	adds	r3, #4
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fe48 	bl	8002318 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3318      	adds	r3, #24
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe fe3f 	bl	8002318 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fd13 	bl	80060c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	2201      	movs	r2, #1
 80036a8:	409a      	lsls	r2, r3
 80036aa:	4b15      	ldr	r3, [pc, #84]	; (8003700 <xTaskIncrementTick+0x128>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <xTaskIncrementTick+0x128>)
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4a10      	ldr	r2, [pc, #64]	; (8003704 <xTaskIncrementTick+0x12c>)
 80036c2:	441a      	add	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f7fe fdc7 	bl	800225e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d0:	e7bb      	b.n	800364a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <xTaskIncrementTick+0x130>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <xTaskIncrementTick+0x130>)
 80036da:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80036dc:	697b      	ldr	r3, [r7, #20]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200001c0 	.word	0x200001c0
 80036ec:	2000019c 	.word	0x2000019c
 80036f0:	20000150 	.word	0x20000150
 80036f4:	20000154 	.word	0x20000154
 80036f8:	200001b0 	.word	0x200001b0
 80036fc:	200001b8 	.word	0x200001b8
 8003700:	200001a0 	.word	0x200001a0
 8003704:	200000c4 	.word	0x200000c4
 8003708:	200001a8 	.word	0x200001a8

0800370c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <vTaskSwitchContext+0xbc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800371a:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <vTaskSwitchContext+0xc0>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003720:	e04d      	b.n	80037be <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003722:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <vTaskSwitchContext+0xc0>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <vTaskSwitchContext+0xc4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003736:	7afb      	ldrb	r3, [r7, #11]
 8003738:	f1c3 031f 	rsb	r3, r3, #31
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	4925      	ldr	r1, [pc, #148]	; (80037d4 <vTaskSwitchContext+0xc8>)
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	607b      	str	r3, [r7, #4]
    }
 8003764:	bf00      	nop
 8003766:	e7fe      	b.n	8003766 <vTaskSwitchContext+0x5a>
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <vTaskSwitchContext+0xc8>)
 8003774:	4413      	add	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	3308      	adds	r3, #8
 800378a:	429a      	cmp	r2, r3
 800378c:	d104      	bne.n	8003798 <vTaskSwitchContext+0x8c>
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <vTaskSwitchContext+0xcc>)
 80037a0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <vTaskSwitchContext+0xcc>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <vTaskSwitchContext+0xd0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d102      	bne.n	80037b4 <vTaskSwitchContext+0xa8>
 80037ae:	f002 fbeb 	bl	8005f88 <SEGGER_SYSVIEW_OnIdle>
}
 80037b2:	e004      	b.n	80037be <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80037b4:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <vTaskSwitchContext+0xcc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 fc43 	bl	8006044 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	200001c0 	.word	0x200001c0
 80037cc:	200001ac 	.word	0x200001ac
 80037d0:	200001a0 	.word	0x200001a0
 80037d4:	200000c4 	.word	0x200000c4
 80037d8:	200000c0 	.word	0x200000c0
 80037dc:	200001bc 	.word	0x200001bc

080037e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	60fb      	str	r3, [r7, #12]
    }
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <vTaskPlaceOnEventList+0x44>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3318      	adds	r3, #24
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fe fd49 	bl	80022a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003814:	2101      	movs	r1, #1
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	f000 fa7c 	bl	8003d14 <prvAddCurrentTaskToDelayedList>
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	200000c0 	.word	0x200000c0

08003828 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	617b      	str	r3, [r7, #20]
    }
 800384c:	bf00      	nop
 800384e:	e7fe      	b.n	800384e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <vTaskPlaceOnEventListRestricted+0x58>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3318      	adds	r3, #24
 8003856:	4619      	mov	r1, r3
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7fe fd00 	bl	800225e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003868:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800386a:	2024      	movs	r0, #36	; 0x24
 800386c:	f001 feb2 	bl	80055d4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	68b8      	ldr	r0, [r7, #8]
 8003874:	f000 fa4e 	bl	8003d14 <prvAddCurrentTaskToDelayedList>
    }
 8003878:	bf00      	nop
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200000c0 	.word	0x200000c0

08003884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	60fb      	str	r3, [r7, #12]
    }
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	3318      	adds	r3, #24
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fd2f 	bl	8002318 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ba:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <xTaskRemoveFromEventList+0xb4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d120      	bne.n	8003904 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fd26 	bl	8002318 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f002 fbfa 	bl	80060c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	4b17      	ldr	r3, [pc, #92]	; (800393c <xTaskRemoveFromEventList+0xb8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	4a16      	ldr	r2, [pc, #88]	; (800393c <xTaskRemoveFromEventList+0xb8>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4a13      	ldr	r2, [pc, #76]	; (8003940 <xTaskRemoveFromEventList+0xbc>)
 80038f4:	441a      	add	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7fe fcae 	bl	800225e <vListInsertEnd>
 8003902:	e005      	b.n	8003910 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	3318      	adds	r3, #24
 8003908:	4619      	mov	r1, r3
 800390a:	480e      	ldr	r0, [pc, #56]	; (8003944 <xTaskRemoveFromEventList+0xc0>)
 800390c:	f7fe fca7 	bl	800225e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <xTaskRemoveFromEventList+0xc4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	429a      	cmp	r2, r3
 800391c:	d905      	bls.n	800392a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800391e:	2301      	movs	r3, #1
 8003920:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <xTaskRemoveFromEventList+0xc8>)
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e001      	b.n	800392e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800392e:	697b      	ldr	r3, [r7, #20]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200001c0 	.word	0x200001c0
 800393c:	200001a0 	.word	0x200001a0
 8003940:	200000c4 	.word	0x200000c4
 8003944:	20000158 	.word	0x20000158
 8003948:	200000c0 	.word	0x200000c0
 800394c:	200001ac 	.word	0x200001ac

08003950 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <vTaskInternalSetTimeOutState+0x24>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <vTaskInternalSetTimeOutState+0x28>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	200001b0 	.word	0x200001b0
 8003978:	2000019c 	.word	0x2000019c

0800397c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	613b      	str	r3, [r7, #16]
    }
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	60fb      	str	r3, [r7, #12]
    }
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80039be:	f000 fee1 	bl	8004784 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80039c2:	4b1f      	ldr	r3, [pc, #124]	; (8003a40 <xTaskCheckForTimeOut+0xc4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039da:	d102      	bne.n	80039e2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	e026      	b.n	8003a30 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <xTaskCheckForTimeOut+0xc8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d00a      	beq.n	8003a04 <xTaskCheckForTimeOut+0x88>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d305      	bcc.n	8003a04 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e015      	b.n	8003a30 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d20b      	bcs.n	8003a26 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	1ad2      	subs	r2, r2, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ff98 	bl	8003950 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	e004      	b.n	8003a30 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a30:	f000 fed8 	bl	80047e4 <vPortExitCritical>

    return xReturn;
 8003a34:	69fb      	ldr	r3, [r7, #28]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	2000019c 	.word	0x2000019c
 8003a44:	200001b0 	.word	0x200001b0

08003a48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <vTaskMissedYield+0x14>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	200001ac 	.word	0x200001ac

08003a60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a68:	f000 f84c 	bl	8003b04 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <prvIdleTask+0x20>)
 8003a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a7c:	e7f4      	b.n	8003a68 <prvIdleTask+0x8>
 8003a7e:	bf00      	nop
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	e00c      	b.n	8003aaa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <prvInitialiseTaskLists+0x60>)
 8003a9c:	4413      	add	r3, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe fbb0 	bl	8002204 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d9ef      	bls.n	8003a90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ab0:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <prvInitialiseTaskLists+0x64>)
 8003ab2:	f7fe fba7 	bl	8002204 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ab6:	480d      	ldr	r0, [pc, #52]	; (8003aec <prvInitialiseTaskLists+0x68>)
 8003ab8:	f7fe fba4 	bl	8002204 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003abc:	480c      	ldr	r0, [pc, #48]	; (8003af0 <prvInitialiseTaskLists+0x6c>)
 8003abe:	f7fe fba1 	bl	8002204 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003ac2:	480c      	ldr	r0, [pc, #48]	; (8003af4 <prvInitialiseTaskLists+0x70>)
 8003ac4:	f7fe fb9e 	bl	8002204 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003ac8:	480b      	ldr	r0, [pc, #44]	; (8003af8 <prvInitialiseTaskLists+0x74>)
 8003aca:	f7fe fb9b 	bl	8002204 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <prvInitialiseTaskLists+0x78>)
 8003ad0:	4a05      	ldr	r2, [pc, #20]	; (8003ae8 <prvInitialiseTaskLists+0x64>)
 8003ad2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <prvInitialiseTaskLists+0x7c>)
 8003ad6:	4a05      	ldr	r2, [pc, #20]	; (8003aec <prvInitialiseTaskLists+0x68>)
 8003ad8:	601a      	str	r2, [r3, #0]
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200000c4 	.word	0x200000c4
 8003ae8:	20000128 	.word	0x20000128
 8003aec:	2000013c 	.word	0x2000013c
 8003af0:	20000158 	.word	0x20000158
 8003af4:	2000016c 	.word	0x2000016c
 8003af8:	20000184 	.word	0x20000184
 8003afc:	20000150 	.word	0x20000150
 8003b00:	20000154 	.word	0x20000154

08003b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b0a:	e019      	b.n	8003b40 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003b0c:	f000 fe3a 	bl	8004784 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <prvCheckTasksWaitingTermination+0x50>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fbfb 	bl	8002318 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003b22:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <prvCheckTasksWaitingTermination+0x54>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	4a0b      	ldr	r2, [pc, #44]	; (8003b58 <prvCheckTasksWaitingTermination+0x54>)
 8003b2a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <prvCheckTasksWaitingTermination+0x58>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <prvCheckTasksWaitingTermination+0x58>)
 8003b34:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003b36:	f000 fe55 	bl	80047e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f810 	bl	8003b60 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <prvCheckTasksWaitingTermination+0x58>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e1      	bne.n	8003b0c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2000016c 	.word	0x2000016c
 8003b58:	20000198 	.word	0x20000198
 8003b5c:	20000180 	.word	0x20000180

08003b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f815 	bl	8004b9c <vPortFree>
                vPortFree( pxTCB );
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f001 f812 	bl	8004b9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b84:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <prvResetNextTaskUnblockTime+0x30>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <prvResetNextTaskUnblockTime+0x34>)
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b94:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b96:	e005      	b.n	8003ba4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <prvResetNextTaskUnblockTime+0x30>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <prvResetNextTaskUnblockTime+0x34>)
 8003ba2:	6013      	str	r3, [r2, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000150 	.word	0x20000150
 8003bb4:	200001b8 	.word	0x200001b8

08003bb8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <xTaskGetCurrentTaskHandle+0x1c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003bc4:	687b      	ldr	r3, [r7, #4]
    }
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	200000c0 	.word	0x200000c0

08003bd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <xTaskGetSchedulerState+0x34>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003be6:	2301      	movs	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	e008      	b.n	8003bfe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <xTaskGetSchedulerState+0x38>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	e001      	b.n	8003bfe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003bfe:	687b      	ldr	r3, [r7, #4]
    }
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	200001a4 	.word	0x200001a4
 8003c10:	200001c0 	.word	0x200001c0

08003c14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d068      	beq.n	8003cfc <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003c2a:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <xTaskPriorityDisinherit+0xf4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d00a      	beq.n	8003c4a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	60fb      	str	r3, [r7, #12]
    }
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60bb      	str	r3, [r7, #8]
    }
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6c:	1e5a      	subs	r2, r3, #1
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d03e      	beq.n	8003cfc <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d13a      	bne.n	8003cfc <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fb44 	bl	8002318 <uxListRemove>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <xTaskPriorityDisinherit+0xf8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <xTaskPriorityDisinherit+0xf8>)
 8003caa:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	204a      	movs	r0, #74	; 0x4a
 8003cb2:	f001 fcad 	bl	8005610 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f1c3 0205 	rsb	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	2201      	movs	r2, #1
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <xTaskPriorityDisinherit+0xf8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <xTaskPriorityDisinherit+0xf8>)
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <xTaskPriorityDisinherit+0xfc>)
 8003cea:	441a      	add	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f7fe fab3 	bl	800225e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003cfc:	697b      	ldr	r3, [r7, #20]
    }
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200000c0 	.word	0x200000c0
 8003d0c:	200001a0 	.word	0x200001a0
 8003d10:	200000c4 	.word	0x200000c4

08003d14 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d1e:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d24:	4b31      	ldr	r3, [pc, #196]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe faf4 	bl	8002318 <uxListRemove>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d36:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	4b2a      	ldr	r3, [pc, #168]	; (8003df0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	4a29      	ldr	r2, [pc, #164]	; (8003df0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003d4c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d54:	d110      	bne.n	8003d78 <prvAddCurrentTaskToDelayedList+0x64>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00d      	beq.n	8003d78 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	211b      	movs	r1, #27
 8003d62:	4618      	mov	r0, r3
 8003d64:	f002 f9f2 	bl	800614c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d68:	4b20      	ldr	r3, [pc, #128]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4820      	ldr	r0, [pc, #128]	; (8003df4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003d72:	f7fe fa74 	bl	800225e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d76:	e032      	b.n	8003dde <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d80:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d20f      	bcs.n	8003db0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003d90:	4b16      	ldr	r3, [pc, #88]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2104      	movs	r1, #4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f002 f9d8 	bl	800614c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d9c:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f7fe fa7c 	bl	80022a6 <vListInsert>
}
 8003dae:	e016      	b.n	8003dde <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2104      	movs	r1, #4
 8003db6:	4618      	mov	r0, r3
 8003db8:	f002 f9c8 	bl	800614c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4610      	mov	r0, r2
 8003dca:	f7fe fa6c 	bl	80022a6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d202      	bcs.n	8003dde <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003dd8:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6013      	str	r3, [r2, #0]
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	2000019c 	.word	0x2000019c
 8003dec:	200000c0 	.word	0x200000c0
 8003df0:	200001a0 	.word	0x200001a0
 8003df4:	20000184 	.word	0x20000184
 8003df8:	20000154 	.word	0x20000154
 8003dfc:	20000150 	.word	0x20000150
 8003e00:	200001b8 	.word	0x200001b8

08003e04 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e0e:	f000 fad5 	bl	80043bc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <xTimerCreateTimerTask+0x54>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <xTimerCreateTimerTask+0x58>)
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	2302      	movs	r3, #2
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2300      	movs	r3, #0
 8003e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e28:	490d      	ldr	r1, [pc, #52]	; (8003e60 <xTimerCreateTimerTask+0x5c>)
 8003e2a:	480e      	ldr	r0, [pc, #56]	; (8003e64 <xTimerCreateTimerTask+0x60>)
 8003e2c:	f7fe ffca 	bl	8002dc4 <xTaskCreate>
 8003e30:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	603b      	str	r3, [r7, #0]
    }
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003e4e:	687b      	ldr	r3, [r7, #4]
    }
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	200001f4 	.word	0x200001f4
 8003e5c:	200001f8 	.word	0x200001f8
 8003e60:	08006560 	.word	0x08006560
 8003e64:	08003f9d 	.word	0x08003f9d

08003e68 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	623b      	str	r3, [r7, #32]
    }
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003e96:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <xTimerGenericCommand+0x98>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02a      	beq.n	8003ef4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	dc18      	bgt.n	8003ee2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003eb0:	f7ff fe92 	bl	8003bd8 <xTaskGetSchedulerState>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d109      	bne.n	8003ece <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <xTimerGenericCommand+0x98>)
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	f107 0114 	add.w	r1, r7, #20
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec6:	f7fe fb35 	bl	8002534 <xQueueGenericSend>
 8003eca:	6278      	str	r0, [r7, #36]	; 0x24
 8003ecc:	e012      	b.n	8003ef4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <xTimerGenericCommand+0x98>)
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	f107 0114 	add.w	r1, r7, #20
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f7fe fb2b 	bl	8002534 <xQueueGenericSend>
 8003ede:	6278      	str	r0, [r7, #36]	; 0x24
 8003ee0:	e008      	b.n	8003ef4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <xTimerGenericCommand+0x98>)
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	f107 0114 	add.w	r1, r7, #20
 8003eea:	2300      	movs	r3, #0
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	f7fe fc2f 	bl	8002750 <xQueueGenericSendFromISR>
 8003ef2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3728      	adds	r7, #40	; 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200001f4 	.word	0x200001f4

08003f04 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <prvProcessExpiredTimer+0x94>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe f9fb 	bl	8002318 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d022      	beq.n	8003f76 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	699a      	ldr	r2, [r3, #24]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	18d1      	adds	r1, r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	6978      	ldr	r0, [r7, #20]
 8003f3e:	f000 f8d1 	bl	80040e4 <prvInsertTimerInActiveList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01f      	beq.n	8003f88 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	2100      	movs	r1, #0
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff ff88 	bl	8003e68 <xTimerGenericCommand>
 8003f58:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d113      	bne.n	8003f88 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	60fb      	str	r3, [r7, #12]
    }
 8003f72:	bf00      	nop
 8003f74:	e7fe      	b.n	8003f74 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	6978      	ldr	r0, [r7, #20]
 8003f8e:	4798      	blx	r3
    }
 8003f90:	bf00      	nop
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	200001ec 	.word	0x200001ec

08003f9c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fa4:	f107 0308 	add.w	r3, r7, #8
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f857 	bl	800405c <prvGetNextExpireTime>
 8003fae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f803 	bl	8003fc0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003fba:	f000 f8d5 	bl	8004168 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fbe:	e7f1      	b.n	8003fa4 <prvTimerTask+0x8>

08003fc0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003fca:	f7ff f981 	bl	80032d0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fce:	f107 0308 	add.w	r3, r7, #8
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f866 	bl	80040a4 <prvSampleTimeNow>
 8003fd8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d130      	bne.n	8004042 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <prvProcessTimerOrBlockTask+0x3c>
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d806      	bhi.n	8003ffc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fee:	f7ff f97d 	bl	80032ec <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff85 	bl	8003f04 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ffa:	e024      	b.n	8004046 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <prvProcessTimerOrBlockTask+0x90>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <prvProcessTimerOrBlockTask+0x50>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <prvProcessTimerOrBlockTask+0x52>
 8004010:	2300      	movs	r3, #0
 8004012:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <prvProcessTimerOrBlockTask+0x94>)
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	4619      	mov	r1, r3
 8004022:	f7fe fe9b 	bl	8002d5c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004026:	f7ff f961 	bl	80032ec <xTaskResumeAll>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004030:	4b09      	ldr	r3, [pc, #36]	; (8004058 <prvProcessTimerOrBlockTask+0x98>)
 8004032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
    }
 8004040:	e001      	b.n	8004046 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004042:	f7ff f953 	bl	80032ec <xTaskResumeAll>
    }
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200001f0 	.word	0x200001f0
 8004054:	200001f4 	.word	0x200001f4
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <prvGetNextExpireTime+0x44>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <prvGetNextExpireTime+0x16>
 800406e:	2201      	movs	r2, #1
 8004070:	e000      	b.n	8004074 <prvGetNextExpireTime+0x18>
 8004072:	2200      	movs	r2, #0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <prvGetNextExpireTime+0x44>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e001      	b.n	8004090 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004090:	68fb      	ldr	r3, [r7, #12]
    }
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	200001ec 	.word	0x200001ec

080040a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80040ac:	f7ff f9b0 	bl	8003410 <xTaskGetTickCount>
 80040b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <prvSampleTimeNow+0x3c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d205      	bcs.n	80040c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040bc:	f000 f91a 	bl	80042f4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e002      	b.n	80040ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040ce:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <prvSampleTimeNow+0x3c>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040d4:	68fb      	ldr	r3, [r7, #12]
    }
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200001fc 	.word	0x200001fc

080040e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d812      	bhi.n	8004130 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	429a      	cmp	r2, r3
 8004116:	d302      	bcc.n	800411e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004118:	2301      	movs	r3, #1
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	e01b      	b.n	8004156 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <prvInsertTimerInActiveList+0x7c>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3304      	adds	r3, #4
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f7fe f8bc 	bl	80022a6 <vListInsert>
 800412e:	e012      	b.n	8004156 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d206      	bcs.n	8004146 <prvInsertTimerInActiveList+0x62>
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e007      	b.n	8004156 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <prvInsertTimerInActiveList+0x80>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3304      	adds	r3, #4
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f7fe f8a8 	bl	80022a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004156:	697b      	ldr	r3, [r7, #20]
    }
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	200001f0 	.word	0x200001f0
 8004164:	200001ec 	.word	0x200001ec

08004168 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	; 0x30
 800416c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800416e:	e0ae      	b.n	80042ce <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f2c0 80aa 	blt.w	80042cc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	3304      	adds	r3, #4
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe f8c5 	bl	8002318 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff87 	bl	80040a4 <prvSampleTimeNow>
 8004196:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b09      	cmp	r3, #9
 800419c:	f200 8097 	bhi.w	80042ce <prvProcessReceivedCommands+0x166>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <prvProcessReceivedCommands+0x40>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041d1 	.word	0x080041d1
 80041b0:	080041d1 	.word	0x080041d1
 80041b4:	08004245 	.word	0x08004245
 80041b8:	08004259 	.word	0x08004259
 80041bc:	080042a3 	.word	0x080042a3
 80041c0:	080041d1 	.word	0x080041d1
 80041c4:	080041d1 	.word	0x080041d1
 80041c8:	08004245 	.word	0x08004245
 80041cc:	08004259 	.word	0x08004259
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	18d1      	adds	r1, r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f0:	f7ff ff78 	bl	80040e4 <prvInsertTimerInActiveList>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d069      	beq.n	80042ce <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004200:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05e      	beq.n	80042ce <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	441a      	add	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2300      	movs	r3, #0
 800421e:	2100      	movs	r1, #0
 8004220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004222:	f7ff fe21 	bl	8003e68 <xTimerGenericCommand>
 8004226:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d14f      	bne.n	80042ce <prvProcessReceivedCommands+0x166>
        __asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	61bb      	str	r3, [r7, #24]
    }
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	b2da      	uxtb	r2, r3
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004256:	e03a      	b.n	80042ce <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	b2da      	uxtb	r2, r3
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	617b      	str	r3, [r7, #20]
    }
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	18d1      	adds	r1, r2, r3
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800429c:	f7ff ff22 	bl	80040e4 <prvInsertTimerInActiveList>
                        break;
 80042a0:	e015      	b.n	80042ce <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80042b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042b2:	f000 fc73 	bl	8004b9c <vPortFree>
 80042b6:	e00a      	b.n	80042ce <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042ca:	e000      	b.n	80042ce <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80042cc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <prvProcessReceivedCommands+0x188>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f107 0108 	add.w	r1, r7, #8
 80042d6:	2200      	movs	r2, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe faf7 	bl	80028cc <xQueueReceive>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f af45 	bne.w	8004170 <prvProcessReceivedCommands+0x8>
        }
    }
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	200001f4 	.word	0x200001f4

080042f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042fa:	e048      	b.n	800438e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <prvSwitchTimerLists+0xc0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <prvSwitchTimerLists+0xc0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3304      	adds	r3, #4
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd ffff 	bl	8002318 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02e      	beq.n	800438e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	429a      	cmp	r2, r3
 8004340:	d90e      	bls.n	8004360 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800434e:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <prvSwitchTimerLists+0xc0>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7fd ffa4 	bl	80022a6 <vListInsert>
 800435e:	e016      	b.n	800438e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004360:	2300      	movs	r3, #0
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	2300      	movs	r3, #0
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	2100      	movs	r1, #0
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff fd7c 	bl	8003e68 <xTimerGenericCommand>
 8004370:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	603b      	str	r3, [r7, #0]
    }
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <prvSwitchTimerLists+0xc0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1b1      	bne.n	80042fc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <prvSwitchTimerLists+0xc0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <prvSwitchTimerLists+0xc4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <prvSwitchTimerLists+0xc0>)
 80043a4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043a6:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <prvSwitchTimerLists+0xc4>)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	6013      	str	r3, [r2, #0]
    }
 80043ac:	bf00      	nop
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	200001ec 	.word	0x200001ec
 80043b8:	200001f0 	.word	0x200001f0

080043bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043c0:	f000 f9e0 	bl	8004784 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043c4:	4b12      	ldr	r3, [pc, #72]	; (8004410 <prvCheckForValidListAndQueue+0x54>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d11d      	bne.n	8004408 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80043cc:	4811      	ldr	r0, [pc, #68]	; (8004414 <prvCheckForValidListAndQueue+0x58>)
 80043ce:	f7fd ff19 	bl	8002204 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80043d2:	4811      	ldr	r0, [pc, #68]	; (8004418 <prvCheckForValidListAndQueue+0x5c>)
 80043d4:	f7fd ff16 	bl	8002204 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80043d8:	4b10      	ldr	r3, [pc, #64]	; (800441c <prvCheckForValidListAndQueue+0x60>)
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <prvCheckForValidListAndQueue+0x58>)
 80043dc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <prvCheckForValidListAndQueue+0x64>)
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <prvCheckForValidListAndQueue+0x5c>)
 80043e2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80043e4:	2200      	movs	r2, #0
 80043e6:	210c      	movs	r1, #12
 80043e8:	200a      	movs	r0, #10
 80043ea:	f7fe f81a 	bl	8002422 <xQueueGenericCreate>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4a07      	ldr	r2, [pc, #28]	; (8004410 <prvCheckForValidListAndQueue+0x54>)
 80043f2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <prvCheckForValidListAndQueue+0x54>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <prvCheckForValidListAndQueue+0x54>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4908      	ldr	r1, [pc, #32]	; (8004424 <prvCheckForValidListAndQueue+0x68>)
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe fc78 	bl	8002cf8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004408:	f000 f9ec 	bl	80047e4 <vPortExitCritical>
    }
 800440c:	bf00      	nop
 800440e:	bd80      	pop	{r7, pc}
 8004410:	200001f4 	.word	0x200001f4
 8004414:	200001c4 	.word	0x200001c4
 8004418:	200001d8 	.word	0x200001d8
 800441c:	200001ec 	.word	0x200001ec
 8004420:	200001f0 	.word	0x200001f0
 8004424:	08006568 	.word	0x08006568

08004428 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3b04      	subs	r3, #4
 8004438:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004440:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b04      	subs	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3b04      	subs	r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004458:	4a0c      	ldr	r2, [pc, #48]	; (800448c <pxPortInitialiseStack+0x64>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b14      	subs	r3, #20
 8004462:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3b04      	subs	r3, #4
 800446e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f06f 0202 	mvn.w	r2, #2
 8004476:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b20      	subs	r3, #32
 800447c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800447e:	68fb      	ldr	r3, [r7, #12]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	08004491 	.word	0x08004491

08004490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <prvTaskExitError+0x54>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a2:	d00a      	beq.n	80044ba <prvTaskExitError+0x2a>
        __asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	60fb      	str	r3, [r7, #12]
    }
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <prvTaskExitError+0x28>
        __asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60bb      	str	r3, [r7, #8]
    }
 80044cc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044ce:	bf00      	nop
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0fc      	beq.n	80044d0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	20000010 	.word	0x20000010
	...

080044f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <pxCurrentTCBConst2>)
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	6808      	ldr	r0, [r1, #0]
 80044f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	f380 8809 	msr	PSP, r0
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8811 	msr	BASEPRI, r0
 800450a:	4770      	bx	lr
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst2>:
 8004510:	200000c0 	.word	0x200000c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004518:	4808      	ldr	r0, [pc, #32]	; (800453c <prvPortStartFirstTask+0x24>)
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	6800      	ldr	r0, [r0, #0]
 800451e:	f380 8808 	msr	MSP, r0
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8814 	msr	CONTROL, r0
 800452a:	b662      	cpsie	i
 800452c:	b661      	cpsie	f
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	df00      	svc	0
 8004538:	bf00      	nop
 800453a:	0000      	.short	0x0000
 800453c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop

08004544 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <xPortStartScheduler+0x120>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a46      	ldr	r2, [pc, #280]	; (8004668 <xPortStartScheduler+0x124>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d10a      	bne.n	800456a <xPortStartScheduler+0x26>
        __asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	613b      	str	r3, [r7, #16]
    }
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800456a:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <xPortStartScheduler+0x120>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3f      	ldr	r2, [pc, #252]	; (800466c <xPortStartScheduler+0x128>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10a      	bne.n	800458a <xPortStartScheduler+0x46>
        __asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60fb      	str	r3, [r7, #12]
    }
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800458a:	4b39      	ldr	r3, [pc, #228]	; (8004670 <xPortStartScheduler+0x12c>)
 800458c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4b31      	ldr	r3, [pc, #196]	; (8004674 <xPortStartScheduler+0x130>)
 80045b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <xPortStartScheduler+0x134>)
 80045b4:	2207      	movs	r2, #7
 80045b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045b8:	e009      	b.n	80045ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80045ba:	4b2f      	ldr	r3, [pc, #188]	; (8004678 <xPortStartScheduler+0x134>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3b01      	subs	r3, #1
 80045c0:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <xPortStartScheduler+0x134>)
 80045c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b80      	cmp	r3, #128	; 0x80
 80045d8:	d0ef      	beq.n	80045ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045da:	4b27      	ldr	r3, [pc, #156]	; (8004678 <xPortStartScheduler+0x134>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1c3 0307 	rsb	r3, r3, #7
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d00a      	beq.n	80045fc <xPortStartScheduler+0xb8>
        __asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	60bb      	str	r3, [r7, #8]
    }
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <xPortStartScheduler+0x134>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <xPortStartScheduler+0x134>)
 8004604:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004606:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <xPortStartScheduler+0x134>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800460e:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <xPortStartScheduler+0x134>)
 8004610:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <xPortStartScheduler+0x138>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <xPortStartScheduler+0x138>)
 8004620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004624:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <xPortStartScheduler+0x138>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a14      	ldr	r2, [pc, #80]	; (800467c <xPortStartScheduler+0x138>)
 800462c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004630:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004632:	f000 f963 	bl	80048fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <xPortStartScheduler+0x13c>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800463c:	f000 f982 	bl	8004944 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <xPortStartScheduler+0x140>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <xPortStartScheduler+0x140>)
 8004646:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800464a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800464c:	f7ff ff64 	bl	8004518 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004650:	f7ff f85c 	bl	800370c <vTaskSwitchContext>
    prvTaskExitError();
 8004654:	f7ff ff1c 	bl	8004490 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00
 8004668:	410fc271 	.word	0x410fc271
 800466c:	410fc270 	.word	0x410fc270
 8004670:	e000e400 	.word	0xe000e400
 8004674:	20000200 	.word	0x20000200
 8004678:	20000204 	.word	0x20000204
 800467c:	e000ed20 	.word	0xe000ed20
 8004680:	20000010 	.word	0x20000010
 8004684:	e000ef34 	.word	0xe000ef34

08004688 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <vInitPrioGroupValue+0xe4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a37      	ldr	r2, [pc, #220]	; (8004770 <vInitPrioGroupValue+0xe8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d10a      	bne.n	80046ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	613b      	str	r3, [r7, #16]
    }
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ae:	4b2f      	ldr	r3, [pc, #188]	; (800476c <vInitPrioGroupValue+0xe4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a30      	ldr	r2, [pc, #192]	; (8004774 <vInitPrioGroupValue+0xec>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10a      	bne.n	80046ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
    }
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ce:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <vInitPrioGroupValue+0xf0>)
 80046d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	22ff      	movs	r2, #255	; 0xff
 80046de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <vInitPrioGroupValue+0xf4>)
 80046f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <vInitPrioGroupValue+0xf8>)
 80046f8:	2207      	movs	r2, #7
 80046fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046fc:	e009      	b.n	8004712 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3b01      	subs	r3, #1
 8004704:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004706:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d0ef      	beq.n	80046fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1c3 0307 	rsb	r3, r3, #7
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00a      	beq.n	8004740 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60bb      	str	r3, [r7, #8]
    }
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004748:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <vInitPrioGroupValue+0xf8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004752:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004754:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	e000ed00 	.word	0xe000ed00
 8004770:	410fc271 	.word	0x410fc271
 8004774:	410fc270 	.word	0x410fc270
 8004778:	e000e400 	.word	0xe000e400
 800477c:	20000200 	.word	0x20000200
 8004780:	20000204 	.word	0x20000204

08004784 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
        __asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	607b      	str	r3, [r7, #4]
    }
 800479c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <vPortEnterCritical+0x58>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <vPortEnterCritical+0x58>)
 80047a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <vPortEnterCritical+0x58>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10f      	bne.n	80047d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <vPortEnterCritical+0x5c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	603b      	str	r3, [r7, #0]
    }
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <vPortEnterCritical+0x4a>
    }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000010 	.word	0x20000010
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <vPortExitCritical+0x50>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <vPortExitCritical+0x24>
        __asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	607b      	str	r3, [r7, #4]
    }
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <vPortExitCritical+0x50>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3b01      	subs	r3, #1
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <vPortExitCritical+0x50>)
 8004810:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <vPortExitCritical+0x50>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <vPortExitCritical+0x42>
 800481a:	2300      	movs	r3, #0
 800481c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f383 8811 	msr	BASEPRI, r3
    }
 8004824:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000010 	.word	0x20000010
	...

08004840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004840:	f3ef 8009 	mrs	r0, PSP
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <pxCurrentTCBConst>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	f01e 0f10 	tst.w	lr, #16
 8004850:	bf08      	it	eq
 8004852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	6010      	str	r0, [r2, #0]
 800485c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004864:	f380 8811 	msr	BASEPRI, r0
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f7fe ff4c 	bl	800370c <vTaskSwitchContext>
 8004874:	f04f 0000 	mov.w	r0, #0
 8004878:	f380 8811 	msr	BASEPRI, r0
 800487c:	bc09      	pop	{r0, r3}
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	6808      	ldr	r0, [r1, #0]
 8004882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004886:	f01e 0f10 	tst.w	lr, #16
 800488a:	bf08      	it	eq
 800488c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004890:	f380 8809 	msr	PSP, r0
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst>:
 80048a0:	200000c0 	.word	0x200000c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
        __asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
    }
 80048c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80048c2:	f001 fae7 	bl	8005e94 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80048c6:	f7fe fe87 	bl	80035d8 <xTaskIncrementTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80048d0:	f001 fb3e 	bl	8005f50 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <SysTick_Handler+0x50>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e001      	b.n	80048e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80048de:	f001 fb1b 	bl	8005f18 <SEGGER_SYSVIEW_RecordExitISR>
 80048e2:	2300      	movs	r3, #0
 80048e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f383 8811 	msr	BASEPRI, r3
    }
 80048ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <vPortSetupTimerInterrupt+0x38>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <vPortSetupTimerInterrupt+0x3c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <vPortSetupTimerInterrupt+0x40>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <vPortSetupTimerInterrupt+0x44>)
 800491a:	3b01      	subs	r3, #1
 800491c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004920:	2207      	movs	r2, #7
 8004922:	601a      	str	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	e000e010 	.word	0xe000e010
 8004934:	e000e018 	.word	0xe000e018
 8004938:	20000000 	.word	0x20000000
 800493c:	10624dd3 	.word	0x10624dd3
 8004940:	e000e014 	.word	0xe000e014

08004944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004954 <vPortEnableVFP+0x10>
 8004948:	6801      	ldr	r1, [r0, #0]
 800494a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800494e:	6001      	str	r1, [r0, #0]
 8004950:	4770      	bx	lr
 8004952:	0000      	.short	0x0000
 8004954:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop

0800495c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004962:	f3ef 8305 	mrs	r3, IPSR
 8004966:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b0f      	cmp	r3, #15
 800496c:	d914      	bls.n	8004998 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <vPortValidateInterruptPriority+0x70>)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <vPortValidateInterruptPriority+0x74>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	7afa      	ldrb	r2, [r7, #11]
 800497e:	429a      	cmp	r2, r3
 8004980:	d20a      	bcs.n	8004998 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	607b      	str	r3, [r7, #4]
    }
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <vPortValidateInterruptPriority+0x78>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <vPortValidateInterruptPriority+0x7c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d90a      	bls.n	80049be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	603b      	str	r3, [r7, #0]
    }
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <vPortValidateInterruptPriority+0x60>
    }
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e000e3f0 	.word	0xe000e3f0
 80049d0:	20000200 	.word	0x20000200
 80049d4:	e000ed0c 	.word	0xe000ed0c
 80049d8:	20000204 	.word	0x20000204

080049dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80049e8:	f7fe fc72 	bl	80032d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049ec:	4b65      	ldr	r3, [pc, #404]	; (8004b84 <pvPortMalloc+0x1a8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80049f4:	f000 f934 	bl	8004c60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049f8:	4b63      	ldr	r3, [pc, #396]	; (8004b88 <pvPortMalloc+0x1ac>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 80a7 	bne.w	8004b54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d02d      	beq.n	8004a68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d227      	bcs.n	8004a68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004a18:	2208      	movs	r2, #8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d021      	beq.n	8004a6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f023 0307 	bic.w	r3, r3, #7
 8004a30:	3308      	adds	r3, #8
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d214      	bcs.n	8004a62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	3308      	adds	r3, #8
 8004a40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <pvPortMalloc+0x92>
        __asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	617b      	str	r3, [r7, #20]
    }
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a66:	e002      	b.n	8004a6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	e000      	b.n	8004a70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d06e      	beq.n	8004b54 <pvPortMalloc+0x178>
 8004a76:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d869      	bhi.n	8004b54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a80:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <pvPortMalloc+0x1b4>)
 8004a82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a84:	4b42      	ldr	r3, [pc, #264]	; (8004b90 <pvPortMalloc+0x1b4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a8a:	e004      	b.n	8004a96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d903      	bls.n	8004aa8 <pvPortMalloc+0xcc>
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f1      	bne.n	8004a8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004aa8:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <pvPortMalloc+0x1a8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d050      	beq.n	8004b54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	4413      	add	r3, r2
 8004aba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	2308      	movs	r3, #8
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d91f      	bls.n	8004b14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <pvPortMalloc+0x120>
        __asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	613b      	str	r3, [r7, #16]
    }
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	1ad2      	subs	r2, r2, r3
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b0e:	69b8      	ldr	r0, [r7, #24]
 8004b10:	f000 f908 	bl	8004d24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004b20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b22:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <pvPortMalloc+0x1b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d203      	bcs.n	8004b36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b2e:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a18      	ldr	r2, [pc, #96]	; (8004b94 <pvPortMalloc+0x1b8>)
 8004b34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <pvPortMalloc+0x1ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <pvPortMalloc+0x1bc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <pvPortMalloc+0x1bc>)
 8004b52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b54:	f7fe fbca 	bl	80032ec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <pvPortMalloc+0x19c>
        __asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	60fb      	str	r3, [r7, #12]
    }
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <pvPortMalloc+0x19a>
    return pvReturn;
 8004b78:	69fb      	ldr	r3, [r7, #28]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3728      	adds	r7, #40	; 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20012e10 	.word	0x20012e10
 8004b88:	20012e24 	.word	0x20012e24
 8004b8c:	20012e14 	.word	0x20012e14
 8004b90:	20012e08 	.word	0x20012e08
 8004b94:	20012e18 	.word	0x20012e18
 8004b98:	20012e1c 	.word	0x20012e1c

08004b9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d04d      	beq.n	8004c4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bae:	2308      	movs	r3, #8
 8004bb0:	425b      	negs	r3, r3
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <vPortFree+0xb8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <vPortFree+0x44>
        __asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60fb      	str	r3, [r7, #12]
    }
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <vPortFree+0x62>
        __asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	60bb      	str	r3, [r7, #8]
    }
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <vPortFree+0xb8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01e      	beq.n	8004c4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11a      	bne.n	8004c4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <vPortFree+0xb8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	401a      	ands	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004c24:	f7fe fb54 	bl	80032d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <vPortFree+0xbc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4413      	add	r3, r2
 8004c32:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <vPortFree+0xbc>)
 8004c34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c36:	6938      	ldr	r0, [r7, #16]
 8004c38:	f000 f874 	bl	8004d24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <vPortFree+0xc0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <vPortFree+0xc0>)
 8004c44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c46:	f7fe fb51 	bl	80032ec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20012e24 	.word	0x20012e24
 8004c58:	20012e14 	.word	0x20012e14
 8004c5c:	20012e20 	.word	0x20012e20

08004c60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004c6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004c6c:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <prvHeapInit+0xac>)
 8004c6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3307      	adds	r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0307 	bic.w	r3, r3, #7
 8004c86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <prvHeapInit+0xac>)
 8004c90:	4413      	add	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c98:	4a1d      	ldr	r2, [pc, #116]	; (8004d10 <prvHeapInit+0xb0>)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c9e:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <prvHeapInit+0xb0>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004cac:	2208      	movs	r2, #8
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <prvHeapInit+0xb4>)
 8004cc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <prvHeapInit+0xb4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <prvHeapInit+0xb4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	1ad2      	subs	r2, r2, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <prvHeapInit+0xb4>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <prvHeapInit+0xb8>)
 8004cee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <prvHeapInit+0xbc>)
 8004cf6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <prvHeapInit+0xc0>)
 8004cfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cfe:	601a      	str	r2, [r3, #0]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	20000208 	.word	0x20000208
 8004d10:	20012e08 	.word	0x20012e08
 8004d14:	20012e10 	.word	0x20012e10
 8004d18:	20012e18 	.word	0x20012e18
 8004d1c:	20012e14 	.word	0x20012e14
 8004d20:	20012e24 	.word	0x20012e24

08004d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d2c:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <prvInsertBlockIntoFreeList+0xac>)
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e002      	b.n	8004d38 <prvInsertBlockIntoFreeList+0x14>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d8f7      	bhi.n	8004d32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d108      	bne.n	8004d66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	441a      	add	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d118      	bne.n	8004dac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d00d      	beq.n	8004da2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e008      	b.n	8004db4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e003      	b.n	8004db4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d002      	beq.n	8004dc2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20012e08 	.word	0x20012e08
 8004dd4:	20012e10 	.word	0x20012e10

08004dd8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004de6:	2205      	movs	r2, #5
 8004de8:	492b      	ldr	r1, [pc, #172]	; (8004e98 <SYSVIEW_AddTask+0xc0>)
 8004dea:	68b8      	ldr	r0, [r7, #8]
 8004dec:	f001 fb7a 	bl	80064e4 <memcmp>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d04b      	beq.n	8004e8e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004df6:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <SYSVIEW_AddTask+0xc4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b07      	cmp	r3, #7
 8004dfc:	d903      	bls.n	8004e06 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004dfe:	4828      	ldr	r0, [pc, #160]	; (8004ea0 <SYSVIEW_AddTask+0xc8>)
 8004e00:	f001 faf0 	bl	80063e4 <SEGGER_SYSVIEW_Warn>
    return;
 8004e04:	e044      	b.n	8004e90 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e06:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <SYSVIEW_AddTask+0xc4>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4926      	ldr	r1, [pc, #152]	; (8004ea4 <SYSVIEW_AddTask+0xcc>)
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <SYSVIEW_AddTask+0xc4>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4921      	ldr	r1, [pc, #132]	; (8004ea4 <SYSVIEW_AddTask+0xcc>)
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e30:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <SYSVIEW_AddTask+0xc4>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	491b      	ldr	r1, [pc, #108]	; (8004ea4 <SYSVIEW_AddTask+0xcc>)
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	3308      	adds	r3, #8
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <SYSVIEW_AddTask+0xc4>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4916      	ldr	r1, [pc, #88]	; (8004ea4 <SYSVIEW_AddTask+0xcc>)
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	330c      	adds	r3, #12
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <SYSVIEW_AddTask+0xc4>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4910      	ldr	r1, [pc, #64]	; (8004ea4 <SYSVIEW_AddTask+0xcc>)
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e72:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <SYSVIEW_AddTask+0xc4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3301      	adds	r3, #1
 8004e78:	4a08      	ldr	r2, [pc, #32]	; (8004e9c <SYSVIEW_AddTask+0xc4>)
 8004e7a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f87e 	bl	8004f88 <SYSVIEW_SendTaskInfo>
 8004e8c:	e000      	b.n	8004e90 <SYSVIEW_AddTask+0xb8>
    return;
 8004e8e:	bf00      	nop

}
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	08006570 	.word	0x08006570
 8004e9c:	20012ec8 	.word	0x20012ec8
 8004ea0:	08006578 	.word	0x08006578
 8004ea4:	20012e28 	.word	0x20012e28

08004ea8 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	4930      	ldr	r1, [pc, #192]	; (8004f7c <SYSVIEW_UpdateTask+0xd4>)
 8004eba:	68b8      	ldr	r0, [r7, #8]
 8004ebc:	f001 fb12 	bl	80064e4 <memcmp>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d056      	beq.n	8004f74 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e00d      	b.n	8004ee8 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004ecc:	492c      	ldr	r1, [pc, #176]	; (8004f80 <SYSVIEW_UpdateTask+0xd8>)
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d008      	beq.n	8004ef4 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <SYSVIEW_UpdateTask+0xdc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3ec      	bcc.n	8004ecc <SYSVIEW_UpdateTask+0x24>
 8004ef2:	e000      	b.n	8004ef6 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004ef4:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004ef6:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <SYSVIEW_UpdateTask+0xdc>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d230      	bcs.n	8004f62 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004f00:	491f      	ldr	r1, [pc, #124]	; (8004f80 <SYSVIEW_UpdateTask+0xd8>)
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	3304      	adds	r3, #4
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004f14:	491a      	ldr	r1, [pc, #104]	; (8004f80 <SYSVIEW_UpdateTask+0xd8>)
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	3308      	adds	r3, #8
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004f28:	4915      	ldr	r1, [pc, #84]	; (8004f80 <SYSVIEW_UpdateTask+0xd8>)
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	330c      	adds	r3, #12
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004f3c:	4910      	ldr	r1, [pc, #64]	; (8004f80 <SYSVIEW_UpdateTask+0xd8>)
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	3310      	adds	r3, #16
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f814 	bl	8004f88 <SYSVIEW_SendTaskInfo>
 8004f60:	e009      	b.n	8004f76 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff ff33 	bl	8004dd8 <SYSVIEW_AddTask>
 8004f72:	e000      	b.n	8004f76 <SYSVIEW_UpdateTask+0xce>
    return;
 8004f74:	bf00      	nop
  }
}
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	08006570 	.word	0x08006570
 8004f80:	20012e28 	.word	0x20012e28
 8004f84:	20012ec8 	.word	0x20012ec8

08004f88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f96:	f107 0314 	add.w	r3, r7, #20
 8004f9a:	2214      	movs	r2, #20
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 fabe 	bl	8006520 <memset>
  TaskInfo.TaskID     = TaskID;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fe3f 	bl	8005c40 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004fc2:	bf00      	nop
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <_DoInit+0x98>)
 8004fd4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2203      	movs	r2, #3
 8004fe0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a20      	ldr	r2, [pc, #128]	; (8005068 <_DoInit+0x9c>)
 8004fe6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a20      	ldr	r2, [pc, #128]	; (800506c <_DoInit+0xa0>)
 8004fec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ff4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a17      	ldr	r2, [pc, #92]	; (8005068 <_DoInit+0x9c>)
 800500c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a17      	ldr	r2, [pc, #92]	; (8005070 <_DoInit+0xa4>)
 8005012:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2210      	movs	r2, #16
 8005018:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3307      	adds	r3, #7
 8005030:	4a10      	ldr	r2, [pc, #64]	; (8005074 <_DoInit+0xa8>)
 8005032:	6810      	ldr	r0, [r2, #0]
 8005034:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005036:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a0e      	ldr	r2, [pc, #56]	; (8005078 <_DoInit+0xac>)
 800503e:	6810      	ldr	r0, [r2, #0]
 8005040:	6018      	str	r0, [r3, #0]
 8005042:	8891      	ldrh	r1, [r2, #4]
 8005044:	7992      	ldrb	r2, [r2, #6]
 8005046:	8099      	strh	r1, [r3, #4]
 8005048:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800504a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005054:	f3bf 8f5f 	dmb	sy
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20012ecc 	.word	0x20012ecc
 8005068:	080065c8 	.word	0x080065c8
 800506c:	20012f74 	.word	0x20012f74
 8005070:	20013374 	.word	0x20013374
 8005074:	080065d4 	.word	0x080065d4
 8005078:	080065d8 	.word	0x080065d8

0800507c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b08c      	sub	sp, #48	; 0x30
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005088:	4b3e      	ldr	r3, [pc, #248]	; (8005184 <SEGGER_RTT_ReadNoLock+0x108>)
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <SEGGER_RTT_ReadNoLock+0x1e>
 8005096:	f7ff ff99 	bl	8004fcc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	3360      	adds	r3, #96	; 0x60
 80050a6:	4a37      	ldr	r2, [pc, #220]	; (8005184 <SEGGER_RTT_ReadNoLock+0x108>)
 80050a8:	4413      	add	r3, r2
 80050aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80050bc:	2300      	movs	r3, #0
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80050c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d92b      	bls.n	8005120 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4293      	cmp	r3, r2
 80050d8:	bf28      	it	cs
 80050da:	4613      	movcs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	4413      	add	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	6939      	ldr	r1, [r7, #16]
 80050ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ee:	f001 fa09 	bl	8006504 <memcpy>
    NumBytesRead += NumBytesRem;
 80050f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4413      	add	r3, r2
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4413      	add	r3, r2
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800510a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005118:	429a      	cmp	r2, r3
 800511a:	d101      	bne.n	8005120 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800511c:	2300      	movs	r3, #0
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4293      	cmp	r3, r2
 800512e:	bf28      	it	cs
 8005130:	4613      	movcs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d019      	beq.n	800516e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	4413      	add	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	6939      	ldr	r1, [r7, #16]
 8005148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800514a:	f001 f9db 	bl	8006504 <memcpy>
    NumBytesRead += NumBytesRem;
 800514e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005178:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800517c:	4618      	mov	r0, r3
 800517e:	3730      	adds	r7, #48	; 0x30
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20012ecc 	.word	0x20012ecc

08005188 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00f      	beq.n	80051be <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800519e:	e002      	b.n	80051a6 <_EncodeStr+0x1e>
      Len++;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3301      	adds	r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f6      	bne.n	80051a0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d901      	bls.n	80051be <_EncodeStr+0x36>
      Len = Limit;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2bfe      	cmp	r3, #254	; 0xfe
 80051c2:	d806      	bhi.n	80051d2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	60fa      	str	r2, [r7, #12]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e011      	b.n	80051f6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	60fa      	str	r2, [r7, #12]
 80051d8:	22ff      	movs	r2, #255	; 0xff
 80051da:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	60fa      	str	r2, [r7, #12]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	0a19      	lsrs	r1, r3, #8
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	60fa      	str	r2, [r7, #12]
 80051f2:	b2ca      	uxtb	r2, r1
 80051f4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80051fa:	e00a      	b.n	8005212 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	1c53      	adds	r3, r2, #1
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1c59      	adds	r1, r3, #1
 8005206:	60f9      	str	r1, [r7, #12]
 8005208:	7812      	ldrb	r2, [r2, #0]
 800520a:	701a      	strb	r2, [r3, #0]
    n++;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	3301      	adds	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d3f0      	bcc.n	80051fc <_EncodeStr+0x74>
  }
  return pPayload;
 800521a:	68fb      	ldr	r3, [r7, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005246:	4b36      	ldr	r3, [pc, #216]	; (8005320 <_HandleIncomingPacket+0xe0>)
 8005248:	7e1b      	ldrb	r3, [r3, #24]
 800524a:	4618      	mov	r0, r3
 800524c:	1cfb      	adds	r3, r7, #3
 800524e:	2201      	movs	r2, #1
 8005250:	4619      	mov	r1, r3
 8005252:	f7ff ff13 	bl	800507c <SEGGER_RTT_ReadNoLock>
 8005256:	4603      	mov	r3, r0
 8005258:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	dd54      	ble.n	800530a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	2b80      	cmp	r3, #128	; 0x80
 8005264:	d032      	beq.n	80052cc <_HandleIncomingPacket+0x8c>
 8005266:	2b80      	cmp	r3, #128	; 0x80
 8005268:	dc42      	bgt.n	80052f0 <_HandleIncomingPacket+0xb0>
 800526a:	2b07      	cmp	r3, #7
 800526c:	dc16      	bgt.n	800529c <_HandleIncomingPacket+0x5c>
 800526e:	2b00      	cmp	r3, #0
 8005270:	dd3e      	ble.n	80052f0 <_HandleIncomingPacket+0xb0>
 8005272:	3b01      	subs	r3, #1
 8005274:	2b06      	cmp	r3, #6
 8005276:	d83b      	bhi.n	80052f0 <_HandleIncomingPacket+0xb0>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <_HandleIncomingPacket+0x40>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052a3 	.word	0x080052a3
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052af 	.word	0x080052af
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052c1 	.word	0x080052c1
 8005298:	080052c7 	.word	0x080052c7
 800529c:	2b7f      	cmp	r3, #127	; 0x7f
 800529e:	d036      	beq.n	800530e <_HandleIncomingPacket+0xce>
 80052a0:	e026      	b.n	80052f0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80052a2:	f000 fb53 	bl	800594c <SEGGER_SYSVIEW_Start>
      break;
 80052a6:	e037      	b.n	8005318 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80052a8:	f000 fc0a 	bl	8005ac0 <SEGGER_SYSVIEW_Stop>
      break;
 80052ac:	e034      	b.n	8005318 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80052ae:	f000 fdbf 	bl	8005e30 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80052b2:	e031      	b.n	8005318 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80052b4:	f000 fda8 	bl	8005e08 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80052b8:	e02e      	b.n	8005318 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80052ba:	f000 fc27 	bl	8005b0c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80052be:	e02b      	b.n	8005318 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80052c0:	f001 f852 	bl	8006368 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80052c4:	e028      	b.n	8005318 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80052c6:	f001 f831 	bl	800632c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80052ca:	e025      	b.n	8005318 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052cc:	4b14      	ldr	r3, [pc, #80]	; (8005320 <_HandleIncomingPacket+0xe0>)
 80052ce:	7e1b      	ldrb	r3, [r3, #24]
 80052d0:	4618      	mov	r0, r3
 80052d2:	1cfb      	adds	r3, r7, #3
 80052d4:	2201      	movs	r2, #1
 80052d6:	4619      	mov	r1, r3
 80052d8:	f7ff fed0 	bl	800507c <SEGGER_RTT_ReadNoLock>
 80052dc:	4603      	mov	r3, r0
 80052de:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dd15      	ble.n	8005312 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 ff9f 	bl	800622c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80052ee:	e010      	b.n	8005312 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	b25b      	sxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	da0e      	bge.n	8005316 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052f8:	4b09      	ldr	r3, [pc, #36]	; (8005320 <_HandleIncomingPacket+0xe0>)
 80052fa:	7e1b      	ldrb	r3, [r3, #24]
 80052fc:	4618      	mov	r0, r3
 80052fe:	1cfb      	adds	r3, r7, #3
 8005300:	2201      	movs	r2, #1
 8005302:	4619      	mov	r1, r3
 8005304:	f7ff feba 	bl	800507c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005308:	e005      	b.n	8005316 <_HandleIncomingPacket+0xd6>
    }
  }
 800530a:	bf00      	nop
 800530c:	e004      	b.n	8005318 <_HandleIncomingPacket+0xd8>
      break;
 800530e:	bf00      	nop
 8005310:	e002      	b.n	8005318 <_HandleIncomingPacket+0xd8>
      break;
 8005312:	bf00      	nop
 8005314:	e000      	b.n	8005318 <_HandleIncomingPacket+0xd8>
      break;
 8005316:	bf00      	nop
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20013384 	.word	0x20013384

08005324 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	; 0x30
 8005328:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800532a:	2301      	movs	r3, #1
 800532c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800532e:	1d3b      	adds	r3, r7, #4
 8005330:	3301      	adds	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005338:	4b31      	ldr	r3, [pc, #196]	; (8005400 <_TrySendOverflowPacket+0xdc>)
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
 800533e:	e00b      	b.n	8005358 <_TrySendOverflowPacket+0x34>
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	b2da      	uxtb	r2, r3
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	62f9      	str	r1, [r7, #44]	; 0x2c
 800534a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	09db      	lsrs	r3, r3, #7
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	2b7f      	cmp	r3, #127	; 0x7f
 800535c:	d8f0      	bhi.n	8005340 <_TrySendOverflowPacket+0x1c>
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800536e:	4b25      	ldr	r3, [pc, #148]	; (8005404 <_TrySendOverflowPacket+0xe0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005374:	4b22      	ldr	r3, [pc, #136]	; (8005400 <_TrySendOverflowPacket+0xdc>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	623b      	str	r3, [r7, #32]
 8005386:	e00b      	b.n	80053a0 <_TrySendOverflowPacket+0x7c>
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	b2da      	uxtb	r2, r3
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	1c59      	adds	r1, r3, #1
 8005390:	6279      	str	r1, [r7, #36]	; 0x24
 8005392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	09db      	lsrs	r3, r3, #7
 800539e:	623b      	str	r3, [r7, #32]
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	2b7f      	cmp	r3, #127	; 0x7f
 80053a4:	d8f0      	bhi.n	8005388 <_TrySendOverflowPacket+0x64>
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	627a      	str	r2, [r7, #36]	; 0x24
 80053ac:	6a3a      	ldr	r2, [r7, #32]
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80053b6:	4b12      	ldr	r3, [pc, #72]	; (8005400 <_TrySendOverflowPacket+0xdc>)
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	4618      	mov	r0, r3
 80053bc:	1d3b      	adds	r3, r7, #4
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	1d3b      	adds	r3, r7, #4
 80053c6:	4619      	mov	r1, r3
 80053c8:	f7fa ff02 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80053cc:	4603      	mov	r3, r0
 80053ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80053d6:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <_TrySendOverflowPacket+0xdc>)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80053dc:	4b08      	ldr	r3, [pc, #32]	; (8005400 <_TrySendOverflowPacket+0xdc>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <_TrySendOverflowPacket+0xdc>)
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	e004      	b.n	80053f4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <_TrySendOverflowPacket+0xdc>)
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	3301      	adds	r3, #1
 80053f0:	4a03      	ldr	r2, [pc, #12]	; (8005400 <_TrySendOverflowPacket+0xdc>)
 80053f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80053f4:	693b      	ldr	r3, [r7, #16]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3730      	adds	r7, #48	; 0x30
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20013384 	.word	0x20013384
 8005404:	e0001004 	.word	0xe0001004

08005408 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005414:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <_SendPacket+0x1c0>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d010      	beq.n	800543e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800541c:	4b6a      	ldr	r3, [pc, #424]	; (80055c8 <_SendPacket+0x1c0>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80a3 	beq.w	800556c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005426:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <_SendPacket+0x1c0>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d109      	bne.n	8005442 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800542e:	f7ff ff79 	bl	8005324 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005432:	4b65      	ldr	r3, [pc, #404]	; (80055c8 <_SendPacket+0x1c0>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b01      	cmp	r3, #1
 8005438:	f040 809a 	bne.w	8005570 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800543c:	e001      	b.n	8005442 <_SendPacket+0x3a>
    goto Send;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <_SendPacket+0x3c>
Send:
 8005442:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b1f      	cmp	r3, #31
 8005448:	d809      	bhi.n	800545e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800544a:	4b5f      	ldr	r3, [pc, #380]	; (80055c8 <_SendPacket+0x1c0>)
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	f040 808b 	bne.w	8005574 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b17      	cmp	r3, #23
 8005462:	d807      	bhi.n	8005474 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3b01      	subs	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	e03d      	b.n	80054f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b7f      	cmp	r3, #127	; 0x7f
 8005480:	d912      	bls.n	80054a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	09da      	lsrs	r2, r3, #7
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3b01      	subs	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	3a01      	subs	r2, #1
 800549a:	60fa      	str	r2, [r7, #12]
 800549c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e006      	b.n	80054b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ba:	d912      	bls.n	80054e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	09da      	lsrs	r2, r3, #7
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	3a01      	subs	r2, #1
 80054d4:	60fa      	str	r2, [r7, #12]
 80054d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e006      	b.n	80054f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <_SendPacket+0x1c4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054f6:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <_SendPacket+0x1c0>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	623b      	str	r3, [r7, #32]
 8005508:	e00b      	b.n	8005522 <_SendPacket+0x11a>
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	1c59      	adds	r1, r3, #1
 8005512:	6279      	str	r1, [r7, #36]	; 0x24
 8005514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	09db      	lsrs	r3, r3, #7
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2b7f      	cmp	r3, #127	; 0x7f
 8005526:	d8f0      	bhi.n	800550a <_SendPacket+0x102>
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	627a      	str	r2, [r7, #36]	; 0x24
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005538:	4b23      	ldr	r3, [pc, #140]	; (80055c8 <_SendPacket+0x1c0>)
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	4618      	mov	r0, r3
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	461a      	mov	r2, r3
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	f7fa fe42 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800554c:	4603      	mov	r3, r0
 800554e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005556:	4a1c      	ldr	r2, [pc, #112]	; (80055c8 <_SendPacket+0x1c0>)
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	60d3      	str	r3, [r2, #12]
 800555c:	e00b      	b.n	8005576 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800555e:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <_SendPacket+0x1c0>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <_SendPacket+0x1c0>)
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e004      	b.n	8005576 <_SendPacket+0x16e>
    goto SendDone;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <_SendPacket+0x16e>
      goto SendDone;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <_SendPacket+0x16e>
      goto SendDone;
 8005574:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <_SendPacket+0x1c0>)
 8005578:	7e1b      	ldrb	r3, [r3, #24]
 800557a:	4619      	mov	r1, r3
 800557c:	4a14      	ldr	r2, [pc, #80]	; (80055d0 <_SendPacket+0x1c8>)
 800557e:	460b      	mov	r3, r1
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	440b      	add	r3, r1
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4413      	add	r3, r2
 8005588:	336c      	adds	r3, #108	; 0x6c
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <_SendPacket+0x1c0>)
 800558e:	7e1b      	ldrb	r3, [r3, #24]
 8005590:	4618      	mov	r0, r3
 8005592:	490f      	ldr	r1, [pc, #60]	; (80055d0 <_SendPacket+0x1c8>)
 8005594:	4603      	mov	r3, r0
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	4403      	add	r3, r0
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	440b      	add	r3, r1
 800559e:	3370      	adds	r3, #112	; 0x70
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d00b      	beq.n	80055be <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80055a6:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <_SendPacket+0x1c0>)
 80055a8:	789b      	ldrb	r3, [r3, #2]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d107      	bne.n	80055be <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <_SendPacket+0x1c0>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80055b4:	f7ff fe44 	bl	8005240 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80055b8:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <_SendPacket+0x1c0>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80055be:	bf00      	nop
 80055c0:	3728      	adds	r7, #40	; 0x28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20013384 	.word	0x20013384
 80055cc:	e0001004 	.word	0xe0001004
 80055d0:	20012ecc 	.word	0x20012ecc

080055d4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055dc:	f3ef 8311 	mrs	r3, BASEPRI
 80055e0:	f04f 0120 	mov.w	r1, #32
 80055e4:	f381 8811 	msr	BASEPRI, r1
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	4808      	ldr	r0, [pc, #32]	; (800560c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80055ec:	f7ff fe1c 	bl	8005228 <_PreparePacket>
 80055f0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	68b8      	ldr	r0, [r7, #8]
 80055f8:	f7ff ff06 	bl	8005408 <_SendPacket>
  RECORD_END();
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f383 8811 	msr	BASEPRI, r3
}
 8005602:	bf00      	nop
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	200133b4 	.word	0x200133b4

08005610 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800561a:	f3ef 8311 	mrs	r3, BASEPRI
 800561e:	f04f 0120 	mov.w	r1, #32
 8005622:	f381 8811 	msr	BASEPRI, r1
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	4816      	ldr	r0, [pc, #88]	; (8005684 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800562a:	f7ff fdfd 	bl	8005228 <_PreparePacket>
 800562e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	61bb      	str	r3, [r7, #24]
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_RecordU32+0x46>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	61f9      	str	r1, [r7, #28]
 8005648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b7f      	cmp	r3, #127	; 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	61fa      	str	r2, [r7, #28]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	6938      	ldr	r0, [r7, #16]
 8005672:	f7ff fec9 	bl	8005408 <_SendPacket>
  RECORD_END();
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f383 8811 	msr	BASEPRI, r3
}
 800567c:	bf00      	nop
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200133b4 	.word	0x200133b4

08005688 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	; 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005694:	f3ef 8311 	mrs	r3, BASEPRI
 8005698:	f04f 0120 	mov.w	r1, #32
 800569c:	f381 8811 	msr	BASEPRI, r1
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	4825      	ldr	r0, [pc, #148]	; (8005738 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80056a4:	f7ff fdc0 	bl	8005228 <_PreparePacket>
 80056a8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b6:	e00b      	b.n	80056d0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	09db      	lsrs	r3, r3, #7
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d8f0      	bhi.n	80056b8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	e00b      	b.n	8005708 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	6279      	str	r1, [r7, #36]	; 0x24
 80056fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	09db      	lsrs	r3, r3, #7
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b7f      	cmp	r3, #127	; 0x7f
 800570c:	d8f0      	bhi.n	80056f0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	627a      	str	r2, [r7, #36]	; 0x24
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	6979      	ldr	r1, [r7, #20]
 8005722:	69b8      	ldr	r0, [r7, #24]
 8005724:	f7ff fe70 	bl	8005408 <_SendPacket>
  RECORD_END();
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f383 8811 	msr	BASEPRI, r3
}
 800572e:	bf00      	nop
 8005730:	3730      	adds	r7, #48	; 0x30
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200133b4 	.word	0x200133b4

0800573c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b08e      	sub	sp, #56	; 0x38
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800574a:	f3ef 8311 	mrs	r3, BASEPRI
 800574e:	f04f 0120 	mov.w	r1, #32
 8005752:	f381 8811 	msr	BASEPRI, r1
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	4832      	ldr	r0, [pc, #200]	; (8005824 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800575a:	f7ff fd65 	bl	8005228 <_PreparePacket>
 800575e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	633b      	str	r3, [r7, #48]	; 0x30
 800576c:	e00b      	b.n	8005786 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	b2da      	uxtb	r2, r3
 8005772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	6379      	str	r1, [r7, #52]	; 0x34
 8005778:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	09db      	lsrs	r3, r3, #7
 8005784:	633b      	str	r3, [r7, #48]	; 0x30
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	2b7f      	cmp	r3, #127	; 0x7f
 800578a:	d8f0      	bhi.n	800576e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	637a      	str	r2, [r7, #52]	; 0x34
 8005792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a4:	e00b      	b.n	80057be <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	1c59      	adds	r1, r3, #1
 80057ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	09db      	lsrs	r3, r3, #7
 80057bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	2b7f      	cmp	r3, #127	; 0x7f
 80057c2:	d8f0      	bhi.n	80057a6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	623b      	str	r3, [r7, #32]
 80057dc:	e00b      	b.n	80057f6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	1c59      	adds	r1, r3, #1
 80057e6:	6279      	str	r1, [r7, #36]	; 0x24
 80057e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	09db      	lsrs	r3, r3, #7
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2b7f      	cmp	r3, #127	; 0x7f
 80057fa:	d8f0      	bhi.n	80057de <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	627a      	str	r2, [r7, #36]	; 0x24
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	6979      	ldr	r1, [r7, #20]
 8005810:	69b8      	ldr	r0, [r7, #24]
 8005812:	f7ff fdf9 	bl	8005408 <_SendPacket>
  RECORD_END();
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	f383 8811 	msr	BASEPRI, r3
}
 800581c:	bf00      	nop
 800581e:	3738      	adds	r7, #56	; 0x38
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	200133b4 	.word	0x200133b4

08005828 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b090      	sub	sp, #64	; 0x40
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005836:	f3ef 8311 	mrs	r3, BASEPRI
 800583a:	f04f 0120 	mov.w	r1, #32
 800583e:	f381 8811 	msr	BASEPRI, r1
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	4840      	ldr	r0, [pc, #256]	; (8005948 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005846:	f7ff fcef 	bl	8005228 <_PreparePacket>
 800584a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
 8005858:	e00b      	b.n	8005872 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	b2da      	uxtb	r2, r3
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005860:	1c59      	adds	r1, r3, #1
 8005862:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	09db      	lsrs	r3, r3, #7
 8005870:	63bb      	str	r3, [r7, #56]	; 0x38
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	2b7f      	cmp	r3, #127	; 0x7f
 8005876:	d8f0      	bhi.n	800585a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800587e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005886:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	633b      	str	r3, [r7, #48]	; 0x30
 8005890:	e00b      	b.n	80058aa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	b2da      	uxtb	r2, r3
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	1c59      	adds	r1, r3, #1
 800589a:	6379      	str	r1, [r7, #52]	; 0x34
 800589c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	09db      	lsrs	r3, r3, #7
 80058a8:	633b      	str	r3, [r7, #48]	; 0x30
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	2b7f      	cmp	r3, #127	; 0x7f
 80058ae:	d8f0      	bhi.n	8005892 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	637a      	str	r2, [r7, #52]	; 0x34
 80058b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c8:	e00b      	b.n	80058e2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	1c59      	adds	r1, r3, #1
 80058d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	09db      	lsrs	r3, r3, #7
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	2b7f      	cmp	r3, #127	; 0x7f
 80058e6:	d8f0      	bhi.n	80058ca <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
 80058fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fe:	623b      	str	r3, [r7, #32]
 8005900:	e00b      	b.n	800591a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	1c59      	adds	r1, r3, #1
 800590a:	6279      	str	r1, [r7, #36]	; 0x24
 800590c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	09db      	lsrs	r3, r3, #7
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b7f      	cmp	r3, #127	; 0x7f
 800591e:	d8f0      	bhi.n	8005902 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	627a      	str	r2, [r7, #36]	; 0x24
 8005926:	6a3a      	ldr	r2, [r7, #32]
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	6979      	ldr	r1, [r7, #20]
 8005934:	69b8      	ldr	r0, [r7, #24]
 8005936:	f7ff fd67 	bl	8005408 <_SendPacket>
  RECORD_END();
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f383 8811 	msr	BASEPRI, r3
}
 8005940:	bf00      	nop
 8005942:	3740      	adds	r7, #64	; 0x40
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	200133b4 	.word	0x200133b4

0800594c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	; 0x30
 8005950:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005952:	4b58      	ldr	r3, [pc, #352]	; (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005954:	2201      	movs	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005958:	f3ef 8311 	mrs	r3, BASEPRI
 800595c:	f04f 0120 	mov.w	r1, #32
 8005960:	f381 8811 	msr	BASEPRI, r1
 8005964:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005966:	4b53      	ldr	r3, [pc, #332]	; (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	220a      	movs	r2, #10
 800596c:	4952      	ldr	r1, [pc, #328]	; (8005ab8 <SEGGER_SYSVIEW_Start+0x16c>)
 800596e:	4618      	mov	r0, r3
 8005970:	f7fa fc2e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800597a:	200a      	movs	r0, #10
 800597c:	f7ff fe2a 	bl	80055d4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005980:	f3ef 8311 	mrs	r3, BASEPRI
 8005984:	f04f 0120 	mov.w	r1, #32
 8005988:	f381 8811 	msr	BASEPRI, r1
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	484b      	ldr	r0, [pc, #300]	; (8005abc <SEGGER_SYSVIEW_Start+0x170>)
 8005990:	f7ff fc4a 	bl	8005228 <_PreparePacket>
 8005994:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599e:	4b45      	ldr	r3, [pc, #276]	; (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a4:	e00b      	b.n	80059be <SEGGER_SYSVIEW_Start+0x72>
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	1c59      	adds	r1, r3, #1
 80059ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	09db      	lsrs	r3, r3, #7
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	2b7f      	cmp	r3, #127	; 0x7f
 80059c2:	d8f0      	bhi.n	80059a6 <SEGGER_SYSVIEW_Start+0x5a>
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
 80059d8:	4b36      	ldr	r3, [pc, #216]	; (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	623b      	str	r3, [r7, #32]
 80059de:	e00b      	b.n	80059f8 <SEGGER_SYSVIEW_Start+0xac>
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	1c59      	adds	r1, r3, #1
 80059e8:	6279      	str	r1, [r7, #36]	; 0x24
 80059ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	09db      	lsrs	r3, r3, #7
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	2b7f      	cmp	r3, #127	; 0x7f
 80059fc:	d8f0      	bhi.n	80059e0 <SEGGER_SYSVIEW_Start+0x94>
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	627a      	str	r2, [r7, #36]	; 0x24
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	61fb      	str	r3, [r7, #28]
 8005a12:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	e00b      	b.n	8005a32 <SEGGER_SYSVIEW_Start+0xe6>
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	61f9      	str	r1, [r7, #28]
 8005a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	09db      	lsrs	r3, r3, #7
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b7f      	cmp	r3, #127	; 0x7f
 8005a36:	d8f0      	bhi.n	8005a1a <SEGGER_SYSVIEW_Start+0xce>
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	61fa      	str	r2, [r7, #28]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	e00b      	b.n	8005a6a <SEGGER_SYSVIEW_Start+0x11e>
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	1c59      	adds	r1, r3, #1
 8005a5a:	6179      	str	r1, [r7, #20]
 8005a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	09db      	lsrs	r3, r3, #7
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a6e:	d8f0      	bhi.n	8005a52 <SEGGER_SYSVIEW_Start+0x106>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	617a      	str	r2, [r7, #20]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a80:	2218      	movs	r2, #24
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fcbf 	bl	8005408 <_SendPacket>
      RECORD_END();
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a90:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005a98:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <SEGGER_SYSVIEW_Start+0x168>)
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005a9e:	f000 f9c7 	bl	8005e30 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005aa2:	f000 f9b1 	bl	8005e08 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005aa6:	f000 fc5f 	bl	8006368 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005aaa:	bf00      	nop
 8005aac:	3730      	adds	r7, #48	; 0x30
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20013384 	.word	0x20013384
 8005ab8:	080065f8 	.word	0x080065f8
 8005abc:	200133b4 	.word	0x200133b4

08005ac0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8005aca:	f04f 0120 	mov.w	r1, #32
 8005ace:	f381 8811 	msr	BASEPRI, r1
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	480b      	ldr	r0, [pc, #44]	; (8005b04 <SEGGER_SYSVIEW_Stop+0x44>)
 8005ad6:	f7ff fba7 	bl	8005228 <_PreparePacket>
 8005ada:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <SEGGER_SYSVIEW_Stop+0x48>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005ae4:	220b      	movs	r2, #11
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	6838      	ldr	r0, [r7, #0]
 8005aea:	f7ff fc8d 	bl	8005408 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <SEGGER_SYSVIEW_Stop+0x48>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f383 8811 	msr	BASEPRI, r3
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200133b4 	.word	0x200133b4
 8005b08:	20013384 	.word	0x20013384

08005b0c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	; 0x30
 8005b10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b12:	f3ef 8311 	mrs	r3, BASEPRI
 8005b16:	f04f 0120 	mov.w	r1, #32
 8005b1a:	f381 8811 	msr	BASEPRI, r1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	4845      	ldr	r0, [pc, #276]	; (8005c38 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005b22:	f7ff fb81 	bl	8005228 <_PreparePacket>
 8005b26:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b30:	4b42      	ldr	r3, [pc, #264]	; (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b36:	e00b      	b.n	8005b50 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	1c59      	adds	r1, r3, #1
 8005b40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	09db      	lsrs	r3, r3, #7
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	2b7f      	cmp	r3, #127	; 0x7f
 8005b54:	d8f0      	bhi.n	8005b38 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6a:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	623b      	str	r3, [r7, #32]
 8005b70:	e00b      	b.n	8005b8a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	1c59      	adds	r1, r3, #1
 8005b7a:	6279      	str	r1, [r7, #36]	; 0x24
 8005b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	09db      	lsrs	r3, r3, #7
 8005b88:	623b      	str	r3, [r7, #32]
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b8e:	d8f0      	bhi.n	8005b72 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	627a      	str	r2, [r7, #36]	; 0x24
 8005b96:	6a3a      	ldr	r2, [r7, #32]
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	4b25      	ldr	r3, [pc, #148]	; (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	e00b      	b.n	8005bc4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	61f9      	str	r1, [r7, #28]
 8005bb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	09db      	lsrs	r3, r3, #7
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc8:	d8f0      	bhi.n	8005bac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	61fa      	str	r2, [r7, #28]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e00b      	b.n	8005bfc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	6179      	str	r1, [r7, #20]
 8005bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	09db      	lsrs	r3, r3, #7
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005c00:	d8f0      	bhi.n	8005be4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	617a      	str	r2, [r7, #20]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c12:	2218      	movs	r2, #24
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	68b8      	ldr	r0, [r7, #8]
 8005c18:	f7ff fbf6 	bl	8005408 <_SendPacket>
  RECORD_END();
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c22:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	4798      	blx	r3
  }
}
 8005c30:	bf00      	nop
 8005c32:	3730      	adds	r7, #48	; 0x30
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	200133b4 	.word	0x200133b4
 8005c3c:	20013384 	.word	0x20013384

08005c40 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b092      	sub	sp, #72	; 0x48
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005c48:	f3ef 8311 	mrs	r3, BASEPRI
 8005c4c:	f04f 0120 	mov.w	r1, #32
 8005c50:	f381 8811 	msr	BASEPRI, r1
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	486a      	ldr	r0, [pc, #424]	; (8005e00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005c58:	f7ff fae6 	bl	8005228 <_PreparePacket>
 8005c5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	647b      	str	r3, [r7, #68]	; 0x44
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b66      	ldr	r3, [pc, #408]	; (8005e04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	643b      	str	r3, [r7, #64]	; 0x40
 8005c72:	e00b      	b.n	8005c8c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7a:	1c59      	adds	r1, r3, #1
 8005c7c:	6479      	str	r1, [r7, #68]	; 0x44
 8005c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c88:	09db      	lsrs	r3, r3, #7
 8005c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c90:	d8f0      	bhi.n	8005c74 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	647a      	str	r2, [r7, #68]	; 0x44
 8005c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cac:	e00b      	b.n	8005cc6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	09db      	lsrs	r3, r3, #7
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cca:	d8f0      	bhi.n	8005cae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cda:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff fa4f 	bl	8005188 <_EncodeStr>
 8005cea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005cec:	2209      	movs	r2, #9
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	6938      	ldr	r0, [r7, #16]
 8005cf2:	f7ff fb89 	bl	8005408 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b40      	ldr	r3, [pc, #256]	; (8005e04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	633b      	str	r3, [r7, #48]	; 0x30
 8005d0a:	e00b      	b.n	8005d24 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	6379      	str	r1, [r7, #52]	; 0x34
 8005d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	09db      	lsrs	r3, r3, #7
 8005d22:	633b      	str	r3, [r7, #48]	; 0x30
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2b7f      	cmp	r3, #127	; 0x7f
 8005d28:	d8f0      	bhi.n	8005d0c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	637a      	str	r2, [r7, #52]	; 0x34
 8005d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d44:	e00b      	b.n	8005d5e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	1c59      	adds	r1, r3, #1
 8005d4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	09db      	lsrs	r3, r3, #7
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	2b7f      	cmp	r3, #127	; 0x7f
 8005d62:	d8f0      	bhi.n	8005d46 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	623b      	str	r3, [r7, #32]
 8005d7e:	e00b      	b.n	8005d98 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	6279      	str	r1, [r7, #36]	; 0x24
 8005d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	09db      	lsrs	r3, r3, #7
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d9c:	d8f0      	bhi.n	8005d80 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	627a      	str	r2, [r7, #36]	; 0x24
 8005da4:	6a3a      	ldr	r2, [r7, #32]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	2300      	movs	r3, #0
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	e00b      	b.n	8005dd0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	1c59      	adds	r1, r3, #1
 8005dc0:	61f9      	str	r1, [r7, #28]
 8005dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	09db      	lsrs	r3, r3, #7
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd4:	d8f0      	bhi.n	8005db8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	61fa      	str	r2, [r7, #28]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005de6:	2215      	movs	r2, #21
 8005de8:	68f9      	ldr	r1, [r7, #12]
 8005dea:	6938      	ldr	r0, [r7, #16]
 8005dec:	f7ff fb0c 	bl	8005408 <_SendPacket>
  RECORD_END();
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f383 8811 	msr	BASEPRI, r3
}
 8005df6:	bf00      	nop
 8005df8:	3748      	adds	r7, #72	; 0x48
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	200133b4 	.word	0x200133b4
 8005e04:	20013384 	.word	0x20013384

08005e08 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005e0c:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005e1e:	4b03      	ldr	r3, [pc, #12]	; (8005e2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4798      	blx	r3
  }
}
 8005e26:	bf00      	nop
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20013384 	.word	0x20013384

08005e30 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005e36:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01a      	beq.n	8005e74 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005e3e:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d015      	beq.n	8005e74 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005e48:	4b10      	ldr	r3, [pc, #64]	; (8005e8c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4798      	blx	r3
 8005e50:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005e54:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005e56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	000a      	movs	r2, r1
 8005e64:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005e66:	4613      	mov	r3, r2
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	200d      	movs	r0, #13
 8005e6e:	f7ff fc0b 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x2>
 8005e72:	e006      	b.n	8005e82 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	200c      	movs	r0, #12
 8005e7c:	f7ff fbc8 	bl	8005610 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20013384 	.word	0x20013384
 8005e90:	e0001004 	.word	0xe0001004

08005e94 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e9e:	f04f 0120 	mov.w	r1, #32
 8005ea2:	f381 8811 	msr	BASEPRI, r1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	4819      	ldr	r0, [pc, #100]	; (8005f10 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005eaa:	f7ff f9bd 	bl	8005228 <_PreparePacket>
 8005eae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005eb4:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	e00b      	b.n	8005ee0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	1c59      	adds	r1, r3, #1
 8005ed0:	6179      	str	r1, [r7, #20]
 8005ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	09db      	lsrs	r3, r3, #7
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee4:	d8f0      	bhi.n	8005ec8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	617a      	str	r2, [r7, #20]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	68b8      	ldr	r0, [r7, #8]
 8005efc:	f7ff fa84 	bl	8005408 <_SendPacket>
  RECORD_END();
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f383 8811 	msr	BASEPRI, r3
}
 8005f06:	bf00      	nop
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	200133b4 	.word	0x200133b4
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f22:	f04f 0120 	mov.w	r1, #32
 8005f26:	f381 8811 	msr	BASEPRI, r1
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	4807      	ldr	r0, [pc, #28]	; (8005f4c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005f2e:	f7ff f97b 	bl	8005228 <_PreparePacket>
 8005f32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005f34:	2203      	movs	r2, #3
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6838      	ldr	r0, [r7, #0]
 8005f3a:	f7ff fa65 	bl	8005408 <_SendPacket>
  RECORD_END();
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f383 8811 	msr	BASEPRI, r3
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	200133b4 	.word	0x200133b4

08005f50 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f56:	f3ef 8311 	mrs	r3, BASEPRI
 8005f5a:	f04f 0120 	mov.w	r1, #32
 8005f5e:	f381 8811 	msr	BASEPRI, r1
 8005f62:	607b      	str	r3, [r7, #4]
 8005f64:	4807      	ldr	r0, [pc, #28]	; (8005f84 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005f66:	f7ff f95f 	bl	8005228 <_PreparePacket>
 8005f6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005f6c:	2212      	movs	r2, #18
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6838      	ldr	r0, [r7, #0]
 8005f72:	f7ff fa49 	bl	8005408 <_SendPacket>
  RECORD_END();
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f383 8811 	msr	BASEPRI, r3
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	200133b4 	.word	0x200133b4

08005f88 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f92:	f04f 0120 	mov.w	r1, #32
 8005f96:	f381 8811 	msr	BASEPRI, r1
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	4807      	ldr	r0, [pc, #28]	; (8005fbc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005f9e:	f7ff f943 	bl	8005228 <_PreparePacket>
 8005fa2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005fa4:	2211      	movs	r2, #17
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6838      	ldr	r0, [r7, #0]
 8005faa:	f7ff fa2d 	bl	8005408 <_SendPacket>
  RECORD_END();
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f383 8811 	msr	BASEPRI, r3
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	200133b4 	.word	0x200133b4

08005fc0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fcc:	f04f 0120 	mov.w	r1, #32
 8005fd0:	f381 8811 	msr	BASEPRI, r1
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	4819      	ldr	r0, [pc, #100]	; (800603c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005fd8:	f7ff f926 	bl	8005228 <_PreparePacket>
 8005fdc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fe2:	4b17      	ldr	r3, [pc, #92]	; (8006040 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	e00b      	b.n	800600e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	1c59      	adds	r1, r3, #1
 8005ffe:	61f9      	str	r1, [r7, #28]
 8006000:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	09db      	lsrs	r3, r3, #7
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b7f      	cmp	r3, #127	; 0x7f
 8006012:	d8f0      	bhi.n	8005ff6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	61fa      	str	r2, [r7, #28]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006024:	2208      	movs	r2, #8
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	6938      	ldr	r0, [r7, #16]
 800602a:	f7ff f9ed 	bl	8005408 <_SendPacket>
  RECORD_END();
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f383 8811 	msr	BASEPRI, r3
}
 8006034:	bf00      	nop
 8006036:	3720      	adds	r7, #32
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	200133b4 	.word	0x200133b4
 8006040:	20013384 	.word	0x20013384

08006044 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800604c:	f3ef 8311 	mrs	r3, BASEPRI
 8006050:	f04f 0120 	mov.w	r1, #32
 8006054:	f381 8811 	msr	BASEPRI, r1
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	4819      	ldr	r0, [pc, #100]	; (80060c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800605c:	f7ff f8e4 	bl	8005228 <_PreparePacket>
 8006060:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006066:	4b17      	ldr	r3, [pc, #92]	; (80060c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e00b      	b.n	8006092 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	b2da      	uxtb	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	61f9      	str	r1, [r7, #28]
 8006084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b7f      	cmp	r3, #127	; 0x7f
 8006096:	d8f0      	bhi.n	800607a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	61fa      	str	r2, [r7, #28]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80060a8:	2204      	movs	r2, #4
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	6938      	ldr	r0, [r7, #16]
 80060ae:	f7ff f9ab 	bl	8005408 <_SendPacket>
  RECORD_END();
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f383 8811 	msr	BASEPRI, r3
}
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	200133b4 	.word	0x200133b4
 80060c4:	20013384 	.word	0x20013384

080060c8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060d0:	f3ef 8311 	mrs	r3, BASEPRI
 80060d4:	f04f 0120 	mov.w	r1, #32
 80060d8:	f381 8811 	msr	BASEPRI, r1
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	4819      	ldr	r0, [pc, #100]	; (8006144 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80060e0:	f7ff f8a2 	bl	8005228 <_PreparePacket>
 80060e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060ea:	4b17      	ldr	r3, [pc, #92]	; (8006148 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e00b      	b.n	8006116 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	1c59      	adds	r1, r3, #1
 8006106:	61f9      	str	r1, [r7, #28]
 8006108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	09db      	lsrs	r3, r3, #7
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b7f      	cmp	r3, #127	; 0x7f
 800611a:	d8f0      	bhi.n	80060fe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	61fa      	str	r2, [r7, #28]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800612c:	2206      	movs	r2, #6
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	6938      	ldr	r0, [r7, #16]
 8006132:	f7ff f969 	bl	8005408 <_SendPacket>
  RECORD_END();
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f383 8811 	msr	BASEPRI, r3
}
 800613c:	bf00      	nop
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	200133b4 	.word	0x200133b4
 8006148:	20013384 	.word	0x20013384

0800614c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006156:	f3ef 8311 	mrs	r3, BASEPRI
 800615a:	f04f 0120 	mov.w	r1, #32
 800615e:	f381 8811 	msr	BASEPRI, r1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	4827      	ldr	r0, [pc, #156]	; (8006204 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006166:	f7ff f85f 	bl	8005228 <_PreparePacket>
 800616a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006170:	4b25      	ldr	r3, [pc, #148]	; (8006208 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	623b      	str	r3, [r7, #32]
 8006182:	e00b      	b.n	800619c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	b2da      	uxtb	r2, r3
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	1c59      	adds	r1, r3, #1
 800618c:	6279      	str	r1, [r7, #36]	; 0x24
 800618e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	09db      	lsrs	r3, r3, #7
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	2b7f      	cmp	r3, #127	; 0x7f
 80061a0:	d8f0      	bhi.n	8006184 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	627a      	str	r2, [r7, #36]	; 0x24
 80061a8:	6a3a      	ldr	r2, [r7, #32]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	e00b      	b.n	80061d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	61f9      	str	r1, [r7, #28]
 80061c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	09db      	lsrs	r3, r3, #7
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b7f      	cmp	r3, #127	; 0x7f
 80061d8:	d8f0      	bhi.n	80061bc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	61fa      	str	r2, [r7, #28]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80061ea:	2207      	movs	r2, #7
 80061ec:	68f9      	ldr	r1, [r7, #12]
 80061ee:	6938      	ldr	r0, [r7, #16]
 80061f0:	f7ff f90a 	bl	8005408 <_SendPacket>
  RECORD_END();
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f383 8811 	msr	BASEPRI, r3
}
 80061fa:	bf00      	nop
 80061fc:	3728      	adds	r7, #40	; 0x28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200133b4 	.word	0x200133b4
 8006208:	20013384 	.word	0x20013384

0800620c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006214:	4b04      	ldr	r3, [pc, #16]	; (8006228 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	1ad3      	subs	r3, r2, r3
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	20013384 	.word	0x20013384

0800622c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b08c      	sub	sp, #48	; 0x30
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006236:	4b3b      	ldr	r3, [pc, #236]	; (8006324 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d06d      	beq.n	800631a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800623e:	4b39      	ldr	r3, [pc, #228]	; (8006324 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006244:	2300      	movs	r3, #0
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
 8006248:	e008      	b.n	800625c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	3301      	adds	r3, #1
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006260:	429a      	cmp	r2, r3
 8006262:	d3f2      	bcc.n	800624a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006264:	e000      	b.n	8006268 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006266:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d055      	beq.n	800631a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800626e:	f3ef 8311 	mrs	r3, BASEPRI
 8006272:	f04f 0120 	mov.w	r1, #32
 8006276:	f381 8811 	msr	BASEPRI, r1
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	482a      	ldr	r0, [pc, #168]	; (8006328 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800627e:	f7fe ffd3 	bl	8005228 <_PreparePacket>
 8006282:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	e00b      	b.n	80062aa <SEGGER_SYSVIEW_SendModule+0x7e>
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1c59      	adds	r1, r3, #1
 800629a:	6279      	str	r1, [r7, #36]	; 0x24
 800629c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	09db      	lsrs	r3, r3, #7
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	2b7f      	cmp	r3, #127	; 0x7f
 80062ae:	d8f0      	bhi.n	8006292 <SEGGER_SYSVIEW_SendModule+0x66>
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	627a      	str	r2, [r7, #36]	; 0x24
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	61fb      	str	r3, [r7, #28]
 80062c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	e00b      	b.n	80062e4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	1c59      	adds	r1, r3, #1
 80062d4:	61f9      	str	r1, [r7, #28]
 80062d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	09db      	lsrs	r3, r3, #7
 80062e2:	61bb      	str	r3, [r7, #24]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	2b7f      	cmp	r3, #127	; 0x7f
 80062e8:	d8f0      	bhi.n	80062cc <SEGGER_SYSVIEW_SendModule+0xa0>
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	61fa      	str	r2, [r7, #28]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2280      	movs	r2, #128	; 0x80
 8006300:	4619      	mov	r1, r3
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7fe ff40 	bl	8005188 <_EncodeStr>
 8006308:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800630a:	2216      	movs	r2, #22
 800630c:	68f9      	ldr	r1, [r7, #12]
 800630e:	6938      	ldr	r0, [r7, #16]
 8006310:	f7ff f87a 	bl	8005408 <_SendPacket>
      RECORD_END();
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800631a:	bf00      	nop
 800631c:	3730      	adds	r7, #48	; 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	200133ac 	.word	0x200133ac
 8006328:	200133b4 	.word	0x200133b4

0800632c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00f      	beq.n	800635a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800633a:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f2      	bne.n	8006340 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200133ac 	.word	0x200133ac

08006368 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800636e:	f3ef 8311 	mrs	r3, BASEPRI
 8006372:	f04f 0120 	mov.w	r1, #32
 8006376:	f381 8811 	msr	BASEPRI, r1
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	4817      	ldr	r0, [pc, #92]	; (80063dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800637e:	f7fe ff53 	bl	8005228 <_PreparePacket>
 8006382:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	e00b      	b.n	80063ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1c59      	adds	r1, r3, #1
 800639c:	6179      	str	r1, [r7, #20]
 800639e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	09db      	lsrs	r3, r3, #7
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b7f      	cmp	r3, #127	; 0x7f
 80063b0:	d8f0      	bhi.n	8006394 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	617a      	str	r2, [r7, #20]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80063c2:	221b      	movs	r2, #27
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	68b8      	ldr	r0, [r7, #8]
 80063c8:	f7ff f81e 	bl	8005408 <_SendPacket>
  RECORD_END();
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f383 8811 	msr	BASEPRI, r3
}
 80063d2:	bf00      	nop
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	200133b4 	.word	0x200133b4
 80063e0:	200133b0 	.word	0x200133b0

080063e4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	; 0x28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063ec:	f3ef 8311 	mrs	r3, BASEPRI
 80063f0:	f04f 0120 	mov.w	r1, #32
 80063f4:	f381 8811 	msr	BASEPRI, r1
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	4827      	ldr	r0, [pc, #156]	; (8006498 <SEGGER_SYSVIEW_Warn+0xb4>)
 80063fc:	f7fe ff14 	bl	8005228 <_PreparePacket>
 8006400:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006402:	2280      	movs	r2, #128	; 0x80
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	6938      	ldr	r0, [r7, #16]
 8006408:	f7fe febe 	bl	8005188 <_EncodeStr>
 800640c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
 8006412:	2301      	movs	r3, #1
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	e00b      	b.n	8006430 <SEGGER_SYSVIEW_Warn+0x4c>
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	1c59      	adds	r1, r3, #1
 8006420:	6279      	str	r1, [r7, #36]	; 0x24
 8006422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	09db      	lsrs	r3, r3, #7
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2b7f      	cmp	r3, #127	; 0x7f
 8006434:	d8f0      	bhi.n	8006418 <SEGGER_SYSVIEW_Warn+0x34>
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	627a      	str	r2, [r7, #36]	; 0x24
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e00b      	b.n	8006468 <SEGGER_SYSVIEW_Warn+0x84>
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	61f9      	str	r1, [r7, #28]
 800645a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	09db      	lsrs	r3, r3, #7
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b7f      	cmp	r3, #127	; 0x7f
 800646c:	d8f0      	bhi.n	8006450 <SEGGER_SYSVIEW_Warn+0x6c>
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	61fa      	str	r2, [r7, #28]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800647e:	221a      	movs	r2, #26
 8006480:	68f9      	ldr	r1, [r7, #12]
 8006482:	6938      	ldr	r0, [r7, #16]
 8006484:	f7fe ffc0 	bl	8005408 <_SendPacket>
  RECORD_END();
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
 8006490:	3728      	adds	r7, #40	; 0x28
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	200133b4 	.word	0x200133b4

0800649c <__libc_init_array>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	4d0d      	ldr	r5, [pc, #52]	; (80064d4 <__libc_init_array+0x38>)
 80064a0:	4c0d      	ldr	r4, [pc, #52]	; (80064d8 <__libc_init_array+0x3c>)
 80064a2:	1b64      	subs	r4, r4, r5
 80064a4:	10a4      	asrs	r4, r4, #2
 80064a6:	2600      	movs	r6, #0
 80064a8:	42a6      	cmp	r6, r4
 80064aa:	d109      	bne.n	80064c0 <__libc_init_array+0x24>
 80064ac:	4d0b      	ldr	r5, [pc, #44]	; (80064dc <__libc_init_array+0x40>)
 80064ae:	4c0c      	ldr	r4, [pc, #48]	; (80064e0 <__libc_init_array+0x44>)
 80064b0:	f000 f83e 	bl	8006530 <_init>
 80064b4:	1b64      	subs	r4, r4, r5
 80064b6:	10a4      	asrs	r4, r4, #2
 80064b8:	2600      	movs	r6, #0
 80064ba:	42a6      	cmp	r6, r4
 80064bc:	d105      	bne.n	80064ca <__libc_init_array+0x2e>
 80064be:	bd70      	pop	{r4, r5, r6, pc}
 80064c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c4:	4798      	blx	r3
 80064c6:	3601      	adds	r6, #1
 80064c8:	e7ee      	b.n	80064a8 <__libc_init_array+0xc>
 80064ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ce:	4798      	blx	r3
 80064d0:	3601      	adds	r6, #1
 80064d2:	e7f2      	b.n	80064ba <__libc_init_array+0x1e>
 80064d4:	0800660c 	.word	0x0800660c
 80064d8:	0800660c 	.word	0x0800660c
 80064dc:	0800660c 	.word	0x0800660c
 80064e0:	08006610 	.word	0x08006610

080064e4 <memcmp>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	3901      	subs	r1, #1
 80064e8:	4402      	add	r2, r0
 80064ea:	4290      	cmp	r0, r2
 80064ec:	d101      	bne.n	80064f2 <memcmp+0xe>
 80064ee:	2000      	movs	r0, #0
 80064f0:	e005      	b.n	80064fe <memcmp+0x1a>
 80064f2:	7803      	ldrb	r3, [r0, #0]
 80064f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	d001      	beq.n	8006500 <memcmp+0x1c>
 80064fc:	1b18      	subs	r0, r3, r4
 80064fe:	bd10      	pop	{r4, pc}
 8006500:	3001      	adds	r0, #1
 8006502:	e7f2      	b.n	80064ea <memcmp+0x6>

08006504 <memcpy>:
 8006504:	440a      	add	r2, r1
 8006506:	4291      	cmp	r1, r2
 8006508:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800650c:	d100      	bne.n	8006510 <memcpy+0xc>
 800650e:	4770      	bx	lr
 8006510:	b510      	push	{r4, lr}
 8006512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800651a:	4291      	cmp	r1, r2
 800651c:	d1f9      	bne.n	8006512 <memcpy+0xe>
 800651e:	bd10      	pop	{r4, pc}

08006520 <memset>:
 8006520:	4402      	add	r2, r0
 8006522:	4603      	mov	r3, r0
 8006524:	4293      	cmp	r3, r2
 8006526:	d100      	bne.n	800652a <memset+0xa>
 8006528:	4770      	bx	lr
 800652a:	f803 1b01 	strb.w	r1, [r3], #1
 800652e:	e7f9      	b.n	8006524 <memset+0x4>

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr
