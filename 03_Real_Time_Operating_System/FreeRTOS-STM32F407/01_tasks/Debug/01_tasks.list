
01_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007234  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080073c4  080073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800755c  0800755c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007564  08007564  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800756c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a4  20000078  080075e4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001451c  080075e4  0002451c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188fb  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003147  00000000  00000000  000389a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237a0  00000000  00000000  0003df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153e2  00000000  00000000  000616c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d72a7  00000000  00000000  00076aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014dd51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b0  00000000  00000000  0014dda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073ac 	.word	0x080073ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080073ac 	.word	0x080073ac

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014464 	.word	0x20014464
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fb4f 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f851 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8b9 	bl	800078c <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <main+0x94>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <main+0x94>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6013      	str	r3, [r2, #0]

  //SEGGER_UART_init(500000);

  SEGGER_SYSVIEW_Conf();
 8000626:	f004 f9b5 	bl	8004994 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800062a:	f005 fc55 	bl	8005ed8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <main+0x98>)
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4919      	ldr	r1, [pc, #100]	; (80006a4 <main+0x9c>)
 800063e:	481a      	ldr	r0, [pc, #104]	; (80006a8 <main+0xa0>)
 8000640:	f002 fb30 	bl	8002ca4 <xTaskCreate>
 8000644:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0xa4>)
 800066c:	22c8      	movs	r2, #200	; 0xc8
 800066e:	4910      	ldr	r1, [pc, #64]	; (80006b0 <main+0xa8>)
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <main+0xac>)
 8000672:	f002 fb17 	bl	8002ca4 <xTaskCreate>
 8000676:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00a      	beq.n	8000694 <main+0x8c>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	60fb      	str	r3, [r7, #12]
    }
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <main+0x8a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000694:	f002 fc5c 	bl	8002f50 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x90>
 800069a:	bf00      	nop
 800069c:	e0001000 	.word	0xe0001000
 80006a0:	080073c4 	.word	0x080073c4
 80006a4:	080073dc 	.word	0x080073dc
 80006a8:	08000a4d 	.word	0x08000a4d
 80006ac:	080073e4 	.word	0x080073e4
 80006b0:	080073fc 	.word	0x080073fc
 80006b4:	08000a89 	.word	0x08000a89

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 fa26 	bl	8006b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SystemClock_Config+0xcc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <SystemClock_Config+0xd0>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800072c:	2332      	movs	r3, #50	; 0x32
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000730:	2304      	movs	r3, #4
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000734:	2307      	movs	r3, #7
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fd91 	bl	8001264 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 f9ce 	bl	8000ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fff2 	bl	8001754 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000776:	f000 f9b7 	bl	8000ae8 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4ba1      	ldr	r3, [pc, #644]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aa0      	ldr	r2, [pc, #640]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b9e      	ldr	r3, [pc, #632]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b9a      	ldr	r3, [pc, #616]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a99      	ldr	r2, [pc, #612]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b97      	ldr	r3, [pc, #604]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b93      	ldr	r3, [pc, #588]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a92      	ldr	r2, [pc, #584]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b90      	ldr	r3, [pc, #576]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b8c      	ldr	r3, [pc, #560]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a8b      	ldr	r2, [pc, #556]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b89      	ldr	r3, [pc, #548]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b85      	ldr	r3, [pc, #532]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a84      	ldr	r2, [pc, #528]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b82      	ldr	r3, [pc, #520]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b7e      	ldr	r3, [pc, #504]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a7d      	ldr	r2, [pc, #500]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b7b      	ldr	r3, [pc, #492]	; (8000a2c <MX_GPIO_Init+0x2a0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4878      	ldr	r0, [pc, #480]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000850:	f000 fcee 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4876      	ldr	r0, [pc, #472]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 800085a:	f000 fce9 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085e:	2200      	movs	r2, #0
 8000860:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000864:	4874      	ldr	r0, [pc, #464]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fce3 	bl	8001230 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	486b      	ldr	r0, [pc, #428]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000882:	f000 fb39 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4865      	ldr	r0, [pc, #404]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 800089e:	f000 fb2b 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 80008be:	f000 fb1b 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	4b5d      	ldr	r3, [pc, #372]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	485a      	ldr	r0, [pc, #360]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80008d6:	f000 fb0f 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008da:	2310      	movs	r3, #16
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ea:	2306      	movs	r3, #6
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4852      	ldr	r0, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80008f6:	f000 faff 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008fa:	23e0      	movs	r3, #224	; 0xe0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	484a      	ldr	r0, [pc, #296]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 8000916:	f000 faef 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800091a:	2304      	movs	r3, #4
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4845      	ldr	r0, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 800092e:	f000 fae3 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000944:	2305      	movs	r3, #5
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	483d      	ldr	r0, [pc, #244]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000950:	f000 fad2 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000954:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000958:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4832      	ldr	r0, [pc, #200]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 800096e:	f000 fac3 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000972:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000984:	2306      	movs	r3, #6
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4829      	ldr	r0, [pc, #164]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000990:	f000 fab2 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4825      	ldr	r0, [pc, #148]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80009aa:	f000 faa5 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c0:	230a      	movs	r3, #10
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481d      	ldr	r0, [pc, #116]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80009cc:	f000 fa94 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4815      	ldr	r0, [pc, #84]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 80009e4:	f000 fa88 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ee:	2312      	movs	r3, #18
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fa:	2304      	movs	r3, #4
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000a06:	f000 fa77 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_GPIO_Init+0x2bc>)
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000a1e:	f000 fa6b 	bl	8000ef8 <HAL_GPIO_Init>

}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020c00 	.word	0x40020c00
 8000a3c:	10110000 	.word	0x10110000
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400
 8000a48:	10120000 	.word	0x10120000

08000a4c <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09c      	sub	sp, #112	; 0x70
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	while(1)
	{
		//printf("%s\r\n", (char*) parameters); //through SWO

		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a54:	f107 000c 	add.w	r0, r7, #12
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <task1_handler+0x34>)
 8000a5c:	2164      	movs	r1, #100	; 0x64
 8000a5e:	f006 f863 	bl	8006b28 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4618      	mov	r0, r3
 8000a68:	f005 ffa6 	bl	80069b8 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD(); //leave processor
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <task1_handler+0x38>)
 8000a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	f3bf 8f4f 	dsb	sy
 8000a78:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a7c:	e7ea      	b.n	8000a54 <task1_handler+0x8>
 8000a7e:	bf00      	nop
 8000a80:	08007404 	.word	0x08007404
 8000a84:	e000ed04 	.word	0xe000ed04

08000a88 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09c      	sub	sp, #112	; 0x70
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		//printf("%s\r\n", (char*) parameters);

		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a90:	f107 000c 	add.w	r0, r7, #12
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <task2_handler+0x34>)
 8000a98:	2164      	movs	r1, #100	; 0x64
 8000a9a:	f006 f845 	bl	8006b28 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f005 ff88 	bl	80069b8 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <task2_handler+0x38>)
 8000aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000ab8:	e7ea      	b.n	8000a90 <task2_handler+0x8>
 8000aba:	bf00      	nop
 8000abc:	08007404 	.word	0x08007404
 8000ac0:	e000ed04 	.word	0xe000ed04

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 f90d 	bl	8000cf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40001000 	.word	0x40001000

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b32:	f003 fb79 	bl	8004228 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	f000 f9a3 	bl	8000ea4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b5e:	2036      	movs	r0, #54	; 0x36
 8000b60:	f000 f9bc 	bl	8000edc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_InitTick+0xa4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <HAL_InitTick+0xa4>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_InitTick+0xa4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 0210 	add.w	r2, r7, #16
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 ffca 	bl	8001b24 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b90:	f000 ffb4 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8000b94:	4603      	mov	r3, r0
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <HAL_InitTick+0xa8>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_InitTick+0xac>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <HAL_InitTick+0xb0>)
 8000bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bca:	f000 ffdd 	bl	8001b88 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d104      	bne.n	8000bde <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bd6:	f001 f831 	bl	8001c3c <HAL_TIM_Base_Start_IT>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3730      	adds	r7, #48	; 0x30
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	200143d8 	.word	0x200143d8
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM6_DAC_IRQHandler+0x10>)
 8000c2a:	f001 f877 	bl	8001d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200143d8 	.word	0x200143d8

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c86:	f7ff ffd7 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f005 ff05 	bl	8006a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fcbb 	bl	8000608 <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ca0:	0800756c 	.word	0x0800756c
  ldr r2, =_sbss
 8000ca4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ca8:	2001451c 	.word	0x2001451c

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f8d8 	bl	8000e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff30 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff ff06 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20014420 	.word	0x20014420

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20014420 	.word	0x20014420

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff4c 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb6:	f7ff ff61 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f7ff ffb1 	bl	8000e28 <NVIC_EncodePriority>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff80 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff54 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e16b      	b.n	80011ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 815a 	bne.w	80011e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80b4 	beq.w	80011e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b60      	ldr	r3, [pc, #384]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a5f      	ldr	r2, [pc, #380]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a5b      	ldr	r2, [pc, #364]	; (8001208 <HAL_GPIO_Init+0x310>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a52      	ldr	r2, [pc, #328]	; (800120c <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d02b      	beq.n	800111e <HAL_GPIO_Init+0x226>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a51      	ldr	r2, [pc, #324]	; (8001210 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x222>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a50      	ldr	r2, [pc, #320]	; (8001214 <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x21e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_GPIO_Init+0x324>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x328>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x330>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x20a>
 80010fe:	2307      	movs	r3, #7
 8001100:	e00e      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001102:	2308      	movs	r3, #8
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001106:	2306      	movs	r3, #6
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_GPIO_Init+0x310>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_GPIO_Init+0x334>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <HAL_GPIO_Init+0x334>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_GPIO_Init+0x334>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <HAL_GPIO_Init+0x334>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_GPIO_Init+0x334>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_GPIO_Init+0x334>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f ae90 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40021400 	.word	0x40021400
 8001224:	40021800 	.word	0x40021800
 8001228:	40021c00 	.word	0x40021c00
 800122c:	40013c00 	.word	0x40013c00

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800124c:	e003      	b.n	8001256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e264      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d075      	beq.n	800136e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	4ba3      	ldr	r3, [pc, #652]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b04      	cmp	r3, #4
 800128c:	d00c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128e:	4ba0      	ldr	r3, [pc, #640]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001296:	2b08      	cmp	r3, #8
 8001298:	d112      	bne.n	80012c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129a:	4b9d      	ldr	r3, [pc, #628]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012a6:	d10b      	bne.n	80012c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	4b99      	ldr	r3, [pc, #612]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d05b      	beq.n	800136c <HAL_RCC_OscConfig+0x108>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d157      	bne.n	800136c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e23f      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d106      	bne.n	80012d8 <HAL_RCC_OscConfig+0x74>
 80012ca:	4b91      	ldr	r3, [pc, #580]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a90      	ldr	r2, [pc, #576]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e01d      	b.n	8001314 <HAL_RCC_OscConfig+0xb0>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x98>
 80012e2:	4b8b      	ldr	r3, [pc, #556]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a8a      	ldr	r2, [pc, #552]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a87      	ldr	r2, [pc, #540]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0xb0>
 80012fc:	4b84      	ldr	r3, [pc, #528]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a83      	ldr	r2, [pc, #524]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b81      	ldr	r3, [pc, #516]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a80      	ldr	r2, [pc, #512]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 800130e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fcfe 	bl	8000d1c <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fcfa 	bl	8000d1c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e204      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0xc0>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fcea 	bl	8000d1c <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fce6 	bl	8000d1c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1f0      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	4b6c      	ldr	r3, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0xe8>
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d063      	beq.n	8001442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	4b65      	ldr	r3, [pc, #404]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001386:	4b62      	ldr	r3, [pc, #392]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138e:	2b08      	cmp	r3, #8
 8001390:	d11c      	bne.n	80013cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001392:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d116      	bne.n	80013cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x152>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e1c4      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b6:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4952      	ldr	r1, [pc, #328]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	e03a      	b.n	8001442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d020      	beq.n	8001416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d4:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <HAL_RCC_OscConfig+0x2b0>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fc9f 	bl	8000d1c <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc9b 	bl	8000d1c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1a5      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	4b46      	ldr	r3, [pc, #280]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4940      	ldr	r1, [pc, #256]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <HAL_RCC_OscConfig+0x2b0>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fc7e 	bl	8000d1c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff fc7a 	bl	8000d1c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e184      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	4b36      	ldr	r3, [pc, #216]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d030      	beq.n	80014b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d016      	beq.n	8001484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_RCC_OscConfig+0x2b4>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fc5e 	bl	8000d1c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fc5a 	bl	8000d1c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e164      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x200>
 8001482:	e015      	b.n	80014b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x2b4>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7ff fc47 	bl	8000d1c <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff fc43 	bl	8000d1c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e14d      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80014a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80a0 	beq.w	80015fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10f      	bne.n	80014ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ea:	2301      	movs	r3, #1
 80014ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_RCC_OscConfig+0x2b8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d121      	bne.n	800153e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_RCC_OscConfig+0x2b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_RCC_OscConfig+0x2b8>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001506:	f7ff fc09 	bl	8000d1c <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	e011      	b.n	8001532 <HAL_RCC_OscConfig+0x2ce>
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	42470000 	.word	0x42470000
 8001518:	42470e80 	.word	0x42470e80
 800151c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001520:	f7ff fbfc 	bl	8000d1c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e106      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b85      	ldr	r3, [pc, #532]	; (8001748 <HAL_RCC_OscConfig+0x4e4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d106      	bne.n	8001554 <HAL_RCC_OscConfig+0x2f0>
 8001546:	4b81      	ldr	r3, [pc, #516]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a80      	ldr	r2, [pc, #512]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	e01c      	b.n	800158e <HAL_RCC_OscConfig+0x32a>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b05      	cmp	r3, #5
 800155a:	d10c      	bne.n	8001576 <HAL_RCC_OscConfig+0x312>
 800155c:	4b7b      	ldr	r3, [pc, #492]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a7a      	ldr	r2, [pc, #488]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
 8001568:	4b78      	ldr	r3, [pc, #480]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a77      	ldr	r2, [pc, #476]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6713      	str	r3, [r2, #112]	; 0x70
 8001574:	e00b      	b.n	800158e <HAL_RCC_OscConfig+0x32a>
 8001576:	4b75      	ldr	r3, [pc, #468]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a74      	ldr	r2, [pc, #464]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
 8001582:	4b72      	ldr	r3, [pc, #456]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a71      	ldr	r2, [pc, #452]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d015      	beq.n	80015c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001596:	f7ff fbc1 	bl	8000d1c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	e00a      	b.n	80015b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff fbbd 	bl	8000d1c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e0c5      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b4:	4b65      	ldr	r3, [pc, #404]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0ee      	beq.n	800159e <HAL_RCC_OscConfig+0x33a>
 80015c0:	e014      	b.n	80015ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fbab 	bl	8000d1c <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	e00a      	b.n	80015e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff fba7 	bl	8000d1c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d8:	4293      	cmp	r3, r2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e0af      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e0:	4b5a      	ldr	r3, [pc, #360]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1ee      	bne.n	80015ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d105      	bne.n	80015fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f2:	4b56      	ldr	r3, [pc, #344]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a55      	ldr	r2, [pc, #340]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 80015f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 809b 	beq.w	800173e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b08      	cmp	r3, #8
 8001612:	d05c      	beq.n	80016ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d141      	bne.n	80016a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161c:	4b4c      	ldr	r3, [pc, #304]	; (8001750 <HAL_RCC_OscConfig+0x4ec>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7ff fb7b 	bl	8000d1c <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162a:	f7ff fb77 	bl	8000d1c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e081      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163c:	4b43      	ldr	r3, [pc, #268]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69da      	ldr	r2, [r3, #28]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	019b      	lsls	r3, r3, #6
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	085b      	lsrs	r3, r3, #1
 8001660:	3b01      	subs	r3, #1
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	061b      	lsls	r3, r3, #24
 800166c:	4937      	ldr	r1, [pc, #220]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_RCC_OscConfig+0x4ec>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fb50 	bl	8000d1c <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fb4c 	bl	8000d1c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e056      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x41c>
 800169e:	e04e      	b.n	800173e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_RCC_OscConfig+0x4ec>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fb39 	bl	8000d1c <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fb35 	bl	8000d1c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e03f      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f0      	bne.n	80016ae <HAL_RCC_OscConfig+0x44a>
 80016cc:	e037      	b.n	800173e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e032      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_RCC_OscConfig+0x4e8>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d028      	beq.n	800173a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d121      	bne.n	800173a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d11a      	bne.n	800173a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001710:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001712:	4293      	cmp	r3, r2
 8001714:	d111      	bne.n	800173a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	3b01      	subs	r3, #1
 8001724:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d107      	bne.n	800173a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40007000 	.word	0x40007000
 800174c:	40023800 	.word	0x40023800
 8001750:	42470060 	.word	0x42470060

08001754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0cc      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d90c      	bls.n	8001790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0b8      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a8:	4b59      	ldr	r3, [pc, #356]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a58      	ldr	r2, [pc, #352]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	494d      	ldr	r1, [pc, #308]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d044      	beq.n	8001874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b47      	ldr	r3, [pc, #284]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d119      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e07f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d003      	beq.n	8001812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180e:	2b03      	cmp	r3, #3
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e067      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4934      	ldr	r1, [pc, #208]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001844:	f7ff fa6a 	bl	8000d1c <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff fa66 	bl	8000d1c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e04f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d20c      	bcs.n	800189c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e032      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4916      	ldr	r1, [pc, #88]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	490e      	ldr	r1, [pc, #56]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018da:	f000 f821 	bl	8001920 <HAL_RCC_GetSysClockFreq>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	490a      	ldr	r1, [pc, #40]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	5ccb      	ldrb	r3, [r1, r3]
 80018ee:	fa22 f303 	lsr.w	r3, r2, r3
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_ClockConfig+0x1c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f922 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023c00 	.word	0x40023c00
 8001910:	40023800 	.word	0x40023800
 8001914:	080074ec 	.word	0x080074ec
 8001918:	20000000 	.word	0x20000000
 800191c:	20000004 	.word	0x20000004

08001920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001938:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d00d      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x40>
 8001944:	2b08      	cmp	r3, #8
 8001946:	f200 80bd 	bhi.w	8001ac4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x34>
 800194e:	2b04      	cmp	r3, #4
 8001950:	d003      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x3a>
 8001952:	e0b7      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b61      	ldr	r3, [pc, #388]	; (8001adc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001956:	60bb      	str	r3, [r7, #8]
       break;
 8001958:	e0b7      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800195a:	4b61      	ldr	r3, [pc, #388]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800195c:	60bb      	str	r3, [r7, #8]
      break;
 800195e:	e0b4      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001960:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001968:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196a:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d04d      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001976:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	461a      	mov	r2, r3
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	ea02 0800 	and.w	r8, r2, r0
 800198e:	ea03 0901 	and.w	r9, r3, r1
 8001992:	4640      	mov	r0, r8
 8001994:	4649      	mov	r1, r9
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	014b      	lsls	r3, r1, #5
 80019a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019a4:	0142      	lsls	r2, r0, #5
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	ebb0 0008 	subs.w	r0, r0, r8
 80019ae:	eb61 0109 	sbc.w	r1, r1, r9
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019c0:	0182      	lsls	r2, r0, #6
 80019c2:	1a12      	subs	r2, r2, r0
 80019c4:	eb63 0301 	sbc.w	r3, r3, r1
 80019c8:	f04f 0000 	mov.w	r0, #0
 80019cc:	f04f 0100 	mov.w	r1, #0
 80019d0:	00d9      	lsls	r1, r3, #3
 80019d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019d6:	00d0      	lsls	r0, r2, #3
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	eb12 0208 	adds.w	r2, r2, r8
 80019e0:	eb43 0309 	adc.w	r3, r3, r9
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	0259      	lsls	r1, r3, #9
 80019ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019f2:	0250      	lsls	r0, r2, #9
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	461a      	mov	r2, r3
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f7fe fc84 	bl	8000310 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e04a      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	ea02 0400 	and.w	r4, r2, r0
 8001a2a:	ea03 0501 	and.w	r5, r3, r1
 8001a2e:	4620      	mov	r0, r4
 8001a30:	4629      	mov	r1, r5
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	014b      	lsls	r3, r1, #5
 8001a3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a40:	0142      	lsls	r2, r0, #5
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	1b00      	subs	r0, r0, r4
 8001a48:	eb61 0105 	sbc.w	r1, r1, r5
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	018b      	lsls	r3, r1, #6
 8001a56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a5a:	0182      	lsls	r2, r0, #6
 8001a5c:	1a12      	subs	r2, r2, r0
 8001a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a62:	f04f 0000 	mov.w	r0, #0
 8001a66:	f04f 0100 	mov.w	r1, #0
 8001a6a:	00d9      	lsls	r1, r3, #3
 8001a6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a70:	00d0      	lsls	r0, r2, #3
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	1912      	adds	r2, r2, r4
 8001a78:	eb45 0303 	adc.w	r3, r5, r3
 8001a7c:	f04f 0000 	mov.w	r0, #0
 8001a80:	f04f 0100 	mov.w	r1, #0
 8001a84:	0299      	lsls	r1, r3, #10
 8001a86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a8a:	0290      	lsls	r0, r2, #10
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	461a      	mov	r2, r3
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	f7fe fc38 	bl	8000310 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	60bb      	str	r3, [r7, #8]
      break;
 8001ac2:	e002      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ac6:	60bb      	str	r3, [r7, #8]
      break;
 8001ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aca:	68bb      	ldr	r3, [r7, #8]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	007a1200 	.word	0x007a1200

08001ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0a9b      	lsrs	r3, r3, #10
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	080074fc 	.word	0x080074fc

08001b24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	220f      	movs	r2, #15
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_GetClockConfig+0x5c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	08db      	lsrs	r3, r3, #3
 8001b5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_RCC_GetClockConfig+0x60>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0207 	and.w	r2, r3, #7
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	601a      	str	r2, [r3, #0]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e041      	b.n	8001c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f839 	bl	8001c26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f000 f9d8 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e04e      	b.n	8001cf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d022      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7e:	d01d      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d018      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00e      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d111      	bne.n	8001ce0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d010      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cde:	e007      	b.n	8001cf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40000c00 	.word	0x40000c00
 8001d10:	40010400 	.word	0x40010400
 8001d14:	40014000 	.word	0x40014000
 8001d18:	40001800 	.word	0x40001800

08001d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0202 	mvn.w	r2, #2
 8001d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8ee 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8e0 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8f1 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0204 	mvn.w	r2, #4
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8c4 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8b6 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8c7 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0208 	mvn.w	r2, #8
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2204      	movs	r2, #4
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f89a 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f88c 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f89d 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0210 	mvn.w	r2, #16
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f870 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f862 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f873 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0201 	mvn.w	r2, #1
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fe12 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	2b80      	cmp	r3, #128	; 0x80
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f902 	bl	80020d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d107      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f838 	bl	8001f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0220 	mvn.w	r2, #32
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8cc 	bl	80020bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a40      	ldr	r2, [pc, #256]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9a:	d00f      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3d      	ldr	r2, [pc, #244]	; (8002094 <TIM_Base_SetConfig+0x118>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <TIM_Base_SetConfig+0x11c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3b      	ldr	r2, [pc, #236]	; (800209c <TIM_Base_SetConfig+0x120>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3a      	ldr	r2, [pc, #232]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d027      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <TIM_Base_SetConfig+0x118>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d023      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <TIM_Base_SetConfig+0x11c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	; (800209c <TIM_Base_SetConfig+0x120>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d017      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <TIM_Base_SetConfig+0x128>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <TIM_Base_SetConfig+0x12c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <TIM_Base_SetConfig+0x130>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <TIM_Base_SetConfig+0x134>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <TIM_Base_SetConfig+0x138>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <TIM_Base_SetConfig+0x13c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <TIM_Base_SetConfig+0xf8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	40000400 	.word	0x40000400
 8002098:	40000800 	.word	0x40000800
 800209c:	40000c00 	.word	0x40000c00
 80020a0:	40010400 	.word	0x40010400
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800
 80020b0:	40001800 	.word	0x40001800
 80020b4:	40001c00 	.word	0x40001c00
 80020b8:	40002000 	.word	0x40002000

080020bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0208 	add.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f103 0208 	add.w	r2, r3, #8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f103 0208 	add.w	r2, r3, #8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800219c:	d103      	bne.n	80021a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e00c      	b.n	80021c0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3308      	adds	r3, #8
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e002      	b.n	80021b4 <vListInsert+0x2e>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d2f6      	bcs.n	80021ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	601a      	str	r2, [r3, #0]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6892      	ldr	r2, [r2, #8]
 800220e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6852      	ldr	r2, [r2, #4]
 8002218:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d103      	bne.n	800222c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1e5a      	subs	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <xQueueGenericReset+0x2a>
        __asm volatile
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	60bb      	str	r3, [r7, #8]
    }
 8002272:	bf00      	nop
 8002274:	e7fe      	b.n	8002274 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002276:	f002 f855 	bl	8004324 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	441a      	add	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	3b01      	subs	r3, #1
 80022a8:	68f9      	ldr	r1, [r7, #12]
 80022aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	441a      	add	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	22ff      	movs	r2, #255	; 0xff
 80022ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00f      	beq.n	80022f4 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3310      	adds	r3, #16
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 f8b3 	bl	8003444 <xTaskRemoveFromEventList>
 80022de:	e009      	b.n	80022f4 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3310      	adds	r3, #16
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fefd 	bl	80020e4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3324      	adds	r3, #36	; 0x24
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fef8 	bl	80020e4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80022f4:	f002 f846 	bl	8004384 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80022f8:	2301      	movs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002302:	b580      	push	{r7, lr}
 8002304:	b08c      	sub	sp, #48	; 0x30
 8002306:	af02      	add	r7, sp, #8
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	4613      	mov	r3, r2
 800230e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <xQueueGenericCreate+0x2a>
        __asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	61bb      	str	r3, [r7, #24]
    }
 8002328:	bf00      	nop
 800232a:	e7fe      	b.n	800232a <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <xQueueGenericCreate+0x48>
 800233c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	429a      	cmp	r2, r3
 8002348:	d101      	bne.n	800234e <xQueueGenericCreate+0x4c>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <xQueueGenericCreate+0x4e>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <xQueueGenericCreate+0x68>
        __asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	617b      	str	r3, [r7, #20]
    }
 8002366:	bf00      	nop
 8002368:	e7fe      	b.n	8002368 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002370:	d90a      	bls.n	8002388 <xQueueGenericCreate+0x86>
        __asm volatile
 8002372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002376:	f383 8811 	msr	BASEPRI, r3
 800237a:	f3bf 8f6f 	isb	sy
 800237e:	f3bf 8f4f 	dsb	sy
 8002382:	613b      	str	r3, [r7, #16]
    }
 8002384:	bf00      	nop
 8002386:	e7fe      	b.n	8002386 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	3350      	adds	r3, #80	; 0x50
 800238c:	4618      	mov	r0, r3
 800238e:	f002 f8f5 	bl	800457c <pvPortMalloc>
 8002392:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3350      	adds	r3, #80	; 0x50
 80023a2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023a4:	79fa      	ldrb	r2, [r7, #7]
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f805 	bl	80023c0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
    }
 80023b8:	4618      	mov	r0, r3
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e002      	b.n	80023e2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023ee:	2101      	movs	r1, #1
 80023f0:	69b8      	ldr	r0, [r7, #24]
 80023f2:	f7ff ff2b 	bl	800224c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	68f9      	ldr	r1, [r7, #12]
 8002404:	2073      	movs	r0, #115	; 0x73
 8002406:	f003 fc5f 	bl	8005cc8 <SEGGER_SYSVIEW_RecordU32x3>
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b090      	sub	sp, #64	; 0x40
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <xQueueGenericSend+0x32>
        __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d103      	bne.n	8002454 <xQueueGenericSend+0x40>
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <xQueueGenericSend+0x44>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <xQueueGenericSend+0x46>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <xQueueGenericSend+0x60>
        __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002470:	bf00      	nop
 8002472:	e7fe      	b.n	8002472 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d103      	bne.n	8002482 <xQueueGenericSend+0x6e>
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <xQueueGenericSend+0x72>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueueGenericSend+0x74>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <xQueueGenericSend+0x8e>
        __asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	623b      	str	r3, [r7, #32]
    }
 800249e:	bf00      	nop
 80024a0:	e7fe      	b.n	80024a0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024a2:	f001 f969 	bl	8003778 <xTaskGetSchedulerState>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <xQueueGenericSend+0x9e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <xQueueGenericSend+0xa2>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <xQueueGenericSend+0xa4>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <xQueueGenericSend+0xbe>
        __asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	61fb      	str	r3, [r7, #28]
    }
 80024ce:	bf00      	nop
 80024d0:	e7fe      	b.n	80024d0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024d2:	f001 ff27 	bl	8004324 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <xQueueGenericSend+0xd4>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d11f      	bne.n	8002528 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 f978 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	460b      	mov	r3, r1
 80024fa:	4601      	mov	r1, r0
 80024fc:	205a      	movs	r0, #90	; 0x5a
 80024fe:	f003 fc59 	bl	8005db4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002508:	f000 fa56 	bl	80029b8 <prvCopyDataToQueue>
 800250c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	3324      	adds	r3, #36	; 0x24
 800251a:	4618      	mov	r0, r3
 800251c:	f000 ff92 	bl	8003444 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002520:	f001 ff30 	bl	8004384 <vPortExitCritical>
                return pdPASS;
 8002524:	2301      	movs	r3, #1
 8002526:	e07d      	b.n	8002624 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d110      	bne.n	8002550 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800252e:	f001 ff29 	bl	8004384 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	4618      	mov	r0, r3
 8002536:	f004 f953 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	460b      	mov	r3, r1
 8002544:	4601      	mov	r1, r0
 8002546:	205a      	movs	r0, #90	; 0x5a
 8002548:	f003 fc34 	bl	8005db4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800254c:	2300      	movs	r3, #0
 800254e:	e069      	b.n	8002624 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4618      	mov	r0, r3
 800255c:	f000 ffd8 	bl	8003510 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002560:	2301      	movs	r3, #1
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002564:	f001 ff0e 	bl	8004384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002568:	f000 fd54 	bl	8003014 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800256c:	f001 feda 	bl	8004324 <vPortEnterCritical>
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002576:	b25b      	sxtb	r3, r3
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800257c:	d103      	bne.n	8002586 <xQueueGenericSend+0x172>
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800258c:	b25b      	sxtb	r3, r3
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002592:	d103      	bne.n	800259c <xQueueGenericSend+0x188>
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800259c:	f001 fef2 	bl	8004384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025a0:	1d3a      	adds	r2, r7, #4
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 ffc7 	bl	800353c <xTaskCheckForTimeOut>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d124      	bne.n	80025fe <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b6:	f000 faf7 	bl	8002ba8 <prvIsQueueFull>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d018      	beq.n	80025f2 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	3310      	adds	r3, #16
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fee9 	bl	80033a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80025ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d0:	f000 fa82 	bl	8002ad8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80025d4:	f000 fd2c 	bl	8003030 <xTaskResumeAll>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f47f af79 	bne.w	80024d2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <xQueueGenericSend+0x218>)
 80025e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	e76f      	b.n	80024d2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80025f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025f4:	f000 fa70 	bl	8002ad8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025f8:	f000 fd1a 	bl	8003030 <xTaskResumeAll>
 80025fc:	e769      	b.n	80024d2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80025fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002600:	f000 fa6a 	bl	8002ad8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002604:	f000 fd14 	bl	8003030 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	4618      	mov	r0, r3
 800260c:	f004 f8e8 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	460b      	mov	r3, r1
 800261a:	4601      	mov	r1, r0
 800261c:	205a      	movs	r0, #90	; 0x5a
 800261e:	f003 fbc9 	bl	8005db4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002622:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002624:	4618      	mov	r0, r3
 8002626:	3738      	adds	r7, #56	; 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	e000ed04 	.word	0xe000ed04

08002630 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b090      	sub	sp, #64	; 0x40
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <xQueueGenericSendFromISR+0x3c>
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <xQueueGenericSendFromISR+0x40>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <xQueueGenericSendFromISR+0x42>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d103      	bne.n	800269a <xQueueGenericSendFromISR+0x6a>
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <xQueueGenericSendFromISR+0x6e>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <xQueueGenericSendFromISR+0x70>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	623b      	str	r3, [r7, #32]
    }
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026ba:	f001 ff1f 	bl	80044fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80026be:	f3ef 8211 	mrs	r2, BASEPRI
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	61fa      	str	r2, [r7, #28]
 80026d4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80026d6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <xQueueGenericSendFromISR+0xbc>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d148      	bne.n	800277e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80026fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 f86e 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 8002704:	4601      	mov	r1, r0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	461a      	mov	r2, r3
 800270a:	2060      	movs	r0, #96	; 0x60
 800270c:	f003 fa82 	bl	8005c14 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002716:	f000 f94f 	bl	80029b8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800271a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002722:	d112      	bne.n	800274a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	2b00      	cmp	r3, #0
 800272a:	d025      	beq.n	8002778 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	3324      	adds	r3, #36	; 0x24
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fe87 	bl	8003444 <xTaskRemoveFromEventList>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01d      	beq.n	8002778 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01a      	beq.n	8002778 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e016      	b.n	8002778 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800274a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800274e:	2b7f      	cmp	r3, #127	; 0x7f
 8002750:	d10a      	bne.n	8002768 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	617b      	str	r3, [r7, #20]
    }
 8002764:	bf00      	nop
 8002766:	e7fe      	b.n	8002766 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002768:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800276c:	3301      	adds	r3, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	b25a      	sxtb	r2, r3
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002778:	2301      	movs	r3, #1
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800277c:	e00b      	b.n	8002796 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002780:	4618      	mov	r0, r3
 8002782:	f004 f82d 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 8002786:	4601      	mov	r1, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	2060      	movs	r0, #96	; 0x60
 800278e:	f003 fa41 	bl	8005c14 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002792:	2300      	movs	r3, #0
 8002794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80027a0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3740      	adds	r7, #64	; 0x40
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b08f      	sub	sp, #60	; 0x3c
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <xQueueReceive+0x30>
        __asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	623b      	str	r3, [r7, #32]
    }
 80027d8:	bf00      	nop
 80027da:	e7fe      	b.n	80027da <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <xQueueReceive+0x3e>
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <xQueueReceive+0x42>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <xQueueReceive+0x44>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <xQueueReceive+0x5e>
        __asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	61fb      	str	r3, [r7, #28]
    }
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800280a:	f000 ffb5 	bl	8003778 <xTaskGetSchedulerState>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <xQueueReceive+0x6e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <xQueueReceive+0x72>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <xQueueReceive+0x74>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <xQueueReceive+0x8e>
        __asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	61bb      	str	r3, [r7, #24]
    }
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800283a:	f001 fd73 	bl	8004324 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d024      	beq.n	8002894 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284e:	f000 f91d 	bl	8002a8c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	4618      	mov	r0, r3
 8002856:	f003 ffc3 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 800285a:	4604      	mov	r4, r0
 800285c:	2000      	movs	r0, #0
 800285e:	f003 ffbf 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2101      	movs	r1, #1
 8002868:	9100      	str	r1, [sp, #0]
 800286a:	4621      	mov	r1, r4
 800286c:	205c      	movs	r0, #92	; 0x5c
 800286e:	f003 faa1 	bl	8005db4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	3310      	adds	r3, #16
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fddc 	bl	8003444 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800288c:	f001 fd7a 	bl	8004384 <vPortExitCritical>
                return pdPASS;
 8002890:	2301      	movs	r3, #1
 8002892:	e08a      	b.n	80029aa <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d113      	bne.n	80028c2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800289a:	f001 fd73 	bl	8004384 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 ff9d 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 80028a6:	4604      	mov	r4, r0
 80028a8:	2000      	movs	r0, #0
 80028aa:	f003 ff99 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2101      	movs	r1, #1
 80028b4:	9100      	str	r1, [sp, #0]
 80028b6:	4621      	mov	r1, r4
 80028b8:	205c      	movs	r0, #92	; 0x5c
 80028ba:	f003 fa7b 	bl	8005db4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80028be:	2300      	movs	r3, #0
 80028c0:	e073      	b.n	80029aa <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fe1f 	bl	8003510 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028d6:	f001 fd55 	bl	8004384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028da:	f000 fb9b 	bl	8003014 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028de:	f001 fd21 	bl	8004324 <vPortEnterCritical>
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ee:	d103      	bne.n	80028f8 <xQueueReceive+0x14c>
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002904:	d103      	bne.n	800290e <xQueueReceive+0x162>
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800290e:	f001 fd39 	bl	8004384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002912:	1d3a      	adds	r2, r7, #4
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fe0e 	bl	800353c <xTaskCheckForTimeOut>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d124      	bne.n	8002970 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002928:	f000 f928 	bl	8002b7c <prvIsQueueEmpty>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d018      	beq.n	8002964 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	3324      	adds	r3, #36	; 0x24
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fd30 	bl	80033a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002942:	f000 f8c9 	bl	8002ad8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002946:	f000 fb73 	bl	8003030 <xTaskResumeAll>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f af74 	bne.w	800283a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <xQueueReceive+0x208>)
 8002954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	e76a      	b.n	800283a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002966:	f000 f8b7 	bl	8002ad8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800296a:	f000 fb61 	bl	8003030 <xTaskResumeAll>
 800296e:	e764      	b.n	800283a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002972:	f000 f8b1 	bl	8002ad8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002976:	f000 fb5b 	bl	8003030 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800297a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800297c:	f000 f8fe 	bl	8002b7c <prvIsQueueEmpty>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	f43f af59 	beq.w	800283a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	4618      	mov	r0, r3
 800298c:	f003 ff28 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 8002990:	4604      	mov	r4, r0
 8002992:	2000      	movs	r0, #0
 8002994:	f003 ff24 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2101      	movs	r1, #1
 800299e:	9100      	str	r1, [sp, #0]
 80029a0:	4621      	mov	r1, r4
 80029a2:	205c      	movs	r0, #92	; 0x5c
 80029a4:	f003 fa06 	bl	8005db4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80029a8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3734      	adds	r7, #52	; 0x34
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000ed04 	.word	0xe000ed04

080029b8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d14d      	bne.n	8002a7a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fee6 	bl	80037b4 <xTaskPriorityDisinherit>
 80029e8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	e043      	b.n	8002a7a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d119      	bne.n	8002a2c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6858      	ldr	r0, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	461a      	mov	r2, r3
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	f004 f87a 	bl	8006afc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	441a      	add	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d32b      	bcc.n	8002a7a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	e026      	b.n	8002a7a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68d8      	ldr	r0, [r3, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	461a      	mov	r2, r3
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	f004 f860 	bl	8006afc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	425b      	negs	r3, r3
 8002a46:	441a      	add	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d207      	bcs.n	8002a68 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	425b      	negs	r3, r3
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d105      	bne.n	8002a7a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a82:	697b      	ldr	r3, [r7, #20]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d018      	beq.n	8002ad0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	441a      	add	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d303      	bcc.n	8002ac0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68d9      	ldr	r1, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6838      	ldr	r0, [r7, #0]
 8002acc:	f004 f816 	bl	8006afc <memcpy>
    }
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ae0:	f001 fc20 	bl	8004324 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aec:	e011      	b.n	8002b12 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d012      	beq.n	8002b1c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3324      	adds	r3, #36	; 0x24
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fca2 	bl	8003444 <xTaskRemoveFromEventList>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b06:	f000 fd7f 	bl	8003608 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	dce9      	bgt.n	8002aee <prvUnlockQueue+0x16>
 8002b1a:	e000      	b.n	8002b1e <prvUnlockQueue+0x46>
                        break;
 8002b1c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b26:	f001 fc2d 	bl	8004384 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b2a:	f001 fbfb 	bl	8004324 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b34:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b36:	e011      	b.n	8002b5c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d012      	beq.n	8002b66 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3310      	adds	r3, #16
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fc7d 	bl	8003444 <xTaskRemoveFromEventList>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b50:	f000 fd5a 	bl	8003608 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b54:	7bbb      	ldrb	r3, [r7, #14]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	dce9      	bgt.n	8002b38 <prvUnlockQueue+0x60>
 8002b64:	e000      	b.n	8002b68 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b66:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b70:	f001 fc08 	bl	8004384 <vPortExitCritical>
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b84:	f001 fbce 	bl	8004324 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e001      	b.n	8002b9a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b9a:	f001 fbf3 	bl	8004384 <vPortExitCritical>

    return xReturn;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bb0:	f001 fbb8 	bl	8004324 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d102      	bne.n	8002bc6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e001      	b.n	8002bca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bca:	f001 fbdb 	bl	8004384 <vPortExitCritical>

    return xReturn;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e01e      	b.n	8002c26 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002be8:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <vQueueAddToRegistry+0x60>)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d115      	bne.n	8002c20 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bf4:	4910      	ldr	r1, [pc, #64]	; (8002c38 <vQueueAddToRegistry+0x60>)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <vQueueAddToRegistry+0x60>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 fde7 	bl	80067e0 <SEGGER_SYSVIEW_ShrinkId>
 8002c12:	4601      	mov	r1, r0
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	2071      	movs	r0, #113	; 0x71
 8002c1a:	f002 fffb 	bl	8005c14 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c1e:	e006      	b.n	8002c2e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3301      	adds	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b07      	cmp	r3, #7
 8002c2a:	d9dd      	bls.n	8002be8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20014424 	.word	0x20014424

08002c3c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c4c:	f001 fb6a 	bl	8004324 <vPortEnterCritical>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c56:	b25b      	sxtb	r3, r3
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5c:	d103      	bne.n	8002c66 <vQueueWaitForMessageRestricted+0x2a>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c6c:	b25b      	sxtb	r3, r3
 8002c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c72:	d103      	bne.n	8002c7c <vQueueWaitForMessageRestricted+0x40>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c7c:	f001 fb82 	bl	8004384 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3324      	adds	r3, #36	; 0x24
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fba9 	bl	80033e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff1e 	bl	8002ad8 <prvUnlockQueue>
    }
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af04      	add	r7, sp, #16
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 fc5f 	bl	800457c <pvPortMalloc>
 8002cbe:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00e      	beq.n	8002ce4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cc6:	2058      	movs	r0, #88	; 0x58
 8002cc8:	f001 fc58 	bl	800457c <pvPortMalloc>
 8002ccc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cda:	e005      	b.n	8002ce8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002cdc:	6978      	ldr	r0, [r7, #20]
 8002cde:	f001 fd2d 	bl	800473c <vPortFree>
 8002ce2:	e001      	b.n	8002ce8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d013      	beq.n	8002d16 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cee:	88fa      	ldrh	r2, [r7, #6]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9303      	str	r3, [sp, #12]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	9302      	str	r3, [sp, #8]
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f80e 	bl	8002d26 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d0a:	69f8      	ldr	r0, [r7, #28]
 8002d0c:	f000 f8a2 	bl	8002e54 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d10:	2301      	movs	r3, #1
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	e002      	b.n	8002d1c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d1a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
    }
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b088      	sub	sp, #32
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	21a5      	movs	r1, #165	; 0xa5
 8002d40:	f003 feea 	bl	8006b18 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f023 0307 	bic.w	r3, r3, #7
 8002d5c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	617b      	str	r3, [r7, #20]
    }
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01f      	beq.n	8002dc4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	e012      	b.n	8002db0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	4413      	add	r3, r2
 8002d90:	7819      	ldrb	r1, [r3, #0]
 8002d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	3334      	adds	r3, #52	; 0x34
 8002d9a:	460a      	mov	r2, r1
 8002d9c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	4413      	add	r3, r2
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b09      	cmp	r3, #9
 8002db4:	d9e9      	bls.n	8002d8a <prvInitialiseNewTask+0x64>
 8002db6:	e000      	b.n	8002dba <prvInitialiseNewTask+0x94>
            {
                break;
 8002db8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002dc2:	e003      	b.n	8002dcc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d901      	bls.n	8002dd6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	2200      	movs	r2, #0
 8002de6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	3304      	adds	r3, #4
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff f999 	bl	8002124 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	3318      	adds	r3, #24
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f994 	bl	8002124 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e00:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	f1c3 0205 	rsb	r2, r3, #5
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	3350      	adds	r3, #80	; 0x50
 8002e16:	2204      	movs	r2, #4
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fe7c 	bl	8006b18 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	3354      	adds	r3, #84	; 0x54
 8002e24:	2201      	movs	r2, #1
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f003 fe75 	bl	8006b18 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	69b8      	ldr	r0, [r7, #24]
 8002e34:	f001 f8c8 	bl	8003fc8 <pxPortInitialiseStack>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e4a:	bf00      	nop
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e5c:	f001 fa62 	bl	8004324 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e60:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <prvAddNewTaskToReadyList+0xe4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	4a34      	ldr	r2, [pc, #208]	; (8002f38 <prvAddNewTaskToReadyList+0xe4>)
 8002e68:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <prvAddNewTaskToReadyList+0xe8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e72:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <prvAddNewTaskToReadyList+0xe8>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e78:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <prvAddNewTaskToReadyList+0xe4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d110      	bne.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e80:	f000 fbe0 	bl	8003644 <prvInitialiseTaskLists>
 8002e84:	e00d      	b.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <prvAddNewTaskToReadyList+0xec>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <prvAddNewTaskToReadyList+0xe8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d802      	bhi.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e9c:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <prvAddNewTaskToReadyList+0xe8>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <prvAddNewTaskToReadyList+0xf0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <prvAddNewTaskToReadyList+0xf0>)
 8002eaa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <prvAddNewTaskToReadyList+0xf0>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <prvAddNewTaskToReadyList+0x94>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 fb69 	bl	8006594 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461c      	mov	r4, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	1ae3      	subs	r3, r4, r3
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	462b      	mov	r3, r5
 8002ee4:	f001 fdf0 	bl	8004ac8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 fbd6 	bl	800669c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <prvAddNewTaskToReadyList+0xf4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <prvAddNewTaskToReadyList+0xf4>)
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <prvAddNewTaskToReadyList+0xf8>)
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f7ff f910 	bl	800213e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f1e:	f001 fa31 	bl	8004384 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <prvAddNewTaskToReadyList+0xec>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <prvAddNewTaskToReadyList+0xe8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bdb0      	pop	{r4, r5, r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000016c 	.word	0x2000016c
 8002f3c:	20000094 	.word	0x20000094
 8002f40:	20000178 	.word	0x20000178
 8002f44:	20000188 	.word	0x20000188
 8002f48:	20000174 	.word	0x20000174
 8002f4c:	20000098 	.word	0x20000098

08002f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f56:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <vTaskStartScheduler+0xa4>)
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2282      	movs	r2, #130	; 0x82
 8002f62:	4925      	ldr	r1, [pc, #148]	; (8002ff8 <vTaskStartScheduler+0xa8>)
 8002f64:	4825      	ldr	r0, [pc, #148]	; (8002ffc <vTaskStartScheduler+0xac>)
 8002f66:	f7ff fe9d 	bl	8002ca4 <xTaskCreate>
 8002f6a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d102      	bne.n	8002f78 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002f72:	f000 fd17 	bl	80039a4 <xTimerCreateTimerTask>
 8002f76:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d124      	bne.n	8002fc8 <vTaskStartScheduler+0x78>
        __asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	60bb      	str	r3, [r7, #8]
    }
 8002f90:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f92:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <vTaskStartScheduler+0xb0>)
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f98:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <vTaskStartScheduler+0xb4>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <vTaskStartScheduler+0xb8>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <vTaskStartScheduler+0xbc>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <vTaskStartScheduler+0xa4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d102      	bne.n	8002fb8 <vTaskStartScheduler+0x68>
 8002fb2:	f003 fad3 	bl	800655c <SEGGER_SYSVIEW_OnIdle>
 8002fb6:	e004      	b.n	8002fc2 <vTaskStartScheduler+0x72>
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <vTaskStartScheduler+0xbc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fb2b 	bl	8006618 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002fc2:	f001 f88f 	bl	80040e4 <xPortStartScheduler>
 8002fc6:	e00e      	b.n	8002fe6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fce:	d10a      	bne.n	8002fe6 <vTaskStartScheduler+0x96>
        __asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	607b      	str	r3, [r7, #4]
    }
 8002fe2:	bf00      	nop
 8002fe4:	e7fe      	b.n	8002fe4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <vTaskStartScheduler+0xc0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000190 	.word	0x20000190
 8002ff8:	08007408 	.word	0x08007408
 8002ffc:	08003621 	.word	0x08003621
 8003000:	2000018c 	.word	0x2000018c
 8003004:	20000178 	.word	0x20000178
 8003008:	20000170 	.word	0x20000170
 800300c:	20000094 	.word	0x20000094
 8003010:	2000000c 	.word	0x2000000c

08003014 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <vTaskSuspendAll+0x18>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	4a03      	ldr	r2, [pc, #12]	; (800302c <vTaskSuspendAll+0x18>)
 8003020:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	20000194 	.word	0x20000194

08003030 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800303e:	4b3d      	ldr	r3, [pc, #244]	; (8003134 <xTaskResumeAll+0x104>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <xTaskResumeAll+0x2c>
        __asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	603b      	str	r3, [r7, #0]
    }
 8003058:	bf00      	nop
 800305a:	e7fe      	b.n	800305a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800305c:	f001 f962 	bl	8004324 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <xTaskResumeAll+0x104>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3b01      	subs	r3, #1
 8003066:	4a33      	ldr	r2, [pc, #204]	; (8003134 <xTaskResumeAll+0x104>)
 8003068:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800306a:	4b32      	ldr	r3, [pc, #200]	; (8003134 <xTaskResumeAll+0x104>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d159      	bne.n	8003126 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <xTaskResumeAll+0x108>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d055      	beq.n	8003126 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800307a:	e032      	b.n	80030e2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <xTaskResumeAll+0x10c>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3318      	adds	r3, #24
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f8b5 	bl	80021f8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3304      	adds	r3, #4
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff f8b0 	bl	80021f8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4618      	mov	r0, r3
 800309c:	f003 fafe 	bl	800669c <SEGGER_SYSVIEW_OnTaskStartReady>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	2201      	movs	r2, #1
 80030a6:	409a      	lsls	r2, r3
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <xTaskResumeAll+0x110>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	4a24      	ldr	r2, [pc, #144]	; (8003140 <xTaskResumeAll+0x110>)
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4a21      	ldr	r2, [pc, #132]	; (8003144 <xTaskResumeAll+0x114>)
 80030c0:	441a      	add	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3304      	adds	r3, #4
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f7ff f838 	bl	800213e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <xTaskResumeAll+0x118>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <xTaskResumeAll+0x11c>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <xTaskResumeAll+0x10c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1c8      	bne.n	800307c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030f0:	f000 fb26 	bl	8003740 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030f4:	4b16      	ldr	r3, [pc, #88]	; (8003150 <xTaskResumeAll+0x120>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d010      	beq.n	8003122 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003100:	f000 f84a 	bl	8003198 <xTaskIncrementTick>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <xTaskResumeAll+0x11c>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	3b01      	subs	r3, #1
 8003114:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f1      	bne.n	8003100 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <xTaskResumeAll+0x120>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <xTaskResumeAll+0x11c>)
 8003124:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003126:	f001 f92d 	bl	8004384 <vPortExitCritical>

    return xAlreadyYielded;
 800312a:	687b      	ldr	r3, [r7, #4]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000194 	.word	0x20000194
 8003138:	2000016c 	.word	0x2000016c
 800313c:	2000012c 	.word	0x2000012c
 8003140:	20000174 	.word	0x20000174
 8003144:	20000098 	.word	0x20000098
 8003148:	20000094 	.word	0x20000094
 800314c:	20000180 	.word	0x20000180
 8003150:	2000017c 	.word	0x2000017c

08003154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <xTaskGetTickCount+0x1c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003160:	687b      	ldr	r3, [r7, #4]
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000170 	.word	0x20000170

08003174 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800317a:	f001 f9bf 	bl	80044fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <xTaskGetTickCountFromISR+0x20>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003188:	683b      	ldr	r3, [r7, #0]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000170 	.word	0x20000170

08003198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <xTaskIncrementTick+0x110>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d173      	bne.n	8003292 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031aa:	4b40      	ldr	r3, [pc, #256]	; (80032ac <xTaskIncrementTick+0x114>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031b2:	4a3e      	ldr	r2, [pc, #248]	; (80032ac <xTaskIncrementTick+0x114>)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d120      	bne.n	8003200 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80031be:	4b3c      	ldr	r3, [pc, #240]	; (80032b0 <xTaskIncrementTick+0x118>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <xTaskIncrementTick+0x46>
        __asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	603b      	str	r3, [r7, #0]
    }
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <xTaskIncrementTick+0x44>
 80031de:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <xTaskIncrementTick+0x118>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <xTaskIncrementTick+0x11c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a31      	ldr	r2, [pc, #196]	; (80032b0 <xTaskIncrementTick+0x118>)
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4a31      	ldr	r2, [pc, #196]	; (80032b4 <xTaskIncrementTick+0x11c>)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <xTaskIncrementTick+0x120>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3301      	adds	r3, #1
 80031f8:	4a2f      	ldr	r2, [pc, #188]	; (80032b8 <xTaskIncrementTick+0x120>)
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	f000 faa0 	bl	8003740 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003200:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <xTaskIncrementTick+0x124>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	d348      	bcc.n	800329c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320a:	4b29      	ldr	r3, [pc, #164]	; (80032b0 <xTaskIncrementTick+0x118>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003214:	4b29      	ldr	r3, [pc, #164]	; (80032bc <xTaskIncrementTick+0x124>)
 8003216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800321a:	601a      	str	r2, [r3, #0]
                    break;
 800321c:	e03e      	b.n	800329c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <xTaskIncrementTick+0x118>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	d203      	bcs.n	800323e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003236:	4a21      	ldr	r2, [pc, #132]	; (80032bc <xTaskIncrementTick+0x124>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800323c:	e02e      	b.n	800329c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	3304      	adds	r3, #4
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe ffd8 	bl	80021f8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	3318      	adds	r3, #24
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe ffcf 	bl	80021f8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fa1d 	bl	800669c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	2201      	movs	r2, #1
 8003268:	409a      	lsls	r2, r3
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <xTaskIncrementTick+0x128>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <xTaskIncrementTick+0x128>)
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <xTaskIncrementTick+0x12c>)
 8003282:	441a      	add	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	3304      	adds	r3, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f7fe ff57 	bl	800213e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003290:	e7bb      	b.n	800320a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <xTaskIncrementTick+0x130>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <xTaskIncrementTick+0x130>)
 800329a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800329c:	697b      	ldr	r3, [r7, #20]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000194 	.word	0x20000194
 80032ac:	20000170 	.word	0x20000170
 80032b0:	20000124 	.word	0x20000124
 80032b4:	20000128 	.word	0x20000128
 80032b8:	20000184 	.word	0x20000184
 80032bc:	2000018c 	.word	0x2000018c
 80032c0:	20000174 	.word	0x20000174
 80032c4:	20000098 	.word	0x20000098
 80032c8:	2000017c 	.word	0x2000017c

080032cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <vTaskSwitchContext+0xbc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032da:	4b2c      	ldr	r3, [pc, #176]	; (800338c <vTaskSwitchContext+0xc0>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80032e0:	e04d      	b.n	800337e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80032e2:	4b2a      	ldr	r3, [pc, #168]	; (800338c <vTaskSwitchContext+0xc0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <vTaskSwitchContext+0xc4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032f6:	7afb      	ldrb	r3, [r7, #11]
 80032f8:	f1c3 031f 	rsb	r3, r3, #31
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	4925      	ldr	r1, [pc, #148]	; (8003394 <vTaskSwitchContext+0xc8>)
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	607b      	str	r3, [r7, #4]
    }
 8003324:	bf00      	nop
 8003326:	e7fe      	b.n	8003326 <vTaskSwitchContext+0x5a>
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4a18      	ldr	r2, [pc, #96]	; (8003394 <vTaskSwitchContext+0xc8>)
 8003334:	4413      	add	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	3308      	adds	r3, #8
 800334a:	429a      	cmp	r2, r3
 800334c:	d104      	bne.n	8003358 <vTaskSwitchContext+0x8c>
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <vTaskSwitchContext+0xcc>)
 8003360:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <vTaskSwitchContext+0xcc>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <vTaskSwitchContext+0xd0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d102      	bne.n	8003374 <vTaskSwitchContext+0xa8>
 800336e:	f003 f8f5 	bl	800655c <SEGGER_SYSVIEW_OnIdle>
}
 8003372:	e004      	b.n	800337e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <vTaskSwitchContext+0xcc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f003 f94d 	bl	8006618 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000194 	.word	0x20000194
 800338c:	20000180 	.word	0x20000180
 8003390:	20000174 	.word	0x20000174
 8003394:	20000098 	.word	0x20000098
 8003398:	20000094 	.word	0x20000094
 800339c:	20000190 	.word	0x20000190

080033a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	60fb      	str	r3, [r7, #12]
    }
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <vTaskPlaceOnEventList+0x44>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3318      	adds	r3, #24
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe fed9 	bl	8002186 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033d4:	2101      	movs	r1, #1
 80033d6:	6838      	ldr	r0, [r7, #0]
 80033d8:	f000 fa6c 	bl	80038b4 <prvAddCurrentTaskToDelayedList>
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000094 	.word	0x20000094

080033e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	617b      	str	r3, [r7, #20]
    }
 800340c:	bf00      	nop
 800340e:	e7fe      	b.n	800340e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <vTaskPlaceOnEventListRestricted+0x58>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3318      	adds	r3, #24
 8003416:	4619      	mov	r1, r3
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7fe fe90 	bl	800213e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003428:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800342a:	2024      	movs	r0, #36	; 0x24
 800342c:	f002 fb98 	bl	8005b60 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f000 fa3e 	bl	80038b4 <prvAddCurrentTaskToDelayedList>
    }
 8003438:	bf00      	nop
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000094 	.word	0x20000094

08003444 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10a      	bne.n	8003470 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	60fb      	str	r3, [r7, #12]
    }
 800346c:	bf00      	nop
 800346e:	e7fe      	b.n	800346e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	3318      	adds	r3, #24
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe febf 	bl	80021f8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800347a:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <xTaskRemoveFromEventList+0xb4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d120      	bne.n	80034c4 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	3304      	adds	r3, #4
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe feb6 	bl	80021f8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4618      	mov	r0, r3
 8003490:	f003 f904 	bl	800669c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	2201      	movs	r2, #1
 800349a:	409a      	lsls	r2, r3
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <xTaskRemoveFromEventList+0xb8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	4a16      	ldr	r2, [pc, #88]	; (80034fc <xTaskRemoveFromEventList+0xb8>)
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <xTaskRemoveFromEventList+0xbc>)
 80034b4:	441a      	add	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	3304      	adds	r3, #4
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f7fe fe3e 	bl	800213e <vListInsertEnd>
 80034c2:	e005      	b.n	80034d0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	3318      	adds	r3, #24
 80034c8:	4619      	mov	r1, r3
 80034ca:	480e      	ldr	r0, [pc, #56]	; (8003504 <xTaskRemoveFromEventList+0xc0>)
 80034cc:	f7fe fe37 	bl	800213e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <xTaskRemoveFromEventList+0xc4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	429a      	cmp	r2, r3
 80034dc:	d905      	bls.n	80034ea <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80034de:	2301      	movs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <xTaskRemoveFromEventList+0xc8>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e001      	b.n	80034ee <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80034ee:	697b      	ldr	r3, [r7, #20]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000194 	.word	0x20000194
 80034fc:	20000174 	.word	0x20000174
 8003500:	20000098 	.word	0x20000098
 8003504:	2000012c 	.word	0x2000012c
 8003508:	20000094 	.word	0x20000094
 800350c:	20000180 	.word	0x20000180

08003510 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <vTaskInternalSetTimeOutState+0x24>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <vTaskInternalSetTimeOutState+0x28>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	605a      	str	r2, [r3, #4]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	20000184 	.word	0x20000184
 8003538:	20000170 	.word	0x20000170

0800353c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	613b      	str	r3, [r7, #16]
    }
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	60fb      	str	r3, [r7, #12]
    }
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800357e:	f000 fed1 	bl	8004324 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <xTaskCheckForTimeOut+0xc4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359a:	d102      	bne.n	80035a2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	e026      	b.n	80035f0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b17      	ldr	r3, [pc, #92]	; (8003604 <xTaskCheckForTimeOut+0xc8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d00a      	beq.n	80035c4 <xTaskCheckForTimeOut+0x88>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d305      	bcc.n	80035c4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e015      	b.n	80035f0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d20b      	bcs.n	80035e6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	1ad2      	subs	r2, r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ff98 	bl	8003510 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e004      	b.n	80035f0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80035f0:	f000 fec8 	bl	8004384 <vPortExitCritical>

    return xReturn;
 80035f4:	69fb      	ldr	r3, [r7, #28]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000170 	.word	0x20000170
 8003604:	20000184 	.word	0x20000184

08003608 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <vTaskMissedYield+0x14>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000180 	.word	0x20000180

08003620 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003628:	f000 f84c 	bl	80036c4 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <prvIdleTask+0x20>)
 800362e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800363c:	e7f4      	b.n	8003628 <prvIdleTask+0x8>
 800363e:	bf00      	nop
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	e00c      	b.n	800366a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <prvInitialiseTaskLists+0x60>)
 800365c:	4413      	add	r3, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fd40 	bl	80020e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3301      	adds	r3, #1
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d9ef      	bls.n	8003650 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003670:	480d      	ldr	r0, [pc, #52]	; (80036a8 <prvInitialiseTaskLists+0x64>)
 8003672:	f7fe fd37 	bl	80020e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003676:	480d      	ldr	r0, [pc, #52]	; (80036ac <prvInitialiseTaskLists+0x68>)
 8003678:	f7fe fd34 	bl	80020e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800367c:	480c      	ldr	r0, [pc, #48]	; (80036b0 <prvInitialiseTaskLists+0x6c>)
 800367e:	f7fe fd31 	bl	80020e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003682:	480c      	ldr	r0, [pc, #48]	; (80036b4 <prvInitialiseTaskLists+0x70>)
 8003684:	f7fe fd2e 	bl	80020e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003688:	480b      	ldr	r0, [pc, #44]	; (80036b8 <prvInitialiseTaskLists+0x74>)
 800368a:	f7fe fd2b 	bl	80020e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <prvInitialiseTaskLists+0x78>)
 8003690:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <prvInitialiseTaskLists+0x64>)
 8003692:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <prvInitialiseTaskLists+0x7c>)
 8003696:	4a05      	ldr	r2, [pc, #20]	; (80036ac <prvInitialiseTaskLists+0x68>)
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000098 	.word	0x20000098
 80036a8:	200000fc 	.word	0x200000fc
 80036ac:	20000110 	.word	0x20000110
 80036b0:	2000012c 	.word	0x2000012c
 80036b4:	20000140 	.word	0x20000140
 80036b8:	20000158 	.word	0x20000158
 80036bc:	20000124 	.word	0x20000124
 80036c0:	20000128 	.word	0x20000128

080036c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ca:	e019      	b.n	8003700 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80036cc:	f000 fe2a 	bl	8004324 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <prvCheckTasksWaitingTermination+0x50>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe fd8b 	bl	80021f8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <prvCheckTasksWaitingTermination+0x54>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <prvCheckTasksWaitingTermination+0x54>)
 80036ea:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <prvCheckTasksWaitingTermination+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <prvCheckTasksWaitingTermination+0x58>)
 80036f4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80036f6:	f000 fe45 	bl	8004384 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f810 	bl	8003720 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <prvCheckTasksWaitingTermination+0x58>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e1      	bne.n	80036cc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000140 	.word	0x20000140
 8003718:	2000016c 	.word	0x2000016c
 800371c:	20000154 	.word	0x20000154

08003720 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f805 	bl	800473c <vPortFree>
                vPortFree( pxTCB );
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f001 f802 	bl	800473c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <prvResetNextTaskUnblockTime+0x30>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <prvResetNextTaskUnblockTime+0x34>)
 8003750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003754:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003756:	e005      	b.n	8003764 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <prvResetNextTaskUnblockTime+0x30>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <prvResetNextTaskUnblockTime+0x34>)
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000124 	.word	0x20000124
 8003774:	2000018c 	.word	0x2000018c

08003778 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <xTaskGetSchedulerState+0x34>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003786:	2301      	movs	r3, #1
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	e008      	b.n	800379e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <xTaskGetSchedulerState+0x38>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003794:	2302      	movs	r3, #2
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	e001      	b.n	800379e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800379e:	687b      	ldr	r3, [r7, #4]
    }
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	20000178 	.word	0x20000178
 80037b0:	20000194 	.word	0x20000194

080037b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d068      	beq.n	800389c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <xTaskPriorityDisinherit+0xf4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d00a      	beq.n	80037ea <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	60fb      	str	r3, [r7, #12]
    }
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60bb      	str	r3, [r7, #8]
    }
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380c:	1e5a      	subs	r2, r3, #1
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381a:	429a      	cmp	r2, r3
 800381c:	d03e      	beq.n	800389c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d13a      	bne.n	800389c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	3304      	adds	r3, #4
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fce4 	bl	80021f8 <uxListRemove>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	2201      	movs	r2, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43da      	mvns	r2, r3
 8003842:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <xTaskPriorityDisinherit+0xf8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4013      	ands	r3, r2
 8003848:	4a18      	ldr	r2, [pc, #96]	; (80038ac <xTaskPriorityDisinherit+0xf8>)
 800384a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4619      	mov	r1, r3
 8003850:	204a      	movs	r0, #74	; 0x4a
 8003852:	f002 f9a3 	bl	8005b9c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	f1c3 0205 	rsb	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	2201      	movs	r2, #1
 8003870:	409a      	lsls	r2, r3
 8003872:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <xTaskPriorityDisinherit+0xf8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	4a0c      	ldr	r2, [pc, #48]	; (80038ac <xTaskPriorityDisinherit+0xf8>)
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <xTaskPriorityDisinherit+0xfc>)
 800388a:	441a      	add	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f7fe fc53 	bl	800213e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003898:	2301      	movs	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800389c:	697b      	ldr	r3, [r7, #20]
    }
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000094 	.word	0x20000094
 80038ac:	20000174 	.word	0x20000174
 80038b0:	20000098 	.word	0x20000098

080038b4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038be:	4b32      	ldr	r3, [pc, #200]	; (8003988 <prvAddCurrentTaskToDelayedList+0xd4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038c4:	4b31      	ldr	r3, [pc, #196]	; (800398c <prvAddCurrentTaskToDelayedList+0xd8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fc94 	bl	80021f8 <uxListRemove>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038d6:	4b2d      	ldr	r3, [pc, #180]	; (800398c <prvAddCurrentTaskToDelayedList+0xd8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2201      	movs	r2, #1
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43da      	mvns	r2, r3
 80038e4:	4b2a      	ldr	r3, [pc, #168]	; (8003990 <prvAddCurrentTaskToDelayedList+0xdc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4013      	ands	r3, r2
 80038ea:	4a29      	ldr	r2, [pc, #164]	; (8003990 <prvAddCurrentTaskToDelayedList+0xdc>)
 80038ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f4:	d110      	bne.n	8003918 <prvAddCurrentTaskToDelayedList+0x64>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00d      	beq.n	8003918 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80038fc:	4b23      	ldr	r3, [pc, #140]	; (800398c <prvAddCurrentTaskToDelayedList+0xd8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	211b      	movs	r1, #27
 8003902:	4618      	mov	r0, r3
 8003904:	f002 ff0c 	bl	8006720 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003908:	4b20      	ldr	r3, [pc, #128]	; (800398c <prvAddCurrentTaskToDelayedList+0xd8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3304      	adds	r3, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4820      	ldr	r0, [pc, #128]	; (8003994 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003912:	f7fe fc14 	bl	800213e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003916:	e032      	b.n	800397e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d20f      	bcs.n	8003950 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2104      	movs	r1, #4
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fef2 	bl	8006720 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800393c:	4b16      	ldr	r3, [pc, #88]	; (8003998 <prvAddCurrentTaskToDelayedList+0xe4>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3304      	adds	r3, #4
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f7fe fc1c 	bl	8002186 <vListInsert>
}
 800394e:	e016      	b.n	800397e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2104      	movs	r1, #4
 8003956:	4618      	mov	r0, r3
 8003958:	f002 fee2 	bl	8006720 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3304      	adds	r3, #4
 8003966:	4619      	mov	r1, r3
 8003968:	4610      	mov	r0, r2
 800396a:	f7fe fc0c 	bl	8002186 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800396e:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	d202      	bcs.n	800397e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003978:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <prvAddCurrentTaskToDelayedList+0xec>)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	6013      	str	r3, [r2, #0]
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000170 	.word	0x20000170
 800398c:	20000094 	.word	0x20000094
 8003990:	20000174 	.word	0x20000174
 8003994:	20000158 	.word	0x20000158
 8003998:	20000128 	.word	0x20000128
 800399c:	20000124 	.word	0x20000124
 80039a0:	2000018c 	.word	0x2000018c

080039a4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039ae:	f000 fad5 	bl	8003f5c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <xTimerCreateTimerTask+0x54>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <xTimerCreateTimerTask+0x58>)
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2302      	movs	r3, #2
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039c8:	490d      	ldr	r1, [pc, #52]	; (8003a00 <xTimerCreateTimerTask+0x5c>)
 80039ca:	480e      	ldr	r0, [pc, #56]	; (8003a04 <xTimerCreateTimerTask+0x60>)
 80039cc:	f7ff f96a 	bl	8002ca4 <xTaskCreate>
 80039d0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	603b      	str	r3, [r7, #0]
    }
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039ee:	687b      	ldr	r3, [r7, #4]
    }
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200001c8 	.word	0x200001c8
 80039fc:	200001cc 	.word	0x200001cc
 8003a00:	08007410 	.word	0x08007410
 8003a04:	08003b3d 	.word	0x08003b3d

08003a08 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
    }
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02a      	beq.n	8003a94 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	dc18      	bgt.n	8003a82 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a50:	f7ff fe92 	bl	8003778 <xTaskGetSchedulerState>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d109      	bne.n	8003a6e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	f107 0114 	add.w	r1, r7, #20
 8003a62:	2300      	movs	r3, #0
 8003a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a66:	f7fe fcd5 	bl	8002414 <xQueueGenericSend>
 8003a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8003a6c:	e012      	b.n	8003a94 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	f107 0114 	add.w	r1, r7, #20
 8003a76:	2300      	movs	r3, #0
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f7fe fccb 	bl	8002414 <xQueueGenericSend>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8003a80:	e008      	b.n	8003a94 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	f107 0114 	add.w	r1, r7, #20
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	f7fe fdcf 	bl	8002630 <xQueueGenericSendFromISR>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003a96:	4618      	mov	r0, r3
 8003a98:	3728      	adds	r7, #40	; 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200001c8 	.word	0x200001c8

08003aa4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <prvProcessExpiredTimer+0x94>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fb9b 	bl	80021f8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d022      	beq.n	8003b16 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	18d1      	adds	r1, r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	6978      	ldr	r0, [r7, #20]
 8003ade:	f000 f8d1 	bl	8003c84 <prvInsertTimerInActiveList>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01f      	beq.n	8003b28 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2300      	movs	r3, #0
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	2100      	movs	r1, #0
 8003af2:	6978      	ldr	r0, [r7, #20]
 8003af4:	f7ff ff88 	bl	8003a08 <xTimerGenericCommand>
 8003af8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d113      	bne.n	8003b28 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	60fb      	str	r3, [r7, #12]
    }
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	6978      	ldr	r0, [r7, #20]
 8003b2e:	4798      	blx	r3
    }
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200001c0 	.word	0x200001c0

08003b3c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b44:	f107 0308 	add.w	r3, r7, #8
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f857 	bl	8003bfc <prvGetNextExpireTime>
 8003b4e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4619      	mov	r1, r3
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f803 	bl	8003b60 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b5a:	f000 f8d5 	bl	8003d08 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b5e:	e7f1      	b.n	8003b44 <prvTimerTask+0x8>

08003b60 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b6a:	f7ff fa53 	bl	8003014 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b6e:	f107 0308 	add.w	r3, r7, #8
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f866 	bl	8003c44 <prvSampleTimeNow>
 8003b78:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d130      	bne.n	8003be2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <prvProcessTimerOrBlockTask+0x3c>
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d806      	bhi.n	8003b9c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003b8e:	f7ff fa4f 	bl	8003030 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ff85 	bl	8003aa4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b9a:	e024      	b.n	8003be6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <prvProcessTimerOrBlockTask+0x90>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <prvProcessTimerOrBlockTask+0x50>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <prvProcessTimerOrBlockTask+0x52>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <prvProcessTimerOrBlockTask+0x94>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7ff f83b 	bl	8002c3c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003bc6:	f7ff fa33 	bl	8003030 <xTaskResumeAll>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <prvProcessTimerOrBlockTask+0x98>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
    }
 8003be0:	e001      	b.n	8003be6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003be2:	f7ff fa25 	bl	8003030 <xTaskResumeAll>
    }
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200001c4 	.word	0x200001c4
 8003bf4:	200001c8 	.word	0x200001c8
 8003bf8:	e000ed04 	.word	0xe000ed04

08003bfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <prvGetNextExpireTime+0x44>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <prvGetNextExpireTime+0x16>
 8003c0e:	2201      	movs	r2, #1
 8003c10:	e000      	b.n	8003c14 <prvGetNextExpireTime+0x18>
 8003c12:	2200      	movs	r2, #0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <prvGetNextExpireTime+0x44>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e001      	b.n	8003c30 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c30:	68fb      	ldr	r3, [r7, #12]
    }
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	200001c0 	.word	0x200001c0

08003c44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c4c:	f7ff fa82 	bl	8003154 <xTaskGetTickCount>
 8003c50:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <prvSampleTimeNow+0x3c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d205      	bcs.n	8003c68 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c5c:	f000 f91a 	bl	8003e94 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e002      	b.n	8003c6e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c6e:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <prvSampleTimeNow+0x3c>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003c74:	68fb      	ldr	r3, [r7, #12]
    }
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200001d0 	.word	0x200001d0

08003c84 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d812      	bhi.n	8003cd0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d302      	bcc.n	8003cbe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e01b      	b.n	8003cf6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <prvInsertTimerInActiveList+0x7c>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f7fe fa5c 	bl	8002186 <vListInsert>
 8003cce:	e012      	b.n	8003cf6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d206      	bcs.n	8003ce6 <prvInsertTimerInActiveList+0x62>
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	e007      	b.n	8003cf6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <prvInsertTimerInActiveList+0x80>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f7fe fa48 	bl	8002186 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003cf6:	697b      	ldr	r3, [r7, #20]
    }
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200001c4 	.word	0x200001c4
 8003d04:	200001c0 	.word	0x200001c0

08003d08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08c      	sub	sp, #48	; 0x30
 8003d0c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d0e:	e0ae      	b.n	8003e6e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f2c0 80aa 	blt.w	8003e6c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	3304      	adds	r3, #4
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fa65 	bl	80021f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d2e:	1d3b      	adds	r3, r7, #4
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff87 	bl	8003c44 <prvSampleTimeNow>
 8003d36:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b09      	cmp	r3, #9
 8003d3c:	f200 8097 	bhi.w	8003e6e <prvProcessReceivedCommands+0x166>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <prvProcessReceivedCommands+0x40>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d71 	.word	0x08003d71
 8003d54:	08003de5 	.word	0x08003de5
 8003d58:	08003df9 	.word	0x08003df9
 8003d5c:	08003e43 	.word	0x08003e43
 8003d60:	08003d71 	.word	0x08003d71
 8003d64:	08003d71 	.word	0x08003d71
 8003d68:	08003de5 	.word	0x08003de5
 8003d6c:	08003df9 	.word	0x08003df9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	18d1      	adds	r1, r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a3a      	ldr	r2, [r7, #32]
 8003d8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d90:	f7ff ff78 	bl	8003c84 <prvInsertTimerInActiveList>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d069      	beq.n	8003e6e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d05e      	beq.n	8003e6e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	441a      	add	r2, r3
 8003db8:	2300      	movs	r3, #0
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dc2:	f7ff fe21 	bl	8003a08 <xTimerGenericCommand>
 8003dc6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d14f      	bne.n	8003e6e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	61bb      	str	r3, [r7, #24]
    }
 8003de0:	bf00      	nop
 8003de2:	e7fe      	b.n	8003de2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003df6:	e03a      	b.n	8003e6e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	617b      	str	r3, [r7, #20]
    }
 8003e2a:	bf00      	nop
 8003e2c:	e7fe      	b.n	8003e2c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	18d1      	adds	r1, r2, r3
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e3c:	f7ff ff22 	bl	8003c84 <prvInsertTimerInActiveList>
                        break;
 8003e40:	e015      	b.n	8003e6e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e52:	f000 fc73 	bl	800473c <vPortFree>
 8003e56:	e00a      	b.n	8003e6e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e6a:	e000      	b.n	8003e6e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003e6c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e6e:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <prvProcessReceivedCommands+0x188>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f107 0108 	add.w	r1, r7, #8
 8003e76:	2200      	movs	r2, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fc97 	bl	80027ac <xQueueReceive>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f af45 	bne.w	8003d10 <prvProcessReceivedCommands+0x8>
        }
    }
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	200001c8 	.word	0x200001c8

08003e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e9a:	e048      	b.n	8003f2e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe f99f 	bl	80021f8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02e      	beq.n	8003f2e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d90e      	bls.n	8003f00 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7fe f944 	bl	8002186 <vListInsert>
 8003efe:	e016      	b.n	8003f2e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f00:	2300      	movs	r3, #0
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	2300      	movs	r3, #0
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fd7c 	bl	8003a08 <xTimerGenericCommand>
 8003f10:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	603b      	str	r3, [r7, #0]
    }
 8003f2a:	bf00      	nop
 8003f2c:	e7fe      	b.n	8003f2c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1b1      	bne.n	8003e9c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <prvSwitchTimerLists+0xc4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003f44:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f46:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <prvSwitchTimerLists+0xc4>)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	6013      	str	r3, [r2, #0]
    }
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	200001c0 	.word	0x200001c0
 8003f58:	200001c4 	.word	0x200001c4

08003f5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f60:	f000 f9e0 	bl	8004324 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <prvCheckForValidListAndQueue+0x54>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11d      	bne.n	8003fa8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f6c:	4811      	ldr	r0, [pc, #68]	; (8003fb4 <prvCheckForValidListAndQueue+0x58>)
 8003f6e:	f7fe f8b9 	bl	80020e4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f72:	4811      	ldr	r0, [pc, #68]	; (8003fb8 <prvCheckForValidListAndQueue+0x5c>)
 8003f74:	f7fe f8b6 	bl	80020e4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f78:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <prvCheckForValidListAndQueue+0x58>)
 8003f7c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <prvCheckForValidListAndQueue+0x64>)
 8003f80:	4a0d      	ldr	r2, [pc, #52]	; (8003fb8 <prvCheckForValidListAndQueue+0x5c>)
 8003f82:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f84:	2200      	movs	r2, #0
 8003f86:	210c      	movs	r1, #12
 8003f88:	200a      	movs	r0, #10
 8003f8a:	f7fe f9ba 	bl	8002302 <xQueueGenericCreate>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <prvCheckForValidListAndQueue+0x54>)
 8003f92:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <prvCheckForValidListAndQueue+0x54>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <prvCheckForValidListAndQueue+0x54>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4908      	ldr	r1, [pc, #32]	; (8003fc4 <prvCheckForValidListAndQueue+0x68>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fe18 	bl	8002bd8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fa8:	f000 f9ec 	bl	8004384 <vPortExitCritical>
    }
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200001c8 	.word	0x200001c8
 8003fb4:	20000198 	.word	0x20000198
 8003fb8:	200001ac 	.word	0x200001ac
 8003fbc:	200001c0 	.word	0x200001c0
 8003fc0:	200001c4 	.word	0x200001c4
 8003fc4:	08007418 	.word	0x08007418

08003fc8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3b04      	subs	r3, #4
 8003fd8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fe0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b04      	subs	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b04      	subs	r3, #4
 8003ff6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ff8:	4a0c      	ldr	r2, [pc, #48]	; (800402c <pxPortInitialiseStack+0x64>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3b14      	subs	r3, #20
 8004002:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b04      	subs	r3, #4
 800400e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f06f 0202 	mvn.w	r2, #2
 8004016:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3b20      	subs	r3, #32
 800401c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	08004031 	.word	0x08004031

08004030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <prvTaskExitError+0x54>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004042:	d00a      	beq.n	800405a <prvTaskExitError+0x2a>
        __asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	60fb      	str	r3, [r7, #12]
    }
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <prvTaskExitError+0x28>
        __asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60bb      	str	r3, [r7, #8]
    }
 800406c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800406e:	bf00      	nop
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0fc      	beq.n	8004070 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000010 	.word	0x20000010
	...

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <pxCurrentTCBConst2>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	f380 8809 	msr	PSP, r0
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	4770      	bx	lr
 80040ac:	f3af 8000 	nop.w

080040b0 <pxCurrentTCBConst2>:
 80040b0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040b8:	4808      	ldr	r0, [pc, #32]	; (80040dc <prvPortStartFirstTask+0x24>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f380 8808 	msr	MSP, r0
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f380 8814 	msr	CONTROL, r0
 80040ca:	b662      	cpsie	i
 80040cc:	b661      	cpsie	f
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	df00      	svc	0
 80040d8:	bf00      	nop
 80040da:	0000      	.short	0x0000
 80040dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop

080040e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040ea:	4b46      	ldr	r3, [pc, #280]	; (8004204 <xPortStartScheduler+0x120>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a46      	ldr	r2, [pc, #280]	; (8004208 <xPortStartScheduler+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10a      	bne.n	800410a <xPortStartScheduler+0x26>
        __asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	613b      	str	r3, [r7, #16]
    }
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800410a:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <xPortStartScheduler+0x120>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a3f      	ldr	r2, [pc, #252]	; (800420c <xPortStartScheduler+0x128>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10a      	bne.n	800412a <xPortStartScheduler+0x46>
        __asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	60fb      	str	r3, [r7, #12]
    }
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800412a:	4b39      	ldr	r3, [pc, #228]	; (8004210 <xPortStartScheduler+0x12c>)
 800412c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <xPortStartScheduler+0x130>)
 8004150:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <xPortStartScheduler+0x134>)
 8004154:	2207      	movs	r2, #7
 8004156:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004158:	e009      	b.n	800416e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800415a:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <xPortStartScheduler+0x134>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3b01      	subs	r3, #1
 8004160:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <xPortStartScheduler+0x134>)
 8004162:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b80      	cmp	r3, #128	; 0x80
 8004178:	d0ef      	beq.n	800415a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800417a:	4b27      	ldr	r3, [pc, #156]	; (8004218 <xPortStartScheduler+0x134>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1c3 0307 	rsb	r3, r3, #7
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00a      	beq.n	800419c <xPortStartScheduler+0xb8>
        __asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60bb      	str	r3, [r7, #8]
    }
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <xPortStartScheduler+0x134>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <xPortStartScheduler+0x134>)
 80041a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041a6:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <xPortStartScheduler+0x134>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <xPortStartScheduler+0x134>)
 80041b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <xPortStartScheduler+0x138>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <xPortStartScheduler+0x138>)
 80041c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <xPortStartScheduler+0x138>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a14      	ldr	r2, [pc, #80]	; (800421c <xPortStartScheduler+0x138>)
 80041cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041d2:	f000 f963 	bl	800449c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <xPortStartScheduler+0x13c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041dc:	f000 f982 	bl	80044e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041e0:	4b10      	ldr	r3, [pc, #64]	; (8004224 <xPortStartScheduler+0x140>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0f      	ldr	r2, [pc, #60]	; (8004224 <xPortStartScheduler+0x140>)
 80041e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041ec:	f7ff ff64 	bl	80040b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041f0:	f7ff f86c 	bl	80032cc <vTaskSwitchContext>
    prvTaskExitError();
 80041f4:	f7ff ff1c 	bl	8004030 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	e000ed00 	.word	0xe000ed00
 8004208:	410fc271 	.word	0x410fc271
 800420c:	410fc270 	.word	0x410fc270
 8004210:	e000e400 	.word	0xe000e400
 8004214:	200001d4 	.word	0x200001d4
 8004218:	200001d8 	.word	0x200001d8
 800421c:	e000ed20 	.word	0xe000ed20
 8004220:	20000010 	.word	0x20000010
 8004224:	e000ef34 	.word	0xe000ef34

08004228 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800422e:	4b37      	ldr	r3, [pc, #220]	; (800430c <vInitPrioGroupValue+0xe4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <vInitPrioGroupValue+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d10a      	bne.n	800424e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	613b      	str	r3, [r7, #16]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800424e:	4b2f      	ldr	r3, [pc, #188]	; (800430c <vInitPrioGroupValue+0xe4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a30      	ldr	r2, [pc, #192]	; (8004314 <vInitPrioGroupValue+0xec>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10a      	bne.n	800426e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
    }
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800426e:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <vInitPrioGroupValue+0xf0>)
 8004270:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <vInitPrioGroupValue+0xf4>)
 8004294:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004296:	4b22      	ldr	r3, [pc, #136]	; (8004320 <vInitPrioGroupValue+0xf8>)
 8004298:	2207      	movs	r2, #7
 800429a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800429c:	e009      	b.n	80042b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d0ef      	beq.n	800429e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042be:	4b18      	ldr	r3, [pc, #96]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1c3 0307 	rsb	r3, r3, #7
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d00a      	beq.n	80042e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60bb      	str	r3, [r7, #8]
    }
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042e0:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000ed00 	.word	0xe000ed00
 8004310:	410fc271 	.word	0x410fc271
 8004314:	410fc270 	.word	0x410fc270
 8004318:	e000e400 	.word	0xe000e400
 800431c:	200001d4 	.word	0x200001d4
 8004320:	200001d8 	.word	0x200001d8

08004324 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
        __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	607b      	str	r3, [r7, #4]
    }
 800433c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <vPortEnterCritical+0x58>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	4a0d      	ldr	r2, [pc, #52]	; (800437c <vPortEnterCritical+0x58>)
 8004346:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <vPortEnterCritical+0x58>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10f      	bne.n	8004370 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <vPortEnterCritical+0x5c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <vPortEnterCritical+0x4c>
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	603b      	str	r3, [r7, #0]
    }
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <vPortEnterCritical+0x4a>
    }
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	20000010 	.word	0x20000010
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <vPortExitCritical+0x50>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <vPortExitCritical+0x24>
        __asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	607b      	str	r3, [r7, #4]
    }
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <vPortExitCritical+0x50>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <vPortExitCritical+0x50>)
 80043b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <vPortExitCritical+0x50>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <vPortExitCritical+0x42>
 80043ba:	2300      	movs	r3, #0
 80043bc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f383 8811 	msr	BASEPRI, r3
    }
 80043c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000010 	.word	0x20000010
	...

080043e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043e0:	f3ef 8009 	mrs	r0, PSP
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <pxCurrentTCBConst>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f01e 0f10 	tst.w	lr, #16
 80043f0:	bf08      	it	eq
 80043f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fa:	6010      	str	r0, [r2, #0]
 80043fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004404:	f380 8811 	msr	BASEPRI, r0
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f7fe ff5c 	bl	80032cc <vTaskSwitchContext>
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f380 8811 	msr	BASEPRI, r0
 800441c:	bc09      	pop	{r0, r3}
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	6808      	ldr	r0, [r1, #0]
 8004422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004426:	f01e 0f10 	tst.w	lr, #16
 800442a:	bf08      	it	eq
 800442c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004430:	f380 8809 	msr	PSP, r0
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w

08004440 <pxCurrentTCBConst>:
 8004440:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
        __asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
    }
 8004460:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004462:	f002 f801 	bl	8006468 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004466:	f7fe fe97 	bl	8003198 <xTaskIncrementTick>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004470:	f002 f858 	bl	8006524 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <SysTick_Handler+0x50>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e001      	b.n	8004482 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800447e:	f002 f835 	bl	80064ec <SEGGER_SYSVIEW_RecordExitISR>
 8004482:	2300      	movs	r3, #0
 8004484:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f383 8811 	msr	BASEPRI, r3
    }
 800448c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <vPortSetupTimerInterrupt+0x38>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <vPortSetupTimerInterrupt+0x3c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <vPortSetupTimerInterrupt+0x40>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <vPortSetupTimerInterrupt+0x44>)
 80044ba:	3b01      	subs	r3, #1
 80044bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010
 80044d4:	e000e018 	.word	0xe000e018
 80044d8:	20000000 	.word	0x20000000
 80044dc:	10624dd3 	.word	0x10624dd3
 80044e0:	e000e014 	.word	0xe000e014

080044e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80044e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044f4 <vPortEnableVFP+0x10>
 80044e8:	6801      	ldr	r1, [r0, #0]
 80044ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ee:	6001      	str	r1, [r0, #0]
 80044f0:	4770      	bx	lr
 80044f2:	0000      	.short	0x0000
 80044f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop

080044fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004502:	f3ef 8305 	mrs	r3, IPSR
 8004506:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	d914      	bls.n	8004538 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800450e:	4a17      	ldr	r2, [pc, #92]	; (800456c <vPortValidateInterruptPriority+0x70>)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <vPortValidateInterruptPriority+0x74>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	7afa      	ldrb	r2, [r7, #11]
 800451e:	429a      	cmp	r2, r3
 8004520:	d20a      	bcs.n	8004538 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	607b      	str	r3, [r7, #4]
    }
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <vPortValidateInterruptPriority+0x78>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <vPortValidateInterruptPriority+0x7c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d90a      	bls.n	800455e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	603b      	str	r3, [r7, #0]
    }
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <vPortValidateInterruptPriority+0x60>
    }
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	e000e3f0 	.word	0xe000e3f0
 8004570:	200001d4 	.word	0x200001d4
 8004574:	e000ed0c 	.word	0xe000ed0c
 8004578:	200001d8 	.word	0x200001d8

0800457c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004588:	f7fe fd44 	bl	8003014 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800458c:	4b65      	ldr	r3, [pc, #404]	; (8004724 <pvPortMalloc+0x1a8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004594:	f000 f934 	bl	8004800 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004598:	4b63      	ldr	r3, [pc, #396]	; (8004728 <pvPortMalloc+0x1ac>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f040 80a7 	bne.w	80046f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02d      	beq.n	8004608 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045ac:	2208      	movs	r2, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d227      	bcs.n	8004608 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80045b8:	2208      	movs	r2, #8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d021      	beq.n	800460e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f023 0307 	bic.w	r3, r3, #7
 80045d0:	3308      	adds	r3, #8
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d214      	bcs.n	8004602 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	3308      	adds	r3, #8
 80045e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <pvPortMalloc+0x92>
        __asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	617b      	str	r3, [r7, #20]
    }
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004606:	e002      	b.n	800460e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	607b      	str	r3, [r7, #4]
 800460c:	e000      	b.n	8004610 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800460e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d06e      	beq.n	80046f4 <pvPortMalloc+0x178>
 8004616:	4b45      	ldr	r3, [pc, #276]	; (800472c <pvPortMalloc+0x1b0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d869      	bhi.n	80046f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004620:	4b43      	ldr	r3, [pc, #268]	; (8004730 <pvPortMalloc+0x1b4>)
 8004622:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004624:	4b42      	ldr	r3, [pc, #264]	; (8004730 <pvPortMalloc+0x1b4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800462a:	e004      	b.n	8004636 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d903      	bls.n	8004648 <pvPortMalloc+0xcc>
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f1      	bne.n	800462c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004648:	4b36      	ldr	r3, [pc, #216]	; (8004724 <pvPortMalloc+0x1a8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464e:	429a      	cmp	r2, r3
 8004650:	d050      	beq.n	80046f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2208      	movs	r2, #8
 8004658:	4413      	add	r3, r2
 800465a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	1ad2      	subs	r2, r2, r3
 800466c:	2308      	movs	r3, #8
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	429a      	cmp	r2, r3
 8004672:	d91f      	bls.n	80046b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4413      	add	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <pvPortMalloc+0x120>
        __asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	613b      	str	r3, [r7, #16]
    }
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	1ad2      	subs	r2, r2, r3
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046ae:	69b8      	ldr	r0, [r7, #24]
 80046b0:	f000 f908 	bl	80048c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046b4:	4b1d      	ldr	r3, [pc, #116]	; (800472c <pvPortMalloc+0x1b0>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	4a1b      	ldr	r2, [pc, #108]	; (800472c <pvPortMalloc+0x1b0>)
 80046c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <pvPortMalloc+0x1b0>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <pvPortMalloc+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d203      	bcs.n	80046d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046ce:	4b17      	ldr	r3, [pc, #92]	; (800472c <pvPortMalloc+0x1b0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a18      	ldr	r2, [pc, #96]	; (8004734 <pvPortMalloc+0x1b8>)
 80046d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <pvPortMalloc+0x1ac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	431a      	orrs	r2, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80046ea:	4b13      	ldr	r3, [pc, #76]	; (8004738 <pvPortMalloc+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3301      	adds	r3, #1
 80046f0:	4a11      	ldr	r2, [pc, #68]	; (8004738 <pvPortMalloc+0x1bc>)
 80046f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80046f4:	f7fe fc9c 	bl	8003030 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <pvPortMalloc+0x19c>
        __asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60fb      	str	r3, [r7, #12]
    }
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <pvPortMalloc+0x19a>
    return pvReturn;
 8004718:	69fb      	ldr	r3, [r7, #28]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3728      	adds	r7, #40	; 0x28
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20012de4 	.word	0x20012de4
 8004728:	20012df8 	.word	0x20012df8
 800472c:	20012de8 	.word	0x20012de8
 8004730:	20012ddc 	.word	0x20012ddc
 8004734:	20012dec 	.word	0x20012dec
 8004738:	20012df0 	.word	0x20012df0

0800473c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d04d      	beq.n	80047ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800474e:	2308      	movs	r3, #8
 8004750:	425b      	negs	r3, r3
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4413      	add	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <vPortFree+0xb8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <vPortFree+0x44>
        __asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	60fb      	str	r3, [r7, #12]
    }
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <vPortFree+0x62>
        __asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60bb      	str	r3, [r7, #8]
    }
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <vPortFree+0xb8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01e      	beq.n	80047ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d11a      	bne.n	80047ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <vPortFree+0xb8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	43db      	mvns	r3, r3
 80047be:	401a      	ands	r2, r3
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80047c4:	f7fe fc26 	bl	8003014 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <vPortFree+0xbc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4413      	add	r3, r2
 80047d2:	4a09      	ldr	r2, [pc, #36]	; (80047f8 <vPortFree+0xbc>)
 80047d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047d6:	6938      	ldr	r0, [r7, #16]
 80047d8:	f000 f874 	bl	80048c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80047dc:	4b07      	ldr	r3, [pc, #28]	; (80047fc <vPortFree+0xc0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3301      	adds	r3, #1
 80047e2:	4a06      	ldr	r2, [pc, #24]	; (80047fc <vPortFree+0xc0>)
 80047e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80047e6:	f7fe fc23 	bl	8003030 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20012df8 	.word	0x20012df8
 80047f8:	20012de8 	.word	0x20012de8
 80047fc:	20012df4 	.word	0x20012df4

08004800 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004806:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800480a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800480c:	4b27      	ldr	r3, [pc, #156]	; (80048ac <prvHeapInit+0xac>)
 800480e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3307      	adds	r3, #7
 800481e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0307 	bic.w	r3, r3, #7
 8004826:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <prvHeapInit+0xac>)
 8004830:	4413      	add	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004838:	4a1d      	ldr	r2, [pc, #116]	; (80048b0 <prvHeapInit+0xb0>)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800483e:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <prvHeapInit+0xb0>)
 8004840:	2200      	movs	r2, #0
 8004842:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4413      	add	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800484c:	2208      	movs	r2, #8
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0307 	bic.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a15      	ldr	r2, [pc, #84]	; (80048b4 <prvHeapInit+0xb4>)
 8004860:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <prvHeapInit+0xb4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2200      	movs	r2, #0
 8004868:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <prvHeapInit+0xb4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	1ad2      	subs	r2, r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004880:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <prvHeapInit+0xb4>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <prvHeapInit+0xb8>)
 800488e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a09      	ldr	r2, [pc, #36]	; (80048bc <prvHeapInit+0xbc>)
 8004896:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <prvHeapInit+0xc0>)
 800489a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800489e:	601a      	str	r2, [r3, #0]
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	200001dc 	.word	0x200001dc
 80048b0:	20012ddc 	.word	0x20012ddc
 80048b4:	20012de4 	.word	0x20012de4
 80048b8:	20012dec 	.word	0x20012dec
 80048bc:	20012de8 	.word	0x20012de8
 80048c0:	20012df8 	.word	0x20012df8

080048c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048cc:	4b28      	ldr	r3, [pc, #160]	; (8004970 <prvInsertBlockIntoFreeList+0xac>)
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e002      	b.n	80048d8 <prvInsertBlockIntoFreeList+0x14>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d8f7      	bhi.n	80048d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d108      	bne.n	8004906 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	441a      	add	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d118      	bne.n	800494c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <prvInsertBlockIntoFreeList+0xb0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d00d      	beq.n	8004942 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	441a      	add	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e008      	b.n	8004954 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004942:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <prvInsertBlockIntoFreeList+0xb0>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e003      	b.n	8004954 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d002      	beq.n	8004962 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20012ddc 	.word	0x20012ddc
 8004974:	20012de4 	.word	0x20012de4

08004978 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800497c:	4803      	ldr	r0, [pc, #12]	; (800498c <_cbSendSystemDesc+0x14>)
 800497e:	f001 fd1d 	bl	80063bc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004982:	4803      	ldr	r0, [pc, #12]	; (8004990 <_cbSendSystemDesc+0x18>)
 8004984:	f001 fd1a 	bl	80063bc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004988:	bf00      	nop
 800498a:	bd80      	pop	{r7, pc}
 800498c:	08007420 	.word	0x08007420
 8004990:	08007464 	.word	0x08007464

08004994 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <SEGGER_SYSVIEW_Conf+0x20>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <SEGGER_SYSVIEW_Conf+0x20>)
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <SEGGER_SYSVIEW_Conf+0x24>)
 80049a2:	4a06      	ldr	r2, [pc, #24]	; (80049bc <SEGGER_SYSVIEW_Conf+0x28>)
 80049a4:	f001 f888 	bl	8005ab8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80049a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80049ac:	f001 f8c8 	bl	8005b40 <SEGGER_SYSVIEW_SetRAMBase>
}
 80049b0:	bf00      	nop
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000000 	.word	0x20000000
 80049b8:	08004979 	.word	0x08004979
 80049bc:	08007504 	.word	0x08007504

080049c0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80049c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	e033      	b.n	8004a34 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80049cc:	491e      	ldr	r1, [pc, #120]	; (8004a48 <_cbSendTaskList+0x88>)
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	491a      	ldr	r1, [pc, #104]	; (8004a48 <_cbSendTaskList+0x88>)
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	3304      	adds	r3, #4
 80049ec:	6819      	ldr	r1, [r3, #0]
 80049ee:	4c16      	ldr	r4, [pc, #88]	; (8004a48 <_cbSendTaskList+0x88>)
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4423      	add	r3, r4
 80049fc:	3308      	adds	r3, #8
 80049fe:	681c      	ldr	r4, [r3, #0]
 8004a00:	4d11      	ldr	r5, [pc, #68]	; (8004a48 <_cbSendTaskList+0x88>)
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	442b      	add	r3, r5
 8004a0e:	330c      	adds	r3, #12
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	4e0d      	ldr	r6, [pc, #52]	; (8004a48 <_cbSendTaskList+0x88>)
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4433      	add	r3, r6
 8004a20:	3310      	adds	r3, #16
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	462b      	mov	r3, r5
 8004a28:	4622      	mov	r2, r4
 8004a2a:	f000 f8b5 	bl	8004b98 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3301      	adds	r3, #1
 8004a32:	607b      	str	r3, [r7, #4]
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <_cbSendTaskList+0x8c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3c6      	bcc.n	80049cc <_cbSendTaskList+0xc>
  }
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a48:	20012dfc 	.word	0x20012dfc
 8004a4c:	20012e9c 	.word	0x20012e9c

08004a50 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a50:	b5b0      	push	{r4, r5, r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004a56:	f7fe fb8d 	bl	8003174 <xTaskGetTickCountFromISR>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	f04f 0400 	mov.w	r4, #0
 8004a72:	f04f 0500 	mov.w	r5, #0
 8004a76:	015d      	lsls	r5, r3, #5
 8004a78:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004a7c:	0154      	lsls	r4, r2, #5
 8004a7e:	4622      	mov	r2, r4
 8004a80:	462b      	mov	r3, r5
 8004a82:	1a12      	subs	r2, r2, r0
 8004a84:	eb63 0301 	sbc.w	r3, r3, r1
 8004a88:	f04f 0400 	mov.w	r4, #0
 8004a8c:	f04f 0500 	mov.w	r5, #0
 8004a90:	009d      	lsls	r5, r3, #2
 8004a92:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004a96:	0094      	lsls	r4, r2, #2
 8004a98:	4622      	mov	r2, r4
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	1812      	adds	r2, r2, r0
 8004a9e:	eb41 0303 	adc.w	r3, r1, r3
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	00d9      	lsls	r1, r3, #3
 8004aac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ab0:	00d0      	lsls	r0, r2, #3
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004aba:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bdb0      	pop	{r4, r5, r7, pc}

08004ac8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ad6:	2205      	movs	r2, #5
 8004ad8:	492b      	ldr	r1, [pc, #172]	; (8004b88 <SYSVIEW_AddTask+0xc0>)
 8004ada:	68b8      	ldr	r0, [r7, #8]
 8004adc:	f002 f800 	bl	8006ae0 <memcmp>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d04b      	beq.n	8004b7e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <SYSVIEW_AddTask+0xc4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b07      	cmp	r3, #7
 8004aec:	d903      	bls.n	8004af6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004aee:	4828      	ldr	r0, [pc, #160]	; (8004b90 <SYSVIEW_AddTask+0xc8>)
 8004af0:	f001 ff76 	bl	80069e0 <SEGGER_SYSVIEW_Warn>
    return;
 8004af4:	e044      	b.n	8004b80 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004af6:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <SYSVIEW_AddTask+0xc4>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4926      	ldr	r1, [pc, #152]	; (8004b94 <SYSVIEW_AddTask+0xcc>)
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <SYSVIEW_AddTask+0xc4>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4921      	ldr	r1, [pc, #132]	; (8004b94 <SYSVIEW_AddTask+0xcc>)
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <SYSVIEW_AddTask+0xc4>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	491b      	ldr	r1, [pc, #108]	; (8004b94 <SYSVIEW_AddTask+0xcc>)
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	3308      	adds	r3, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <SYSVIEW_AddTask+0xc4>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4916      	ldr	r1, [pc, #88]	; (8004b94 <SYSVIEW_AddTask+0xcc>)
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	330c      	adds	r3, #12
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <SYSVIEW_AddTask+0xc4>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4910      	ldr	r1, [pc, #64]	; (8004b94 <SYSVIEW_AddTask+0xcc>)
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <SYSVIEW_AddTask+0xc4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <SYSVIEW_AddTask+0xc4>)
 8004b6a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f80e 	bl	8004b98 <SYSVIEW_SendTaskInfo>
 8004b7c:	e000      	b.n	8004b80 <SYSVIEW_AddTask+0xb8>
    return;
 8004b7e:	bf00      	nop

}
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	08007474 	.word	0x08007474
 8004b8c:	20012e9c 	.word	0x20012e9c
 8004b90:	0800747c 	.word	0x0800747c
 8004b94:	20012dfc 	.word	0x20012dfc

08004b98 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ba6:	f107 0314 	add.w	r3, r7, #20
 8004baa:	2214      	movs	r2, #20
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 ffb2 	bl	8006b18 <memset>
  TaskInfo.TaskID     = TaskID;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 fafd 	bl	80061cc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004bd2:	bf00      	nop
 8004bd4:	3728      	adds	r7, #40	; 0x28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <_DoInit+0x98>)
 8004be4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2203      	movs	r2, #3
 8004bea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2203      	movs	r2, #3
 8004bf0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a20      	ldr	r2, [pc, #128]	; (8004c78 <_DoInit+0x9c>)
 8004bf6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a20      	ldr	r2, [pc, #128]	; (8004c7c <_DoInit+0xa0>)
 8004bfc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c04:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <_DoInit+0x9c>)
 8004c1c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <_DoInit+0xa4>)
 8004c22:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2210      	movs	r2, #16
 8004c28:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3307      	adds	r3, #7
 8004c40:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <_DoInit+0xa8>)
 8004c42:	6810      	ldr	r0, [r2, #0]
 8004c44:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c46:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a0e      	ldr	r2, [pc, #56]	; (8004c88 <_DoInit+0xac>)
 8004c4e:	6810      	ldr	r0, [r2, #0]
 8004c50:	6018      	str	r0, [r3, #0]
 8004c52:	8891      	ldrh	r1, [r2, #4]
 8004c54:	7992      	ldrb	r2, [r2, #6]
 8004c56:	8099      	strh	r1, [r3, #4]
 8004c58:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c5a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c64:	f3bf 8f5f 	dmb	sy
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	20014464 	.word	0x20014464
 8004c78:	080074cc 	.word	0x080074cc
 8004c7c:	20012ea0 	.word	0x20012ea0
 8004c80:	200132a0 	.word	0x200132a0
 8004c84:	080074d8 	.word	0x080074d8
 8004c88:	080074dc 	.word	0x080074dc

08004c8c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08c      	sub	sp, #48	; 0x30
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004c98:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <SEGGER_RTT_ReadNoLock+0x108>)
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <SEGGER_RTT_ReadNoLock+0x1e>
 8004ca6:	f7ff ff99 	bl	8004bdc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4613      	mov	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	3360      	adds	r3, #96	; 0x60
 8004cb6:	4a37      	ldr	r2, [pc, #220]	; (8004d94 <SEGGER_RTT_ReadNoLock+0x108>)
 8004cb8:	4413      	add	r3, r2
 8004cba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d92b      	bls.n	8004d30 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	bf28      	it	cs
 8004cea:	4613      	movcs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	4413      	add	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	6939      	ldr	r1, [r7, #16]
 8004cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cfe:	f001 fefd 	bl	8006afc <memcpy>
    NumBytesRead += NumBytesRem;
 8004d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	4413      	add	r3, r2
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4413      	add	r3, r2
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	4413      	add	r3, r2
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d101      	bne.n	8004d30 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	bf28      	it	cs
 8004d40:	4613      	movcs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d019      	beq.n	8004d7e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	4413      	add	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	6939      	ldr	r1, [r7, #16]
 8004d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d5a:	f001 fecf 	bl	8006afc <memcpy>
    NumBytesRead += NumBytesRem;
 8004d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3730      	adds	r7, #48	; 0x30
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20014464 	.word	0x20014464

08004d98 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004da6:	4b3d      	ldr	r3, [pc, #244]	; (8004e9c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004db4:	f7ff ff12 	bl	8004bdc <_DoInit>
  SEGGER_RTT_LOCK();
 8004db8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dbc:	f04f 0120 	mov.w	r1, #32
 8004dc0:	f381 8811 	msr	BASEPRI, r1
 8004dc4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004dc6:	4b35      	ldr	r3, [pc, #212]	; (8004e9c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004dc8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004dce:	6939      	ldr	r1, [r7, #16]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	440b      	add	r3, r1
 8004dde:	3304      	adds	r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	dbeb      	blt.n	8004dce <SEGGER_RTT_AllocUpBuffer+0x36>
 8004df6:	e000      	b.n	8004dfa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004df8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	da3f      	bge.n	8004e84 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004e04:	6939      	ldr	r1, [r7, #16]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	440b      	add	r3, r1
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e18:	6939      	ldr	r1, [r7, #16]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	4613      	mov	r3, r2
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	4413      	add	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	440b      	add	r3, r1
 8004e28:	3304      	adds	r3, #4
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004e2e:	6939      	ldr	r1, [r7, #16]
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	4613      	mov	r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3320      	adds	r3, #32
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004e42:	6939      	ldr	r1, [r7, #16]
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	440b      	add	r3, r1
 8004e50:	3328      	adds	r3, #40	; 0x28
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004e56:	6939      	ldr	r1, [r7, #16]
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4413      	add	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	440b      	add	r3, r1
 8004e64:	3324      	adds	r3, #36	; 0x24
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004e6a:	6939      	ldr	r1, [r7, #16]
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	4413      	add	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	440b      	add	r3, r1
 8004e78:	332c      	adds	r3, #44	; 0x2c
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e7e:	f3bf 8f5f 	dmb	sy
 8004e82:	e002      	b.n	8004e8a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e88:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004e90:	69fb      	ldr	r3, [r7, #28]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20014464 	.word	0x20014464

08004ea0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004eae:	4b21      	ldr	r3, [pc, #132]	; (8004f34 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004ebc:	f7ff fe8e 	bl	8004bdc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ec0:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004ec2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d82c      	bhi.n	8004f24 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004eca:	f3ef 8311 	mrs	r3, BASEPRI
 8004ece:	f04f 0120 	mov.w	r1, #32
 8004ed2:	f381 8811 	msr	BASEPRI, r1
 8004ed6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	3360      	adds	r3, #96	; 0x60
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2200      	movs	r2, #0
 8004f06:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f12:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f14:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
 8004f22:	e002      	b.n	8004f2a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3728      	adds	r7, #40	; 0x28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20014464 	.word	0x20014464

08004f38 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00f      	beq.n	8004f6e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004f4e:	e002      	b.n	8004f56 <_EncodeStr+0x1e>
      Len++;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3301      	adds	r3, #1
 8004f54:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f6      	bne.n	8004f50 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d901      	bls.n	8004f6e <_EncodeStr+0x36>
      Len = Limit;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2bfe      	cmp	r3, #254	; 0xfe
 8004f72:	d806      	bhi.n	8004f82 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	60fa      	str	r2, [r7, #12]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	e011      	b.n	8004fa6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	60fa      	str	r2, [r7, #12]
 8004f88:	22ff      	movs	r2, #255	; 0xff
 8004f8a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	60fa      	str	r2, [r7, #12]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	0a19      	lsrs	r1, r3, #8
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	60fa      	str	r2, [r7, #12]
 8004fa2:	b2ca      	uxtb	r2, r1
 8004fa4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004faa:	e00a      	b.n	8004fc2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	1c53      	adds	r3, r2, #1
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1c59      	adds	r1, r3, #1
 8004fb6:	60f9      	str	r1, [r7, #12]
 8004fb8:	7812      	ldrb	r2, [r2, #0]
 8004fba:	701a      	strb	r2, [r3, #0]
    n++;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d3f0      	bcc.n	8004fac <_EncodeStr+0x74>
  }
  return pPayload;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ff6:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <_HandleIncomingPacket+0xe0>)
 8004ff8:	7e1b      	ldrb	r3, [r3, #24]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	1cfb      	adds	r3, r7, #3
 8004ffe:	2201      	movs	r2, #1
 8005000:	4619      	mov	r1, r3
 8005002:	f7ff fe43 	bl	8004c8c <SEGGER_RTT_ReadNoLock>
 8005006:	4603      	mov	r3, r0
 8005008:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	dd54      	ble.n	80050ba <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	2b80      	cmp	r3, #128	; 0x80
 8005014:	d032      	beq.n	800507c <_HandleIncomingPacket+0x8c>
 8005016:	2b80      	cmp	r3, #128	; 0x80
 8005018:	dc42      	bgt.n	80050a0 <_HandleIncomingPacket+0xb0>
 800501a:	2b07      	cmp	r3, #7
 800501c:	dc16      	bgt.n	800504c <_HandleIncomingPacket+0x5c>
 800501e:	2b00      	cmp	r3, #0
 8005020:	dd3e      	ble.n	80050a0 <_HandleIncomingPacket+0xb0>
 8005022:	3b01      	subs	r3, #1
 8005024:	2b06      	cmp	r3, #6
 8005026:	d83b      	bhi.n	80050a0 <_HandleIncomingPacket+0xb0>
 8005028:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <_HandleIncomingPacket+0x40>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005053 	.word	0x08005053
 8005034:	08005059 	.word	0x08005059
 8005038:	0800505f 	.word	0x0800505f
 800503c:	08005065 	.word	0x08005065
 8005040:	0800506b 	.word	0x0800506b
 8005044:	08005071 	.word	0x08005071
 8005048:	08005077 	.word	0x08005077
 800504c:	2b7f      	cmp	r3, #127	; 0x7f
 800504e:	d036      	beq.n	80050be <_HandleIncomingPacket+0xce>
 8005050:	e026      	b.n	80050a0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005052:	f000 ff41 	bl	8005ed8 <SEGGER_SYSVIEW_Start>
      break;
 8005056:	e037      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005058:	f000 fff8 	bl	800604c <SEGGER_SYSVIEW_Stop>
      break;
 800505c:	e034      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800505e:	f001 f9d1 	bl	8006404 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005062:	e031      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005064:	f001 f996 	bl	8006394 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005068:	e02e      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800506a:	f001 f815 	bl	8006098 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800506e:	e02b      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005070:	f001 fc64 	bl	800693c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005074:	e028      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005076:	f001 fc43 	bl	8006900 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800507a:	e025      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800507c:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <_HandleIncomingPacket+0xe0>)
 800507e:	7e1b      	ldrb	r3, [r3, #24]
 8005080:	4618      	mov	r0, r3
 8005082:	1cfb      	adds	r3, r7, #3
 8005084:	2201      	movs	r2, #1
 8005086:	4619      	mov	r1, r3
 8005088:	f7ff fe00 	bl	8004c8c <SEGGER_RTT_ReadNoLock>
 800508c:	4603      	mov	r3, r0
 800508e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	dd15      	ble.n	80050c2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fbb1 	bl	8006800 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800509e:	e010      	b.n	80050c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	b25b      	sxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	da0e      	bge.n	80050c6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <_HandleIncomingPacket+0xe0>)
 80050aa:	7e1b      	ldrb	r3, [r3, #24]
 80050ac:	4618      	mov	r0, r3
 80050ae:	1cfb      	adds	r3, r7, #3
 80050b0:	2201      	movs	r2, #1
 80050b2:	4619      	mov	r1, r3
 80050b4:	f7ff fdea 	bl	8004c8c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80050b8:	e005      	b.n	80050c6 <_HandleIncomingPacket+0xd6>
    }
  }
 80050ba:	bf00      	nop
 80050bc:	e004      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
      break;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
      break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <_HandleIncomingPacket+0xd8>
      break;
 80050c6:	bf00      	nop
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200142b8 	.word	0x200142b8

080050d4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08c      	sub	sp, #48	; 0x30
 80050d8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80050da:	2301      	movs	r3, #1
 80050dc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	3301      	adds	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e8:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <_TrySendOverflowPacket+0xdc>)
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ee:	e00b      	b.n	8005108 <_TrySendOverflowPacket+0x34>
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	09db      	lsrs	r3, r3, #7
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	2b7f      	cmp	r3, #127	; 0x7f
 800510c:	d8f0      	bhi.n	80050f0 <_TrySendOverflowPacket+0x1c>
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800511e:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <_TrySendOverflowPacket+0xe0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005124:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <_TrySendOverflowPacket+0xdc>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	623b      	str	r3, [r7, #32]
 8005136:	e00b      	b.n	8005150 <_TrySendOverflowPacket+0x7c>
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	b2da      	uxtb	r2, r3
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	6279      	str	r1, [r7, #36]	; 0x24
 8005142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	09db      	lsrs	r3, r3, #7
 800514e:	623b      	str	r3, [r7, #32]
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	2b7f      	cmp	r3, #127	; 0x7f
 8005154:	d8f0      	bhi.n	8005138 <_TrySendOverflowPacket+0x64>
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	627a      	str	r2, [r7, #36]	; 0x24
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <_TrySendOverflowPacket+0xdc>)
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	4618      	mov	r0, r3
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	461a      	mov	r2, r3
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	4619      	mov	r1, r3
 8005178:	f7fb f82a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800517c:	4603      	mov	r3, r0
 800517e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <_TrySendOverflowPacket+0xdc>)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800518c:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <_TrySendOverflowPacket+0xdc>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	3b01      	subs	r3, #1
 8005192:	b2da      	uxtb	r2, r3
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <_TrySendOverflowPacket+0xdc>)
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e004      	b.n	80051a4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <_TrySendOverflowPacket+0xdc>)
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	3301      	adds	r3, #1
 80051a0:	4a03      	ldr	r2, [pc, #12]	; (80051b0 <_TrySendOverflowPacket+0xdc>)
 80051a2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80051a4:	693b      	ldr	r3, [r7, #16]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3730      	adds	r7, #48	; 0x30
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200142b8 	.word	0x200142b8
 80051b4:	e0001004 	.word	0xe0001004

080051b8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80051c4:	4b6c      	ldr	r3, [pc, #432]	; (8005378 <_SendPacket+0x1c0>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d010      	beq.n	80051ee <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80051cc:	4b6a      	ldr	r3, [pc, #424]	; (8005378 <_SendPacket+0x1c0>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80a3 	beq.w	800531c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80051d6:	4b68      	ldr	r3, [pc, #416]	; (8005378 <_SendPacket+0x1c0>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d109      	bne.n	80051f2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80051de:	f7ff ff79 	bl	80050d4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80051e2:	4b65      	ldr	r3, [pc, #404]	; (8005378 <_SendPacket+0x1c0>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	f040 809a 	bne.w	8005320 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80051ec:	e001      	b.n	80051f2 <_SendPacket+0x3a>
    goto Send;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <_SendPacket+0x3c>
Send:
 80051f2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b1f      	cmp	r3, #31
 80051f8:	d809      	bhi.n	800520e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80051fa:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <_SendPacket+0x1c0>)
 80051fc:	69da      	ldr	r2, [r3, #28]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	f040 808b 	bne.w	8005324 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b17      	cmp	r3, #23
 8005212:	d807      	bhi.n	8005224 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3b01      	subs	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e03d      	b.n	80052a0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	2b7f      	cmp	r3, #127	; 0x7f
 8005230:	d912      	bls.n	8005258 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	09da      	lsrs	r2, r3, #7
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3b01      	subs	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	3a01      	subs	r2, #1
 800524a:	60fa      	str	r2, [r7, #12]
 800524c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005250:	b2da      	uxtb	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e006      	b.n	8005266 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3b01      	subs	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b7f      	cmp	r3, #127	; 0x7f
 800526a:	d912      	bls.n	8005292 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	09da      	lsrs	r2, r3, #7
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3b01      	subs	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	3a01      	subs	r2, #1
 8005284:	60fa      	str	r2, [r7, #12]
 8005286:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800528a:	b2da      	uxtb	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e006      	b.n	80052a0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3b01      	subs	r3, #1
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052a0:	4b36      	ldr	r3, [pc, #216]	; (800537c <_SendPacket+0x1c4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052a6:	4b34      	ldr	r3, [pc, #208]	; (8005378 <_SendPacket+0x1c0>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	e00b      	b.n	80052d2 <_SendPacket+0x11a>
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	1c59      	adds	r1, r3, #1
 80052c2:	6279      	str	r1, [r7, #36]	; 0x24
 80052c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	09db      	lsrs	r3, r3, #7
 80052d0:	623b      	str	r3, [r7, #32]
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	2b7f      	cmp	r3, #127	; 0x7f
 80052d6:	d8f0      	bhi.n	80052ba <_SendPacket+0x102>
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	627a      	str	r2, [r7, #36]	; 0x24
 80052de:	6a3a      	ldr	r2, [r7, #32]
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80052e8:	4b23      	ldr	r3, [pc, #140]	; (8005378 <_SendPacket+0x1c0>)
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	4618      	mov	r0, r3
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	f7fa ff6a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80052fc:	4603      	mov	r3, r0
 80052fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005306:	4a1c      	ldr	r2, [pc, #112]	; (8005378 <_SendPacket+0x1c0>)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	60d3      	str	r3, [r2, #12]
 800530c:	e00b      	b.n	8005326 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800530e:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <_SendPacket+0x1c0>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	b2da      	uxtb	r2, r3
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <_SendPacket+0x1c0>)
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e004      	b.n	8005326 <_SendPacket+0x16e>
    goto SendDone;
 800531c:	bf00      	nop
 800531e:	e002      	b.n	8005326 <_SendPacket+0x16e>
      goto SendDone;
 8005320:	bf00      	nop
 8005322:	e000      	b.n	8005326 <_SendPacket+0x16e>
      goto SendDone;
 8005324:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <_SendPacket+0x1c0>)
 8005328:	7e1b      	ldrb	r3, [r3, #24]
 800532a:	4619      	mov	r1, r3
 800532c:	4a14      	ldr	r2, [pc, #80]	; (8005380 <_SendPacket+0x1c8>)
 800532e:	460b      	mov	r3, r1
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	440b      	add	r3, r1
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4413      	add	r3, r2
 8005338:	336c      	adds	r3, #108	; 0x6c
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <_SendPacket+0x1c0>)
 800533e:	7e1b      	ldrb	r3, [r3, #24]
 8005340:	4618      	mov	r0, r3
 8005342:	490f      	ldr	r1, [pc, #60]	; (8005380 <_SendPacket+0x1c8>)
 8005344:	4603      	mov	r3, r0
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4403      	add	r3, r0
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	440b      	add	r3, r1
 800534e:	3370      	adds	r3, #112	; 0x70
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d00b      	beq.n	800536e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005356:	4b08      	ldr	r3, [pc, #32]	; (8005378 <_SendPacket+0x1c0>)
 8005358:	789b      	ldrb	r3, [r3, #2]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <_SendPacket+0x1c0>)
 8005360:	2201      	movs	r2, #1
 8005362:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005364:	f7ff fe44 	bl	8004ff0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005368:	4b03      	ldr	r3, [pc, #12]	; (8005378 <_SendPacket+0x1c0>)
 800536a:	2200      	movs	r2, #0
 800536c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800536e:	bf00      	nop
 8005370:	3728      	adds	r7, #40	; 0x28
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	200142b8 	.word	0x200142b8
 800537c:	e0001004 	.word	0xe0001004
 8005380:	20014464 	.word	0x20014464

08005384 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3301      	adds	r3, #1
 800539a:	2b80      	cmp	r3, #128	; 0x80
 800539c:	d80a      	bhi.n	80053b4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	1c59      	adds	r1, r3, #1
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6051      	str	r1, [r2, #4]
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b80      	cmp	r3, #128	; 0x80
 80053ba:	d15a      	bne.n	8005472 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	623b      	str	r3, [r7, #32]
 80053dc:	e00b      	b.n	80053f6 <_StoreChar+0x72>
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	1c59      	adds	r1, r3, #1
 80053e6:	6279      	str	r1, [r7, #36]	; 0x24
 80053e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	09db      	lsrs	r3, r3, #7
 80053f4:	623b      	str	r3, [r7, #32]
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	2b7f      	cmp	r3, #127	; 0x7f
 80053fa:	d8f0      	bhi.n	80053de <_StoreChar+0x5a>
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	627a      	str	r2, [r7, #36]	; 0x24
 8005402:	6a3a      	ldr	r2, [r7, #32]
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	2300      	movs	r3, #0
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	e00b      	b.n	800542e <_StoreChar+0xaa>
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	b2da      	uxtb	r2, r3
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	1c59      	adds	r1, r3, #1
 800541e:	61f9      	str	r1, [r7, #28]
 8005420:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	09db      	lsrs	r3, r3, #7
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b7f      	cmp	r3, #127	; 0x7f
 8005432:	d8f0      	bhi.n	8005416 <_StoreChar+0x92>
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	61fa      	str	r2, [r7, #28]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	221a      	movs	r2, #26
 800544a:	6939      	ldr	r1, [r7, #16]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff feb3 	bl	80051b8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fdbe 	bl	8004fd8 <_PreparePacket>
 800545c:	4602      	mov	r2, r0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	611a      	str	r2, [r3, #16]
  }
}
 8005472:	bf00      	nop
 8005474:	3728      	adds	r7, #40	; 0x28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	; 0x28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800548e:	2301      	movs	r3, #1
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005492:	2301      	movs	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005496:	e007      	b.n	80054a8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005498:	6a3a      	ldr	r2, [r7, #32]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	623b      	str	r3, [r7, #32]
    Width++;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3301      	adds	r3, #1
 80054a6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80054a8:	6a3a      	ldr	r2, [r7, #32]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d2f3      	bcs.n	8005498 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d901      	bls.n	80054bc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d11f      	bne.n	8005506 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01c      	beq.n	8005506 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <_PrintUnsigned+0x66>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d102      	bne.n	80054e2 <_PrintUnsigned+0x66>
        c = '0';
 80054dc:	2330      	movs	r3, #48	; 0x30
 80054de:	76fb      	strb	r3, [r7, #27]
 80054e0:	e001      	b.n	80054e6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80054e2:	2320      	movs	r3, #32
 80054e4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80054e6:	e007      	b.n	80054f8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	3b01      	subs	r3, #1
 80054ec:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80054ee:	7efb      	ldrb	r3, [r7, #27]
 80054f0:	4619      	mov	r1, r3
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff ff46 	bl	8005384 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <_PrintUnsigned+0x8a>
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	429a      	cmp	r2, r3
 8005504:	d3f0      	bcc.n	80054e8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d903      	bls.n	8005514 <_PrintUnsigned+0x98>
      NumDigits--;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	3b01      	subs	r3, #1
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	e009      	b.n	8005528 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	fbb2 f3f3 	udiv	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d200      	bcs.n	8005528 <_PrintUnsigned+0xac>
        break;
 8005526:	e005      	b.n	8005534 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	fb02 f303 	mul.w	r3, r2, r3
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005532:	e7e8      	b.n	8005506 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	fbb2 f3f3 	udiv	r3, r2, r3
 800553c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800554c:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <_PrintUnsigned+0x128>)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4413      	add	r3, r2
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	4619      	mov	r1, r3
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7ff ff14 	bl	8005384 <_StoreChar>
    Digit /= Base;
 800555c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e3      	bne.n	8005534 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d011      	beq.n	800559a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00e      	beq.n	800559a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800557c:	e006      	b.n	800558c <_PrintUnsigned+0x110>
        FieldWidth--;
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	3b01      	subs	r3, #1
 8005582:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005584:	2120      	movs	r1, #32
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff fefc 	bl	8005384 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <_PrintUnsigned+0x11e>
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	429a      	cmp	r2, r3
 8005598:	d3f1      	bcc.n	800557e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800559a:	bf00      	nop
 800559c:	3728      	adds	r7, #40	; 0x28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	08007518 	.word	0x08007518

080055a8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bfb8      	it	lt
 80055bc:	425b      	neglt	r3, r3
 80055be:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80055c4:	e007      	b.n	80055d6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80055ce:	613b      	str	r3, [r7, #16]
    Width++;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3301      	adds	r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	daf3      	bge.n	80055c6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d901      	bls.n	80055ea <_PrintInt+0x42>
    Width = NumDigits;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <_PrintInt+0x5e>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	db04      	blt.n	8005600 <_PrintInt+0x58>
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <_PrintInt+0x5e>
    FieldWidth--;
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	3b01      	subs	r3, #1
 8005604:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <_PrintInt+0x6e>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <_PrintInt+0x9c>
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d111      	bne.n	8005644 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00e      	beq.n	8005644 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005626:	e006      	b.n	8005636 <_PrintInt+0x8e>
        FieldWidth--;
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	3b01      	subs	r3, #1
 800562c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800562e:	2120      	movs	r1, #32
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff fea7 	bl	8005384 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <_PrintInt+0x9c>
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	429a      	cmp	r2, r3
 8005642:	d3f1      	bcc.n	8005628 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	da07      	bge.n	800565a <_PrintInt+0xb2>
    v = -v;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	425b      	negs	r3, r3
 800564e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005650:	212d      	movs	r1, #45	; 0x2d
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f7ff fe96 	bl	8005384 <_StoreChar>
 8005658:	e008      	b.n	800566c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005664:	212b      	movs	r1, #43	; 0x2b
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff fe8c 	bl	8005384 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d019      	beq.n	80056aa <_PrintInt+0x102>
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d114      	bne.n	80056aa <_PrintInt+0x102>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d111      	bne.n	80056aa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00e      	beq.n	80056aa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800568c:	e006      	b.n	800569c <_PrintInt+0xf4>
        FieldWidth--;
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	3b01      	subs	r3, #1
 8005692:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005694:	2130      	movs	r1, #48	; 0x30
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fe74 	bl	8005384 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <_PrintInt+0x102>
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3f1      	bcc.n	800568e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff fedf 	bl	800547c <_PrintUnsigned>
}
 80056be:	bf00      	nop
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b098      	sub	sp, #96	; 0x60
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80056d4:	f3ef 8311 	mrs	r3, BASEPRI
 80056d8:	f04f 0120 	mov.w	r1, #32
 80056dc:	f381 8811 	msr	BASEPRI, r1
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30
 80056e2:	48b7      	ldr	r0, [pc, #732]	; (80059c0 <_VPrintTarget+0x2f8>)
 80056e4:	f7ff fc78 	bl	8004fd8 <_PreparePacket>
 80056e8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80056ea:	4bb5      	ldr	r3, [pc, #724]	; (80059c0 <_VPrintTarget+0x2f8>)
 80056ec:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80056ee:	2300      	movs	r3, #0
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800570e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8183 	beq.w	8005a1e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800571c:	2b25      	cmp	r3, #37	; 0x25
 800571e:	f040 8170 	bne.w	8005a02 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005722:	2300      	movs	r3, #0
 8005724:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005726:	2301      	movs	r3, #1
 8005728:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005732:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005736:	3b23      	subs	r3, #35	; 0x23
 8005738:	2b0d      	cmp	r3, #13
 800573a:	d83f      	bhi.n	80057bc <_VPrintTarget+0xf4>
 800573c:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <_VPrintTarget+0x7c>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	080057ad 	.word	0x080057ad
 8005748:	080057bd 	.word	0x080057bd
 800574c:	080057bd 	.word	0x080057bd
 8005750:	080057bd 	.word	0x080057bd
 8005754:	080057bd 	.word	0x080057bd
 8005758:	080057bd 	.word	0x080057bd
 800575c:	080057bd 	.word	0x080057bd
 8005760:	080057bd 	.word	0x080057bd
 8005764:	0800579d 	.word	0x0800579d
 8005768:	080057bd 	.word	0x080057bd
 800576c:	0800577d 	.word	0x0800577d
 8005770:	080057bd 	.word	0x080057bd
 8005774:	080057bd 	.word	0x080057bd
 8005778:	0800578d 	.word	0x0800578d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800577c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	64bb      	str	r3, [r7, #72]	; 0x48
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	e01a      	b.n	80057c2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800578c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578e:	f043 0302 	orr.w	r3, r3, #2
 8005792:	64bb      	str	r3, [r7, #72]	; 0x48
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3301      	adds	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e012      	b.n	80057c2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800579c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800579e:	f043 0304 	orr.w	r3, r3, #4
 80057a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3301      	adds	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e00a      	b.n	80057c2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80057ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ae:	f043 0308 	orr.w	r3, r3, #8
 80057b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	e002      	b.n	80057c2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80057bc:	2300      	movs	r3, #0
 80057be:	653b      	str	r3, [r7, #80]	; 0x50
 80057c0:	bf00      	nop
        }
      } while (v);
 80057c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1b0      	bne.n	800572a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80057c8:	2300      	movs	r3, #0
 80057ca:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80057d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057d8:	2b2f      	cmp	r3, #47	; 0x2f
 80057da:	d912      	bls.n	8005802 <_VPrintTarget+0x13a>
 80057dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057e0:	2b39      	cmp	r3, #57	; 0x39
 80057e2:	d80e      	bhi.n	8005802 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80057ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	461a      	mov	r2, r3
 80057f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057fa:	4413      	add	r3, r2
 80057fc:	3b30      	subs	r3, #48	; 0x30
 80057fe:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005800:	e7e4      	b.n	80057cc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005802:	2300      	movs	r3, #0
 8005804:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800580e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005812:	2b2e      	cmp	r3, #46	; 0x2e
 8005814:	d11d      	bne.n	8005852 <_VPrintTarget+0x18a>
        sFormat++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005828:	2b2f      	cmp	r3, #47	; 0x2f
 800582a:	d912      	bls.n	8005852 <_VPrintTarget+0x18a>
 800582c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005830:	2b39      	cmp	r3, #57	; 0x39
 8005832:	d80e      	bhi.n	8005852 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800583a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	461a      	mov	r2, r3
 8005846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800584a:	4413      	add	r3, r2
 800584c:	3b30      	subs	r3, #48	; 0x30
 800584e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005850:	e7e4      	b.n	800581c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800585a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800585e:	2b6c      	cmp	r3, #108	; 0x6c
 8005860:	d003      	beq.n	800586a <_VPrintTarget+0x1a2>
 8005862:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005866:	2b68      	cmp	r3, #104	; 0x68
 8005868:	d107      	bne.n	800587a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3301      	adds	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005878:	e7ef      	b.n	800585a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800587a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800587e:	2b25      	cmp	r3, #37	; 0x25
 8005880:	f000 80b3 	beq.w	80059ea <_VPrintTarget+0x322>
 8005884:	2b25      	cmp	r3, #37	; 0x25
 8005886:	f2c0 80b7 	blt.w	80059f8 <_VPrintTarget+0x330>
 800588a:	2b78      	cmp	r3, #120	; 0x78
 800588c:	f300 80b4 	bgt.w	80059f8 <_VPrintTarget+0x330>
 8005890:	2b58      	cmp	r3, #88	; 0x58
 8005892:	f2c0 80b1 	blt.w	80059f8 <_VPrintTarget+0x330>
 8005896:	3b58      	subs	r3, #88	; 0x58
 8005898:	2b20      	cmp	r3, #32
 800589a:	f200 80ad 	bhi.w	80059f8 <_VPrintTarget+0x330>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <_VPrintTarget+0x1dc>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	0800599b 	.word	0x0800599b
 80058a8:	080059f9 	.word	0x080059f9
 80058ac:	080059f9 	.word	0x080059f9
 80058b0:	080059f9 	.word	0x080059f9
 80058b4:	080059f9 	.word	0x080059f9
 80058b8:	080059f9 	.word	0x080059f9
 80058bc:	080059f9 	.word	0x080059f9
 80058c0:	080059f9 	.word	0x080059f9
 80058c4:	080059f9 	.word	0x080059f9
 80058c8:	080059f9 	.word	0x080059f9
 80058cc:	080059f9 	.word	0x080059f9
 80058d0:	08005929 	.word	0x08005929
 80058d4:	0800594f 	.word	0x0800594f
 80058d8:	080059f9 	.word	0x080059f9
 80058dc:	080059f9 	.word	0x080059f9
 80058e0:	080059f9 	.word	0x080059f9
 80058e4:	080059f9 	.word	0x080059f9
 80058e8:	080059f9 	.word	0x080059f9
 80058ec:	080059f9 	.word	0x080059f9
 80058f0:	080059f9 	.word	0x080059f9
 80058f4:	080059f9 	.word	0x080059f9
 80058f8:	080059f9 	.word	0x080059f9
 80058fc:	080059f9 	.word	0x080059f9
 8005900:	080059f9 	.word	0x080059f9
 8005904:	080059c5 	.word	0x080059c5
 8005908:	080059f9 	.word	0x080059f9
 800590c:	080059f9 	.word	0x080059f9
 8005910:	080059f9 	.word	0x080059f9
 8005914:	080059f9 	.word	0x080059f9
 8005918:	08005975 	.word	0x08005975
 800591c:	080059f9 	.word	0x080059f9
 8005920:	080059f9 	.word	0x080059f9
 8005924:	0800599b 	.word	0x0800599b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	1d19      	adds	r1, r3, #4
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6011      	str	r1, [r2, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800593c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005940:	f107 0314 	add.w	r3, r7, #20
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fd1c 	bl	8005384 <_StoreChar>
        break;
 800594c:	e055      	b.n	80059fa <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	1d19      	adds	r1, r3, #4
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6011      	str	r1, [r2, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800595c:	f107 0014 	add.w	r0, r7, #20
 8005960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596a:	220a      	movs	r2, #10
 800596c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800596e:	f7ff fe1b 	bl	80055a8 <_PrintInt>
        break;
 8005972:	e042      	b.n	80059fa <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	1d19      	adds	r1, r3, #4
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6011      	str	r1, [r2, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005982:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005984:	f107 0014 	add.w	r0, r7, #20
 8005988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005992:	220a      	movs	r2, #10
 8005994:	f7ff fd72 	bl	800547c <_PrintUnsigned>
        break;
 8005998:	e02f      	b.n	80059fa <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	1d19      	adds	r1, r3, #4
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6011      	str	r1, [r2, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80059a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059aa:	f107 0014 	add.w	r0, r7, #20
 80059ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b8:	2210      	movs	r2, #16
 80059ba:	f7ff fd5f 	bl	800547c <_PrintUnsigned>
        break;
 80059be:	e01c      	b.n	80059fa <_VPrintTarget+0x332>
 80059c0:	200142e8 	.word	0x200142e8
      case 'p':
        v = va_arg(*pParamList, int);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	1d19      	adds	r1, r3, #4
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6011      	str	r1, [r2, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80059d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059d4:	f107 0014 	add.w	r0, r7, #20
 80059d8:	2300      	movs	r3, #0
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	2308      	movs	r3, #8
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2308      	movs	r3, #8
 80059e2:	2210      	movs	r2, #16
 80059e4:	f7ff fd4a 	bl	800547c <_PrintUnsigned>
        break;
 80059e8:	e007      	b.n	80059fa <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80059ea:	f107 0314 	add.w	r3, r7, #20
 80059ee:	2125      	movs	r1, #37	; 0x25
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fcc7 	bl	8005384 <_StoreChar>
        break;
 80059f6:	e000      	b.n	80059fa <_VPrintTarget+0x332>
      default:
        break;
 80059f8:	bf00      	nop
      }
      sFormat++;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3301      	adds	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e007      	b.n	8005a12 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005a02:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005a06:	f107 0314 	add.w	r3, r7, #20
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff fcb9 	bl	8005384 <_StoreChar>
    }
  } while (*sFormat);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f47f ae72 	bne.w	8005700 <_VPrintTarget+0x38>
 8005a1c:	e000      	b.n	8005a20 <_VPrintTarget+0x358>
      break;
 8005a1e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d041      	beq.n	8005aaa <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	643b      	str	r3, [r7, #64]	; 0x40
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a36:	e00b      	b.n	8005a50 <_VPrintTarget+0x388>
 8005a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3e:	1c59      	adds	r1, r3, #1
 8005a40:	6439      	str	r1, [r7, #64]	; 0x40
 8005a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4c:	09db      	lsrs	r3, r3, #7
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a52:	2b7f      	cmp	r3, #127	; 0x7f
 8005a54:	d8f0      	bhi.n	8005a38 <_VPrintTarget+0x370>
 8005a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	643a      	str	r2, [r7, #64]	; 0x40
 8005a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a64:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6e:	e00b      	b.n	8005a88 <_VPrintTarget+0x3c0>
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	1c59      	adds	r1, r3, #1
 8005a78:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	09db      	lsrs	r3, r3, #7
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8c:	d8f0      	bhi.n	8005a70 <_VPrintTarget+0x3a8>
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	69b9      	ldr	r1, [r7, #24]
 8005aa2:	221a      	movs	r2, #26
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff fb87 	bl	80051b8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005ab0:	bf00      	nop
 8005ab2:	3758      	adds	r7, #88	; 0x58
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005acc:	4917      	ldr	r1, [pc, #92]	; (8005b2c <SEGGER_SYSVIEW_Init+0x74>)
 8005ace:	4818      	ldr	r0, [pc, #96]	; (8005b30 <SEGGER_SYSVIEW_Init+0x78>)
 8005ad0:	f7ff f962 	bl	8004d98 <SEGGER_RTT_AllocUpBuffer>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ada:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005adc:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ade:	785a      	ldrb	r2, [r3, #1]
 8005ae0:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ae2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ae4:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ae6:	7e1b      	ldrb	r3, [r3, #24]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	2308      	movs	r3, #8
 8005af0:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <SEGGER_SYSVIEW_Init+0x80>)
 8005af2:	490f      	ldr	r1, [pc, #60]	; (8005b30 <SEGGER_SYSVIEW_Init+0x78>)
 8005af4:	f7ff f9d4 	bl	8004ea0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005af8:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005afe:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <SEGGER_SYSVIEW_Init+0x84>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b04:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005b06:	4a0b      	ldr	r2, [pc, #44]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005b0c:	4a09      	ldr	r2, [pc, #36]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005b12:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005b18:	4a06      	ldr	r2, [pc, #24]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005b1e:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	200132b0 	.word	0x200132b0
 8005b30:	080074e4 	.word	0x080074e4
 8005b34:	200142b8 	.word	0x200142b8
 8005b38:	200142b0 	.word	0x200142b0
 8005b3c:	e0001004 	.word	0xe0001004

08005b40 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005b48:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6113      	str	r3, [r2, #16]
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	200142b8 	.word	0x200142b8

08005b60 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b68:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6c:	f04f 0120 	mov.w	r1, #32
 8005b70:	f381 8811 	msr	BASEPRI, r1
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	4808      	ldr	r0, [pc, #32]	; (8005b98 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005b78:	f7ff fa2e 	bl	8004fd8 <_PreparePacket>
 8005b7c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	68b8      	ldr	r0, [r7, #8]
 8005b84:	f7ff fb18 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200142e8 	.word	0x200142e8

08005b9c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8005baa:	f04f 0120 	mov.w	r1, #32
 8005bae:	f381 8811 	msr	BASEPRI, r1
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	4816      	ldr	r0, [pc, #88]	; (8005c10 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005bb6:	f7ff fa0f 	bl	8004fd8 <_PreparePacket>
 8005bba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	e00b      	b.n	8005be2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	61f9      	str	r1, [r7, #28]
 8005bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b7f      	cmp	r3, #127	; 0x7f
 8005be6:	d8f0      	bhi.n	8005bca <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	61fa      	str	r2, [r7, #28]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	6938      	ldr	r0, [r7, #16]
 8005bfe:	f7ff fadb 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f383 8811 	msr	BASEPRI, r3
}
 8005c08:	bf00      	nop
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200142e8 	.word	0x200142e8

08005c14 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	; 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c20:	f3ef 8311 	mrs	r3, BASEPRI
 8005c24:	f04f 0120 	mov.w	r1, #32
 8005c28:	f381 8811 	msr	BASEPRI, r1
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	4825      	ldr	r0, [pc, #148]	; (8005cc4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005c30:	f7ff f9d2 	bl	8004fd8 <_PreparePacket>
 8005c34:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c42:	e00b      	b.n	8005c5c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	1c59      	adds	r1, r3, #1
 8005c4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	09db      	lsrs	r3, r3, #7
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c60:	d8f0      	bhi.n	8005c44 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	e00b      	b.n	8005c94 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	6279      	str	r1, [r7, #36]	; 0x24
 8005c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	09db      	lsrs	r3, r3, #7
 8005c92:	623b      	str	r3, [r7, #32]
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	2b7f      	cmp	r3, #127	; 0x7f
 8005c98:	d8f0      	bhi.n	8005c7c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8005ca0:	6a3a      	ldr	r2, [r7, #32]
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	6979      	ldr	r1, [r7, #20]
 8005cae:	69b8      	ldr	r0, [r7, #24]
 8005cb0:	f7ff fa82 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f383 8811 	msr	BASEPRI, r3
}
 8005cba:	bf00      	nop
 8005cbc:	3730      	adds	r7, #48	; 0x30
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200142e8 	.word	0x200142e8

08005cc8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cda:	f04f 0120 	mov.w	r1, #32
 8005cde:	f381 8811 	msr	BASEPRI, r1
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	4832      	ldr	r0, [pc, #200]	; (8005db0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005ce6:	f7ff f977 	bl	8004fd8 <_PreparePacket>
 8005cea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cf8:	e00b      	b.n	8005d12 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	1c59      	adds	r1, r3, #1
 8005d02:	6379      	str	r1, [r7, #52]	; 0x34
 8005d04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	09db      	lsrs	r3, r3, #7
 8005d10:	633b      	str	r3, [r7, #48]	; 0x30
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	2b7f      	cmp	r3, #127	; 0x7f
 8005d16:	d8f0      	bhi.n	8005cfa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	637a      	str	r2, [r7, #52]	; 0x34
 8005d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d30:	e00b      	b.n	8005d4a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	1c59      	adds	r1, r3, #1
 8005d3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	09db      	lsrs	r3, r3, #7
 8005d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d4e:	d8f0      	bhi.n	8005d32 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	623b      	str	r3, [r7, #32]
 8005d68:	e00b      	b.n	8005d82 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	6279      	str	r1, [r7, #36]	; 0x24
 8005d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	09db      	lsrs	r3, r3, #7
 8005d80:	623b      	str	r3, [r7, #32]
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2b7f      	cmp	r3, #127	; 0x7f
 8005d86:	d8f0      	bhi.n	8005d6a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d8e:	6a3a      	ldr	r2, [r7, #32]
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	6979      	ldr	r1, [r7, #20]
 8005d9c:	69b8      	ldr	r0, [r7, #24]
 8005d9e:	f7ff fa0b 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f383 8811 	msr	BASEPRI, r3
}
 8005da8:	bf00      	nop
 8005daa:	3738      	adds	r7, #56	; 0x38
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	200142e8 	.word	0x200142e8

08005db4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b090      	sub	sp, #64	; 0x40
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc6:	f04f 0120 	mov.w	r1, #32
 8005dca:	f381 8811 	msr	BASEPRI, r1
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	4840      	ldr	r0, [pc, #256]	; (8005ed4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005dd2:	f7ff f901 	bl	8004fd8 <_PreparePacket>
 8005dd6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005de4:	e00b      	b.n	8005dfe <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dec:	1c59      	adds	r1, r3, #1
 8005dee:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	09db      	lsrs	r3, r3, #7
 8005dfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	2b7f      	cmp	r3, #127	; 0x7f
 8005e02:	d8f0      	bhi.n	8005de6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e1c:	e00b      	b.n	8005e36 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	6379      	str	r1, [r7, #52]	; 0x34
 8005e28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	09db      	lsrs	r3, r3, #7
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	2b7f      	cmp	r3, #127	; 0x7f
 8005e3a:	d8f0      	bhi.n	8005e1e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	637a      	str	r2, [r7, #52]	; 0x34
 8005e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e54:	e00b      	b.n	8005e6e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	1c59      	adds	r1, r3, #1
 8005e5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	09db      	lsrs	r3, r3, #7
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	2b7f      	cmp	r3, #127	; 0x7f
 8005e72:	d8f0      	bhi.n	8005e56 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8a:	623b      	str	r3, [r7, #32]
 8005e8c:	e00b      	b.n	8005ea6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	6279      	str	r1, [r7, #36]	; 0x24
 8005e98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	09db      	lsrs	r3, r3, #7
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eaa:	d8f0      	bhi.n	8005e8e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	627a      	str	r2, [r7, #36]	; 0x24
 8005eb2:	6a3a      	ldr	r2, [r7, #32]
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	6979      	ldr	r1, [r7, #20]
 8005ec0:	69b8      	ldr	r0, [r7, #24]
 8005ec2:	f7ff f979 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f383 8811 	msr	BASEPRI, r3
}
 8005ecc:	bf00      	nop
 8005ece:	3740      	adds	r7, #64	; 0x40
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	200142e8 	.word	0x200142e8

08005ed8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08c      	sub	sp, #48	; 0x30
 8005edc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005ede:	4b58      	ldr	r3, [pc, #352]	; (8006040 <SEGGER_SYSVIEW_Start+0x168>)
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee8:	f04f 0120 	mov.w	r1, #32
 8005eec:	f381 8811 	msr	BASEPRI, r1
 8005ef0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005ef2:	4b53      	ldr	r3, [pc, #332]	; (8006040 <SEGGER_SYSVIEW_Start+0x168>)
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	4952      	ldr	r1, [pc, #328]	; (8006044 <SEGGER_SYSVIEW_Start+0x16c>)
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fa f968 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005f06:	200a      	movs	r0, #10
 8005f08:	f7ff fe2a 	bl	8005b60 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f10:	f04f 0120 	mov.w	r1, #32
 8005f14:	f381 8811 	msr	BASEPRI, r1
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	484b      	ldr	r0, [pc, #300]	; (8006048 <SEGGER_SYSVIEW_Start+0x170>)
 8005f1c:	f7ff f85c 	bl	8004fd8 <_PreparePacket>
 8005f20:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f2a:	4b45      	ldr	r3, [pc, #276]	; (8006040 <SEGGER_SYSVIEW_Start+0x168>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f30:	e00b      	b.n	8005f4a <SEGGER_SYSVIEW_Start+0x72>
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	1c59      	adds	r1, r3, #1
 8005f3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	09db      	lsrs	r3, r3, #7
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4e:	d8f0      	bhi.n	8005f32 <SEGGER_SYSVIEW_Start+0x5a>
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
 8005f64:	4b36      	ldr	r3, [pc, #216]	; (8006040 <SEGGER_SYSVIEW_Start+0x168>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	623b      	str	r3, [r7, #32]
 8005f6a:	e00b      	b.n	8005f84 <SEGGER_SYSVIEW_Start+0xac>
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	1c59      	adds	r1, r3, #1
 8005f74:	6279      	str	r1, [r7, #36]	; 0x24
 8005f76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	09db      	lsrs	r3, r3, #7
 8005f82:	623b      	str	r3, [r7, #32]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b7f      	cmp	r3, #127	; 0x7f
 8005f88:	d8f0      	bhi.n	8005f6c <SEGGER_SYSVIEW_Start+0x94>
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8005f90:	6a3a      	ldr	r2, [r7, #32]
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	61fb      	str	r3, [r7, #28]
 8005f9e:	4b28      	ldr	r3, [pc, #160]	; (8006040 <SEGGER_SYSVIEW_Start+0x168>)
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	e00b      	b.n	8005fbe <SEGGER_SYSVIEW_Start+0xe6>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	1c59      	adds	r1, r3, #1
 8005fae:	61f9      	str	r1, [r7, #28]
 8005fb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	09db      	lsrs	r3, r3, #7
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc2:	d8f0      	bhi.n	8005fa6 <SEGGER_SYSVIEW_Start+0xce>
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	61fa      	str	r2, [r7, #28]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	e00b      	b.n	8005ff6 <SEGGER_SYSVIEW_Start+0x11e>
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	1c59      	adds	r1, r3, #1
 8005fe6:	6179      	str	r1, [r7, #20]
 8005fe8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	09db      	lsrs	r3, r3, #7
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffa:	d8f0      	bhi.n	8005fde <SEGGER_SYSVIEW_Start+0x106>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	617a      	str	r2, [r7, #20]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800600c:	2218      	movs	r2, #24
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff f8d1 	bl	80051b8 <_SendPacket>
      RECORD_END();
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800601c:	4b08      	ldr	r3, [pc, #32]	; (8006040 <SEGGER_SYSVIEW_Start+0x168>)
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006024:	4b06      	ldr	r3, [pc, #24]	; (8006040 <SEGGER_SYSVIEW_Start+0x168>)
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800602a:	f000 f9eb 	bl	8006404 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800602e:	f000 f9b1 	bl	8006394 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006032:	f000 fc83 	bl	800693c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006036:	bf00      	nop
 8006038:	3730      	adds	r7, #48	; 0x30
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200142b8 	.word	0x200142b8
 8006044:	0800750c 	.word	0x0800750c
 8006048:	200142e8 	.word	0x200142e8

0800604c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006052:	f3ef 8311 	mrs	r3, BASEPRI
 8006056:	f04f 0120 	mov.w	r1, #32
 800605a:	f381 8811 	msr	BASEPRI, r1
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	480b      	ldr	r0, [pc, #44]	; (8006090 <SEGGER_SYSVIEW_Stop+0x44>)
 8006062:	f7fe ffb9 	bl	8004fd8 <_PreparePacket>
 8006066:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <SEGGER_SYSVIEW_Stop+0x48>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006070:	220b      	movs	r2, #11
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6838      	ldr	r0, [r7, #0]
 8006076:	f7ff f89f 	bl	80051b8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800607a:	4b06      	ldr	r3, [pc, #24]	; (8006094 <SEGGER_SYSVIEW_Stop+0x48>)
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f383 8811 	msr	BASEPRI, r3
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	200142e8 	.word	0x200142e8
 8006094:	200142b8 	.word	0x200142b8

08006098 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b08c      	sub	sp, #48	; 0x30
 800609c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800609e:	f3ef 8311 	mrs	r3, BASEPRI
 80060a2:	f04f 0120 	mov.w	r1, #32
 80060a6:	f381 8811 	msr	BASEPRI, r1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	4845      	ldr	r0, [pc, #276]	; (80061c4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80060ae:	f7fe ff93 	bl	8004fd8 <_PreparePacket>
 80060b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060bc:	4b42      	ldr	r3, [pc, #264]	; (80061c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c2:	e00b      	b.n	80060dc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	09db      	lsrs	r3, r3, #7
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	2b7f      	cmp	r3, #127	; 0x7f
 80060e0:	d8f0      	bhi.n	80060c4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
 80060f6:	4b34      	ldr	r3, [pc, #208]	; (80061c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	623b      	str	r3, [r7, #32]
 80060fc:	e00b      	b.n	8006116 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	1c59      	adds	r1, r3, #1
 8006106:	6279      	str	r1, [r7, #36]	; 0x24
 8006108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	09db      	lsrs	r3, r3, #7
 8006114:	623b      	str	r3, [r7, #32]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2b7f      	cmp	r3, #127	; 0x7f
 800611a:	d8f0      	bhi.n	80060fe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	627a      	str	r2, [r7, #36]	; 0x24
 8006122:	6a3a      	ldr	r2, [r7, #32]
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	e00b      	b.n	8006150 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	1c59      	adds	r1, r3, #1
 8006140:	61f9      	str	r1, [r7, #28]
 8006142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	09db      	lsrs	r3, r3, #7
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b7f      	cmp	r3, #127	; 0x7f
 8006154:	d8f0      	bhi.n	8006138 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	61fa      	str	r2, [r7, #28]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	e00b      	b.n	8006188 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	1c59      	adds	r1, r3, #1
 8006178:	6179      	str	r1, [r7, #20]
 800617a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	09db      	lsrs	r3, r3, #7
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b7f      	cmp	r3, #127	; 0x7f
 800618c:	d8f0      	bhi.n	8006170 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	617a      	str	r2, [r7, #20]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800619e:	2218      	movs	r2, #24
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	68b8      	ldr	r0, [r7, #8]
 80061a4:	f7ff f808 	bl	80051b8 <_SendPacket>
  RECORD_END();
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80061ae:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80061b6:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	4798      	blx	r3
  }
}
 80061bc:	bf00      	nop
 80061be:	3730      	adds	r7, #48	; 0x30
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	200142e8 	.word	0x200142e8
 80061c8:	200142b8 	.word	0x200142b8

080061cc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b092      	sub	sp, #72	; 0x48
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80061d4:	f3ef 8311 	mrs	r3, BASEPRI
 80061d8:	f04f 0120 	mov.w	r1, #32
 80061dc:	f381 8811 	msr	BASEPRI, r1
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	486a      	ldr	r0, [pc, #424]	; (800638c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80061e4:	f7fe fef8 	bl	8004fd8 <_PreparePacket>
 80061e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	647b      	str	r3, [r7, #68]	; 0x44
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b66      	ldr	r3, [pc, #408]	; (8006390 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	643b      	str	r3, [r7, #64]	; 0x40
 80061fe:	e00b      	b.n	8006218 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006206:	1c59      	adds	r1, r3, #1
 8006208:	6479      	str	r1, [r7, #68]	; 0x44
 800620a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006214:	09db      	lsrs	r3, r3, #7
 8006216:	643b      	str	r3, [r7, #64]	; 0x40
 8006218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621a:	2b7f      	cmp	r3, #127	; 0x7f
 800621c:	d8f0      	bhi.n	8006200 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800621e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	647a      	str	r2, [r7, #68]	; 0x44
 8006224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800622c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	63bb      	str	r3, [r7, #56]	; 0x38
 8006238:	e00b      	b.n	8006252 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	b2da      	uxtb	r2, r3
 800623e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006240:	1c59      	adds	r1, r3, #1
 8006242:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006244:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	09db      	lsrs	r3, r3, #7
 8006250:	63bb      	str	r3, [r7, #56]	; 0x38
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	2b7f      	cmp	r3, #127	; 0x7f
 8006256:	d8f0      	bhi.n	800623a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800625e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	4619      	mov	r1, r3
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7fe fe61 	bl	8004f38 <_EncodeStr>
 8006276:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006278:	2209      	movs	r2, #9
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	6938      	ldr	r0, [r7, #16]
 800627e:	f7fe ff9b 	bl	80051b8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b40      	ldr	r3, [pc, #256]	; (8006390 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	633b      	str	r3, [r7, #48]	; 0x30
 8006296:	e00b      	b.n	80062b0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	b2da      	uxtb	r2, r3
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	1c59      	adds	r1, r3, #1
 80062a0:	6379      	str	r1, [r7, #52]	; 0x34
 80062a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	09db      	lsrs	r3, r3, #7
 80062ae:	633b      	str	r3, [r7, #48]	; 0x30
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2b7f      	cmp	r3, #127	; 0x7f
 80062b4:	d8f0      	bhi.n	8006298 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80062b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	637a      	str	r2, [r7, #52]	; 0x34
 80062bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d0:	e00b      	b.n	80062ea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	1c59      	adds	r1, r3, #1
 80062da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	09db      	lsrs	r3, r3, #7
 80062e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	2b7f      	cmp	r3, #127	; 0x7f
 80062ee:	d8f0      	bhi.n	80062d2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	e00b      	b.n	8006324 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	b2da      	uxtb	r2, r3
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	1c59      	adds	r1, r3, #1
 8006314:	6279      	str	r1, [r7, #36]	; 0x24
 8006316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	09db      	lsrs	r3, r3, #7
 8006322:	623b      	str	r3, [r7, #32]
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	2b7f      	cmp	r3, #127	; 0x7f
 8006328:	d8f0      	bhi.n	800630c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	627a      	str	r2, [r7, #36]	; 0x24
 8006330:	6a3a      	ldr	r2, [r7, #32]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	2300      	movs	r3, #0
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	e00b      	b.n	800635c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	1c59      	adds	r1, r3, #1
 800634c:	61f9      	str	r1, [r7, #28]
 800634e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	09db      	lsrs	r3, r3, #7
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	2b7f      	cmp	r3, #127	; 0x7f
 8006360:	d8f0      	bhi.n	8006344 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	61fa      	str	r2, [r7, #28]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006372:	2215      	movs	r2, #21
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	6938      	ldr	r0, [r7, #16]
 8006378:	f7fe ff1e 	bl	80051b8 <_SendPacket>
  RECORD_END();
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f383 8811 	msr	BASEPRI, r3
}
 8006382:	bf00      	nop
 8006384:	3748      	adds	r7, #72	; 0x48
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200142e8 	.word	0x200142e8
 8006390:	200142b8 	.word	0x200142b8

08006394 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d008      	beq.n	80063b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80063aa:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	4798      	blx	r3
  }
}
 80063b2:	bf00      	nop
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	200142b8 	.word	0x200142b8

080063bc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063c4:	f3ef 8311 	mrs	r3, BASEPRI
 80063c8:	f04f 0120 	mov.w	r1, #32
 80063cc:	f381 8811 	msr	BASEPRI, r1
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	480b      	ldr	r0, [pc, #44]	; (8006400 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80063d4:	f7fe fe00 	bl	8004fd8 <_PreparePacket>
 80063d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063da:	2280      	movs	r2, #128	; 0x80
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	6938      	ldr	r0, [r7, #16]
 80063e0:	f7fe fdaa 	bl	8004f38 <_EncodeStr>
 80063e4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80063e6:	220e      	movs	r2, #14
 80063e8:	68f9      	ldr	r1, [r7, #12]
 80063ea:	6938      	ldr	r0, [r7, #16]
 80063ec:	f7fe fee4 	bl	80051b8 <_SendPacket>
  RECORD_END();
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f383 8811 	msr	BASEPRI, r3
}
 80063f6:	bf00      	nop
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	200142e8 	.word	0x200142e8

08006404 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006404:	b590      	push	{r4, r7, lr}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800640a:	4b15      	ldr	r3, [pc, #84]	; (8006460 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01a      	beq.n	8006448 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d015      	beq.n	8006448 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800641c:	4b10      	ldr	r3, [pc, #64]	; (8006460 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4798      	blx	r3
 8006424:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006428:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800642a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	000a      	movs	r2, r1
 8006438:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800643a:	4613      	mov	r3, r2
 800643c:	461a      	mov	r2, r3
 800643e:	4621      	mov	r1, r4
 8006440:	200d      	movs	r0, #13
 8006442:	f7ff fbe7 	bl	8005c14 <SEGGER_SYSVIEW_RecordU32x2>
 8006446:	e006      	b.n	8006456 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4619      	mov	r1, r3
 800644e:	200c      	movs	r0, #12
 8006450:	f7ff fba4 	bl	8005b9c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	bd90      	pop	{r4, r7, pc}
 800645e:	bf00      	nop
 8006460:	200142b8 	.word	0x200142b8
 8006464:	e0001004 	.word	0xe0001004

08006468 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800646e:	f3ef 8311 	mrs	r3, BASEPRI
 8006472:	f04f 0120 	mov.w	r1, #32
 8006476:	f381 8811 	msr	BASEPRI, r1
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	4819      	ldr	r0, [pc, #100]	; (80064e4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800647e:	f7fe fdab 	bl	8004fd8 <_PreparePacket>
 8006482:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006488:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006490:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	e00b      	b.n	80064b4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	1c59      	adds	r1, r3, #1
 80064a4:	6179      	str	r1, [r7, #20]
 80064a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	09db      	lsrs	r3, r3, #7
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b7f      	cmp	r3, #127	; 0x7f
 80064b8:	d8f0      	bhi.n	800649c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	617a      	str	r2, [r7, #20]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80064ca:	2202      	movs	r2, #2
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	68b8      	ldr	r0, [r7, #8]
 80064d0:	f7fe fe72 	bl	80051b8 <_SendPacket>
  RECORD_END();
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f383 8811 	msr	BASEPRI, r3
}
 80064da:	bf00      	nop
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200142e8 	.word	0x200142e8
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064f2:	f3ef 8311 	mrs	r3, BASEPRI
 80064f6:	f04f 0120 	mov.w	r1, #32
 80064fa:	f381 8811 	msr	BASEPRI, r1
 80064fe:	607b      	str	r3, [r7, #4]
 8006500:	4807      	ldr	r0, [pc, #28]	; (8006520 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006502:	f7fe fd69 	bl	8004fd8 <_PreparePacket>
 8006506:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006508:	2203      	movs	r2, #3
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6838      	ldr	r0, [r7, #0]
 800650e:	f7fe fe53 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f383 8811 	msr	BASEPRI, r3
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	200142e8 	.word	0x200142e8

08006524 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800652a:	f3ef 8311 	mrs	r3, BASEPRI
 800652e:	f04f 0120 	mov.w	r1, #32
 8006532:	f381 8811 	msr	BASEPRI, r1
 8006536:	607b      	str	r3, [r7, #4]
 8006538:	4807      	ldr	r0, [pc, #28]	; (8006558 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800653a:	f7fe fd4d 	bl	8004fd8 <_PreparePacket>
 800653e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006540:	2212      	movs	r2, #18
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6838      	ldr	r0, [r7, #0]
 8006546:	f7fe fe37 	bl	80051b8 <_SendPacket>
  RECORD_END();
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f383 8811 	msr	BASEPRI, r3
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	200142e8 	.word	0x200142e8

0800655c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006562:	f3ef 8311 	mrs	r3, BASEPRI
 8006566:	f04f 0120 	mov.w	r1, #32
 800656a:	f381 8811 	msr	BASEPRI, r1
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	4807      	ldr	r0, [pc, #28]	; (8006590 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006572:	f7fe fd31 	bl	8004fd8 <_PreparePacket>
 8006576:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006578:	2211      	movs	r2, #17
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6838      	ldr	r0, [r7, #0]
 800657e:	f7fe fe1b 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f383 8811 	msr	BASEPRI, r3
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	200142e8 	.word	0x200142e8

08006594 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800659c:	f3ef 8311 	mrs	r3, BASEPRI
 80065a0:	f04f 0120 	mov.w	r1, #32
 80065a4:	f381 8811 	msr	BASEPRI, r1
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	4819      	ldr	r0, [pc, #100]	; (8006610 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80065ac:	f7fe fd14 	bl	8004fd8 <_PreparePacket>
 80065b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065b6:	4b17      	ldr	r3, [pc, #92]	; (8006614 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	61bb      	str	r3, [r7, #24]
 80065c8:	e00b      	b.n	80065e2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	1c59      	adds	r1, r3, #1
 80065d2:	61f9      	str	r1, [r7, #28]
 80065d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	09db      	lsrs	r3, r3, #7
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2b7f      	cmp	r3, #127	; 0x7f
 80065e6:	d8f0      	bhi.n	80065ca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	61fa      	str	r2, [r7, #28]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80065f8:	2208      	movs	r2, #8
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6938      	ldr	r0, [r7, #16]
 80065fe:	f7fe fddb 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f383 8811 	msr	BASEPRI, r3
}
 8006608:	bf00      	nop
 800660a:	3720      	adds	r7, #32
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	200142e8 	.word	0x200142e8
 8006614:	200142b8 	.word	0x200142b8

08006618 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006620:	f3ef 8311 	mrs	r3, BASEPRI
 8006624:	f04f 0120 	mov.w	r1, #32
 8006628:	f381 8811 	msr	BASEPRI, r1
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	4819      	ldr	r0, [pc, #100]	; (8006694 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006630:	f7fe fcd2 	bl	8004fd8 <_PreparePacket>
 8006634:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800663a:	4b17      	ldr	r3, [pc, #92]	; (8006698 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	61bb      	str	r3, [r7, #24]
 800664c:	e00b      	b.n	8006666 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	1c59      	adds	r1, r3, #1
 8006656:	61f9      	str	r1, [r7, #28]
 8006658:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	09db      	lsrs	r3, r3, #7
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b7f      	cmp	r3, #127	; 0x7f
 800666a:	d8f0      	bhi.n	800664e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	61fa      	str	r2, [r7, #28]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800667c:	2204      	movs	r2, #4
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	6938      	ldr	r0, [r7, #16]
 8006682:	f7fe fd99 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f383 8811 	msr	BASEPRI, r3
}
 800668c:	bf00      	nop
 800668e:	3720      	adds	r7, #32
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	200142e8 	.word	0x200142e8
 8006698:	200142b8 	.word	0x200142b8

0800669c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066a4:	f3ef 8311 	mrs	r3, BASEPRI
 80066a8:	f04f 0120 	mov.w	r1, #32
 80066ac:	f381 8811 	msr	BASEPRI, r1
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	4819      	ldr	r0, [pc, #100]	; (8006718 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80066b4:	f7fe fc90 	bl	8004fd8 <_PreparePacket>
 80066b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066be:	4b17      	ldr	r3, [pc, #92]	; (800671c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e00b      	b.n	80066ea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	1c59      	adds	r1, r3, #1
 80066da:	61f9      	str	r1, [r7, #28]
 80066dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	09db      	lsrs	r3, r3, #7
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b7f      	cmp	r3, #127	; 0x7f
 80066ee:	d8f0      	bhi.n	80066d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	61fa      	str	r2, [r7, #28]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006700:	2206      	movs	r2, #6
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	6938      	ldr	r0, [r7, #16]
 8006706:	f7fe fd57 	bl	80051b8 <_SendPacket>
  RECORD_END();
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f383 8811 	msr	BASEPRI, r3
}
 8006710:	bf00      	nop
 8006712:	3720      	adds	r7, #32
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	200142e8 	.word	0x200142e8
 800671c:	200142b8 	.word	0x200142b8

08006720 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	; 0x28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800672a:	f3ef 8311 	mrs	r3, BASEPRI
 800672e:	f04f 0120 	mov.w	r1, #32
 8006732:	f381 8811 	msr	BASEPRI, r1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	4827      	ldr	r0, [pc, #156]	; (80067d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800673a:	f7fe fc4d 	bl	8004fd8 <_PreparePacket>
 800673e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006744:	4b25      	ldr	r3, [pc, #148]	; (80067dc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	623b      	str	r3, [r7, #32]
 8006756:	e00b      	b.n	8006770 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	6279      	str	r1, [r7, #36]	; 0x24
 8006762:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	09db      	lsrs	r3, r3, #7
 800676e:	623b      	str	r3, [r7, #32]
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	2b7f      	cmp	r3, #127	; 0x7f
 8006774:	d8f0      	bhi.n	8006758 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	627a      	str	r2, [r7, #36]	; 0x24
 800677c:	6a3a      	ldr	r2, [r7, #32]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	e00b      	b.n	80067a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	b2da      	uxtb	r2, r3
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	61f9      	str	r1, [r7, #28]
 800679a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	09db      	lsrs	r3, r3, #7
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b7f      	cmp	r3, #127	; 0x7f
 80067ac:	d8f0      	bhi.n	8006790 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	61fa      	str	r2, [r7, #28]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80067be:	2207      	movs	r2, #7
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	6938      	ldr	r0, [r7, #16]
 80067c4:	f7fe fcf8 	bl	80051b8 <_SendPacket>
  RECORD_END();
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f383 8811 	msr	BASEPRI, r3
}
 80067ce:	bf00      	nop
 80067d0:	3728      	adds	r7, #40	; 0x28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200142e8 	.word	0x200142e8
 80067dc:	200142b8 	.word	0x200142b8

080067e0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80067e8:	4b04      	ldr	r3, [pc, #16]	; (80067fc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	1ad3      	subs	r3, r2, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	200142b8 	.word	0x200142b8

08006800 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b08c      	sub	sp, #48	; 0x30
 8006804:	af00      	add	r7, sp, #0
 8006806:	4603      	mov	r3, r0
 8006808:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800680a:	4b3b      	ldr	r3, [pc, #236]	; (80068f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d06d      	beq.n	80068ee <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006812:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006818:	2300      	movs	r3, #0
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
 800681c:	e008      	b.n	8006830 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	3301      	adds	r3, #1
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006834:	429a      	cmp	r2, r3
 8006836:	d3f2      	bcc.n	800681e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006838:	e000      	b.n	800683c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800683a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d055      	beq.n	80068ee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006842:	f3ef 8311 	mrs	r3, BASEPRI
 8006846:	f04f 0120 	mov.w	r1, #32
 800684a:	f381 8811 	msr	BASEPRI, r1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	482a      	ldr	r0, [pc, #168]	; (80068fc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006852:	f7fe fbc1 	bl	8004fd8 <_PreparePacket>
 8006856:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	623b      	str	r3, [r7, #32]
 8006864:	e00b      	b.n	800687e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1c59      	adds	r1, r3, #1
 800686e:	6279      	str	r1, [r7, #36]	; 0x24
 8006870:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	09db      	lsrs	r3, r3, #7
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	2b7f      	cmp	r3, #127	; 0x7f
 8006882:	d8f0      	bhi.n	8006866 <SEGGER_SYSVIEW_SendModule+0x66>
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	627a      	str	r2, [r7, #36]	; 0x24
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e00b      	b.n	80068b8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	61f9      	str	r1, [r7, #28]
 80068aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	09db      	lsrs	r3, r3, #7
 80068b6:	61bb      	str	r3, [r7, #24]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2b7f      	cmp	r3, #127	; 0x7f
 80068bc:	d8f0      	bhi.n	80068a0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	61fa      	str	r2, [r7, #28]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2280      	movs	r2, #128	; 0x80
 80068d4:	4619      	mov	r1, r3
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7fe fb2e 	bl	8004f38 <_EncodeStr>
 80068dc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80068de:	2216      	movs	r2, #22
 80068e0:	68f9      	ldr	r1, [r7, #12]
 80068e2:	6938      	ldr	r0, [r7, #16]
 80068e4:	f7fe fc68 	bl	80051b8 <_SendPacket>
      RECORD_END();
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80068ee:	bf00      	nop
 80068f0:	3730      	adds	r7, #48	; 0x30
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	200142e0 	.word	0x200142e0
 80068fc:	200142e8 	.word	0x200142e8

08006900 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006906:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00f      	beq.n	800692e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800690e:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1f2      	bne.n	8006914 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	200142e0 	.word	0x200142e0

0800693c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006942:	f3ef 8311 	mrs	r3, BASEPRI
 8006946:	f04f 0120 	mov.w	r1, #32
 800694a:	f381 8811 	msr	BASEPRI, r1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	4817      	ldr	r0, [pc, #92]	; (80069b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006952:	f7fe fb41 	bl	8004fd8 <_PreparePacket>
 8006956:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	e00b      	b.n	8006980 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	b2da      	uxtb	r2, r3
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1c59      	adds	r1, r3, #1
 8006970:	6179      	str	r1, [r7, #20]
 8006972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	09db      	lsrs	r3, r3, #7
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b7f      	cmp	r3, #127	; 0x7f
 8006984:	d8f0      	bhi.n	8006968 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	617a      	str	r2, [r7, #20]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006996:	221b      	movs	r2, #27
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	68b8      	ldr	r0, [r7, #8]
 800699c:	f7fe fc0c 	bl	80051b8 <_SendPacket>
  RECORD_END();
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f383 8811 	msr	BASEPRI, r3
}
 80069a6:	bf00      	nop
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	200142e8 	.word	0x200142e8
 80069b4:	200142e4 	.word	0x200142e4

080069b8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80069b8:	b40f      	push	{r0, r1, r2, r3}
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80069c0:	f107 0314 	add.w	r3, r7, #20
 80069c4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80069c6:	1d3b      	adds	r3, r7, #4
 80069c8:	461a      	mov	r2, r3
 80069ca:	2100      	movs	r1, #0
 80069cc:	6938      	ldr	r0, [r7, #16]
 80069ce:	f7fe fe7b 	bl	80056c8 <_VPrintTarget>
  va_end(ParamList);
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069dc:	b004      	add	sp, #16
 80069de:	4770      	bx	lr

080069e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08a      	sub	sp, #40	; 0x28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069e8:	f3ef 8311 	mrs	r3, BASEPRI
 80069ec:	f04f 0120 	mov.w	r1, #32
 80069f0:	f381 8811 	msr	BASEPRI, r1
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	4827      	ldr	r0, [pc, #156]	; (8006a94 <SEGGER_SYSVIEW_Warn+0xb4>)
 80069f8:	f7fe faee 	bl	8004fd8 <_PreparePacket>
 80069fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069fe:	2280      	movs	r2, #128	; 0x80
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	6938      	ldr	r0, [r7, #16]
 8006a04:	f7fe fa98 	bl	8004f38 <_EncodeStr>
 8006a08:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	2301      	movs	r3, #1
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	e00b      	b.n	8006a2c <SEGGER_SYSVIEW_Warn+0x4c>
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	1c59      	adds	r1, r3, #1
 8006a1c:	6279      	str	r1, [r7, #36]	; 0x24
 8006a1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	09db      	lsrs	r3, r3, #7
 8006a2a:	623b      	str	r3, [r7, #32]
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a30:	d8f0      	bhi.n	8006a14 <SEGGER_SYSVIEW_Warn+0x34>
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	627a      	str	r2, [r7, #36]	; 0x24
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	2300      	movs	r3, #0
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	e00b      	b.n	8006a64 <SEGGER_SYSVIEW_Warn+0x84>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	1c59      	adds	r1, r3, #1
 8006a54:	61f9      	str	r1, [r7, #28]
 8006a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	09db      	lsrs	r3, r3, #7
 8006a62:	61bb      	str	r3, [r7, #24]
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2b7f      	cmp	r3, #127	; 0x7f
 8006a68:	d8f0      	bhi.n	8006a4c <SEGGER_SYSVIEW_Warn+0x6c>
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	61fa      	str	r2, [r7, #28]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a7a:	221a      	movs	r2, #26
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	6938      	ldr	r0, [r7, #16]
 8006a80:	f7fe fb9a 	bl	80051b8 <_SendPacket>
  RECORD_END();
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f383 8811 	msr	BASEPRI, r3
}
 8006a8a:	bf00      	nop
 8006a8c:	3728      	adds	r7, #40	; 0x28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	200142e8 	.word	0x200142e8

08006a98 <__libc_init_array>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	4d0d      	ldr	r5, [pc, #52]	; (8006ad0 <__libc_init_array+0x38>)
 8006a9c:	4c0d      	ldr	r4, [pc, #52]	; (8006ad4 <__libc_init_array+0x3c>)
 8006a9e:	1b64      	subs	r4, r4, r5
 8006aa0:	10a4      	asrs	r4, r4, #2
 8006aa2:	2600      	movs	r6, #0
 8006aa4:	42a6      	cmp	r6, r4
 8006aa6:	d109      	bne.n	8006abc <__libc_init_array+0x24>
 8006aa8:	4d0b      	ldr	r5, [pc, #44]	; (8006ad8 <__libc_init_array+0x40>)
 8006aaa:	4c0c      	ldr	r4, [pc, #48]	; (8006adc <__libc_init_array+0x44>)
 8006aac:	f000 fc7e 	bl	80073ac <_init>
 8006ab0:	1b64      	subs	r4, r4, r5
 8006ab2:	10a4      	asrs	r4, r4, #2
 8006ab4:	2600      	movs	r6, #0
 8006ab6:	42a6      	cmp	r6, r4
 8006ab8:	d105      	bne.n	8006ac6 <__libc_init_array+0x2e>
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac0:	4798      	blx	r3
 8006ac2:	3601      	adds	r6, #1
 8006ac4:	e7ee      	b.n	8006aa4 <__libc_init_array+0xc>
 8006ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aca:	4798      	blx	r3
 8006acc:	3601      	adds	r6, #1
 8006ace:	e7f2      	b.n	8006ab6 <__libc_init_array+0x1e>
 8006ad0:	08007564 	.word	0x08007564
 8006ad4:	08007564 	.word	0x08007564
 8006ad8:	08007564 	.word	0x08007564
 8006adc:	08007568 	.word	0x08007568

08006ae0 <memcmp>:
 8006ae0:	b530      	push	{r4, r5, lr}
 8006ae2:	3901      	subs	r1, #1
 8006ae4:	2400      	movs	r4, #0
 8006ae6:	42a2      	cmp	r2, r4
 8006ae8:	d101      	bne.n	8006aee <memcmp+0xe>
 8006aea:	2000      	movs	r0, #0
 8006aec:	e005      	b.n	8006afa <memcmp+0x1a>
 8006aee:	5d03      	ldrb	r3, [r0, r4]
 8006af0:	3401      	adds	r4, #1
 8006af2:	5d0d      	ldrb	r5, [r1, r4]
 8006af4:	42ab      	cmp	r3, r5
 8006af6:	d0f6      	beq.n	8006ae6 <memcmp+0x6>
 8006af8:	1b58      	subs	r0, r3, r5
 8006afa:	bd30      	pop	{r4, r5, pc}

08006afc <memcpy>:
 8006afc:	440a      	add	r2, r1
 8006afe:	4291      	cmp	r1, r2
 8006b00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006b04:	d100      	bne.n	8006b08 <memcpy+0xc>
 8006b06:	4770      	bx	lr
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b12:	4291      	cmp	r1, r2
 8006b14:	d1f9      	bne.n	8006b0a <memcpy+0xe>
 8006b16:	bd10      	pop	{r4, pc}

08006b18 <memset>:
 8006b18:	4402      	add	r2, r0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d100      	bne.n	8006b22 <memset+0xa>
 8006b20:	4770      	bx	lr
 8006b22:	f803 1b01 	strb.w	r1, [r3], #1
 8006b26:	e7f9      	b.n	8006b1c <memset+0x4>

08006b28 <sniprintf>:
 8006b28:	b40c      	push	{r2, r3}
 8006b2a:	b530      	push	{r4, r5, lr}
 8006b2c:	4b17      	ldr	r3, [pc, #92]	; (8006b8c <sniprintf+0x64>)
 8006b2e:	1e0c      	subs	r4, r1, #0
 8006b30:	681d      	ldr	r5, [r3, #0]
 8006b32:	b09d      	sub	sp, #116	; 0x74
 8006b34:	da08      	bge.n	8006b48 <sniprintf+0x20>
 8006b36:	238b      	movs	r3, #139	; 0x8b
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b3e:	b01d      	add	sp, #116	; 0x74
 8006b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b44:	b002      	add	sp, #8
 8006b46:	4770      	bx	lr
 8006b48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006b4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b50:	bf14      	ite	ne
 8006b52:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006b56:	4623      	moveq	r3, r4
 8006b58:	9304      	str	r3, [sp, #16]
 8006b5a:	9307      	str	r3, [sp, #28]
 8006b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b60:	9002      	str	r0, [sp, #8]
 8006b62:	9006      	str	r0, [sp, #24]
 8006b64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b6a:	ab21      	add	r3, sp, #132	; 0x84
 8006b6c:	a902      	add	r1, sp, #8
 8006b6e:	4628      	mov	r0, r5
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	f000 f869 	bl	8006c48 <_svfiprintf_r>
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	bfbc      	itt	lt
 8006b7a:	238b      	movlt	r3, #139	; 0x8b
 8006b7c:	602b      	strlt	r3, [r5, #0]
 8006b7e:	2c00      	cmp	r4, #0
 8006b80:	d0dd      	beq.n	8006b3e <sniprintf+0x16>
 8006b82:	9b02      	ldr	r3, [sp, #8]
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e7d9      	b.n	8006b3e <sniprintf+0x16>
 8006b8a:	bf00      	nop
 8006b8c:	20000014 	.word	0x20000014

08006b90 <__ssputs_r>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	688e      	ldr	r6, [r1, #8]
 8006b96:	429e      	cmp	r6, r3
 8006b98:	4682      	mov	sl, r0
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	4690      	mov	r8, r2
 8006b9e:	461f      	mov	r7, r3
 8006ba0:	d838      	bhi.n	8006c14 <__ssputs_r+0x84>
 8006ba2:	898a      	ldrh	r2, [r1, #12]
 8006ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ba8:	d032      	beq.n	8006c10 <__ssputs_r+0x80>
 8006baa:	6825      	ldr	r5, [r4, #0]
 8006bac:	6909      	ldr	r1, [r1, #16]
 8006bae:	eba5 0901 	sub.w	r9, r5, r1
 8006bb2:	6965      	ldr	r5, [r4, #20]
 8006bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	444b      	add	r3, r9
 8006bc0:	106d      	asrs	r5, r5, #1
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	bf38      	it	cc
 8006bc6:	461d      	movcc	r5, r3
 8006bc8:	0553      	lsls	r3, r2, #21
 8006bca:	d531      	bpl.n	8006c30 <__ssputs_r+0xa0>
 8006bcc:	4629      	mov	r1, r5
 8006bce:	f000 fb39 	bl	8007244 <_malloc_r>
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	b950      	cbnz	r0, 8006bec <__ssputs_r+0x5c>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	f8ca 3000 	str.w	r3, [sl]
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bec:	6921      	ldr	r1, [r4, #16]
 8006bee:	464a      	mov	r2, r9
 8006bf0:	f7ff ff84 	bl	8006afc <memcpy>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	6126      	str	r6, [r4, #16]
 8006c02:	6165      	str	r5, [r4, #20]
 8006c04:	444e      	add	r6, r9
 8006c06:	eba5 0509 	sub.w	r5, r5, r9
 8006c0a:	6026      	str	r6, [r4, #0]
 8006c0c:	60a5      	str	r5, [r4, #8]
 8006c0e:	463e      	mov	r6, r7
 8006c10:	42be      	cmp	r6, r7
 8006c12:	d900      	bls.n	8006c16 <__ssputs_r+0x86>
 8006c14:	463e      	mov	r6, r7
 8006c16:	4632      	mov	r2, r6
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	f000 faa8 	bl	8007170 <memmove>
 8006c20:	68a3      	ldr	r3, [r4, #8]
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	1b9b      	subs	r3, r3, r6
 8006c26:	4432      	add	r2, r6
 8006c28:	60a3      	str	r3, [r4, #8]
 8006c2a:	6022      	str	r2, [r4, #0]
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e7db      	b.n	8006be8 <__ssputs_r+0x58>
 8006c30:	462a      	mov	r2, r5
 8006c32:	f000 fb61 	bl	80072f8 <_realloc_r>
 8006c36:	4606      	mov	r6, r0
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d1e1      	bne.n	8006c00 <__ssputs_r+0x70>
 8006c3c:	6921      	ldr	r1, [r4, #16]
 8006c3e:	4650      	mov	r0, sl
 8006c40:	f000 fab0 	bl	80071a4 <_free_r>
 8006c44:	e7c7      	b.n	8006bd6 <__ssputs_r+0x46>
	...

08006c48 <_svfiprintf_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	4698      	mov	r8, r3
 8006c4e:	898b      	ldrh	r3, [r1, #12]
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	b09d      	sub	sp, #116	; 0x74
 8006c54:	4607      	mov	r7, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	4614      	mov	r4, r2
 8006c5a:	d50e      	bpl.n	8006c7a <_svfiprintf_r+0x32>
 8006c5c:	690b      	ldr	r3, [r1, #16]
 8006c5e:	b963      	cbnz	r3, 8006c7a <_svfiprintf_r+0x32>
 8006c60:	2140      	movs	r1, #64	; 0x40
 8006c62:	f000 faef 	bl	8007244 <_malloc_r>
 8006c66:	6028      	str	r0, [r5, #0]
 8006c68:	6128      	str	r0, [r5, #16]
 8006c6a:	b920      	cbnz	r0, 8006c76 <_svfiprintf_r+0x2e>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c74:	e0d1      	b.n	8006e1a <_svfiprintf_r+0x1d2>
 8006c76:	2340      	movs	r3, #64	; 0x40
 8006c78:	616b      	str	r3, [r5, #20]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7e:	2320      	movs	r3, #32
 8006c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c88:	2330      	movs	r3, #48	; 0x30
 8006c8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e34 <_svfiprintf_r+0x1ec>
 8006c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c92:	f04f 0901 	mov.w	r9, #1
 8006c96:	4623      	mov	r3, r4
 8006c98:	469a      	mov	sl, r3
 8006c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c9e:	b10a      	cbz	r2, 8006ca4 <_svfiprintf_r+0x5c>
 8006ca0:	2a25      	cmp	r2, #37	; 0x25
 8006ca2:	d1f9      	bne.n	8006c98 <_svfiprintf_r+0x50>
 8006ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ca8:	d00b      	beq.n	8006cc2 <_svfiprintf_r+0x7a>
 8006caa:	465b      	mov	r3, fp
 8006cac:	4622      	mov	r2, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff ff6d 	bl	8006b90 <__ssputs_r>
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	f000 80aa 	beq.w	8006e10 <_svfiprintf_r+0x1c8>
 8006cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cbe:	445a      	add	r2, fp
 8006cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8006cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 80a2 	beq.w	8006e10 <_svfiprintf_r+0x1c8>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cd6:	f10a 0a01 	add.w	sl, sl, #1
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	9307      	str	r3, [sp, #28]
 8006cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce4:	4654      	mov	r4, sl
 8006ce6:	2205      	movs	r2, #5
 8006ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cec:	4851      	ldr	r0, [pc, #324]	; (8006e34 <_svfiprintf_r+0x1ec>)
 8006cee:	f7f9 fabf 	bl	8000270 <memchr>
 8006cf2:	9a04      	ldr	r2, [sp, #16]
 8006cf4:	b9d8      	cbnz	r0, 8006d2e <_svfiprintf_r+0xe6>
 8006cf6:	06d0      	lsls	r0, r2, #27
 8006cf8:	bf44      	itt	mi
 8006cfa:	2320      	movmi	r3, #32
 8006cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d00:	0711      	lsls	r1, r2, #28
 8006d02:	bf44      	itt	mi
 8006d04:	232b      	movmi	r3, #43	; 0x2b
 8006d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d10:	d015      	beq.n	8006d3e <_svfiprintf_r+0xf6>
 8006d12:	9a07      	ldr	r2, [sp, #28]
 8006d14:	4654      	mov	r4, sl
 8006d16:	2000      	movs	r0, #0
 8006d18:	f04f 0c0a 	mov.w	ip, #10
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d22:	3b30      	subs	r3, #48	; 0x30
 8006d24:	2b09      	cmp	r3, #9
 8006d26:	d94e      	bls.n	8006dc6 <_svfiprintf_r+0x17e>
 8006d28:	b1b0      	cbz	r0, 8006d58 <_svfiprintf_r+0x110>
 8006d2a:	9207      	str	r2, [sp, #28]
 8006d2c:	e014      	b.n	8006d58 <_svfiprintf_r+0x110>
 8006d2e:	eba0 0308 	sub.w	r3, r0, r8
 8006d32:	fa09 f303 	lsl.w	r3, r9, r3
 8006d36:	4313      	orrs	r3, r2
 8006d38:	9304      	str	r3, [sp, #16]
 8006d3a:	46a2      	mov	sl, r4
 8006d3c:	e7d2      	b.n	8006ce4 <_svfiprintf_r+0x9c>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	1d19      	adds	r1, r3, #4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	9103      	str	r1, [sp, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bfbb      	ittet	lt
 8006d4a:	425b      	neglt	r3, r3
 8006d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d50:	9307      	strge	r3, [sp, #28]
 8006d52:	9307      	strlt	r3, [sp, #28]
 8006d54:	bfb8      	it	lt
 8006d56:	9204      	strlt	r2, [sp, #16]
 8006d58:	7823      	ldrb	r3, [r4, #0]
 8006d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d5c:	d10c      	bne.n	8006d78 <_svfiprintf_r+0x130>
 8006d5e:	7863      	ldrb	r3, [r4, #1]
 8006d60:	2b2a      	cmp	r3, #42	; 0x2a
 8006d62:	d135      	bne.n	8006dd0 <_svfiprintf_r+0x188>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	1d1a      	adds	r2, r3, #4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	9203      	str	r2, [sp, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bfb8      	it	lt
 8006d70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d74:	3402      	adds	r4, #2
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e44 <_svfiprintf_r+0x1fc>
 8006d7c:	7821      	ldrb	r1, [r4, #0]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	4650      	mov	r0, sl
 8006d82:	f7f9 fa75 	bl	8000270 <memchr>
 8006d86:	b140      	cbz	r0, 8006d9a <_svfiprintf_r+0x152>
 8006d88:	2340      	movs	r3, #64	; 0x40
 8006d8a:	eba0 000a 	sub.w	r0, r0, sl
 8006d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	4303      	orrs	r3, r0
 8006d96:	3401      	adds	r4, #1
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9e:	4826      	ldr	r0, [pc, #152]	; (8006e38 <_svfiprintf_r+0x1f0>)
 8006da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006da4:	2206      	movs	r2, #6
 8006da6:	f7f9 fa63 	bl	8000270 <memchr>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d038      	beq.n	8006e20 <_svfiprintf_r+0x1d8>
 8006dae:	4b23      	ldr	r3, [pc, #140]	; (8006e3c <_svfiprintf_r+0x1f4>)
 8006db0:	bb1b      	cbnz	r3, 8006dfa <_svfiprintf_r+0x1b2>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	3307      	adds	r3, #7
 8006db6:	f023 0307 	bic.w	r3, r3, #7
 8006dba:	3308      	adds	r3, #8
 8006dbc:	9303      	str	r3, [sp, #12]
 8006dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc0:	4433      	add	r3, r6
 8006dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc4:	e767      	b.n	8006c96 <_svfiprintf_r+0x4e>
 8006dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dca:	460c      	mov	r4, r1
 8006dcc:	2001      	movs	r0, #1
 8006dce:	e7a5      	b.n	8006d1c <_svfiprintf_r+0xd4>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	3401      	adds	r4, #1
 8006dd4:	9305      	str	r3, [sp, #20]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f04f 0c0a 	mov.w	ip, #10
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de2:	3a30      	subs	r2, #48	; 0x30
 8006de4:	2a09      	cmp	r2, #9
 8006de6:	d903      	bls.n	8006df0 <_svfiprintf_r+0x1a8>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0c5      	beq.n	8006d78 <_svfiprintf_r+0x130>
 8006dec:	9105      	str	r1, [sp, #20]
 8006dee:	e7c3      	b.n	8006d78 <_svfiprintf_r+0x130>
 8006df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df4:	4604      	mov	r4, r0
 8006df6:	2301      	movs	r3, #1
 8006df8:	e7f0      	b.n	8006ddc <_svfiprintf_r+0x194>
 8006dfa:	ab03      	add	r3, sp, #12
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	462a      	mov	r2, r5
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <_svfiprintf_r+0x1f8>)
 8006e02:	a904      	add	r1, sp, #16
 8006e04:	4638      	mov	r0, r7
 8006e06:	f3af 8000 	nop.w
 8006e0a:	1c42      	adds	r2, r0, #1
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	d1d6      	bne.n	8006dbe <_svfiprintf_r+0x176>
 8006e10:	89ab      	ldrh	r3, [r5, #12]
 8006e12:	065b      	lsls	r3, r3, #25
 8006e14:	f53f af2c 	bmi.w	8006c70 <_svfiprintf_r+0x28>
 8006e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1a:	b01d      	add	sp, #116	; 0x74
 8006e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e20:	ab03      	add	r3, sp, #12
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	462a      	mov	r2, r5
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <_svfiprintf_r+0x1f8>)
 8006e28:	a904      	add	r1, sp, #16
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f000 f87a 	bl	8006f24 <_printf_i>
 8006e30:	e7eb      	b.n	8006e0a <_svfiprintf_r+0x1c2>
 8006e32:	bf00      	nop
 8006e34:	08007528 	.word	0x08007528
 8006e38:	08007532 	.word	0x08007532
 8006e3c:	00000000 	.word	0x00000000
 8006e40:	08006b91 	.word	0x08006b91
 8006e44:	0800752e 	.word	0x0800752e

08006e48 <_printf_common>:
 8006e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	4699      	mov	r9, r3
 8006e50:	688a      	ldr	r2, [r1, #8]
 8006e52:	690b      	ldr	r3, [r1, #16]
 8006e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bfb8      	it	lt
 8006e5c:	4613      	movlt	r3, r2
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e64:	4607      	mov	r7, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	b10a      	cbz	r2, 8006e6e <_printf_common+0x26>
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	6033      	str	r3, [r6, #0]
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	0699      	lsls	r1, r3, #26
 8006e72:	bf42      	ittt	mi
 8006e74:	6833      	ldrmi	r3, [r6, #0]
 8006e76:	3302      	addmi	r3, #2
 8006e78:	6033      	strmi	r3, [r6, #0]
 8006e7a:	6825      	ldr	r5, [r4, #0]
 8006e7c:	f015 0506 	ands.w	r5, r5, #6
 8006e80:	d106      	bne.n	8006e90 <_printf_common+0x48>
 8006e82:	f104 0a19 	add.w	sl, r4, #25
 8006e86:	68e3      	ldr	r3, [r4, #12]
 8006e88:	6832      	ldr	r2, [r6, #0]
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	dc26      	bgt.n	8006ede <_printf_common+0x96>
 8006e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e94:	1e13      	subs	r3, r2, #0
 8006e96:	6822      	ldr	r2, [r4, #0]
 8006e98:	bf18      	it	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	0692      	lsls	r2, r2, #26
 8006e9e:	d42b      	bmi.n	8006ef8 <_printf_common+0xb0>
 8006ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	47c0      	blx	r8
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d01e      	beq.n	8006eec <_printf_common+0xa4>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	68e5      	ldr	r5, [r4, #12]
 8006eb2:	6832      	ldr	r2, [r6, #0]
 8006eb4:	f003 0306 	and.w	r3, r3, #6
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	bf08      	it	eq
 8006ebc:	1aad      	subeq	r5, r5, r2
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	6922      	ldr	r2, [r4, #16]
 8006ec2:	bf0c      	ite	eq
 8006ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec8:	2500      	movne	r5, #0
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bfc4      	itt	gt
 8006ece:	1a9b      	subgt	r3, r3, r2
 8006ed0:	18ed      	addgt	r5, r5, r3
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	341a      	adds	r4, #26
 8006ed6:	42b5      	cmp	r5, r6
 8006ed8:	d11a      	bne.n	8006f10 <_printf_common+0xc8>
 8006eda:	2000      	movs	r0, #0
 8006edc:	e008      	b.n	8006ef0 <_printf_common+0xa8>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	47c0      	blx	r8
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d103      	bne.n	8006ef4 <_printf_common+0xac>
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	e7c6      	b.n	8006e86 <_printf_common+0x3e>
 8006ef8:	18e1      	adds	r1, r4, r3
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	2030      	movs	r0, #48	; 0x30
 8006efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f02:	4422      	add	r2, r4
 8006f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	e7c7      	b.n	8006ea0 <_printf_common+0x58>
 8006f10:	2301      	movs	r3, #1
 8006f12:	4622      	mov	r2, r4
 8006f14:	4649      	mov	r1, r9
 8006f16:	4638      	mov	r0, r7
 8006f18:	47c0      	blx	r8
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d0e6      	beq.n	8006eec <_printf_common+0xa4>
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7d9      	b.n	8006ed6 <_printf_common+0x8e>
	...

08006f24 <_printf_i>:
 8006f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	460c      	mov	r4, r1
 8006f2a:	4691      	mov	r9, r2
 8006f2c:	7e27      	ldrb	r7, [r4, #24]
 8006f2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f30:	2f78      	cmp	r7, #120	; 0x78
 8006f32:	4680      	mov	r8, r0
 8006f34:	469a      	mov	sl, r3
 8006f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f3a:	d807      	bhi.n	8006f4c <_printf_i+0x28>
 8006f3c:	2f62      	cmp	r7, #98	; 0x62
 8006f3e:	d80a      	bhi.n	8006f56 <_printf_i+0x32>
 8006f40:	2f00      	cmp	r7, #0
 8006f42:	f000 80d8 	beq.w	80070f6 <_printf_i+0x1d2>
 8006f46:	2f58      	cmp	r7, #88	; 0x58
 8006f48:	f000 80a3 	beq.w	8007092 <_printf_i+0x16e>
 8006f4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f54:	e03a      	b.n	8006fcc <_printf_i+0xa8>
 8006f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f5a:	2b15      	cmp	r3, #21
 8006f5c:	d8f6      	bhi.n	8006f4c <_printf_i+0x28>
 8006f5e:	a001      	add	r0, pc, #4	; (adr r0, 8006f64 <_printf_i+0x40>)
 8006f60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f64:	08006fbd 	.word	0x08006fbd
 8006f68:	08006fd1 	.word	0x08006fd1
 8006f6c:	08006f4d 	.word	0x08006f4d
 8006f70:	08006f4d 	.word	0x08006f4d
 8006f74:	08006f4d 	.word	0x08006f4d
 8006f78:	08006f4d 	.word	0x08006f4d
 8006f7c:	08006fd1 	.word	0x08006fd1
 8006f80:	08006f4d 	.word	0x08006f4d
 8006f84:	08006f4d 	.word	0x08006f4d
 8006f88:	08006f4d 	.word	0x08006f4d
 8006f8c:	08006f4d 	.word	0x08006f4d
 8006f90:	080070dd 	.word	0x080070dd
 8006f94:	08007001 	.word	0x08007001
 8006f98:	080070bf 	.word	0x080070bf
 8006f9c:	08006f4d 	.word	0x08006f4d
 8006fa0:	08006f4d 	.word	0x08006f4d
 8006fa4:	080070ff 	.word	0x080070ff
 8006fa8:	08006f4d 	.word	0x08006f4d
 8006fac:	08007001 	.word	0x08007001
 8006fb0:	08006f4d 	.word	0x08006f4d
 8006fb4:	08006f4d 	.word	0x08006f4d
 8006fb8:	080070c7 	.word	0x080070c7
 8006fbc:	680b      	ldr	r3, [r1, #0]
 8006fbe:	1d1a      	adds	r2, r3, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	600a      	str	r2, [r1, #0]
 8006fc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0a3      	b.n	8007118 <_printf_i+0x1f4>
 8006fd0:	6825      	ldr	r5, [r4, #0]
 8006fd2:	6808      	ldr	r0, [r1, #0]
 8006fd4:	062e      	lsls	r6, r5, #24
 8006fd6:	f100 0304 	add.w	r3, r0, #4
 8006fda:	d50a      	bpl.n	8006ff2 <_printf_i+0xce>
 8006fdc:	6805      	ldr	r5, [r0, #0]
 8006fde:	600b      	str	r3, [r1, #0]
 8006fe0:	2d00      	cmp	r5, #0
 8006fe2:	da03      	bge.n	8006fec <_printf_i+0xc8>
 8006fe4:	232d      	movs	r3, #45	; 0x2d
 8006fe6:	426d      	negs	r5, r5
 8006fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fec:	485e      	ldr	r0, [pc, #376]	; (8007168 <_printf_i+0x244>)
 8006fee:	230a      	movs	r3, #10
 8006ff0:	e019      	b.n	8007026 <_printf_i+0x102>
 8006ff2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ff6:	6805      	ldr	r5, [r0, #0]
 8006ff8:	600b      	str	r3, [r1, #0]
 8006ffa:	bf18      	it	ne
 8006ffc:	b22d      	sxthne	r5, r5
 8006ffe:	e7ef      	b.n	8006fe0 <_printf_i+0xbc>
 8007000:	680b      	ldr	r3, [r1, #0]
 8007002:	6825      	ldr	r5, [r4, #0]
 8007004:	1d18      	adds	r0, r3, #4
 8007006:	6008      	str	r0, [r1, #0]
 8007008:	0628      	lsls	r0, r5, #24
 800700a:	d501      	bpl.n	8007010 <_printf_i+0xec>
 800700c:	681d      	ldr	r5, [r3, #0]
 800700e:	e002      	b.n	8007016 <_printf_i+0xf2>
 8007010:	0669      	lsls	r1, r5, #25
 8007012:	d5fb      	bpl.n	800700c <_printf_i+0xe8>
 8007014:	881d      	ldrh	r5, [r3, #0]
 8007016:	4854      	ldr	r0, [pc, #336]	; (8007168 <_printf_i+0x244>)
 8007018:	2f6f      	cmp	r7, #111	; 0x6f
 800701a:	bf0c      	ite	eq
 800701c:	2308      	moveq	r3, #8
 800701e:	230a      	movne	r3, #10
 8007020:	2100      	movs	r1, #0
 8007022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007026:	6866      	ldr	r6, [r4, #4]
 8007028:	60a6      	str	r6, [r4, #8]
 800702a:	2e00      	cmp	r6, #0
 800702c:	bfa2      	ittt	ge
 800702e:	6821      	ldrge	r1, [r4, #0]
 8007030:	f021 0104 	bicge.w	r1, r1, #4
 8007034:	6021      	strge	r1, [r4, #0]
 8007036:	b90d      	cbnz	r5, 800703c <_printf_i+0x118>
 8007038:	2e00      	cmp	r6, #0
 800703a:	d04d      	beq.n	80070d8 <_printf_i+0x1b4>
 800703c:	4616      	mov	r6, r2
 800703e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007042:	fb03 5711 	mls	r7, r3, r1, r5
 8007046:	5dc7      	ldrb	r7, [r0, r7]
 8007048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800704c:	462f      	mov	r7, r5
 800704e:	42bb      	cmp	r3, r7
 8007050:	460d      	mov	r5, r1
 8007052:	d9f4      	bls.n	800703e <_printf_i+0x11a>
 8007054:	2b08      	cmp	r3, #8
 8007056:	d10b      	bne.n	8007070 <_printf_i+0x14c>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07df      	lsls	r7, r3, #31
 800705c:	d508      	bpl.n	8007070 <_printf_i+0x14c>
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	6861      	ldr	r1, [r4, #4]
 8007062:	4299      	cmp	r1, r3
 8007064:	bfde      	ittt	le
 8007066:	2330      	movle	r3, #48	; 0x30
 8007068:	f806 3c01 	strble.w	r3, [r6, #-1]
 800706c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007070:	1b92      	subs	r2, r2, r6
 8007072:	6122      	str	r2, [r4, #16]
 8007074:	f8cd a000 	str.w	sl, [sp]
 8007078:	464b      	mov	r3, r9
 800707a:	aa03      	add	r2, sp, #12
 800707c:	4621      	mov	r1, r4
 800707e:	4640      	mov	r0, r8
 8007080:	f7ff fee2 	bl	8006e48 <_printf_common>
 8007084:	3001      	adds	r0, #1
 8007086:	d14c      	bne.n	8007122 <_printf_i+0x1fe>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800708c:	b004      	add	sp, #16
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	4835      	ldr	r0, [pc, #212]	; (8007168 <_printf_i+0x244>)
 8007094:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	680e      	ldr	r6, [r1, #0]
 800709c:	061f      	lsls	r7, r3, #24
 800709e:	f856 5b04 	ldr.w	r5, [r6], #4
 80070a2:	600e      	str	r6, [r1, #0]
 80070a4:	d514      	bpl.n	80070d0 <_printf_i+0x1ac>
 80070a6:	07d9      	lsls	r1, r3, #31
 80070a8:	bf44      	itt	mi
 80070aa:	f043 0320 	orrmi.w	r3, r3, #32
 80070ae:	6023      	strmi	r3, [r4, #0]
 80070b0:	b91d      	cbnz	r5, 80070ba <_printf_i+0x196>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	f023 0320 	bic.w	r3, r3, #32
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	2310      	movs	r3, #16
 80070bc:	e7b0      	b.n	8007020 <_printf_i+0xfc>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f043 0320 	orr.w	r3, r3, #32
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	2378      	movs	r3, #120	; 0x78
 80070c8:	4828      	ldr	r0, [pc, #160]	; (800716c <_printf_i+0x248>)
 80070ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070ce:	e7e3      	b.n	8007098 <_printf_i+0x174>
 80070d0:	065e      	lsls	r6, r3, #25
 80070d2:	bf48      	it	mi
 80070d4:	b2ad      	uxthmi	r5, r5
 80070d6:	e7e6      	b.n	80070a6 <_printf_i+0x182>
 80070d8:	4616      	mov	r6, r2
 80070da:	e7bb      	b.n	8007054 <_printf_i+0x130>
 80070dc:	680b      	ldr	r3, [r1, #0]
 80070de:	6826      	ldr	r6, [r4, #0]
 80070e0:	6960      	ldr	r0, [r4, #20]
 80070e2:	1d1d      	adds	r5, r3, #4
 80070e4:	600d      	str	r5, [r1, #0]
 80070e6:	0635      	lsls	r5, r6, #24
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	d501      	bpl.n	80070f0 <_printf_i+0x1cc>
 80070ec:	6018      	str	r0, [r3, #0]
 80070ee:	e002      	b.n	80070f6 <_printf_i+0x1d2>
 80070f0:	0671      	lsls	r1, r6, #25
 80070f2:	d5fb      	bpl.n	80070ec <_printf_i+0x1c8>
 80070f4:	8018      	strh	r0, [r3, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	4616      	mov	r6, r2
 80070fc:	e7ba      	b.n	8007074 <_printf_i+0x150>
 80070fe:	680b      	ldr	r3, [r1, #0]
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	600a      	str	r2, [r1, #0]
 8007104:	681e      	ldr	r6, [r3, #0]
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	2100      	movs	r1, #0
 800710a:	4630      	mov	r0, r6
 800710c:	f7f9 f8b0 	bl	8000270 <memchr>
 8007110:	b108      	cbz	r0, 8007116 <_printf_i+0x1f2>
 8007112:	1b80      	subs	r0, r0, r6
 8007114:	6060      	str	r0, [r4, #4]
 8007116:	6863      	ldr	r3, [r4, #4]
 8007118:	6123      	str	r3, [r4, #16]
 800711a:	2300      	movs	r3, #0
 800711c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007120:	e7a8      	b.n	8007074 <_printf_i+0x150>
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	4632      	mov	r2, r6
 8007126:	4649      	mov	r1, r9
 8007128:	4640      	mov	r0, r8
 800712a:	47d0      	blx	sl
 800712c:	3001      	adds	r0, #1
 800712e:	d0ab      	beq.n	8007088 <_printf_i+0x164>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	079b      	lsls	r3, r3, #30
 8007134:	d413      	bmi.n	800715e <_printf_i+0x23a>
 8007136:	68e0      	ldr	r0, [r4, #12]
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	4298      	cmp	r0, r3
 800713c:	bfb8      	it	lt
 800713e:	4618      	movlt	r0, r3
 8007140:	e7a4      	b.n	800708c <_printf_i+0x168>
 8007142:	2301      	movs	r3, #1
 8007144:	4632      	mov	r2, r6
 8007146:	4649      	mov	r1, r9
 8007148:	4640      	mov	r0, r8
 800714a:	47d0      	blx	sl
 800714c:	3001      	adds	r0, #1
 800714e:	d09b      	beq.n	8007088 <_printf_i+0x164>
 8007150:	3501      	adds	r5, #1
 8007152:	68e3      	ldr	r3, [r4, #12]
 8007154:	9903      	ldr	r1, [sp, #12]
 8007156:	1a5b      	subs	r3, r3, r1
 8007158:	42ab      	cmp	r3, r5
 800715a:	dcf2      	bgt.n	8007142 <_printf_i+0x21e>
 800715c:	e7eb      	b.n	8007136 <_printf_i+0x212>
 800715e:	2500      	movs	r5, #0
 8007160:	f104 0619 	add.w	r6, r4, #25
 8007164:	e7f5      	b.n	8007152 <_printf_i+0x22e>
 8007166:	bf00      	nop
 8007168:	08007539 	.word	0x08007539
 800716c:	0800754a 	.word	0x0800754a

08007170 <memmove>:
 8007170:	4288      	cmp	r0, r1
 8007172:	b510      	push	{r4, lr}
 8007174:	eb01 0402 	add.w	r4, r1, r2
 8007178:	d902      	bls.n	8007180 <memmove+0x10>
 800717a:	4284      	cmp	r4, r0
 800717c:	4623      	mov	r3, r4
 800717e:	d807      	bhi.n	8007190 <memmove+0x20>
 8007180:	1e43      	subs	r3, r0, #1
 8007182:	42a1      	cmp	r1, r4
 8007184:	d008      	beq.n	8007198 <memmove+0x28>
 8007186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800718a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800718e:	e7f8      	b.n	8007182 <memmove+0x12>
 8007190:	4402      	add	r2, r0
 8007192:	4601      	mov	r1, r0
 8007194:	428a      	cmp	r2, r1
 8007196:	d100      	bne.n	800719a <memmove+0x2a>
 8007198:	bd10      	pop	{r4, pc}
 800719a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800719e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071a2:	e7f7      	b.n	8007194 <memmove+0x24>

080071a4 <_free_r>:
 80071a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071a6:	2900      	cmp	r1, #0
 80071a8:	d048      	beq.n	800723c <_free_r+0x98>
 80071aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ae:	9001      	str	r0, [sp, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f1a1 0404 	sub.w	r4, r1, #4
 80071b6:	bfb8      	it	lt
 80071b8:	18e4      	addlt	r4, r4, r3
 80071ba:	f000 f8d3 	bl	8007364 <__malloc_lock>
 80071be:	4a20      	ldr	r2, [pc, #128]	; (8007240 <_free_r+0x9c>)
 80071c0:	9801      	ldr	r0, [sp, #4]
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	4615      	mov	r5, r2
 80071c6:	b933      	cbnz	r3, 80071d6 <_free_r+0x32>
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	6014      	str	r4, [r2, #0]
 80071cc:	b003      	add	sp, #12
 80071ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071d2:	f000 b8cd 	b.w	8007370 <__malloc_unlock>
 80071d6:	42a3      	cmp	r3, r4
 80071d8:	d90b      	bls.n	80071f2 <_free_r+0x4e>
 80071da:	6821      	ldr	r1, [r4, #0]
 80071dc:	1862      	adds	r2, r4, r1
 80071de:	4293      	cmp	r3, r2
 80071e0:	bf04      	itt	eq
 80071e2:	681a      	ldreq	r2, [r3, #0]
 80071e4:	685b      	ldreq	r3, [r3, #4]
 80071e6:	6063      	str	r3, [r4, #4]
 80071e8:	bf04      	itt	eq
 80071ea:	1852      	addeq	r2, r2, r1
 80071ec:	6022      	streq	r2, [r4, #0]
 80071ee:	602c      	str	r4, [r5, #0]
 80071f0:	e7ec      	b.n	80071cc <_free_r+0x28>
 80071f2:	461a      	mov	r2, r3
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	b10b      	cbz	r3, 80071fc <_free_r+0x58>
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d9fa      	bls.n	80071f2 <_free_r+0x4e>
 80071fc:	6811      	ldr	r1, [r2, #0]
 80071fe:	1855      	adds	r5, r2, r1
 8007200:	42a5      	cmp	r5, r4
 8007202:	d10b      	bne.n	800721c <_free_r+0x78>
 8007204:	6824      	ldr	r4, [r4, #0]
 8007206:	4421      	add	r1, r4
 8007208:	1854      	adds	r4, r2, r1
 800720a:	42a3      	cmp	r3, r4
 800720c:	6011      	str	r1, [r2, #0]
 800720e:	d1dd      	bne.n	80071cc <_free_r+0x28>
 8007210:	681c      	ldr	r4, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	6053      	str	r3, [r2, #4]
 8007216:	4421      	add	r1, r4
 8007218:	6011      	str	r1, [r2, #0]
 800721a:	e7d7      	b.n	80071cc <_free_r+0x28>
 800721c:	d902      	bls.n	8007224 <_free_r+0x80>
 800721e:	230c      	movs	r3, #12
 8007220:	6003      	str	r3, [r0, #0]
 8007222:	e7d3      	b.n	80071cc <_free_r+0x28>
 8007224:	6825      	ldr	r5, [r4, #0]
 8007226:	1961      	adds	r1, r4, r5
 8007228:	428b      	cmp	r3, r1
 800722a:	bf04      	itt	eq
 800722c:	6819      	ldreq	r1, [r3, #0]
 800722e:	685b      	ldreq	r3, [r3, #4]
 8007230:	6063      	str	r3, [r4, #4]
 8007232:	bf04      	itt	eq
 8007234:	1949      	addeq	r1, r1, r5
 8007236:	6021      	streq	r1, [r4, #0]
 8007238:	6054      	str	r4, [r2, #4]
 800723a:	e7c7      	b.n	80071cc <_free_r+0x28>
 800723c:	b003      	add	sp, #12
 800723e:	bd30      	pop	{r4, r5, pc}
 8007240:	200143cc 	.word	0x200143cc

08007244 <_malloc_r>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	1ccd      	adds	r5, r1, #3
 8007248:	f025 0503 	bic.w	r5, r5, #3
 800724c:	3508      	adds	r5, #8
 800724e:	2d0c      	cmp	r5, #12
 8007250:	bf38      	it	cc
 8007252:	250c      	movcc	r5, #12
 8007254:	2d00      	cmp	r5, #0
 8007256:	4606      	mov	r6, r0
 8007258:	db01      	blt.n	800725e <_malloc_r+0x1a>
 800725a:	42a9      	cmp	r1, r5
 800725c:	d903      	bls.n	8007266 <_malloc_r+0x22>
 800725e:	230c      	movs	r3, #12
 8007260:	6033      	str	r3, [r6, #0]
 8007262:	2000      	movs	r0, #0
 8007264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007266:	f000 f87d 	bl	8007364 <__malloc_lock>
 800726a:	4921      	ldr	r1, [pc, #132]	; (80072f0 <_malloc_r+0xac>)
 800726c:	680a      	ldr	r2, [r1, #0]
 800726e:	4614      	mov	r4, r2
 8007270:	b99c      	cbnz	r4, 800729a <_malloc_r+0x56>
 8007272:	4f20      	ldr	r7, [pc, #128]	; (80072f4 <_malloc_r+0xb0>)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	b923      	cbnz	r3, 8007282 <_malloc_r+0x3e>
 8007278:	4621      	mov	r1, r4
 800727a:	4630      	mov	r0, r6
 800727c:	f000 f862 	bl	8007344 <_sbrk_r>
 8007280:	6038      	str	r0, [r7, #0]
 8007282:	4629      	mov	r1, r5
 8007284:	4630      	mov	r0, r6
 8007286:	f000 f85d 	bl	8007344 <_sbrk_r>
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	d123      	bne.n	80072d6 <_malloc_r+0x92>
 800728e:	230c      	movs	r3, #12
 8007290:	6033      	str	r3, [r6, #0]
 8007292:	4630      	mov	r0, r6
 8007294:	f000 f86c 	bl	8007370 <__malloc_unlock>
 8007298:	e7e3      	b.n	8007262 <_malloc_r+0x1e>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	1b5b      	subs	r3, r3, r5
 800729e:	d417      	bmi.n	80072d0 <_malloc_r+0x8c>
 80072a0:	2b0b      	cmp	r3, #11
 80072a2:	d903      	bls.n	80072ac <_malloc_r+0x68>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	441c      	add	r4, r3
 80072a8:	6025      	str	r5, [r4, #0]
 80072aa:	e004      	b.n	80072b6 <_malloc_r+0x72>
 80072ac:	6863      	ldr	r3, [r4, #4]
 80072ae:	42a2      	cmp	r2, r4
 80072b0:	bf0c      	ite	eq
 80072b2:	600b      	streq	r3, [r1, #0]
 80072b4:	6053      	strne	r3, [r2, #4]
 80072b6:	4630      	mov	r0, r6
 80072b8:	f000 f85a 	bl	8007370 <__malloc_unlock>
 80072bc:	f104 000b 	add.w	r0, r4, #11
 80072c0:	1d23      	adds	r3, r4, #4
 80072c2:	f020 0007 	bic.w	r0, r0, #7
 80072c6:	1ac2      	subs	r2, r0, r3
 80072c8:	d0cc      	beq.n	8007264 <_malloc_r+0x20>
 80072ca:	1a1b      	subs	r3, r3, r0
 80072cc:	50a3      	str	r3, [r4, r2]
 80072ce:	e7c9      	b.n	8007264 <_malloc_r+0x20>
 80072d0:	4622      	mov	r2, r4
 80072d2:	6864      	ldr	r4, [r4, #4]
 80072d4:	e7cc      	b.n	8007270 <_malloc_r+0x2c>
 80072d6:	1cc4      	adds	r4, r0, #3
 80072d8:	f024 0403 	bic.w	r4, r4, #3
 80072dc:	42a0      	cmp	r0, r4
 80072de:	d0e3      	beq.n	80072a8 <_malloc_r+0x64>
 80072e0:	1a21      	subs	r1, r4, r0
 80072e2:	4630      	mov	r0, r6
 80072e4:	f000 f82e 	bl	8007344 <_sbrk_r>
 80072e8:	3001      	adds	r0, #1
 80072ea:	d1dd      	bne.n	80072a8 <_malloc_r+0x64>
 80072ec:	e7cf      	b.n	800728e <_malloc_r+0x4a>
 80072ee:	bf00      	nop
 80072f0:	200143cc 	.word	0x200143cc
 80072f4:	200143d0 	.word	0x200143d0

080072f8 <_realloc_r>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	4607      	mov	r7, r0
 80072fc:	4614      	mov	r4, r2
 80072fe:	460e      	mov	r6, r1
 8007300:	b921      	cbnz	r1, 800730c <_realloc_r+0x14>
 8007302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007306:	4611      	mov	r1, r2
 8007308:	f7ff bf9c 	b.w	8007244 <_malloc_r>
 800730c:	b922      	cbnz	r2, 8007318 <_realloc_r+0x20>
 800730e:	f7ff ff49 	bl	80071a4 <_free_r>
 8007312:	4625      	mov	r5, r4
 8007314:	4628      	mov	r0, r5
 8007316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007318:	f000 f830 	bl	800737c <_malloc_usable_size_r>
 800731c:	42a0      	cmp	r0, r4
 800731e:	d20f      	bcs.n	8007340 <_realloc_r+0x48>
 8007320:	4621      	mov	r1, r4
 8007322:	4638      	mov	r0, r7
 8007324:	f7ff ff8e 	bl	8007244 <_malloc_r>
 8007328:	4605      	mov	r5, r0
 800732a:	2800      	cmp	r0, #0
 800732c:	d0f2      	beq.n	8007314 <_realloc_r+0x1c>
 800732e:	4631      	mov	r1, r6
 8007330:	4622      	mov	r2, r4
 8007332:	f7ff fbe3 	bl	8006afc <memcpy>
 8007336:	4631      	mov	r1, r6
 8007338:	4638      	mov	r0, r7
 800733a:	f7ff ff33 	bl	80071a4 <_free_r>
 800733e:	e7e9      	b.n	8007314 <_realloc_r+0x1c>
 8007340:	4635      	mov	r5, r6
 8007342:	e7e7      	b.n	8007314 <_realloc_r+0x1c>

08007344 <_sbrk_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4d06      	ldr	r5, [pc, #24]	; (8007360 <_sbrk_r+0x1c>)
 8007348:	2300      	movs	r3, #0
 800734a:	4604      	mov	r4, r0
 800734c:	4608      	mov	r0, r1
 800734e:	602b      	str	r3, [r5, #0]
 8007350:	f000 f81e 	bl	8007390 <_sbrk>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	d102      	bne.n	800735e <_sbrk_r+0x1a>
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	b103      	cbz	r3, 800735e <_sbrk_r+0x1a>
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	bd38      	pop	{r3, r4, r5, pc}
 8007360:	2001450c 	.word	0x2001450c

08007364 <__malloc_lock>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__malloc_lock+0x8>)
 8007366:	f000 b811 	b.w	800738c <__retarget_lock_acquire_recursive>
 800736a:	bf00      	nop
 800736c:	20014514 	.word	0x20014514

08007370 <__malloc_unlock>:
 8007370:	4801      	ldr	r0, [pc, #4]	; (8007378 <__malloc_unlock+0x8>)
 8007372:	f000 b80c 	b.w	800738e <__retarget_lock_release_recursive>
 8007376:	bf00      	nop
 8007378:	20014514 	.word	0x20014514

0800737c <_malloc_usable_size_r>:
 800737c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007380:	1f18      	subs	r0, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	bfbc      	itt	lt
 8007386:	580b      	ldrlt	r3, [r1, r0]
 8007388:	18c0      	addlt	r0, r0, r3
 800738a:	4770      	bx	lr

0800738c <__retarget_lock_acquire_recursive>:
 800738c:	4770      	bx	lr

0800738e <__retarget_lock_release_recursive>:
 800738e:	4770      	bx	lr

08007390 <_sbrk>:
 8007390:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <_sbrk+0x14>)
 8007392:	6819      	ldr	r1, [r3, #0]
 8007394:	4602      	mov	r2, r0
 8007396:	b909      	cbnz	r1, 800739c <_sbrk+0xc>
 8007398:	4903      	ldr	r1, [pc, #12]	; (80073a8 <_sbrk+0x18>)
 800739a:	6019      	str	r1, [r3, #0]
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	4402      	add	r2, r0
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	4770      	bx	lr
 80073a4:	200143d4 	.word	0x200143d4
 80073a8:	20014520 	.word	0x20014520

080073ac <_init>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr

080073b8 <_fini>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr
