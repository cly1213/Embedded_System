
01_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800573c  0800573c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005744  08005744  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800574c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e2c  20000078  080057c4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ea4  080057c4  00022ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b62  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6d  00000000  00000000  00032c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00035678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  000365a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e59  00000000  00000000  000373a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b54  00000000  00000000  0005a1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2509  00000000  00000000  0006ad4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  0013d2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005614 	.word	0x08005614

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005614 	.word	0x08005614

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fbc9 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f845 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8ad 	bl	80006d4 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <main+0x80>)
 8000586:	22c8      	movs	r2, #200	; 0xc8
 8000588:	4918      	ldr	r1, [pc, #96]	; (80005ec <main+0x84>)
 800058a:	4819      	ldr	r0, [pc, #100]	; (80005f0 <main+0x88>)
 800058c:	f002 fb38 	bl	8002c00 <xTaskCreate>
 8000590:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00a      	beq.n	80005ae <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005aa:	bf00      	nop
 80005ac:	e7fe      	b.n	80005ac <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2302      	movs	r3, #2
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0x8c>)
 80005b8:	22c8      	movs	r2, #200	; 0xc8
 80005ba:	490f      	ldr	r1, [pc, #60]	; (80005f8 <main+0x90>)
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <main+0x94>)
 80005be:	f002 fb1f 	bl	8002c00 <xTaskCreate>
 80005c2:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d00a      	beq.n	80005e0 <main+0x78>
        __asm volatile
 80005ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ce:	f383 8811 	msr	BASEPRI, r3
 80005d2:	f3bf 8f6f 	isb	sy
 80005d6:	f3bf 8f4f 	dsb	sy
 80005da:	60fb      	str	r3, [r7, #12]
    }
 80005dc:	bf00      	nop
 80005de:	e7fe      	b.n	80005de <main+0x76>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005e0:	f002 fc46 	bl	8002e70 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x7c>
 80005e6:	bf00      	nop
 80005e8:	0800562c 	.word	0x0800562c
 80005ec:	08005644 	.word	0x08005644
 80005f0:	08000995 	.word	0x08000995
 80005f4:	0800564c 	.word	0x0800564c
 80005f8:	08005664 	.word	0x08005664
 80005fc:	080009c1 	.word	0x080009c1

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 f894 	bl	800473c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	; (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000674:	2332      	movs	r3, #50	; 0x32
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000678:	2304      	movs	r3, #4
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fe17 	bl	80012b8 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 f9be 	bl	8000a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f878 	bl	80017a8 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006be:	f000 f9a7 	bl	8000a10 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	4ba1      	ldr	r3, [pc, #644]	; (8000974 <MX_GPIO_Init+0x2a0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4aa0      	ldr	r2, [pc, #640]	; (8000974 <MX_GPIO_Init+0x2a0>)
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b9e      	ldr	r3, [pc, #632]	; (8000974 <MX_GPIO_Init+0x2a0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0310 	and.w	r3, r3, #16
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	4b9a      	ldr	r3, [pc, #616]	; (8000974 <MX_GPIO_Init+0x2a0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a99      	ldr	r2, [pc, #612]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b97      	ldr	r3, [pc, #604]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b93      	ldr	r3, [pc, #588]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a92      	ldr	r2, [pc, #584]	; (8000974 <MX_GPIO_Init+0x2a0>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b90      	ldr	r3, [pc, #576]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b8c      	ldr	r3, [pc, #560]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a8b      	ldr	r2, [pc, #556]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b89      	ldr	r3, [pc, #548]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b85      	ldr	r3, [pc, #532]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a84      	ldr	r2, [pc, #528]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b82      	ldr	r3, [pc, #520]	; (8000974 <MX_GPIO_Init+0x2a0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b7e      	ldr	r3, [pc, #504]	; (8000974 <MX_GPIO_Init+0x2a0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a7d      	ldr	r2, [pc, #500]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b7b      	ldr	r3, [pc, #492]	; (8000974 <MX_GPIO_Init+0x2a0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2108      	movs	r1, #8
 8000796:	4878      	ldr	r0, [pc, #480]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000798:	f000 fd74 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2101      	movs	r1, #1
 80007a0:	4876      	ldr	r0, [pc, #472]	; (800097c <MX_GPIO_Init+0x2a8>)
 80007a2:	f000 fd6f 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007a6:	2200      	movs	r2, #0
 80007a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007ac:	4874      	ldr	r0, [pc, #464]	; (8000980 <MX_GPIO_Init+0x2ac>)
 80007ae:	f000 fd69 	bl	8001284 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007b2:	2308      	movs	r3, #8
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	486b      	ldr	r0, [pc, #428]	; (8000978 <MX_GPIO_Init+0x2a4>)
 80007ca:	f000 fbbf 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4865      	ldr	r0, [pc, #404]	; (800097c <MX_GPIO_Init+0x2a8>)
 80007e6:	f000 fbb1 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ea:	2308      	movs	r3, #8
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fa:	2305      	movs	r3, #5
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	485d      	ldr	r0, [pc, #372]	; (800097c <MX_GPIO_Init+0x2a8>)
 8000806:	f000 fba1 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080a:	2301      	movs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	4b5d      	ldr	r3, [pc, #372]	; (8000984 <MX_GPIO_Init+0x2b0>)
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	485a      	ldr	r0, [pc, #360]	; (8000988 <MX_GPIO_Init+0x2b4>)
 800081e:	f000 fb95 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000822:	2310      	movs	r3, #16
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000832:	2306      	movs	r3, #6
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4852      	ldr	r0, [pc, #328]	; (8000988 <MX_GPIO_Init+0x2b4>)
 800083e:	f000 fb85 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000842:	23e0      	movs	r3, #224	; 0xe0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	484a      	ldr	r0, [pc, #296]	; (8000988 <MX_GPIO_Init+0x2b4>)
 800085e:	f000 fb75 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000862:	2304      	movs	r3, #4
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4845      	ldr	r0, [pc, #276]	; (800098c <MX_GPIO_Init+0x2b8>)
 8000876:	f000 fb69 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088c:	2305      	movs	r3, #5
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	483d      	ldr	r0, [pc, #244]	; (800098c <MX_GPIO_Init+0x2b8>)
 8000898:	f000 fb58 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089c:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4832      	ldr	r0, [pc, #200]	; (8000980 <MX_GPIO_Init+0x2ac>)
 80008b6:	f000 fb49 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008ba:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008cc:	2306      	movs	r3, #6
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4829      	ldr	r0, [pc, #164]	; (800097c <MX_GPIO_Init+0x2a8>)
 80008d8:	f000 fb38 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4825      	ldr	r0, [pc, #148]	; (8000988 <MX_GPIO_Init+0x2b4>)
 80008f2:	f000 fb2b 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000908:	230a      	movs	r3, #10
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	481d      	ldr	r0, [pc, #116]	; (8000988 <MX_GPIO_Init+0x2b4>)
 8000914:	f000 fb1a 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000918:	2320      	movs	r3, #32
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4815      	ldr	r0, [pc, #84]	; (8000980 <MX_GPIO_Init+0x2ac>)
 800092c:	f000 fb0e 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000930:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000936:	2312      	movs	r3, #18
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000942:	2304      	movs	r3, #4
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	480f      	ldr	r0, [pc, #60]	; (800098c <MX_GPIO_Init+0x2b8>)
 800094e:	f000 fafd 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000952:	2302      	movs	r3, #2
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_GPIO_Init+0x2bc>)
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_GPIO_Init+0x2a4>)
 8000966:	f000 faf1 	bl	8000f4c <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40021000 	.word	0x40021000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020c00 	.word	0x40020c00
 8000984:	10110000 	.word	0x10110000
 8000988:	40020000 	.word	0x40020000
 800098c:	40020400 	.word	0x40020400
 8000990:	10120000 	.word	0x10120000

08000994 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

	//char msg[100];

	while(1)
	{
		printf("%s\r\n", (char*) parameters); //through SWO
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <task1_handler+0x24>)
 80009a0:	f003 fed4 	bl	800474c <iprintf>

		//snprintf(msg,100,"%s\n", (char*)parameters);
		//SEGGER_SYSVIEW_PrintfTarget(msg);

		taskYIELD(); //leave processor
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <task1_handler+0x28>)
 80009a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	f3bf 8f4f 	dsb	sy
 80009b0:	f3bf 8f6f 	isb	sy
		printf("%s\r\n", (char*) parameters); //through SWO
 80009b4:	e7f2      	b.n	800099c <task1_handler+0x8>
 80009b6:	bf00      	nop
 80009b8:	0800566c 	.word	0x0800566c
 80009bc:	e000ed04 	.word	0xe000ed04

080009c0 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	//char msg[100];

	while(1)
	{
		printf("%s\r\n", (char*) parameters);
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <task2_handler+0x24>)
 80009cc:	f003 febe 	bl	800474c <iprintf>

		//snprintf(msg,100,"%s\n", (char*)parameters);
		//SEGGER_SYSVIEW_PrintfTarget(msg);

		taskYIELD();
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <task2_handler+0x28>)
 80009d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	f3bf 8f4f 	dsb	sy
 80009dc:	f3bf 8f6f 	isb	sy
		printf("%s\r\n", (char*) parameters);
 80009e0:	e7f2      	b.n	80009c8 <task2_handler+0x8>
 80009e2:	bf00      	nop
 80009e4:	0800566c 	.word	0x0800566c
 80009e8:	e000ed04 	.word	0xe000ed04

080009ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d101      	bne.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fe:	f000 f9a3 	bl	8000d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40001000 	.word	0x40001000

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2036      	movs	r0, #54	; 0x36
 8000a82:	f000 fa39 	bl	8000ef8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a86:	2036      	movs	r0, #54	; 0x36
 8000a88:	f000 fa52 	bl	8000f30 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <HAL_InitTick+0xa4>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <HAL_InitTick+0xa4>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_InitTick+0xa4>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa8:	f107 0210 	add.w	r2, r7, #16
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 f860 	bl	8001b78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ab8:	f001 f84a 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8000abc:	4603      	mov	r3, r0
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <HAL_InitTick+0xa8>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	0c9b      	lsrs	r3, r3, #18
 8000acc:	3b01      	subs	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_InitTick+0xac>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <HAL_InitTick+0xb0>)
 8000ad4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_InitTick+0xac>)
 8000ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000adc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_InitTick+0xac>)
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_InitTick+0xac>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_InitTick+0xac>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <HAL_InitTick+0xac>)
 8000af2:	f001 f873 	bl	8001bdc <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d104      	bne.n	8000b06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <HAL_InitTick+0xac>)
 8000afe:	f001 f8c7 	bl	8001c90 <HAL_TIM_Base_Start_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3730      	adds	r7, #48	; 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	431bde83 	.word	0x431bde83
 8000b18:	20012e08 	.word	0x20012e08
 8000b1c:	40001000 	.word	0x40001000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <TIM6_DAC_IRQHandler+0x10>)
 8000b52:	f001 f90d 	bl	8001d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20012e08 	.word	0x20012e08

08000b60 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <ITM_SendChar+0x48>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <ITM_SendChar+0x48>)
 8000b70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b74:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <ITM_SendChar+0x4c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <ITM_SendChar+0x4c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b82:	bf00      	nop
 8000b84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0f8      	beq.n	8000b84 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000edfc 	.word	0xe000edfc
 8000bac:	e0000e00 	.word	0xe0000e00

08000bb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
	}

return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e009      	b.n	8000c10 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	60ba      	str	r2, [r7, #8]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ffab 	bl	8000b60 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf1      	blt.n	8000bfc <_write+0x12>
	}
	return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_close>:

int _close(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
	return -1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_isatty>:

int _isatty(int file)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
	return 1;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f003 fcfb 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fc41 	bl	8000568 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cf4:	0800574c 	.word	0x0800574c
  ldr r2, =_sbss
 8000cf8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cfc:	20012ea4 	.word	0x20012ea4

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f8d8 	bl	8000ee2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fe9a 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fe70 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20012e50 	.word	0x20012e50

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20012e50 	.word	0x20012e50

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ff4c 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0a:	f7ff ff61 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	6978      	ldr	r0, [r7, #20]
 8000f16:	f7ff ffb1 	bl	8000e7c <NVIC_EncodePriority>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff80 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff54 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e16b      	b.n	8001240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 815a 	bne.w	800123a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d005      	beq.n	8000f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d130      	bne.n	8001000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 0201 	and.w	r2, r3, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b03      	cmp	r3, #3
 800100a:	d017      	beq.n	800103c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	69b9      	ldr	r1, [r7, #24]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0203 	and.w	r2, r3, #3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80b4 	beq.w	800123a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b60      	ldr	r3, [pc, #384]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a5f      	ldr	r2, [pc, #380]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ee:	4a5b      	ldr	r2, [pc, #364]	; (800125c <HAL_GPIO_Init+0x310>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a52      	ldr	r2, [pc, #328]	; (8001260 <HAL_GPIO_Init+0x314>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d02b      	beq.n	8001172 <HAL_GPIO_Init+0x226>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a51      	ldr	r2, [pc, #324]	; (8001264 <HAL_GPIO_Init+0x318>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x222>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a50      	ldr	r2, [pc, #320]	; (8001268 <HAL_GPIO_Init+0x31c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x21e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4f      	ldr	r2, [pc, #316]	; (800126c <HAL_GPIO_Init+0x320>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x21a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <HAL_GPIO_Init+0x324>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x216>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4d      	ldr	r2, [pc, #308]	; (8001274 <HAL_GPIO_Init+0x328>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x212>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_GPIO_Init+0x32c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x20e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4b      	ldr	r2, [pc, #300]	; (800127c <HAL_GPIO_Init+0x330>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x20a>
 8001152:	2307      	movs	r3, #7
 8001154:	e00e      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001156:	2308      	movs	r3, #8
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115a:	2306      	movs	r3, #6
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115e:	2305      	movs	r3, #5
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	; (800125c <HAL_GPIO_Init+0x310>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b6:	4a32      	ldr	r2, [pc, #200]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120a:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_GPIO_Init+0x334>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f ae90 	bls.w	8000f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40021400 	.word	0x40021400
 8001278:	40021800 	.word	0x40021800
 800127c:	40021c00 	.word	0x40021c00
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e264      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d075      	beq.n	80013c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	4ba3      	ldr	r3, [pc, #652]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d00c      	beq.n	80012fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4ba0      	ldr	r3, [pc, #640]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b9d      	ldr	r3, [pc, #628]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fa:	d10b      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4b99      	ldr	r3, [pc, #612]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d157      	bne.n	80013c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e23f      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x74>
 800131e:	4b91      	ldr	r3, [pc, #580]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a90      	ldr	r2, [pc, #576]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001336:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a8a      	ldr	r2, [pc, #552]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b88      	ldr	r3, [pc, #544]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a87      	ldr	r2, [pc, #540]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 8001350:	4b84      	ldr	r3, [pc, #528]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a83      	ldr	r2, [pc, #524]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a80      	ldr	r2, [pc, #512]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fcfe 	bl	8000d70 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fcfa 	bl	8000d70 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e204      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xc0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fcea 	bl	8000d70 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fce6 	bl	8000d70 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1f0      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0xe8>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	4b65      	ldr	r3, [pc, #404]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b62      	ldr	r3, [pc, #392]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1c4      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4952      	ldr	r1, [pc, #328]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fc9f 	bl	8000d70 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fc9b 	bl	8000d70 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1a5      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4940      	ldr	r1, [pc, #256]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc7e 	bl	8000d70 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fc7a 	bl	8000d70 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e184      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d030      	beq.n	8001504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fc5e 	bl	8000d70 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc5a 	bl	8000d70 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e164      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x200>
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fc47 	bl	8000d70 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc43 	bl	8000d70 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e14d      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a0 	beq.w	8001652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d121      	bne.n	8001592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fc09 	bl	8000d70 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e011      	b.n	8001586 <HAL_RCC_OscConfig+0x2ce>
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	42470000 	.word	0x42470000
 800156c:	42470e80 	.word	0x42470e80
 8001570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff fbfc 	bl	8000d70 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e106      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b85      	ldr	r3, [pc, #532]	; (800179c <HAL_RCC_OscConfig+0x4e4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d106      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a80      	ldr	r2, [pc, #512]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x312>
 80015b0:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a7a      	ldr	r2, [pc, #488]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a77      	ldr	r2, [pc, #476]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015ca:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a74      	ldr	r2, [pc, #464]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a71      	ldr	r2, [pc, #452]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff fbc1 	bl	8000d70 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fbbd 	bl	8000d70 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0c5      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x33a>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fbab 	bl	8000d70 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fba7 	bl	8000d70 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0af      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a55      	ldr	r2, [pc, #340]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 809b 	beq.w	8001792 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165c:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d05c      	beq.n	8001722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d141      	bne.n	80016f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <HAL_RCC_OscConfig+0x4ec>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fb7b 	bl	8000d70 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fb77 	bl	8000d70 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e081      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69da      	ldr	r2, [r3, #28]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	019b      	lsls	r3, r3, #6
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	061b      	lsls	r3, r3, #24
 80016c0:	4937      	ldr	r1, [pc, #220]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c6:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <HAL_RCC_OscConfig+0x4ec>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb50 	bl	8000d70 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fb4c 	bl	8000d70 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e056      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x41c>
 80016f2:	e04e      	b.n	8001792 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_RCC_OscConfig+0x4ec>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb39 	bl	8000d70 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fb35 	bl	8000d70 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e03f      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x44a>
 8001720:	e037      	b.n	8001792 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e032      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_RCC_OscConfig+0x4e8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d028      	beq.n	800178e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d121      	bne.n	800178e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d11a      	bne.n	800178e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001764:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001766:	4293      	cmp	r3, r2
 8001768:	d111      	bne.n	800178e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	3b01      	subs	r3, #1
 8001778:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d107      	bne.n	800178e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40007000 	.word	0x40007000
 80017a0:	40023800 	.word	0x40023800
 80017a4:	42470060 	.word	0x42470060

080017a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0cc      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b68      	ldr	r3, [pc, #416]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d90c      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b65      	ldr	r3, [pc, #404]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b63      	ldr	r3, [pc, #396]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b8      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fc:	4b59      	ldr	r3, [pc, #356]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a58      	ldr	r2, [pc, #352]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a52      	ldr	r2, [pc, #328]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800181e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	494d      	ldr	r1, [pc, #308]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d044      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d119      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e07f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d003      	beq.n	8001866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e067      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b37      	ldr	r3, [pc, #220]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4934      	ldr	r1, [pc, #208]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001898:	f7ff fa6a 	bl	8000d70 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff fa66 	bl	8000d70 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e04f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 020c 	and.w	r2, r3, #12
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1eb      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c8:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d20c      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e032      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4916      	ldr	r1, [pc, #88]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490e      	ldr	r1, [pc, #56]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192e:	f000 f821 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490a      	ldr	r1, [pc, #40]	; (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f88c 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00
 8001964:	40023800 	.word	0x40023800
 8001968:	0800568c 	.word	0x0800568c
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	2300      	movs	r3, #0
 8001986:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800198c:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d00d      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001998:	2b08      	cmp	r3, #8
 800199a:	f200 80bd 	bhi.w	8001b18 <HAL_RCC_GetSysClockFreq+0x1a4>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x34>
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x3a>
 80019a6:	e0b7      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019aa:	60bb      	str	r3, [r7, #8]
       break;
 80019ac:	e0b7      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ae:	4b61      	ldr	r3, [pc, #388]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019b0:	60bb      	str	r3, [r7, #8]
      break;
 80019b2:	e0b4      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b4:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019be:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d04d      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	461a      	mov	r2, r3
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	ea02 0800 	and.w	r8, r2, r0
 80019e2:	ea03 0901 	and.w	r9, r3, r1
 80019e6:	4640      	mov	r0, r8
 80019e8:	4649      	mov	r1, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	014b      	lsls	r3, r1, #5
 80019f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019f8:	0142      	lsls	r2, r0, #5
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	ebb0 0008 	subs.w	r0, r0, r8
 8001a02:	eb61 0109 	sbc.w	r1, r1, r9
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	018b      	lsls	r3, r1, #6
 8001a10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a14:	0182      	lsls	r2, r0, #6
 8001a16:	1a12      	subs	r2, r2, r0
 8001a18:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	00d9      	lsls	r1, r3, #3
 8001a26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a2a:	00d0      	lsls	r0, r2, #3
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	eb12 0208 	adds.w	r2, r2, r8
 8001a34:	eb43 0309 	adc.w	r3, r3, r9
 8001a38:	f04f 0000 	mov.w	r0, #0
 8001a3c:	f04f 0100 	mov.w	r1, #0
 8001a40:	0259      	lsls	r1, r3, #9
 8001a42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a46:	0250      	lsls	r0, r2, #9
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	461a      	mov	r2, r3
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	f7fe fc0a 	bl	8000270 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e04a      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	ea02 0400 	and.w	r4, r2, r0
 8001a7e:	ea03 0501 	and.w	r5, r3, r1
 8001a82:	4620      	mov	r0, r4
 8001a84:	4629      	mov	r1, r5
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	014b      	lsls	r3, r1, #5
 8001a90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a94:	0142      	lsls	r2, r0, #5
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	1b00      	subs	r0, r0, r4
 8001a9c:	eb61 0105 	sbc.w	r1, r1, r5
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	018b      	lsls	r3, r1, #6
 8001aaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aae:	0182      	lsls	r2, r0, #6
 8001ab0:	1a12      	subs	r2, r2, r0
 8001ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab6:	f04f 0000 	mov.w	r0, #0
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	00d9      	lsls	r1, r3, #3
 8001ac0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ac4:	00d0      	lsls	r0, r2, #3
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	1912      	adds	r2, r2, r4
 8001acc:	eb45 0303 	adc.w	r3, r5, r3
 8001ad0:	f04f 0000 	mov.w	r0, #0
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	0299      	lsls	r1, r3, #10
 8001ada:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ade:	0290      	lsls	r0, r2, #10
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	f7fe fbbe 	bl	8000270 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	3301      	adds	r3, #1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	60bb      	str	r3, [r7, #8]
      break;
 8001b16:	e002      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b1a:	60bb      	str	r3, [r7, #8]
      break;
 8001b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a9b      	lsrs	r3, r3, #10
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	0800569c 	.word	0x0800569c

08001b78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	220f      	movs	r2, #15
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <HAL_RCC_GetClockConfig+0x60>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0207 	and.w	r2, r3, #7
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40023c00 	.word	0x40023c00

08001bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e041      	b.n	8001c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f839 	bl	8001c7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3304      	adds	r3, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	f000 f9d8 	bl	8001fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d001      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e04e      	b.n	8001d46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d022      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd2:	d01d      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d018      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00e      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d111      	bne.n	8001d34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d010      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d32:	e007      	b.n	8001d44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40000800 	.word	0x40000800
 8001d60:	40000c00 	.word	0x40000c00
 8001d64:	40010400 	.word	0x40010400
 8001d68:	40014000 	.word	0x40014000
 8001d6c:	40001800 	.word	0x40001800

08001d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0202 	mvn.w	r2, #2
 8001d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8ee 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8e0 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8f1 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0204 	mvn.w	r2, #4
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8c4 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8b6 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8c7 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0208 	mvn.w	r2, #8
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f89a 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f88c 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f89d 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d122      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0210 	mvn.w	r2, #16
 8001e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f870 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f862 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f873 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0201 	mvn.w	r2, #1
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fd7c 	bl	80009ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	2b80      	cmp	r3, #128	; 0x80
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d107      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f902 	bl	8002124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	2b40      	cmp	r3, #64	; 0x40
 8001f2c:	d10e      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d107      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f838 	bl	8001fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d10e      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d107      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0220 	mvn.w	r2, #32
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8cc 	bl	8002110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a40      	ldr	r2, [pc, #256]	; (80020e4 <TIM_Base_SetConfig+0x114>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fee:	d00f      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3d      	ldr	r2, [pc, #244]	; (80020e8 <TIM_Base_SetConfig+0x118>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3c      	ldr	r2, [pc, #240]	; (80020ec <TIM_Base_SetConfig+0x11c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d007      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3b      	ldr	r2, [pc, #236]	; (80020f0 <TIM_Base_SetConfig+0x120>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <TIM_Base_SetConfig+0x124>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2f      	ldr	r2, [pc, #188]	; (80020e4 <TIM_Base_SetConfig+0x114>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02b      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d027      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2c      	ldr	r2, [pc, #176]	; (80020e8 <TIM_Base_SetConfig+0x118>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d023      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2b      	ldr	r2, [pc, #172]	; (80020ec <TIM_Base_SetConfig+0x11c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2a      	ldr	r2, [pc, #168]	; (80020f0 <TIM_Base_SetConfig+0x120>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01b      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <TIM_Base_SetConfig+0x124>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d017      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <TIM_Base_SetConfig+0x128>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a27      	ldr	r2, [pc, #156]	; (80020fc <TIM_Base_SetConfig+0x12c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00f      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <TIM_Base_SetConfig+0x130>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00b      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a25      	ldr	r2, [pc, #148]	; (8002104 <TIM_Base_SetConfig+0x134>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <TIM_Base_SetConfig+0x138>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d003      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a23      	ldr	r2, [pc, #140]	; (800210c <TIM_Base_SetConfig+0x13c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d108      	bne.n	8002094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <TIM_Base_SetConfig+0x114>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d003      	beq.n	80020c8 <TIM_Base_SetConfig+0xf8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <TIM_Base_SetConfig+0x124>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d103      	bne.n	80020d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	615a      	str	r2, [r3, #20]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40000400 	.word	0x40000400
 80020ec:	40000800 	.word	0x40000800
 80020f0:	40000c00 	.word	0x40000c00
 80020f4:	40010400 	.word	0x40010400
 80020f8:	40014000 	.word	0x40014000
 80020fc:	40014400 	.word	0x40014400
 8002100:	40014800 	.word	0x40014800
 8002104:	40001800 	.word	0x40001800
 8002108:	40001c00 	.word	0x40001c00
 800210c:	40002000 	.word	0x40002000

08002110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f103 0208 	add.w	r2, r3, #8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002150:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f103 0208 	add.w	r2, r3, #8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f103 0208 	add.w	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f0:	d103      	bne.n	80021fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e00c      	b.n	8002214 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3308      	adds	r3, #8
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e002      	b.n	8002208 <vListInsert+0x2e>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	429a      	cmp	r2, r3
 8002212:	d2f6      	bcs.n	8002202 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6892      	ldr	r2, [r2, #8]
 8002262:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6852      	ldr	r2, [r2, #4]
 800226c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	d103      	bne.n	8002280 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1e5a      	subs	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <xQueueGenericReset+0x2a>
        __asm volatile
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	60bb      	str	r3, [r7, #8]
    }
 80022c6:	bf00      	nop
 80022c8:	e7fe      	b.n	80022c8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022ca:	f001 fee5 	bl	8004098 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	68f9      	ldr	r1, [r7, #12]
 80022d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	441a      	add	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	3b01      	subs	r3, #1
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	441a      	add	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	22ff      	movs	r2, #255	; 0xff
 800230e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	22ff      	movs	r2, #255	; 0xff
 8002316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00f      	beq.n	8002348 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3310      	adds	r3, #16
 800232c:	4618      	mov	r0, r3
 800232e:	f000 ffdf 	bl	80032f0 <xTaskRemoveFromEventList>
 8002332:	e009      	b.n	8002348 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3310      	adds	r3, #16
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fefd 	bl	8002138 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3324      	adds	r3, #36	; 0x24
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fef8 	bl	8002138 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002348:	f001 fed6 	bl	80040f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800234c:	2301      	movs	r3, #1
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002356:	b580      	push	{r7, lr}
 8002358:	b08c      	sub	sp, #48	; 0x30
 800235a:	af02      	add	r7, sp, #8
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	4613      	mov	r3, r2
 8002362:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <xQueueGenericCreate+0x2a>
        __asm volatile
 800236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	61bb      	str	r3, [r7, #24]
    }
 800237c:	bf00      	nop
 800237e:	e7fe      	b.n	800237e <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <xQueueGenericCreate+0x48>
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	429a      	cmp	r2, r3
 800239c:	d101      	bne.n	80023a2 <xQueueGenericCreate+0x4c>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <xQueueGenericCreate+0x4e>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <xQueueGenericCreate+0x68>
        __asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	617b      	str	r3, [r7, #20]
    }
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023c4:	d90a      	bls.n	80023dc <xQueueGenericCreate+0x86>
        __asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	613b      	str	r3, [r7, #16]
    }
 80023d8:	bf00      	nop
 80023da:	e7fe      	b.n	80023da <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	3350      	adds	r3, #80	; 0x50
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 ff7b 	bl	80042dc <pvPortMalloc>
 80023e6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3350      	adds	r3, #80	; 0x50
 80023f6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023f8:	79fa      	ldrb	r2, [r7, #7]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f805 	bl	8002414 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800240a:	6a3b      	ldr	r3, [r7, #32]
    }
 800240c:	4618      	mov	r0, r3
 800240e:	3728      	adds	r7, #40	; 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e002      	b.n	8002436 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002442:	2101      	movs	r1, #1
 8002444:	69b8      	ldr	r0, [r7, #24]
 8002446:	f7ff ff2b 	bl	80022a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08e      	sub	sp, #56	; 0x38
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <xQueueGenericSend+0x32>
        __asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <xQueueGenericSend+0x40>
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <xQueueGenericSend+0x44>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <xQueueGenericSend+0x46>
 80024a0:	2300      	movs	r3, #0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <xQueueGenericSend+0x60>
        __asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80024b8:	bf00      	nop
 80024ba:	e7fe      	b.n	80024ba <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d103      	bne.n	80024ca <xQueueGenericSend+0x6e>
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <xQueueGenericSend+0x72>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <xQueueGenericSend+0x74>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <xQueueGenericSend+0x8e>
        __asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	623b      	str	r3, [r7, #32]
    }
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ea:	f001 f897 	bl	800361c <xTaskGetSchedulerState>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <xQueueGenericSend+0x9e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <xQueueGenericSend+0xa2>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <xQueueGenericSend+0xa4>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericSend+0xbe>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	61fb      	str	r3, [r7, #28]
    }
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800251a:	f001 fdbd 	bl	8004098 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <xQueueGenericSend+0xd4>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d112      	bne.n	8002556 <xQueueGenericSend+0xfa>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002536:	f000 f9f5 	bl	8002924 <prvCopyDataToQueue>
 800253a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <xQueueGenericSend+0xf2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	3324      	adds	r3, #36	; 0x24
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fed1 	bl	80032f0 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800254e:	f001 fdd3 	bl	80040f8 <vPortExitCritical>
                return pdPASS;
 8002552:	2301      	movs	r3, #1
 8002554:	e062      	b.n	800261c <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <xQueueGenericSend+0x108>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800255c:	f001 fdcc 	bl	80040f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002560:	2300      	movs	r3, #0
 8002562:	e05b      	b.n	800261c <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <xQueueGenericSend+0x11c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4618      	mov	r0, r3
 8002570:	f000 ff20 	bl	80033b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002574:	2301      	movs	r3, #1
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002578:	f001 fdbe 	bl	80040f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800257c:	f000 fcca 	bl	8002f14 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002580:	f001 fd8a 	bl	8004098 <vPortEnterCritical>
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800258a:	b25b      	sxtb	r3, r3
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002590:	d103      	bne.n	800259a <xQueueGenericSend+0x13e>
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a6:	d103      	bne.n	80025b0 <xQueueGenericSend+0x154>
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025b0:	f001 fda2 	bl	80040f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025b4:	1d3a      	adds	r2, r7, #4
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 ff0f 	bl	80033e0 <xTaskCheckForTimeOut>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d123      	bne.n	8002610 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ca:	f000 faa3 	bl	8002b14 <prvIsQueueFull>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d017      	beq.n	8002604 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	3310      	adds	r3, #16
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fe37 	bl	8003250 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80025e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e4:	f000 fa2e 	bl	8002a44 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80025e8:	f000 fca2 	bl	8002f30 <xTaskResumeAll>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d193      	bne.n	800251a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <xQueueGenericSend+0x1c8>)
 80025f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	e78a      	b.n	800251a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002606:	f000 fa1d 	bl	8002a44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800260a:	f000 fc91 	bl	8002f30 <xTaskResumeAll>
 800260e:	e784      	b.n	800251a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002612:	f000 fa17 	bl	8002a44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002616:	f000 fc8b 	bl	8002f30 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800261a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800261c:	4618      	mov	r0, r3
 800261e:	3738      	adds	r7, #56	; 0x38
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b090      	sub	sp, #64	; 0x40
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <xQueueGenericSendFromISR+0x3c>
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <xQueueGenericSendFromISR+0x40>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <xQueueGenericSendFromISR+0x42>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002680:	bf00      	nop
 8002682:	e7fe      	b.n	8002682 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d103      	bne.n	8002692 <xQueueGenericSendFromISR+0x6a>
 800268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <xQueueGenericSendFromISR+0x6e>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <xQueueGenericSendFromISR+0x70>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	623b      	str	r3, [r7, #32]
    }
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026b2:	f001 fdd3 	bl	800425c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80026b6:	f3ef 8211 	mrs	r2, BASEPRI
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	61fa      	str	r2, [r7, #28]
 80026cc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80026ce:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <xQueueGenericSendFromISR+0xbc>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d13e      	bne.n	8002762 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026fa:	f000 f913 	bl	8002924 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80026fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002706:	d112      	bne.n	800272e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	d025      	beq.n	800275c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	3324      	adds	r3, #36	; 0x24
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fdeb 	bl	80032f0 <xTaskRemoveFromEventList>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01d      	beq.n	800275c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01a      	beq.n	800275c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e016      	b.n	800275c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800272e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002732:	2b7f      	cmp	r3, #127	; 0x7f
 8002734:	d10a      	bne.n	800274c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	617b      	str	r3, [r7, #20]
    }
 8002748:	bf00      	nop
 800274a:	e7fe      	b.n	800274a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800274c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002750:	3301      	adds	r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	b25a      	sxtb	r2, r3
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800275c:	2301      	movs	r3, #1
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002760:	e001      	b.n	8002766 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002762:	2300      	movs	r3, #0
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002770:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002774:	4618      	mov	r0, r3
 8002776:	3740      	adds	r7, #64	; 0x40
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002788:	2300      	movs	r3, #0
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <xQueueReceive+0x30>
        __asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	623b      	str	r3, [r7, #32]
    }
 80027a8:	bf00      	nop
 80027aa:	e7fe      	b.n	80027aa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <xQueueReceive+0x3e>
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <xQueueReceive+0x42>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <xQueueReceive+0x44>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <xQueueReceive+0x5e>
        __asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	61fb      	str	r3, [r7, #28]
    }
 80027d6:	bf00      	nop
 80027d8:	e7fe      	b.n	80027d8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027da:	f000 ff1f 	bl	800361c <xTaskGetSchedulerState>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <xQueueReceive+0x6e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <xQueueReceive+0x72>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <xQueueReceive+0x74>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <xQueueReceive+0x8e>
        __asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	61bb      	str	r3, [r7, #24]
    }
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800280a:	f001 fc45 	bl	8004098 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	d014      	beq.n	8002844 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800281e:	f000 f8eb 	bl	80029f8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d004      	beq.n	800283c <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	3310      	adds	r3, #16
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fd5a 	bl	80032f0 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800283c:	f001 fc5c 	bl	80040f8 <vPortExitCritical>
                return pdPASS;
 8002840:	2301      	movs	r3, #1
 8002842:	e069      	b.n	8002918 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800284a:	f001 fc55 	bl	80040f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800284e:	2300      	movs	r3, #0
 8002850:	e062      	b.n	8002918 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fda9 	bl	80033b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002862:	2301      	movs	r3, #1
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002866:	f001 fc47 	bl	80040f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800286a:	f000 fb53 	bl	8002f14 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800286e:	f001 fc13 	bl	8004098 <vPortEnterCritical>
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002878:	b25b      	sxtb	r3, r3
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800287e:	d103      	bne.n	8002888 <xQueueReceive+0x10c>
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800288e:	b25b      	sxtb	r3, r3
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002894:	d103      	bne.n	800289e <xQueueReceive+0x122>
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800289e:	f001 fc2b 	bl	80040f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028a2:	1d3a      	adds	r2, r7, #4
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fd98 	bl	80033e0 <xTaskCheckForTimeOut>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d123      	bne.n	80028fe <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b8:	f000 f916 	bl	8002ae8 <prvIsQueueEmpty>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d017      	beq.n	80028f2 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	3324      	adds	r3, #36	; 0x24
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fcc0 	bl	8003250 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d2:	f000 f8b7 	bl	8002a44 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028d6:	f000 fb2b 	bl	8002f30 <xTaskResumeAll>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d194      	bne.n	800280a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <xQueueReceive+0x1a4>)
 80028e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	e78b      	b.n	800280a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f4:	f000 f8a6 	bl	8002a44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028f8:	f000 fb1a 	bl	8002f30 <xTaskResumeAll>
 80028fc:	e785      	b.n	800280a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002900:	f000 f8a0 	bl	8002a44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002904:	f000 fb14 	bl	8002f30 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800290a:	f000 f8ed 	bl	8002ae8 <prvIsQueueEmpty>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f43f af7a 	beq.w	800280a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002916:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002918:	4618      	mov	r0, r3
 800291a:	3730      	adds	r7, #48	; 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	e000ed04 	.word	0xe000ed04

08002924 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10d      	bne.n	800295e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d14d      	bne.n	80029e6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fe82 	bl	8003658 <xTaskPriorityDisinherit>
 8002954:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e043      	b.n	80029e6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d119      	bne.n	8002998 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6858      	ldr	r0, [r3, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	461a      	mov	r2, r3
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	f001 fed6 	bl	8004720 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	441a      	add	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	d32b      	bcc.n	80029e6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	e026      	b.n	80029e6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	68d8      	ldr	r0, [r3, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	461a      	mov	r2, r3
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	f001 febc 	bl	8004720 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	425b      	negs	r3, r3
 80029b2:	441a      	add	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d207      	bcs.n	80029d4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	425b      	negs	r3, r3
 80029ce:	441a      	add	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d105      	bne.n	80029e6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80029ee:	697b      	ldr	r3, [r7, #20]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	441a      	add	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d303      	bcc.n	8002a2c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68d9      	ldr	r1, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	461a      	mov	r2, r3
 8002a36:	6838      	ldr	r0, [r7, #0]
 8002a38:	f001 fe72 	bl	8004720 <memcpy>
    }
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a4c:	f001 fb24 	bl	8004098 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a56:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a58:	e011      	b.n	8002a7e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3324      	adds	r3, #36	; 0x24
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fc42 	bl	80032f0 <xTaskRemoveFromEventList>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002a72:	f000 fd1b 	bl	80034ac <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	dce9      	bgt.n	8002a5a <prvUnlockQueue+0x16>
 8002a86:	e000      	b.n	8002a8a <prvUnlockQueue+0x46>
                        break;
 8002a88:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a92:	f001 fb31 	bl	80040f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a96:	f001 faff 	bl	8004098 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aa0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aa2:	e011      	b.n	8002ac8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d012      	beq.n	8002ad2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3310      	adds	r3, #16
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fc1d 	bl	80032f0 <xTaskRemoveFromEventList>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002abc:	f000 fcf6 	bl	80034ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ac0:	7bbb      	ldrb	r3, [r7, #14]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	dce9      	bgt.n	8002aa4 <prvUnlockQueue+0x60>
 8002ad0:	e000      	b.n	8002ad4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ad2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	22ff      	movs	r2, #255	; 0xff
 8002ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002adc:	f001 fb0c 	bl	80040f8 <vPortExitCritical>
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002af0:	f001 fad2 	bl	8004098 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e001      	b.n	8002b06 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b06:	f001 faf7 	bl	80040f8 <vPortExitCritical>

    return xReturn;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b1c:	f001 fabc 	bl	8004098 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d102      	bne.n	8002b32 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e001      	b.n	8002b36 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b36:	f001 fadf 	bl	80040f8 <vPortExitCritical>

    return xReturn;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e014      	b.n	8002b7e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b54:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <vQueueAddToRegistry+0x50>)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b60:	490c      	ldr	r1, [pc, #48]	; (8002b94 <vQueueAddToRegistry+0x50>)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <vQueueAddToRegistry+0x50>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002b76:	e006      	b.n	8002b86 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b07      	cmp	r3, #7
 8002b82:	d9e7      	bls.n	8002b54 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20012e54 	.word	0x20012e54

08002b98 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ba8:	f001 fa76 	bl	8004098 <vPortEnterCritical>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bb2:	b25b      	sxtb	r3, r3
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb8:	d103      	bne.n	8002bc2 <vQueueWaitForMessageRestricted+0x2a>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bce:	d103      	bne.n	8002bd8 <vQueueWaitForMessageRestricted+0x40>
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd8:	f001 fa8e 	bl	80040f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d106      	bne.n	8002bf2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3324      	adds	r3, #36	; 0x24
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fb53 	bl	8003298 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff ff26 	bl	8002a44 <prvUnlockQueue>
    }
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af04      	add	r7, sp, #16
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fb61 	bl	80042dc <pvPortMalloc>
 8002c1a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c22:	2058      	movs	r0, #88	; 0x58
 8002c24:	f001 fb5a 	bl	80042dc <pvPortMalloc>
 8002c28:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
 8002c36:	e005      	b.n	8002c44 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f001 fc2f 	bl	800449c <vPortFree>
 8002c3e:	e001      	b.n	8002c44 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d013      	beq.n	8002c72 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9303      	str	r3, [sp, #12]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f80e 	bl	8002c82 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c66:	69f8      	ldr	r0, [r7, #28]
 8002c68:	f000 f8a2 	bl	8002db0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	e002      	b.n	8002c78 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c76:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c78:	69bb      	ldr	r3, [r7, #24]
    }
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b088      	sub	sp, #32
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	21a5      	movs	r1, #165	; 0xa5
 8002c9c:	f001 fd4e 	bl	800473c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002caa:	3b01      	subs	r3, #1
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f023 0307 	bic.w	r3, r3, #7
 8002cb8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <prvInitialiseNewTask+0x58>
        __asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	617b      	str	r3, [r7, #20]
    }
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01f      	beq.n	8002d20 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	e012      	b.n	8002d0c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	7819      	ldrb	r1, [r3, #0]
 8002cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3334      	adds	r3, #52	; 0x34
 8002cf6:	460a      	mov	r2, r1
 8002cf8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b09      	cmp	r3, #9
 8002d10:	d9e9      	bls.n	8002ce6 <prvInitialiseNewTask+0x64>
 8002d12:	e000      	b.n	8002d16 <prvInitialiseNewTask+0x94>
            {
                break;
 8002d14:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d1e:	e003      	b.n	8002d28 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d901      	bls.n	8002d32 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d2e:	2304      	movs	r3, #4
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d3c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2200      	movs	r2, #0
 8002d42:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	3304      	adds	r3, #4
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fa15 	bl	8002178 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	3318      	adds	r3, #24
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fa10 	bl	8002178 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	f1c3 0205 	rsb	r2, r3, #5
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	3350      	adds	r3, #80	; 0x50
 8002d72:	2204      	movs	r2, #4
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fce0 	bl	800473c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	3354      	adds	r3, #84	; 0x54
 8002d80:	2201      	movs	r2, #1
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f001 fcd9 	bl	800473c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	68f9      	ldr	r1, [r7, #12]
 8002d8e:	69b8      	ldr	r0, [r7, #24]
 8002d90:	f001 f854 	bl	8003e3c <pxPortInitialiseStack>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002da4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002da6:	bf00      	nop
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002db8:	f001 f96e 	bl	8004098 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002dbc:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <prvAddNewTaskToReadyList+0xa8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <prvAddNewTaskToReadyList+0xa8>)
 8002dc4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <prvAddNewTaskToReadyList+0xac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002dce:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <prvAddNewTaskToReadyList+0xac>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <prvAddNewTaskToReadyList+0xa8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d110      	bne.n	8002dfe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ddc:	f000 fb84 	bl	80034e8 <prvInitialiseTaskLists>
 8002de0:	e00d      	b.n	8002dfe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <prvAddNewTaskToReadyList+0xb0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <prvAddNewTaskToReadyList+0xac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d802      	bhi.n	8002dfe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002df8:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <prvAddNewTaskToReadyList+0xac>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002dfe:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <prvAddNewTaskToReadyList+0xb4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <prvAddNewTaskToReadyList+0xb4>)
 8002e06:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <prvAddNewTaskToReadyList+0xb4>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	2201      	movs	r2, #1
 8002e16:	409a      	lsls	r2, r3
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <prvAddNewTaskToReadyList+0xb8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <prvAddNewTaskToReadyList+0xb8>)
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <prvAddNewTaskToReadyList+0xbc>)
 8002e30:	441a      	add	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f7ff f9aa 	bl	8002192 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e3e:	f001 f95b 	bl	80040f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <prvAddNewTaskToReadyList+0xb0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <prvAddNewTaskToReadyList+0xac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	2000016c 	.word	0x2000016c
 8002e5c:	20000094 	.word	0x20000094
 8002e60:	20000178 	.word	0x20000178
 8002e64:	20000188 	.word	0x20000188
 8002e68:	20000174 	.word	0x20000174
 8002e6c:	20000098 	.word	0x20000098

08002e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <vTaskStartScheduler+0x88>)
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2282      	movs	r2, #130	; 0x82
 8002e82:	491e      	ldr	r1, [pc, #120]	; (8002efc <vTaskStartScheduler+0x8c>)
 8002e84:	481e      	ldr	r0, [pc, #120]	; (8002f00 <vTaskStartScheduler+0x90>)
 8002e86:	f7ff febb 	bl	8002c00 <xTaskCreate>
 8002e8a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d102      	bne.n	8002e98 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e92:	f000 fcc1 	bl	8003818 <xTimerCreateTimerTask>
 8002e96:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d116      	bne.n	8002ecc <vTaskStartScheduler+0x5c>
        __asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	60bb      	str	r3, [r7, #8]
    }
 8002eb0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002eb2:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <vTaskStartScheduler+0x94>)
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <vTaskStartScheduler+0x98>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <vTaskStartScheduler+0x9c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ec6:	f001 f845 	bl	8003f54 <xPortStartScheduler>
 8002eca:	e00e      	b.n	8002eea <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ed2:	d10a      	bne.n	8002eea <vTaskStartScheduler+0x7a>
        __asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	607b      	str	r3, [r7, #4]
    }
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <vTaskStartScheduler+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000190 	.word	0x20000190
 8002efc:	08005674 	.word	0x08005674
 8002f00:	080034c5 	.word	0x080034c5
 8002f04:	2000018c 	.word	0x2000018c
 8002f08:	20000178 	.word	0x20000178
 8002f0c:	20000170 	.word	0x20000170
 8002f10:	2000000c 	.word	0x2000000c

08002f14 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <vTaskSuspendAll+0x18>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	4a03      	ldr	r2, [pc, #12]	; (8002f2c <vTaskSuspendAll+0x18>)
 8002f20:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	20000194 	.word	0x20000194

08002f30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	; (800302c <xTaskResumeAll+0xfc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <xTaskResumeAll+0x2c>
        __asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	603b      	str	r3, [r7, #0]
    }
 8002f58:	bf00      	nop
 8002f5a:	e7fe      	b.n	8002f5a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f5c:	f001 f89c 	bl	8004098 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f60:	4b32      	ldr	r3, [pc, #200]	; (800302c <xTaskResumeAll+0xfc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	4a31      	ldr	r2, [pc, #196]	; (800302c <xTaskResumeAll+0xfc>)
 8002f68:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <xTaskResumeAll+0xfc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d155      	bne.n	800301e <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f72:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <xTaskResumeAll+0x100>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d051      	beq.n	800301e <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f7a:	e02e      	b.n	8002fda <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <xTaskResumeAll+0x104>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3318      	adds	r3, #24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f95f 	bl	800224c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3304      	adds	r3, #4
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f95a 	bl	800224c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <xTaskResumeAll+0x108>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	4a24      	ldr	r2, [pc, #144]	; (8003038 <xTaskResumeAll+0x108>)
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4a21      	ldr	r2, [pc, #132]	; (800303c <xTaskResumeAll+0x10c>)
 8002fb8:	441a      	add	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f7ff f8e6 	bl	8002192 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <xTaskResumeAll+0x110>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <xTaskResumeAll+0x114>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <xTaskResumeAll+0x104>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1cc      	bne.n	8002f7c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fe8:	f000 fafc 	bl	80035e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fec:	4b16      	ldr	r3, [pc, #88]	; (8003048 <xTaskResumeAll+0x118>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d010      	beq.n	800301a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ff8:	f000 f838 	bl	800306c <xTaskIncrementTick>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <xTaskResumeAll+0x114>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	3b01      	subs	r3, #1
 800300c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f1      	bne.n	8002ff8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <xTaskResumeAll+0x118>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <xTaskResumeAll+0x114>)
 800301c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800301e:	f001 f86b 	bl	80040f8 <vPortExitCritical>

    return xAlreadyYielded;
 8003022:	687b      	ldr	r3, [r7, #4]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000194 	.word	0x20000194
 8003030:	2000016c 	.word	0x2000016c
 8003034:	2000012c 	.word	0x2000012c
 8003038:	20000174 	.word	0x20000174
 800303c:	20000098 	.word	0x20000098
 8003040:	20000094 	.word	0x20000094
 8003044:	20000180 	.word	0x20000180
 8003048:	2000017c 	.word	0x2000017c

0800304c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <xTaskGetTickCount+0x1c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003058:	687b      	ldr	r3, [r7, #4]
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000170 	.word	0x20000170

0800306c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003076:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <xTaskIncrementTick+0x108>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d16f      	bne.n	800315e <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <xTaskIncrementTick+0x10c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003086:	4a3c      	ldr	r2, [pc, #240]	; (8003178 <xTaskIncrementTick+0x10c>)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d120      	bne.n	80030d4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003092:	4b3a      	ldr	r3, [pc, #232]	; (800317c <xTaskIncrementTick+0x110>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <xTaskIncrementTick+0x46>
        __asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	603b      	str	r3, [r7, #0]
    }
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xTaskIncrementTick+0x44>
 80030b2:	4b32      	ldr	r3, [pc, #200]	; (800317c <xTaskIncrementTick+0x110>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	4b31      	ldr	r3, [pc, #196]	; (8003180 <xTaskIncrementTick+0x114>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2f      	ldr	r2, [pc, #188]	; (800317c <xTaskIncrementTick+0x110>)
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4a2f      	ldr	r2, [pc, #188]	; (8003180 <xTaskIncrementTick+0x114>)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <xTaskIncrementTick+0x118>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3301      	adds	r3, #1
 80030cc:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <xTaskIncrementTick+0x118>)
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	f000 fa88 	bl	80035e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030d4:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <xTaskIncrementTick+0x11c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d344      	bcc.n	8003168 <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030de:	4b27      	ldr	r3, [pc, #156]	; (800317c <xTaskIncrementTick+0x110>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e8:	4b27      	ldr	r3, [pc, #156]	; (8003188 <xTaskIncrementTick+0x11c>)
 80030ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030ee:	601a      	str	r2, [r3, #0]
                    break;
 80030f0:	e03a      	b.n	8003168 <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <xTaskIncrementTick+0x110>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d203      	bcs.n	8003112 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800310a:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <xTaskIncrementTick+0x11c>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003110:	e02a      	b.n	8003168 <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3304      	adds	r3, #4
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff f898 	bl	800224c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3318      	adds	r3, #24
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f88f 	bl	800224c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	2201      	movs	r2, #1
 8003134:	409a      	lsls	r2, r3
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <xTaskIncrementTick+0x120>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	4a13      	ldr	r2, [pc, #76]	; (800318c <xTaskIncrementTick+0x120>)
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4a10      	ldr	r2, [pc, #64]	; (8003190 <xTaskIncrementTick+0x124>)
 800314e:	441a      	add	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f7ff f81b 	bl	8002192 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800315c:	e7bf      	b.n	80030de <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <xTaskIncrementTick+0x128>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <xTaskIncrementTick+0x128>)
 8003166:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003168:	697b      	ldr	r3, [r7, #20]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000194 	.word	0x20000194
 8003178:	20000170 	.word	0x20000170
 800317c:	20000124 	.word	0x20000124
 8003180:	20000128 	.word	0x20000128
 8003184:	20000184 	.word	0x20000184
 8003188:	2000018c 	.word	0x2000018c
 800318c:	20000174 	.word	0x20000174
 8003190:	20000098 	.word	0x20000098
 8003194:	2000017c 	.word	0x2000017c

08003198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800319e:	4b27      	ldr	r3, [pc, #156]	; (800323c <vTaskSwitchContext+0xa4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <vTaskSwitchContext+0xa8>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80031ac:	e03f      	b.n	800322e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80031ae:	4b24      	ldr	r3, [pc, #144]	; (8003240 <vTaskSwitchContext+0xa8>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <vTaskSwitchContext+0xac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031c2:	7afb      	ldrb	r3, [r7, #11]
 80031c4:	f1c3 031f 	rsb	r3, r3, #31
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	491f      	ldr	r1, [pc, #124]	; (8003248 <vTaskSwitchContext+0xb0>)
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	607b      	str	r3, [r7, #4]
    }
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <vTaskSwitchContext+0x5a>
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <vTaskSwitchContext+0xb0>)
 8003200:	4413      	add	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	3308      	adds	r3, #8
 8003216:	429a      	cmp	r2, r3
 8003218:	d104      	bne.n	8003224 <vTaskSwitchContext+0x8c>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <vTaskSwitchContext+0xb4>)
 800322c:	6013      	str	r3, [r2, #0]
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000194 	.word	0x20000194
 8003240:	20000180 	.word	0x20000180
 8003244:	20000174 	.word	0x20000174
 8003248:	20000098 	.word	0x20000098
 800324c:	20000094 	.word	0x20000094

08003250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60fb      	str	r3, [r7, #12]
    }
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <vTaskPlaceOnEventList+0x44>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3318      	adds	r3, #24
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe ffab 	bl	80021da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003284:	2101      	movs	r1, #1
 8003286:	6838      	ldr	r0, [r7, #0]
 8003288:	f000 fa60 	bl	800374c <prvAddCurrentTaskToDelayedList>
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000094 	.word	0x20000094

08003298 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	617b      	str	r3, [r7, #20]
    }
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <vTaskPlaceOnEventListRestricted+0x54>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3318      	adds	r3, #24
 80032c6:	4619      	mov	r1, r3
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f7fe ff62 	bl	8002192 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	68b8      	ldr	r0, [r7, #8]
 80032de:	f000 fa35 	bl	800374c <prvAddCurrentTaskToDelayedList>
    }
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000094 	.word	0x20000094

080032f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	60fb      	str	r3, [r7, #12]
    }
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	3318      	adds	r3, #24
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe ff93 	bl	800224c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <xTaskRemoveFromEventList+0xac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11c      	bne.n	8003368 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	3304      	adds	r3, #4
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe ff8a 	bl	800224c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <xTaskRemoveFromEventList+0xb0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <xTaskRemoveFromEventList+0xb0>)
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <xTaskRemoveFromEventList+0xb4>)
 8003358:	441a      	add	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	3304      	adds	r3, #4
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f7fe ff16 	bl	8002192 <vListInsertEnd>
 8003366:	e005      	b.n	8003374 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	3318      	adds	r3, #24
 800336c:	4619      	mov	r1, r3
 800336e:	480e      	ldr	r0, [pc, #56]	; (80033a8 <xTaskRemoveFromEventList+0xb8>)
 8003370:	f7fe ff0f 	bl	8002192 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <xTaskRemoveFromEventList+0xbc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	429a      	cmp	r2, r3
 8003380:	d905      	bls.n	800338e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003382:	2301      	movs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <xTaskRemoveFromEventList+0xc0>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e001      	b.n	8003392 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003392:	697b      	ldr	r3, [r7, #20]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000194 	.word	0x20000194
 80033a0:	20000174 	.word	0x20000174
 80033a4:	20000098 	.word	0x20000098
 80033a8:	2000012c 	.word	0x2000012c
 80033ac:	20000094 	.word	0x20000094
 80033b0:	20000180 	.word	0x20000180

080033b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <vTaskInternalSetTimeOutState+0x24>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <vTaskInternalSetTimeOutState+0x28>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	605a      	str	r2, [r3, #4]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	20000184 	.word	0x20000184
 80033dc:	20000170 	.word	0x20000170

080033e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	613b      	str	r3, [r7, #16]
    }
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	60fb      	str	r3, [r7, #12]
    }
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003422:	f000 fe39 	bl	8004098 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003426:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <xTaskCheckForTimeOut+0xc4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800343e:	d102      	bne.n	8003446 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	e026      	b.n	8003494 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <xTaskCheckForTimeOut+0xc8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d00a      	beq.n	8003468 <xTaskCheckForTimeOut+0x88>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	429a      	cmp	r2, r3
 800345a:	d305      	bcc.n	8003468 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800345c:	2301      	movs	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e015      	b.n	8003494 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	429a      	cmp	r2, r3
 8003470:	d20b      	bcs.n	800348a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	1ad2      	subs	r2, r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff ff98 	bl	80033b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e004      	b.n	8003494 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003490:	2301      	movs	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003494:	f000 fe30 	bl	80040f8 <vPortExitCritical>

    return xReturn;
 8003498:	69fb      	ldr	r3, [r7, #28]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000170 	.word	0x20000170
 80034a8:	20000184 	.word	0x20000184

080034ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <vTaskMissedYield+0x14>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000180 	.word	0x20000180

080034c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80034cc:	f000 f84c 	bl	8003568 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <prvIdleTask+0x20>)
 80034d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80034e0:	e7f4      	b.n	80034cc <prvIdleTask+0x8>
 80034e2:	bf00      	nop
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	e00c      	b.n	800350e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <prvInitialiseTaskLists+0x60>)
 8003500:	4413      	add	r3, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fe18 	bl	8002138 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3301      	adds	r3, #1
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d9ef      	bls.n	80034f4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003514:	480d      	ldr	r0, [pc, #52]	; (800354c <prvInitialiseTaskLists+0x64>)
 8003516:	f7fe fe0f 	bl	8002138 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800351a:	480d      	ldr	r0, [pc, #52]	; (8003550 <prvInitialiseTaskLists+0x68>)
 800351c:	f7fe fe0c 	bl	8002138 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003520:	480c      	ldr	r0, [pc, #48]	; (8003554 <prvInitialiseTaskLists+0x6c>)
 8003522:	f7fe fe09 	bl	8002138 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003526:	480c      	ldr	r0, [pc, #48]	; (8003558 <prvInitialiseTaskLists+0x70>)
 8003528:	f7fe fe06 	bl	8002138 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800352c:	480b      	ldr	r0, [pc, #44]	; (800355c <prvInitialiseTaskLists+0x74>)
 800352e:	f7fe fe03 	bl	8002138 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003532:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <prvInitialiseTaskLists+0x78>)
 8003534:	4a05      	ldr	r2, [pc, #20]	; (800354c <prvInitialiseTaskLists+0x64>)
 8003536:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <prvInitialiseTaskLists+0x7c>)
 800353a:	4a05      	ldr	r2, [pc, #20]	; (8003550 <prvInitialiseTaskLists+0x68>)
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000098 	.word	0x20000098
 800354c:	200000fc 	.word	0x200000fc
 8003550:	20000110 	.word	0x20000110
 8003554:	2000012c 	.word	0x2000012c
 8003558:	20000140 	.word	0x20000140
 800355c:	20000158 	.word	0x20000158
 8003560:	20000124 	.word	0x20000124
 8003564:	20000128 	.word	0x20000128

08003568 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800356e:	e019      	b.n	80035a4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003570:	f000 fd92 	bl	8004098 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <prvCheckTasksWaitingTermination+0x50>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe fe63 	bl	800224c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <prvCheckTasksWaitingTermination+0x54>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3b01      	subs	r3, #1
 800358c:	4a0b      	ldr	r2, [pc, #44]	; (80035bc <prvCheckTasksWaitingTermination+0x54>)
 800358e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <prvCheckTasksWaitingTermination+0x58>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3b01      	subs	r3, #1
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <prvCheckTasksWaitingTermination+0x58>)
 8003598:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800359a:	f000 fdad 	bl	80040f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f810 	bl	80035c4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <prvCheckTasksWaitingTermination+0x58>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e1      	bne.n	8003570 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000140 	.word	0x20000140
 80035bc:	2000016c 	.word	0x2000016c
 80035c0:	20000154 	.word	0x20000154

080035c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 ff63 	bl	800449c <vPortFree>
                vPortFree( pxTCB );
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 ff60 	bl	800449c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <prvResetNextTaskUnblockTime+0x30>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <prvResetNextTaskUnblockTime+0x34>)
 80035f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80035fa:	e005      	b.n	8003608 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <prvResetNextTaskUnblockTime+0x30>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <prvResetNextTaskUnblockTime+0x34>)
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000124 	.word	0x20000124
 8003618:	2000018c 	.word	0x2000018c

0800361c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <xTaskGetSchedulerState+0x34>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800362a:	2301      	movs	r3, #1
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	e008      	b.n	8003642 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003630:	4b08      	ldr	r3, [pc, #32]	; (8003654 <xTaskGetSchedulerState+0x38>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003638:	2302      	movs	r3, #2
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	e001      	b.n	8003642 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003642:	687b      	ldr	r3, [r7, #4]
    }
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20000178 	.word	0x20000178
 8003654:	20000194 	.word	0x20000194

08003658 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d063      	beq.n	8003736 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <xTaskPriorityDisinherit+0xe8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d00a      	beq.n	800368e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60fb      	str	r3, [r7, #12]
    }
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	60bb      	str	r3, [r7, #8]
    }
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036be:	429a      	cmp	r2, r3
 80036c0:	d039      	beq.n	8003736 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d135      	bne.n	8003736 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fdbc 	bl	800224c <uxListRemove>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	2201      	movs	r2, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43da      	mvns	r2, r3
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <xTaskPriorityDisinherit+0xec>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4013      	ands	r3, r2
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <xTaskPriorityDisinherit+0xec>)
 80036ee:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f1c3 0205 	rsb	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	2201      	movs	r2, #1
 800370a:	409a      	lsls	r2, r3
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <xTaskPriorityDisinherit+0xec>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <xTaskPriorityDisinherit+0xec>)
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <xTaskPriorityDisinherit+0xf0>)
 8003724:	441a      	add	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3304      	adds	r3, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f7fe fd30 	bl	8002192 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003732:	2301      	movs	r3, #1
 8003734:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003736:	697b      	ldr	r3, [r7, #20]
    }
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000094 	.word	0x20000094
 8003744:	20000174 	.word	0x20000174
 8003748:	20000098 	.word	0x20000098

0800374c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003756:	4b29      	ldr	r3, [pc, #164]	; (80037fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800375c:	4b28      	ldr	r3, [pc, #160]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3304      	adds	r3, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fd72 	bl	800224c <uxListRemove>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10b      	bne.n	8003786 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2201      	movs	r2, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43da      	mvns	r2, r3
 800377c:	4b21      	ldr	r3, [pc, #132]	; (8003804 <prvAddCurrentTaskToDelayedList+0xb8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4013      	ands	r3, r2
 8003782:	4a20      	ldr	r2, [pc, #128]	; (8003804 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003784:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800378c:	d10a      	bne.n	80037a4 <prvAddCurrentTaskToDelayedList+0x58>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003794:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3304      	adds	r3, #4
 800379a:	4619      	mov	r1, r3
 800379c:	481a      	ldr	r0, [pc, #104]	; (8003808 <prvAddCurrentTaskToDelayedList+0xbc>)
 800379e:	f7fe fcf8 	bl	8002192 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037a2:	e026      	b.n	80037f2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037ac:	4b14      	ldr	r3, [pc, #80]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d209      	bcs.n	80037d0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <prvAddCurrentTaskToDelayedList+0xc0>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fe fd06 	bl	80021da <vListInsert>
}
 80037ce:	e010      	b.n	80037f2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <prvAddCurrentTaskToDelayedList+0xc4>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3304      	adds	r3, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f7fe fcfc 	bl	80021da <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d202      	bcs.n	80037f2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80037ec:	4a09      	ldr	r2, [pc, #36]	; (8003814 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6013      	str	r3, [r2, #0]
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000170 	.word	0x20000170
 8003800:	20000094 	.word	0x20000094
 8003804:	20000174 	.word	0x20000174
 8003808:	20000158 	.word	0x20000158
 800380c:	20000128 	.word	0x20000128
 8003810:	20000124 	.word	0x20000124
 8003814:	2000018c 	.word	0x2000018c

08003818 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003822:	f000 fad5 	bl	8003dd0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <xTimerCreateTimerTask+0x54>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <xTimerCreateTimerTask+0x58>)
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	2302      	movs	r3, #2
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	2300      	movs	r3, #0
 8003838:	f44f 7282 	mov.w	r2, #260	; 0x104
 800383c:	490d      	ldr	r1, [pc, #52]	; (8003874 <xTimerCreateTimerTask+0x5c>)
 800383e:	480e      	ldr	r0, [pc, #56]	; (8003878 <xTimerCreateTimerTask+0x60>)
 8003840:	f7ff f9de 	bl	8002c00 <xTaskCreate>
 8003844:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	603b      	str	r3, [r7, #0]
    }
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003862:	687b      	ldr	r3, [r7, #4]
    }
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200001c8 	.word	0x200001c8
 8003870:	200001cc 	.word	0x200001cc
 8003874:	0800567c 	.word	0x0800567c
 8003878:	080039b1 	.word	0x080039b1

0800387c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	; 0x28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xTimerGenericCommand+0x2e>
        __asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	623b      	str	r3, [r7, #32]
    }
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80038aa:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <xTimerGenericCommand+0x98>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02a      	beq.n	8003908 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	dc18      	bgt.n	80038f6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80038c4:	f7ff feaa 	bl	800361c <xTaskGetSchedulerState>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d109      	bne.n	80038e2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <xTimerGenericCommand+0x98>)
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	f107 0114 	add.w	r1, r7, #20
 80038d6:	2300      	movs	r3, #0
 80038d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038da:	f7fe fdbf 	bl	800245c <xQueueGenericSend>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24
 80038e0:	e012      	b.n	8003908 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80038e2:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <xTimerGenericCommand+0x98>)
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f107 0114 	add.w	r1, r7, #20
 80038ea:	2300      	movs	r3, #0
 80038ec:	2200      	movs	r2, #0
 80038ee:	f7fe fdb5 	bl	800245c <xQueueGenericSend>
 80038f2:	6278      	str	r0, [r7, #36]	; 0x24
 80038f4:	e008      	b.n	8003908 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <xTimerGenericCommand+0x98>)
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	f107 0114 	add.w	r1, r7, #20
 80038fe:	2300      	movs	r3, #0
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	f7fe fe91 	bl	8002628 <xQueueGenericSendFromISR>
 8003906:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800390a:	4618      	mov	r0, r3
 800390c:	3728      	adds	r7, #40	; 0x28
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	200001c8 	.word	0x200001c8

08003918 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003922:	4b22      	ldr	r3, [pc, #136]	; (80039ac <prvProcessExpiredTimer+0x94>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3304      	adds	r3, #4
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fc8b 	bl	800224c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d022      	beq.n	800398a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	18d1      	adds	r1, r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	6978      	ldr	r0, [r7, #20]
 8003952:	f000 f8d1 	bl	8003af8 <prvInsertTimerInActiveList>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01f      	beq.n	800399c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800395c:	2300      	movs	r3, #0
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	2100      	movs	r1, #0
 8003966:	6978      	ldr	r0, [r7, #20]
 8003968:	f7ff ff88 	bl	800387c <xTimerGenericCommand>
 800396c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d113      	bne.n	800399c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	60fb      	str	r3, [r7, #12]
    }
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	b2da      	uxtb	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	6978      	ldr	r0, [r7, #20]
 80039a2:	4798      	blx	r3
    }
 80039a4:	bf00      	nop
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	200001c0 	.word	0x200001c0

080039b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039b8:	f107 0308 	add.w	r3, r7, #8
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f857 	bl	8003a70 <prvGetNextExpireTime>
 80039c2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4619      	mov	r1, r3
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f803 	bl	80039d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80039ce:	f000 f8d5 	bl	8003b7c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039d2:	e7f1      	b.n	80039b8 <prvTimerTask+0x8>

080039d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80039de:	f7ff fa99 	bl	8002f14 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f866 	bl	8003ab8 <prvSampleTimeNow>
 80039ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d130      	bne.n	8003a56 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <prvProcessTimerOrBlockTask+0x3c>
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d806      	bhi.n	8003a10 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a02:	f7ff fa95 	bl	8002f30 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff85 	bl	8003918 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a0e:	e024      	b.n	8003a5a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <prvProcessTimerOrBlockTask+0x90>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <prvProcessTimerOrBlockTask+0x50>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <prvProcessTimerOrBlockTask+0x52>
 8003a24:	2300      	movs	r3, #0
 8003a26:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <prvProcessTimerOrBlockTask+0x94>)
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7ff f8af 	bl	8002b98 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a3a:	f7ff fa79 	bl	8002f30 <xTaskResumeAll>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <prvProcessTimerOrBlockTask+0x98>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
    }
 8003a54:	e001      	b.n	8003a5a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a56:	f7ff fa6b 	bl	8002f30 <xTaskResumeAll>
    }
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200001c4 	.word	0x200001c4
 8003a68:	200001c8 	.word	0x200001c8
 8003a6c:	e000ed04 	.word	0xe000ed04

08003a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <prvGetNextExpireTime+0x44>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <prvGetNextExpireTime+0x16>
 8003a82:	2201      	movs	r2, #1
 8003a84:	e000      	b.n	8003a88 <prvGetNextExpireTime+0x18>
 8003a86:	2200      	movs	r2, #0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a94:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <prvGetNextExpireTime+0x44>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e001      	b.n	8003aa4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
    }
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	200001c0 	.word	0x200001c0

08003ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ac0:	f7ff fac4 	bl	800304c <xTaskGetTickCount>
 8003ac4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <prvSampleTimeNow+0x3c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d205      	bcs.n	8003adc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ad0:	f000 f91a 	bl	8003d08 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e002      	b.n	8003ae2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ae2:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <prvSampleTimeNow+0x3c>)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
    }
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200001d0 	.word	0x200001d0

08003af8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d812      	bhi.n	8003b44 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	1ad2      	subs	r2, r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e01b      	b.n	8003b6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <prvInsertTimerInActiveList+0x7c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f7fe fb4c 	bl	80021da <vListInsert>
 8003b42:	e012      	b.n	8003b6a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d206      	bcs.n	8003b5a <prvInsertTimerInActiveList+0x62>
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d302      	bcc.n	8003b5a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b54:	2301      	movs	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	e007      	b.n	8003b6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <prvInsertTimerInActiveList+0x80>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3304      	adds	r3, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fe fb38 	bl	80021da <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b6a:	697b      	ldr	r3, [r7, #20]
    }
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200001c4 	.word	0x200001c4
 8003b78:	200001c0 	.word	0x200001c0

08003b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08c      	sub	sp, #48	; 0x30
 8003b80:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b82:	e0ae      	b.n	8003ce2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f2c0 80aa 	blt.w	8003ce0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fb55 	bl	800224c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff87 	bl	8003ab8 <prvSampleTimeNow>
 8003baa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b09      	cmp	r3, #9
 8003bb0:	f200 8097 	bhi.w	8003ce2 <prvProcessReceivedCommands+0x166>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <prvProcessReceivedCommands+0x40>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003be5 	.word	0x08003be5
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003be5 	.word	0x08003be5
 8003bc8:	08003c59 	.word	0x08003c59
 8003bcc:	08003c6d 	.word	0x08003c6d
 8003bd0:	08003cb7 	.word	0x08003cb7
 8003bd4:	08003be5 	.word	0x08003be5
 8003bd8:	08003be5 	.word	0x08003be5
 8003bdc:	08003c59 	.word	0x08003c59
 8003be0:	08003c6d 	.word	0x08003c6d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	18d1      	adds	r1, r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c04:	f7ff ff78 	bl	8003af8 <prvInsertTimerInActiveList>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d069      	beq.n	8003ce2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c14:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d05e      	beq.n	8003ce2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	441a      	add	r2, r3
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2300      	movs	r3, #0
 8003c32:	2100      	movs	r1, #0
 8003c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c36:	f7ff fe21 	bl	800387c <xTimerGenericCommand>
 8003c3a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d14f      	bne.n	8003ce2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	61bb      	str	r3, [r7, #24]
    }
 8003c54:	bf00      	nop
 8003c56:	e7fe      	b.n	8003c56 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003c6a:	e03a      	b.n	8003ce2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	617b      	str	r3, [r7, #20]
    }
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	18d1      	adds	r1, r2, r3
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cb0:	f7ff ff22 	bl	8003af8 <prvInsertTimerInActiveList>
                        break;
 8003cb4:	e015      	b.n	8003ce2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d103      	bne.n	8003ccc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cc6:	f000 fbe9 	bl	800449c <vPortFree>
 8003cca:	e00a      	b.n	8003ce2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003cde:	e000      	b.n	8003ce2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ce0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <prvProcessReceivedCommands+0x188>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f107 0108 	add.w	r1, r7, #8
 8003cea:	2200      	movs	r2, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fd45 	bl	800277c <xQueueReceive>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f47f af45 	bne.w	8003b84 <prvProcessReceivedCommands+0x8>
        }
    }
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200001c8 	.word	0x200001c8

08003d08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d0e:	e048      	b.n	8003da2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d10:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <prvSwitchTimerLists+0xc0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d1a:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <prvSwitchTimerLists+0xc0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fa8f 	bl	800224c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d02e      	beq.n	8003da2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d90e      	bls.n	8003d74 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d62:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <prvSwitchTimerLists+0xc0>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f7fe fa34 	bl	80021da <vListInsert>
 8003d72:	e016      	b.n	8003da2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d74:	2300      	movs	r3, #0
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff fd7c 	bl	800387c <xTimerGenericCommand>
 8003d84:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	603b      	str	r3, [r7, #0]
    }
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <prvSwitchTimerLists+0xc0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1b1      	bne.n	8003d10 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <prvSwitchTimerLists+0xc0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <prvSwitchTimerLists+0xc4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <prvSwitchTimerLists+0xc0>)
 8003db8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003dba:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <prvSwitchTimerLists+0xc4>)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	6013      	str	r3, [r2, #0]
    }
 8003dc0:	bf00      	nop
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	200001c0 	.word	0x200001c0
 8003dcc:	200001c4 	.word	0x200001c4

08003dd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003dd4:	f000 f960 	bl	8004098 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <prvCheckForValidListAndQueue+0x54>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11d      	bne.n	8003e1c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003de0:	4811      	ldr	r0, [pc, #68]	; (8003e28 <prvCheckForValidListAndQueue+0x58>)
 8003de2:	f7fe f9a9 	bl	8002138 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003de6:	4811      	ldr	r0, [pc, #68]	; (8003e2c <prvCheckForValidListAndQueue+0x5c>)
 8003de8:	f7fe f9a6 	bl	8002138 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <prvCheckForValidListAndQueue+0x60>)
 8003dee:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <prvCheckForValidListAndQueue+0x58>)
 8003df0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <prvCheckForValidListAndQueue+0x64>)
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <prvCheckForValidListAndQueue+0x5c>)
 8003df6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003df8:	2200      	movs	r2, #0
 8003dfa:	210c      	movs	r1, #12
 8003dfc:	200a      	movs	r0, #10
 8003dfe:	f7fe faaa 	bl	8002356 <xQueueGenericCreate>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4a07      	ldr	r2, [pc, #28]	; (8003e24 <prvCheckForValidListAndQueue+0x54>)
 8003e06:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <prvCheckForValidListAndQueue+0x54>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <prvCheckForValidListAndQueue+0x54>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4908      	ldr	r1, [pc, #32]	; (8003e38 <prvCheckForValidListAndQueue+0x68>)
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fe94 	bl	8002b44 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e1c:	f000 f96c 	bl	80040f8 <vPortExitCritical>
    }
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	200001c8 	.word	0x200001c8
 8003e28:	20000198 	.word	0x20000198
 8003e2c:	200001ac 	.word	0x200001ac
 8003e30:	200001c0 	.word	0x200001c0
 8003e34:	200001c4 	.word	0x200001c4
 8003e38:	08005684 	.word	0x08005684

08003e3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3b04      	subs	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3b04      	subs	r3, #4
 8003e5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 0201 	bic.w	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3b04      	subs	r3, #4
 8003e6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003e6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <pxPortInitialiseStack+0x64>)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3b14      	subs	r3, #20
 8003e76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3b04      	subs	r3, #4
 8003e82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f06f 0202 	mvn.w	r2, #2
 8003e8a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3b20      	subs	r3, #32
 8003e90:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	08003ea5 	.word	0x08003ea5

08003ea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <prvTaskExitError+0x54>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb6:	d00a      	beq.n	8003ece <prvTaskExitError+0x2a>
        __asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	60fb      	str	r3, [r7, #12]
    }
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <prvTaskExitError+0x28>
        __asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60bb      	str	r3, [r7, #8]
    }
 8003ee0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003ee2:	bf00      	nop
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0fc      	beq.n	8003ee4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	20000010 	.word	0x20000010
 8003efc:	00000000 	.word	0x00000000

08003f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <pxCurrentTCBConst2>)
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	6808      	ldr	r0, [r1, #0]
 8003f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0a:	f380 8809 	msr	PSP, r0
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f04f 0000 	mov.w	r0, #0
 8003f16:	f380 8811 	msr	BASEPRI, r0
 8003f1a:	4770      	bx	lr
 8003f1c:	f3af 8000 	nop.w

08003f20 <pxCurrentTCBConst2>:
 8003f20:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop

08003f28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f28:	4808      	ldr	r0, [pc, #32]	; (8003f4c <prvPortStartFirstTask+0x24>)
 8003f2a:	6800      	ldr	r0, [r0, #0]
 8003f2c:	6800      	ldr	r0, [r0, #0]
 8003f2e:	f380 8808 	msr	MSP, r0
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f380 8814 	msr	CONTROL, r0
 8003f3a:	b662      	cpsie	i
 8003f3c:	b661      	cpsie	f
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	df00      	svc	0
 8003f48:	bf00      	nop
 8003f4a:	0000      	.short	0x0000
 8003f4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop

08003f54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f5a:	4b46      	ldr	r3, [pc, #280]	; (8004074 <xPortStartScheduler+0x120>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a46      	ldr	r2, [pc, #280]	; (8004078 <xPortStartScheduler+0x124>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10a      	bne.n	8003f7a <xPortStartScheduler+0x26>
        __asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	613b      	str	r3, [r7, #16]
    }
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	; (8004074 <xPortStartScheduler+0x120>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a3f      	ldr	r2, [pc, #252]	; (800407c <xPortStartScheduler+0x128>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10a      	bne.n	8003f9a <xPortStartScheduler+0x46>
        __asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	60fb      	str	r3, [r7, #12]
    }
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f9a:	4b39      	ldr	r3, [pc, #228]	; (8004080 <xPortStartScheduler+0x12c>)
 8003f9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	4b31      	ldr	r3, [pc, #196]	; (8004084 <xPortStartScheduler+0x130>)
 8003fc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <xPortStartScheduler+0x134>)
 8003fc4:	2207      	movs	r2, #7
 8003fc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fc8:	e009      	b.n	8003fde <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003fca:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <xPortStartScheduler+0x134>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	4a2d      	ldr	r2, [pc, #180]	; (8004088 <xPortStartScheduler+0x134>)
 8003fd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b80      	cmp	r3, #128	; 0x80
 8003fe8:	d0ef      	beq.n	8003fca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fea:	4b27      	ldr	r3, [pc, #156]	; (8004088 <xPortStartScheduler+0x134>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1c3 0307 	rsb	r3, r3, #7
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d00a      	beq.n	800400c <xPortStartScheduler+0xb8>
        __asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	60bb      	str	r3, [r7, #8]
    }
 8004008:	bf00      	nop
 800400a:	e7fe      	b.n	800400a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <xPortStartScheduler+0x134>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <xPortStartScheduler+0x134>)
 8004014:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <xPortStartScheduler+0x134>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800401e:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <xPortStartScheduler+0x134>)
 8004020:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <xPortStartScheduler+0x138>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <xPortStartScheduler+0x138>)
 8004030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004034:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <xPortStartScheduler+0x138>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a14      	ldr	r2, [pc, #80]	; (800408c <xPortStartScheduler+0x138>)
 800403c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004042:	f000 f8db 	bl	80041fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <xPortStartScheduler+0x13c>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800404c:	f000 f8fa 	bl	8004244 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <xPortStartScheduler+0x140>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <xPortStartScheduler+0x140>)
 8004056:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800405a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800405c:	f7ff ff64 	bl	8003f28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004060:	f7ff f89a 	bl	8003198 <vTaskSwitchContext>
    prvTaskExitError();
 8004064:	f7ff ff1e 	bl	8003ea4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	e000ed00 	.word	0xe000ed00
 8004078:	410fc271 	.word	0x410fc271
 800407c:	410fc270 	.word	0x410fc270
 8004080:	e000e400 	.word	0xe000e400
 8004084:	200001d4 	.word	0x200001d4
 8004088:	200001d8 	.word	0x200001d8
 800408c:	e000ed20 	.word	0xe000ed20
 8004090:	20000010 	.word	0x20000010
 8004094:	e000ef34 	.word	0xe000ef34

08004098 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
        __asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	607b      	str	r3, [r7, #4]
    }
 80040b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <vPortEnterCritical+0x58>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <vPortEnterCritical+0x58>)
 80040ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <vPortEnterCritical+0x58>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10f      	bne.n	80040e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <vPortEnterCritical+0x5c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	603b      	str	r3, [r7, #0]
    }
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <vPortEnterCritical+0x4a>
    }
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	20000010 	.word	0x20000010
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040fe:	4b12      	ldr	r3, [pc, #72]	; (8004148 <vPortExitCritical+0x50>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <vPortExitCritical+0x24>
        __asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	607b      	str	r3, [r7, #4]
    }
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <vPortExitCritical+0x50>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3b01      	subs	r3, #1
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <vPortExitCritical+0x50>)
 8004124:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <vPortExitCritical+0x50>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <vPortExitCritical+0x42>
 800412e:	2300      	movs	r3, #0
 8004130:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f383 8811 	msr	BASEPRI, r3
    }
 8004138:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000010 	.word	0x20000010
 800414c:	00000000 	.word	0x00000000

08004150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004150:	f3ef 8009 	mrs	r0, PSP
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <pxCurrentTCBConst>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	f01e 0f10 	tst.w	lr, #16
 8004160:	bf08      	it	eq
 8004162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416a:	6010      	str	r0, [r2, #0]
 800416c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004174:	f380 8811 	msr	BASEPRI, r0
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f7ff f80a 	bl	8003198 <vTaskSwitchContext>
 8004184:	f04f 0000 	mov.w	r0, #0
 8004188:	f380 8811 	msr	BASEPRI, r0
 800418c:	bc09      	pop	{r0, r3}
 800418e:	6819      	ldr	r1, [r3, #0]
 8004190:	6808      	ldr	r0, [r1, #0]
 8004192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004196:	f01e 0f10 	tst.w	lr, #16
 800419a:	bf08      	it	eq
 800419c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041a0:	f380 8809 	msr	PSP, r0
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	f3af 8000 	nop.w

080041b0 <pxCurrentTCBConst>:
 80041b0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop

080041b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
        __asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	607b      	str	r3, [r7, #4]
    }
 80041d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041d2:	f7fe ff4b 	bl	800306c <xTaskIncrementTick>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <SysTick_Handler+0x40>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	2300      	movs	r3, #0
 80041e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f383 8811 	msr	BASEPRI, r3
    }
 80041ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <vPortSetupTimerInterrupt+0x34>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <vPortSetupTimerInterrupt+0x38>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <vPortSetupTimerInterrupt+0x3c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0a      	ldr	r2, [pc, #40]	; (800423c <vPortSetupTimerInterrupt+0x40>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	099b      	lsrs	r3, r3, #6
 8004218:	4a09      	ldr	r2, [pc, #36]	; (8004240 <vPortSetupTimerInterrupt+0x44>)
 800421a:	3b01      	subs	r3, #1
 800421c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <vPortSetupTimerInterrupt+0x34>)
 8004220:	2207      	movs	r2, #7
 8004222:	601a      	str	r2, [r3, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000e010 	.word	0xe000e010
 8004234:	e000e018 	.word	0xe000e018
 8004238:	20000000 	.word	0x20000000
 800423c:	10624dd3 	.word	0x10624dd3
 8004240:	e000e014 	.word	0xe000e014

08004244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004254 <vPortEnableVFP+0x10>
 8004248:	6801      	ldr	r1, [r0, #0]
 800424a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800424e:	6001      	str	r1, [r0, #0]
 8004250:	4770      	bx	lr
 8004252:	0000      	.short	0x0000
 8004254:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop

0800425c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004262:	f3ef 8305 	mrs	r3, IPSR
 8004266:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d914      	bls.n	8004298 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <vPortValidateInterruptPriority+0x70>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <vPortValidateInterruptPriority+0x74>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	7afa      	ldrb	r2, [r7, #11]
 800427e:	429a      	cmp	r2, r3
 8004280:	d20a      	bcs.n	8004298 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
    }
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <vPortValidateInterruptPriority+0x78>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <vPortValidateInterruptPriority+0x7c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d90a      	bls.n	80042be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	603b      	str	r3, [r7, #0]
    }
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <vPortValidateInterruptPriority+0x60>
    }
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000e3f0 	.word	0xe000e3f0
 80042d0:	200001d4 	.word	0x200001d4
 80042d4:	e000ed0c 	.word	0xe000ed0c
 80042d8:	200001d8 	.word	0x200001d8

080042dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80042e8:	f7fe fe14 	bl	8002f14 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80042ec:	4b65      	ldr	r3, [pc, #404]	; (8004484 <pvPortMalloc+0x1a8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80042f4:	f000 f934 	bl	8004560 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042f8:	4b63      	ldr	r3, [pc, #396]	; (8004488 <pvPortMalloc+0x1ac>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4013      	ands	r3, r2
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 80a7 	bne.w	8004454 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d02d      	beq.n	8004368 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800430c:	2208      	movs	r2, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d227      	bcs.n	8004368 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004318:	2208      	movs	r2, #8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	2b00      	cmp	r3, #0
 8004328:	d021      	beq.n	800436e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f023 0307 	bic.w	r3, r3, #7
 8004330:	3308      	adds	r3, #8
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d214      	bcs.n	8004362 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f023 0307 	bic.w	r3, r3, #7
 800433e:	3308      	adds	r3, #8
 8004340:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	2b00      	cmp	r3, #0
 800434a:	d010      	beq.n	800436e <pvPortMalloc+0x92>
        __asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	617b      	str	r3, [r7, #20]
    }
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004366:	e002      	b.n	800436e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	e000      	b.n	8004370 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800436e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d06e      	beq.n	8004454 <pvPortMalloc+0x178>
 8004376:	4b45      	ldr	r3, [pc, #276]	; (800448c <pvPortMalloc+0x1b0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d869      	bhi.n	8004454 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004380:	4b43      	ldr	r3, [pc, #268]	; (8004490 <pvPortMalloc+0x1b4>)
 8004382:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004384:	4b42      	ldr	r3, [pc, #264]	; (8004490 <pvPortMalloc+0x1b4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800438a:	e004      	b.n	8004396 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d903      	bls.n	80043a8 <pvPortMalloc+0xcc>
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f1      	bne.n	800438c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043a8:	4b36      	ldr	r3, [pc, #216]	; (8004484 <pvPortMalloc+0x1a8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d050      	beq.n	8004454 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2208      	movs	r2, #8
 80043b8:	4413      	add	r3, r2
 80043ba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	2308      	movs	r3, #8
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d91f      	bls.n	8004414 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <pvPortMalloc+0x120>
        __asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	613b      	str	r3, [r7, #16]
    }
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	1ad2      	subs	r2, r2, r3
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800440e:	69b8      	ldr	r0, [r7, #24]
 8004410:	f000 f908 	bl	8004624 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <pvPortMalloc+0x1b0>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	4a1b      	ldr	r2, [pc, #108]	; (800448c <pvPortMalloc+0x1b0>)
 8004420:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004422:	4b1a      	ldr	r3, [pc, #104]	; (800448c <pvPortMalloc+0x1b0>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <pvPortMalloc+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d203      	bcs.n	8004436 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800442e:	4b17      	ldr	r3, [pc, #92]	; (800448c <pvPortMalloc+0x1b0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a18      	ldr	r2, [pc, #96]	; (8004494 <pvPortMalloc+0x1b8>)
 8004434:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <pvPortMalloc+0x1ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	431a      	orrs	r2, r3
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800444a:	4b13      	ldr	r3, [pc, #76]	; (8004498 <pvPortMalloc+0x1bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3301      	adds	r3, #1
 8004450:	4a11      	ldr	r2, [pc, #68]	; (8004498 <pvPortMalloc+0x1bc>)
 8004452:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004454:	f7fe fd6c 	bl	8002f30 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <pvPortMalloc+0x19c>
        __asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	60fb      	str	r3, [r7, #12]
    }
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <pvPortMalloc+0x19a>
    return pvReturn;
 8004478:	69fb      	ldr	r3, [r7, #28]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20012de4 	.word	0x20012de4
 8004488:	20012df8 	.word	0x20012df8
 800448c:	20012de8 	.word	0x20012de8
 8004490:	20012ddc 	.word	0x20012ddc
 8004494:	20012dec 	.word	0x20012dec
 8004498:	20012df0 	.word	0x20012df0

0800449c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d04d      	beq.n	800454a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80044ae:	2308      	movs	r3, #8
 80044b0:	425b      	negs	r3, r3
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4413      	add	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	4b24      	ldr	r3, [pc, #144]	; (8004554 <vPortFree+0xb8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10a      	bne.n	80044e0 <vPortFree+0x44>
        __asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60fb      	str	r3, [r7, #12]
    }
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <vPortFree+0x62>
        __asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60bb      	str	r3, [r7, #8]
    }
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	4b14      	ldr	r3, [pc, #80]	; (8004554 <vPortFree+0xb8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01e      	beq.n	800454a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d11a      	bne.n	800454a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <vPortFree+0xb8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	43db      	mvns	r3, r3
 800451e:	401a      	ands	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004524:	f7fe fcf6 	bl	8002f14 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <vPortFree+0xbc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4413      	add	r3, r2
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <vPortFree+0xbc>)
 8004534:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004536:	6938      	ldr	r0, [r7, #16]
 8004538:	f000 f874 	bl	8004624 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800453c:	4b07      	ldr	r3, [pc, #28]	; (800455c <vPortFree+0xc0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	4a06      	ldr	r2, [pc, #24]	; (800455c <vPortFree+0xc0>)
 8004544:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004546:	f7fe fcf3 	bl	8002f30 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20012df8 	.word	0x20012df8
 8004558:	20012de8 	.word	0x20012de8
 800455c:	20012df4 	.word	0x20012df4

08004560 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004566:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800456a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <prvHeapInit+0xac>)
 800456e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3307      	adds	r3, #7
 800457e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0307 	bic.w	r3, r3, #7
 8004586:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	4a1f      	ldr	r2, [pc, #124]	; (800460c <prvHeapInit+0xac>)
 8004590:	4413      	add	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004598:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <prvHeapInit+0xb0>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800459e:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <prvHeapInit+0xb0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	4413      	add	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80045ac:	2208      	movs	r2, #8
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0307 	bic.w	r3, r3, #7
 80045ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <prvHeapInit+0xb4>)
 80045c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045c2:	4b14      	ldr	r3, [pc, #80]	; (8004614 <prvHeapInit+0xb4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <prvHeapInit+0xb4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <prvHeapInit+0xb4>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <prvHeapInit+0xb8>)
 80045ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a09      	ldr	r2, [pc, #36]	; (800461c <prvHeapInit+0xbc>)
 80045f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <prvHeapInit+0xc0>)
 80045fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045fe:	601a      	str	r2, [r3, #0]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	200001dc 	.word	0x200001dc
 8004610:	20012ddc 	.word	0x20012ddc
 8004614:	20012de4 	.word	0x20012de4
 8004618:	20012dec 	.word	0x20012dec
 800461c:	20012de8 	.word	0x20012de8
 8004620:	20012df8 	.word	0x20012df8

08004624 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800462c:	4b28      	ldr	r3, [pc, #160]	; (80046d0 <prvInsertBlockIntoFreeList+0xac>)
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e002      	b.n	8004638 <prvInsertBlockIntoFreeList+0x14>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d8f7      	bhi.n	8004632 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	4413      	add	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d108      	bne.n	8004666 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	441a      	add	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	441a      	add	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d118      	bne.n	80046ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <prvInsertBlockIntoFreeList+0xb0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d00d      	beq.n	80046a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	441a      	add	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e008      	b.n	80046b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046a2:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <prvInsertBlockIntoFreeList+0xb0>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e003      	b.n	80046b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d002      	beq.n	80046c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20012ddc 	.word	0x20012ddc
 80046d4:	20012de4 	.word	0x20012de4

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4d0d      	ldr	r5, [pc, #52]	; (8004710 <__libc_init_array+0x38>)
 80046dc:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046de:	1b64      	subs	r4, r4, r5
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	2600      	movs	r6, #0
 80046e4:	42a6      	cmp	r6, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	4d0b      	ldr	r5, [pc, #44]	; (8004718 <__libc_init_array+0x40>)
 80046ea:	4c0c      	ldr	r4, [pc, #48]	; (800471c <__libc_init_array+0x44>)
 80046ec:	f000 ff92 	bl	8005614 <_init>
 80046f0:	1b64      	subs	r4, r4, r5
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	2600      	movs	r6, #0
 80046f6:	42a6      	cmp	r6, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004700:	4798      	blx	r3
 8004702:	3601      	adds	r6, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f855 3b04 	ldr.w	r3, [r5], #4
 800470a:	4798      	blx	r3
 800470c:	3601      	adds	r6, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	08005744 	.word	0x08005744
 8004714:	08005744 	.word	0x08005744
 8004718:	08005744 	.word	0x08005744
 800471c:	08005748 	.word	0x08005748

08004720 <memcpy>:
 8004720:	440a      	add	r2, r1
 8004722:	4291      	cmp	r1, r2
 8004724:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004728:	d100      	bne.n	800472c <memcpy+0xc>
 800472a:	4770      	bx	lr
 800472c:	b510      	push	{r4, lr}
 800472e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004736:	4291      	cmp	r1, r2
 8004738:	d1f9      	bne.n	800472e <memcpy+0xe>
 800473a:	bd10      	pop	{r4, pc}

0800473c <memset>:
 800473c:	4402      	add	r2, r0
 800473e:	4603      	mov	r3, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	f803 1b01 	strb.w	r1, [r3], #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <iprintf>:
 800474c:	b40f      	push	{r0, r1, r2, r3}
 800474e:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <iprintf+0x2c>)
 8004750:	b513      	push	{r0, r1, r4, lr}
 8004752:	681c      	ldr	r4, [r3, #0]
 8004754:	b124      	cbz	r4, 8004760 <iprintf+0x14>
 8004756:	69a3      	ldr	r3, [r4, #24]
 8004758:	b913      	cbnz	r3, 8004760 <iprintf+0x14>
 800475a:	4620      	mov	r0, r4
 800475c:	f000 f866 	bl	800482c <__sinit>
 8004760:	ab05      	add	r3, sp, #20
 8004762:	9a04      	ldr	r2, [sp, #16]
 8004764:	68a1      	ldr	r1, [r4, #8]
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	4620      	mov	r0, r4
 800476a:	f000 f983 	bl	8004a74 <_vfiprintf_r>
 800476e:	b002      	add	sp, #8
 8004770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004774:	b004      	add	sp, #16
 8004776:	4770      	bx	lr
 8004778:	20000014 	.word	0x20000014

0800477c <std>:
 800477c:	2300      	movs	r3, #0
 800477e:	b510      	push	{r4, lr}
 8004780:	4604      	mov	r4, r0
 8004782:	e9c0 3300 	strd	r3, r3, [r0]
 8004786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800478a:	6083      	str	r3, [r0, #8]
 800478c:	8181      	strh	r1, [r0, #12]
 800478e:	6643      	str	r3, [r0, #100]	; 0x64
 8004790:	81c2      	strh	r2, [r0, #14]
 8004792:	6183      	str	r3, [r0, #24]
 8004794:	4619      	mov	r1, r3
 8004796:	2208      	movs	r2, #8
 8004798:	305c      	adds	r0, #92	; 0x5c
 800479a:	f7ff ffcf 	bl	800473c <memset>
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <std+0x38>)
 80047a0:	6263      	str	r3, [r4, #36]	; 0x24
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <std+0x3c>)
 80047a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <std+0x40>)
 80047a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047aa:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <std+0x44>)
 80047ac:	6224      	str	r4, [r4, #32]
 80047ae:	6323      	str	r3, [r4, #48]	; 0x30
 80047b0:	bd10      	pop	{r4, pc}
 80047b2:	bf00      	nop
 80047b4:	0800501d 	.word	0x0800501d
 80047b8:	0800503f 	.word	0x0800503f
 80047bc:	08005077 	.word	0x08005077
 80047c0:	0800509b 	.word	0x0800509b

080047c4 <_cleanup_r>:
 80047c4:	4901      	ldr	r1, [pc, #4]	; (80047cc <_cleanup_r+0x8>)
 80047c6:	f000 b8af 	b.w	8004928 <_fwalk_reent>
 80047ca:	bf00      	nop
 80047cc:	08005375 	.word	0x08005375

080047d0 <__sfmoreglue>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	1e4a      	subs	r2, r1, #1
 80047d4:	2568      	movs	r5, #104	; 0x68
 80047d6:	4355      	muls	r5, r2
 80047d8:	460e      	mov	r6, r1
 80047da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047de:	f000 f8c5 	bl	800496c <_malloc_r>
 80047e2:	4604      	mov	r4, r0
 80047e4:	b140      	cbz	r0, 80047f8 <__sfmoreglue+0x28>
 80047e6:	2100      	movs	r1, #0
 80047e8:	e9c0 1600 	strd	r1, r6, [r0]
 80047ec:	300c      	adds	r0, #12
 80047ee:	60a0      	str	r0, [r4, #8]
 80047f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047f4:	f7ff ffa2 	bl	800473c <memset>
 80047f8:	4620      	mov	r0, r4
 80047fa:	bd70      	pop	{r4, r5, r6, pc}

080047fc <__sfp_lock_acquire>:
 80047fc:	4801      	ldr	r0, [pc, #4]	; (8004804 <__sfp_lock_acquire+0x8>)
 80047fe:	f000 b8b3 	b.w	8004968 <__retarget_lock_acquire_recursive>
 8004802:	bf00      	nop
 8004804:	20012e9c 	.word	0x20012e9c

08004808 <__sfp_lock_release>:
 8004808:	4801      	ldr	r0, [pc, #4]	; (8004810 <__sfp_lock_release+0x8>)
 800480a:	f000 b8ae 	b.w	800496a <__retarget_lock_release_recursive>
 800480e:	bf00      	nop
 8004810:	20012e9c 	.word	0x20012e9c

08004814 <__sinit_lock_acquire>:
 8004814:	4801      	ldr	r0, [pc, #4]	; (800481c <__sinit_lock_acquire+0x8>)
 8004816:	f000 b8a7 	b.w	8004968 <__retarget_lock_acquire_recursive>
 800481a:	bf00      	nop
 800481c:	20012e97 	.word	0x20012e97

08004820 <__sinit_lock_release>:
 8004820:	4801      	ldr	r0, [pc, #4]	; (8004828 <__sinit_lock_release+0x8>)
 8004822:	f000 b8a2 	b.w	800496a <__retarget_lock_release_recursive>
 8004826:	bf00      	nop
 8004828:	20012e97 	.word	0x20012e97

0800482c <__sinit>:
 800482c:	b510      	push	{r4, lr}
 800482e:	4604      	mov	r4, r0
 8004830:	f7ff fff0 	bl	8004814 <__sinit_lock_acquire>
 8004834:	69a3      	ldr	r3, [r4, #24]
 8004836:	b11b      	cbz	r3, 8004840 <__sinit+0x14>
 8004838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483c:	f7ff bff0 	b.w	8004820 <__sinit_lock_release>
 8004840:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004844:	6523      	str	r3, [r4, #80]	; 0x50
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <__sinit+0x68>)
 8004848:	4a13      	ldr	r2, [pc, #76]	; (8004898 <__sinit+0x6c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	62a2      	str	r2, [r4, #40]	; 0x28
 800484e:	42a3      	cmp	r3, r4
 8004850:	bf04      	itt	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	61a3      	streq	r3, [r4, #24]
 8004856:	4620      	mov	r0, r4
 8004858:	f000 f820 	bl	800489c <__sfp>
 800485c:	6060      	str	r0, [r4, #4]
 800485e:	4620      	mov	r0, r4
 8004860:	f000 f81c 	bl	800489c <__sfp>
 8004864:	60a0      	str	r0, [r4, #8]
 8004866:	4620      	mov	r0, r4
 8004868:	f000 f818 	bl	800489c <__sfp>
 800486c:	2200      	movs	r2, #0
 800486e:	60e0      	str	r0, [r4, #12]
 8004870:	2104      	movs	r1, #4
 8004872:	6860      	ldr	r0, [r4, #4]
 8004874:	f7ff ff82 	bl	800477c <std>
 8004878:	68a0      	ldr	r0, [r4, #8]
 800487a:	2201      	movs	r2, #1
 800487c:	2109      	movs	r1, #9
 800487e:	f7ff ff7d 	bl	800477c <std>
 8004882:	68e0      	ldr	r0, [r4, #12]
 8004884:	2202      	movs	r2, #2
 8004886:	2112      	movs	r1, #18
 8004888:	f7ff ff78 	bl	800477c <std>
 800488c:	2301      	movs	r3, #1
 800488e:	61a3      	str	r3, [r4, #24]
 8004890:	e7d2      	b.n	8004838 <__sinit+0xc>
 8004892:	bf00      	nop
 8004894:	080056a4 	.word	0x080056a4
 8004898:	080047c5 	.word	0x080047c5

0800489c <__sfp>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	4607      	mov	r7, r0
 80048a0:	f7ff ffac 	bl	80047fc <__sfp_lock_acquire>
 80048a4:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <__sfp+0x84>)
 80048a6:	681e      	ldr	r6, [r3, #0]
 80048a8:	69b3      	ldr	r3, [r6, #24]
 80048aa:	b913      	cbnz	r3, 80048b2 <__sfp+0x16>
 80048ac:	4630      	mov	r0, r6
 80048ae:	f7ff ffbd 	bl	800482c <__sinit>
 80048b2:	3648      	adds	r6, #72	; 0x48
 80048b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	d503      	bpl.n	80048c4 <__sfp+0x28>
 80048bc:	6833      	ldr	r3, [r6, #0]
 80048be:	b30b      	cbz	r3, 8004904 <__sfp+0x68>
 80048c0:	6836      	ldr	r6, [r6, #0]
 80048c2:	e7f7      	b.n	80048b4 <__sfp+0x18>
 80048c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048c8:	b9d5      	cbnz	r5, 8004900 <__sfp+0x64>
 80048ca:	4b16      	ldr	r3, [pc, #88]	; (8004924 <__sfp+0x88>)
 80048cc:	60e3      	str	r3, [r4, #12]
 80048ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048d2:	6665      	str	r5, [r4, #100]	; 0x64
 80048d4:	f000 f847 	bl	8004966 <__retarget_lock_init_recursive>
 80048d8:	f7ff ff96 	bl	8004808 <__sfp_lock_release>
 80048dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048e4:	6025      	str	r5, [r4, #0]
 80048e6:	61a5      	str	r5, [r4, #24]
 80048e8:	2208      	movs	r2, #8
 80048ea:	4629      	mov	r1, r5
 80048ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048f0:	f7ff ff24 	bl	800473c <memset>
 80048f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048fc:	4620      	mov	r0, r4
 80048fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004900:	3468      	adds	r4, #104	; 0x68
 8004902:	e7d9      	b.n	80048b8 <__sfp+0x1c>
 8004904:	2104      	movs	r1, #4
 8004906:	4638      	mov	r0, r7
 8004908:	f7ff ff62 	bl	80047d0 <__sfmoreglue>
 800490c:	4604      	mov	r4, r0
 800490e:	6030      	str	r0, [r6, #0]
 8004910:	2800      	cmp	r0, #0
 8004912:	d1d5      	bne.n	80048c0 <__sfp+0x24>
 8004914:	f7ff ff78 	bl	8004808 <__sfp_lock_release>
 8004918:	230c      	movs	r3, #12
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	e7ee      	b.n	80048fc <__sfp+0x60>
 800491e:	bf00      	nop
 8004920:	080056a4 	.word	0x080056a4
 8004924:	ffff0001 	.word	0xffff0001

08004928 <_fwalk_reent>:
 8004928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800492c:	4606      	mov	r6, r0
 800492e:	4688      	mov	r8, r1
 8004930:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004934:	2700      	movs	r7, #0
 8004936:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800493a:	f1b9 0901 	subs.w	r9, r9, #1
 800493e:	d505      	bpl.n	800494c <_fwalk_reent+0x24>
 8004940:	6824      	ldr	r4, [r4, #0]
 8004942:	2c00      	cmp	r4, #0
 8004944:	d1f7      	bne.n	8004936 <_fwalk_reent+0xe>
 8004946:	4638      	mov	r0, r7
 8004948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800494c:	89ab      	ldrh	r3, [r5, #12]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d907      	bls.n	8004962 <_fwalk_reent+0x3a>
 8004952:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004956:	3301      	adds	r3, #1
 8004958:	d003      	beq.n	8004962 <_fwalk_reent+0x3a>
 800495a:	4629      	mov	r1, r5
 800495c:	4630      	mov	r0, r6
 800495e:	47c0      	blx	r8
 8004960:	4307      	orrs	r7, r0
 8004962:	3568      	adds	r5, #104	; 0x68
 8004964:	e7e9      	b.n	800493a <_fwalk_reent+0x12>

08004966 <__retarget_lock_init_recursive>:
 8004966:	4770      	bx	lr

08004968 <__retarget_lock_acquire_recursive>:
 8004968:	4770      	bx	lr

0800496a <__retarget_lock_release_recursive>:
 800496a:	4770      	bx	lr

0800496c <_malloc_r>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	1ccd      	adds	r5, r1, #3
 8004970:	f025 0503 	bic.w	r5, r5, #3
 8004974:	3508      	adds	r5, #8
 8004976:	2d0c      	cmp	r5, #12
 8004978:	bf38      	it	cc
 800497a:	250c      	movcc	r5, #12
 800497c:	2d00      	cmp	r5, #0
 800497e:	4606      	mov	r6, r0
 8004980:	db01      	blt.n	8004986 <_malloc_r+0x1a>
 8004982:	42a9      	cmp	r1, r5
 8004984:	d903      	bls.n	800498e <_malloc_r+0x22>
 8004986:	230c      	movs	r3, #12
 8004988:	6033      	str	r3, [r6, #0]
 800498a:	2000      	movs	r0, #0
 800498c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800498e:	f000 fda3 	bl	80054d8 <__malloc_lock>
 8004992:	4921      	ldr	r1, [pc, #132]	; (8004a18 <_malloc_r+0xac>)
 8004994:	680a      	ldr	r2, [r1, #0]
 8004996:	4614      	mov	r4, r2
 8004998:	b99c      	cbnz	r4, 80049c2 <_malloc_r+0x56>
 800499a:	4f20      	ldr	r7, [pc, #128]	; (8004a1c <_malloc_r+0xb0>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	b923      	cbnz	r3, 80049aa <_malloc_r+0x3e>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4630      	mov	r0, r6
 80049a4:	f000 fb2a 	bl	8004ffc <_sbrk_r>
 80049a8:	6038      	str	r0, [r7, #0]
 80049aa:	4629      	mov	r1, r5
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 fb25 	bl	8004ffc <_sbrk_r>
 80049b2:	1c43      	adds	r3, r0, #1
 80049b4:	d123      	bne.n	80049fe <_malloc_r+0x92>
 80049b6:	230c      	movs	r3, #12
 80049b8:	6033      	str	r3, [r6, #0]
 80049ba:	4630      	mov	r0, r6
 80049bc:	f000 fd92 	bl	80054e4 <__malloc_unlock>
 80049c0:	e7e3      	b.n	800498a <_malloc_r+0x1e>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	1b5b      	subs	r3, r3, r5
 80049c6:	d417      	bmi.n	80049f8 <_malloc_r+0x8c>
 80049c8:	2b0b      	cmp	r3, #11
 80049ca:	d903      	bls.n	80049d4 <_malloc_r+0x68>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	441c      	add	r4, r3
 80049d0:	6025      	str	r5, [r4, #0]
 80049d2:	e004      	b.n	80049de <_malloc_r+0x72>
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	42a2      	cmp	r2, r4
 80049d8:	bf0c      	ite	eq
 80049da:	600b      	streq	r3, [r1, #0]
 80049dc:	6053      	strne	r3, [r2, #4]
 80049de:	4630      	mov	r0, r6
 80049e0:	f000 fd80 	bl	80054e4 <__malloc_unlock>
 80049e4:	f104 000b 	add.w	r0, r4, #11
 80049e8:	1d23      	adds	r3, r4, #4
 80049ea:	f020 0007 	bic.w	r0, r0, #7
 80049ee:	1ac2      	subs	r2, r0, r3
 80049f0:	d0cc      	beq.n	800498c <_malloc_r+0x20>
 80049f2:	1a1b      	subs	r3, r3, r0
 80049f4:	50a3      	str	r3, [r4, r2]
 80049f6:	e7c9      	b.n	800498c <_malloc_r+0x20>
 80049f8:	4622      	mov	r2, r4
 80049fa:	6864      	ldr	r4, [r4, #4]
 80049fc:	e7cc      	b.n	8004998 <_malloc_r+0x2c>
 80049fe:	1cc4      	adds	r4, r0, #3
 8004a00:	f024 0403 	bic.w	r4, r4, #3
 8004a04:	42a0      	cmp	r0, r4
 8004a06:	d0e3      	beq.n	80049d0 <_malloc_r+0x64>
 8004a08:	1a21      	subs	r1, r4, r0
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f000 faf6 	bl	8004ffc <_sbrk_r>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d1dd      	bne.n	80049d0 <_malloc_r+0x64>
 8004a14:	e7cf      	b.n	80049b6 <_malloc_r+0x4a>
 8004a16:	bf00      	nop
 8004a18:	20012dfc 	.word	0x20012dfc
 8004a1c:	20012e00 	.word	0x20012e00

08004a20 <__sfputc_r>:
 8004a20:	6893      	ldr	r3, [r2, #8]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	b410      	push	{r4}
 8004a28:	6093      	str	r3, [r2, #8]
 8004a2a:	da08      	bge.n	8004a3e <__sfputc_r+0x1e>
 8004a2c:	6994      	ldr	r4, [r2, #24]
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	db01      	blt.n	8004a36 <__sfputc_r+0x16>
 8004a32:	290a      	cmp	r1, #10
 8004a34:	d103      	bne.n	8004a3e <__sfputc_r+0x1e>
 8004a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a3a:	f000 bb33 	b.w	80050a4 <__swbuf_r>
 8004a3e:	6813      	ldr	r3, [r2, #0]
 8004a40:	1c58      	adds	r0, r3, #1
 8004a42:	6010      	str	r0, [r2, #0]
 8004a44:	7019      	strb	r1, [r3, #0]
 8004a46:	4608      	mov	r0, r1
 8004a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <__sfputs_r>:
 8004a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a50:	4606      	mov	r6, r0
 8004a52:	460f      	mov	r7, r1
 8004a54:	4614      	mov	r4, r2
 8004a56:	18d5      	adds	r5, r2, r3
 8004a58:	42ac      	cmp	r4, r5
 8004a5a:	d101      	bne.n	8004a60 <__sfputs_r+0x12>
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e007      	b.n	8004a70 <__sfputs_r+0x22>
 8004a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a64:	463a      	mov	r2, r7
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff ffda 	bl	8004a20 <__sfputc_r>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d1f3      	bne.n	8004a58 <__sfputs_r+0xa>
 8004a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a74 <_vfiprintf_r>:
 8004a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a78:	460d      	mov	r5, r1
 8004a7a:	b09d      	sub	sp, #116	; 0x74
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	4698      	mov	r8, r3
 8004a80:	4606      	mov	r6, r0
 8004a82:	b118      	cbz	r0, 8004a8c <_vfiprintf_r+0x18>
 8004a84:	6983      	ldr	r3, [r0, #24]
 8004a86:	b90b      	cbnz	r3, 8004a8c <_vfiprintf_r+0x18>
 8004a88:	f7ff fed0 	bl	800482c <__sinit>
 8004a8c:	4b89      	ldr	r3, [pc, #548]	; (8004cb4 <_vfiprintf_r+0x240>)
 8004a8e:	429d      	cmp	r5, r3
 8004a90:	d11b      	bne.n	8004aca <_vfiprintf_r+0x56>
 8004a92:	6875      	ldr	r5, [r6, #4]
 8004a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a96:	07d9      	lsls	r1, r3, #31
 8004a98:	d405      	bmi.n	8004aa6 <_vfiprintf_r+0x32>
 8004a9a:	89ab      	ldrh	r3, [r5, #12]
 8004a9c:	059a      	lsls	r2, r3, #22
 8004a9e:	d402      	bmi.n	8004aa6 <_vfiprintf_r+0x32>
 8004aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aa2:	f7ff ff61 	bl	8004968 <__retarget_lock_acquire_recursive>
 8004aa6:	89ab      	ldrh	r3, [r5, #12]
 8004aa8:	071b      	lsls	r3, r3, #28
 8004aaa:	d501      	bpl.n	8004ab0 <_vfiprintf_r+0x3c>
 8004aac:	692b      	ldr	r3, [r5, #16]
 8004aae:	b9eb      	cbnz	r3, 8004aec <_vfiprintf_r+0x78>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f000 fb5a 	bl	800516c <__swsetup_r>
 8004ab8:	b1c0      	cbz	r0, 8004aec <_vfiprintf_r+0x78>
 8004aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004abc:	07dc      	lsls	r4, r3, #31
 8004abe:	d50e      	bpl.n	8004ade <_vfiprintf_r+0x6a>
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac4:	b01d      	add	sp, #116	; 0x74
 8004ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aca:	4b7b      	ldr	r3, [pc, #492]	; (8004cb8 <_vfiprintf_r+0x244>)
 8004acc:	429d      	cmp	r5, r3
 8004ace:	d101      	bne.n	8004ad4 <_vfiprintf_r+0x60>
 8004ad0:	68b5      	ldr	r5, [r6, #8]
 8004ad2:	e7df      	b.n	8004a94 <_vfiprintf_r+0x20>
 8004ad4:	4b79      	ldr	r3, [pc, #484]	; (8004cbc <_vfiprintf_r+0x248>)
 8004ad6:	429d      	cmp	r5, r3
 8004ad8:	bf08      	it	eq
 8004ada:	68f5      	ldreq	r5, [r6, #12]
 8004adc:	e7da      	b.n	8004a94 <_vfiprintf_r+0x20>
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	0598      	lsls	r0, r3, #22
 8004ae2:	d4ed      	bmi.n	8004ac0 <_vfiprintf_r+0x4c>
 8004ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ae6:	f7ff ff40 	bl	800496a <__retarget_lock_release_recursive>
 8004aea:	e7e9      	b.n	8004ac0 <_vfiprintf_r+0x4c>
 8004aec:	2300      	movs	r3, #0
 8004aee:	9309      	str	r3, [sp, #36]	; 0x24
 8004af0:	2320      	movs	r3, #32
 8004af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004afa:	2330      	movs	r3, #48	; 0x30
 8004afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004cc0 <_vfiprintf_r+0x24c>
 8004b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b04:	f04f 0901 	mov.w	r9, #1
 8004b08:	4623      	mov	r3, r4
 8004b0a:	469a      	mov	sl, r3
 8004b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b10:	b10a      	cbz	r2, 8004b16 <_vfiprintf_r+0xa2>
 8004b12:	2a25      	cmp	r2, #37	; 0x25
 8004b14:	d1f9      	bne.n	8004b0a <_vfiprintf_r+0x96>
 8004b16:	ebba 0b04 	subs.w	fp, sl, r4
 8004b1a:	d00b      	beq.n	8004b34 <_vfiprintf_r+0xc0>
 8004b1c:	465b      	mov	r3, fp
 8004b1e:	4622      	mov	r2, r4
 8004b20:	4629      	mov	r1, r5
 8004b22:	4630      	mov	r0, r6
 8004b24:	f7ff ff93 	bl	8004a4e <__sfputs_r>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	f000 80aa 	beq.w	8004c82 <_vfiprintf_r+0x20e>
 8004b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b30:	445a      	add	r2, fp
 8004b32:	9209      	str	r2, [sp, #36]	; 0x24
 8004b34:	f89a 3000 	ldrb.w	r3, [sl]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80a2 	beq.w	8004c82 <_vfiprintf_r+0x20e>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b48:	f10a 0a01 	add.w	sl, sl, #1
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	9307      	str	r3, [sp, #28]
 8004b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b54:	931a      	str	r3, [sp, #104]	; 0x68
 8004b56:	4654      	mov	r4, sl
 8004b58:	2205      	movs	r2, #5
 8004b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b5e:	4858      	ldr	r0, [pc, #352]	; (8004cc0 <_vfiprintf_r+0x24c>)
 8004b60:	f7fb fb36 	bl	80001d0 <memchr>
 8004b64:	9a04      	ldr	r2, [sp, #16]
 8004b66:	b9d8      	cbnz	r0, 8004ba0 <_vfiprintf_r+0x12c>
 8004b68:	06d1      	lsls	r1, r2, #27
 8004b6a:	bf44      	itt	mi
 8004b6c:	2320      	movmi	r3, #32
 8004b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b72:	0713      	lsls	r3, r2, #28
 8004b74:	bf44      	itt	mi
 8004b76:	232b      	movmi	r3, #43	; 0x2b
 8004b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b80:	2b2a      	cmp	r3, #42	; 0x2a
 8004b82:	d015      	beq.n	8004bb0 <_vfiprintf_r+0x13c>
 8004b84:	9a07      	ldr	r2, [sp, #28]
 8004b86:	4654      	mov	r4, sl
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f04f 0c0a 	mov.w	ip, #10
 8004b8e:	4621      	mov	r1, r4
 8004b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b94:	3b30      	subs	r3, #48	; 0x30
 8004b96:	2b09      	cmp	r3, #9
 8004b98:	d94e      	bls.n	8004c38 <_vfiprintf_r+0x1c4>
 8004b9a:	b1b0      	cbz	r0, 8004bca <_vfiprintf_r+0x156>
 8004b9c:	9207      	str	r2, [sp, #28]
 8004b9e:	e014      	b.n	8004bca <_vfiprintf_r+0x156>
 8004ba0:	eba0 0308 	sub.w	r3, r0, r8
 8004ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	9304      	str	r3, [sp, #16]
 8004bac:	46a2      	mov	sl, r4
 8004bae:	e7d2      	b.n	8004b56 <_vfiprintf_r+0xe2>
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	1d19      	adds	r1, r3, #4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	9103      	str	r1, [sp, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bfbb      	ittet	lt
 8004bbc:	425b      	neglt	r3, r3
 8004bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8004bc2:	9307      	strge	r3, [sp, #28]
 8004bc4:	9307      	strlt	r3, [sp, #28]
 8004bc6:	bfb8      	it	lt
 8004bc8:	9204      	strlt	r2, [sp, #16]
 8004bca:	7823      	ldrb	r3, [r4, #0]
 8004bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8004bce:	d10c      	bne.n	8004bea <_vfiprintf_r+0x176>
 8004bd0:	7863      	ldrb	r3, [r4, #1]
 8004bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd4:	d135      	bne.n	8004c42 <_vfiprintf_r+0x1ce>
 8004bd6:	9b03      	ldr	r3, [sp, #12]
 8004bd8:	1d1a      	adds	r2, r3, #4
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	9203      	str	r2, [sp, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bfb8      	it	lt
 8004be2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004be6:	3402      	adds	r4, #2
 8004be8:	9305      	str	r3, [sp, #20]
 8004bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004cd0 <_vfiprintf_r+0x25c>
 8004bee:	7821      	ldrb	r1, [r4, #0]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	4650      	mov	r0, sl
 8004bf4:	f7fb faec 	bl	80001d0 <memchr>
 8004bf8:	b140      	cbz	r0, 8004c0c <_vfiprintf_r+0x198>
 8004bfa:	2340      	movs	r3, #64	; 0x40
 8004bfc:	eba0 000a 	sub.w	r0, r0, sl
 8004c00:	fa03 f000 	lsl.w	r0, r3, r0
 8004c04:	9b04      	ldr	r3, [sp, #16]
 8004c06:	4303      	orrs	r3, r0
 8004c08:	3401      	adds	r4, #1
 8004c0a:	9304      	str	r3, [sp, #16]
 8004c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c10:	482c      	ldr	r0, [pc, #176]	; (8004cc4 <_vfiprintf_r+0x250>)
 8004c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c16:	2206      	movs	r2, #6
 8004c18:	f7fb fada 	bl	80001d0 <memchr>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d03f      	beq.n	8004ca0 <_vfiprintf_r+0x22c>
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <_vfiprintf_r+0x254>)
 8004c22:	bb1b      	cbnz	r3, 8004c6c <_vfiprintf_r+0x1f8>
 8004c24:	9b03      	ldr	r3, [sp, #12]
 8004c26:	3307      	adds	r3, #7
 8004c28:	f023 0307 	bic.w	r3, r3, #7
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	9303      	str	r3, [sp, #12]
 8004c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c32:	443b      	add	r3, r7
 8004c34:	9309      	str	r3, [sp, #36]	; 0x24
 8004c36:	e767      	b.n	8004b08 <_vfiprintf_r+0x94>
 8004c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	2001      	movs	r0, #1
 8004c40:	e7a5      	b.n	8004b8e <_vfiprintf_r+0x11a>
 8004c42:	2300      	movs	r3, #0
 8004c44:	3401      	adds	r4, #1
 8004c46:	9305      	str	r3, [sp, #20]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	f04f 0c0a 	mov.w	ip, #10
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c54:	3a30      	subs	r2, #48	; 0x30
 8004c56:	2a09      	cmp	r2, #9
 8004c58:	d903      	bls.n	8004c62 <_vfiprintf_r+0x1ee>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0c5      	beq.n	8004bea <_vfiprintf_r+0x176>
 8004c5e:	9105      	str	r1, [sp, #20]
 8004c60:	e7c3      	b.n	8004bea <_vfiprintf_r+0x176>
 8004c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c66:	4604      	mov	r4, r0
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e7f0      	b.n	8004c4e <_vfiprintf_r+0x1da>
 8004c6c:	ab03      	add	r3, sp, #12
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	462a      	mov	r2, r5
 8004c72:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <_vfiprintf_r+0x258>)
 8004c74:	a904      	add	r1, sp, #16
 8004c76:	4630      	mov	r0, r6
 8004c78:	f3af 8000 	nop.w
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	1c78      	adds	r0, r7, #1
 8004c80:	d1d6      	bne.n	8004c30 <_vfiprintf_r+0x1bc>
 8004c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c84:	07d9      	lsls	r1, r3, #31
 8004c86:	d405      	bmi.n	8004c94 <_vfiprintf_r+0x220>
 8004c88:	89ab      	ldrh	r3, [r5, #12]
 8004c8a:	059a      	lsls	r2, r3, #22
 8004c8c:	d402      	bmi.n	8004c94 <_vfiprintf_r+0x220>
 8004c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c90:	f7ff fe6b 	bl	800496a <__retarget_lock_release_recursive>
 8004c94:	89ab      	ldrh	r3, [r5, #12]
 8004c96:	065b      	lsls	r3, r3, #25
 8004c98:	f53f af12 	bmi.w	8004ac0 <_vfiprintf_r+0x4c>
 8004c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c9e:	e711      	b.n	8004ac4 <_vfiprintf_r+0x50>
 8004ca0:	ab03      	add	r3, sp, #12
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	462a      	mov	r2, r5
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <_vfiprintf_r+0x258>)
 8004ca8:	a904      	add	r1, sp, #16
 8004caa:	4630      	mov	r0, r6
 8004cac:	f000 f880 	bl	8004db0 <_printf_i>
 8004cb0:	e7e4      	b.n	8004c7c <_vfiprintf_r+0x208>
 8004cb2:	bf00      	nop
 8004cb4:	080056c8 	.word	0x080056c8
 8004cb8:	080056e8 	.word	0x080056e8
 8004cbc:	080056a8 	.word	0x080056a8
 8004cc0:	08005708 	.word	0x08005708
 8004cc4:	08005712 	.word	0x08005712
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	08004a4f 	.word	0x08004a4f
 8004cd0:	0800570e 	.word	0x0800570e

08004cd4 <_printf_common>:
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	4616      	mov	r6, r2
 8004cda:	4699      	mov	r9, r3
 8004cdc:	688a      	ldr	r2, [r1, #8]
 8004cde:	690b      	ldr	r3, [r1, #16]
 8004ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	bfb8      	it	lt
 8004ce8:	4613      	movlt	r3, r2
 8004cea:	6033      	str	r3, [r6, #0]
 8004cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	b10a      	cbz	r2, 8004cfa <_printf_common+0x26>
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	6033      	str	r3, [r6, #0]
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	0699      	lsls	r1, r3, #26
 8004cfe:	bf42      	ittt	mi
 8004d00:	6833      	ldrmi	r3, [r6, #0]
 8004d02:	3302      	addmi	r3, #2
 8004d04:	6033      	strmi	r3, [r6, #0]
 8004d06:	6825      	ldr	r5, [r4, #0]
 8004d08:	f015 0506 	ands.w	r5, r5, #6
 8004d0c:	d106      	bne.n	8004d1c <_printf_common+0x48>
 8004d0e:	f104 0a19 	add.w	sl, r4, #25
 8004d12:	68e3      	ldr	r3, [r4, #12]
 8004d14:	6832      	ldr	r2, [r6, #0]
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	42ab      	cmp	r3, r5
 8004d1a:	dc26      	bgt.n	8004d6a <_printf_common+0x96>
 8004d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d20:	1e13      	subs	r3, r2, #0
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	bf18      	it	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	0692      	lsls	r2, r2, #26
 8004d2a:	d42b      	bmi.n	8004d84 <_printf_common+0xb0>
 8004d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d30:	4649      	mov	r1, r9
 8004d32:	4638      	mov	r0, r7
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d01e      	beq.n	8004d78 <_printf_common+0xa4>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	68e5      	ldr	r5, [r4, #12]
 8004d3e:	6832      	ldr	r2, [r6, #0]
 8004d40:	f003 0306 	and.w	r3, r3, #6
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	bf08      	it	eq
 8004d48:	1aad      	subeq	r5, r5, r2
 8004d4a:	68a3      	ldr	r3, [r4, #8]
 8004d4c:	6922      	ldr	r2, [r4, #16]
 8004d4e:	bf0c      	ite	eq
 8004d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d54:	2500      	movne	r5, #0
 8004d56:	4293      	cmp	r3, r2
 8004d58:	bfc4      	itt	gt
 8004d5a:	1a9b      	subgt	r3, r3, r2
 8004d5c:	18ed      	addgt	r5, r5, r3
 8004d5e:	2600      	movs	r6, #0
 8004d60:	341a      	adds	r4, #26
 8004d62:	42b5      	cmp	r5, r6
 8004d64:	d11a      	bne.n	8004d9c <_printf_common+0xc8>
 8004d66:	2000      	movs	r0, #0
 8004d68:	e008      	b.n	8004d7c <_printf_common+0xa8>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4652      	mov	r2, sl
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4638      	mov	r0, r7
 8004d72:	47c0      	blx	r8
 8004d74:	3001      	adds	r0, #1
 8004d76:	d103      	bne.n	8004d80 <_printf_common+0xac>
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d80:	3501      	adds	r5, #1
 8004d82:	e7c6      	b.n	8004d12 <_printf_common+0x3e>
 8004d84:	18e1      	adds	r1, r4, r3
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	2030      	movs	r0, #48	; 0x30
 8004d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d8e:	4422      	add	r2, r4
 8004d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d98:	3302      	adds	r3, #2
 8004d9a:	e7c7      	b.n	8004d2c <_printf_common+0x58>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4622      	mov	r2, r4
 8004da0:	4649      	mov	r1, r9
 8004da2:	4638      	mov	r0, r7
 8004da4:	47c0      	blx	r8
 8004da6:	3001      	adds	r0, #1
 8004da8:	d0e6      	beq.n	8004d78 <_printf_common+0xa4>
 8004daa:	3601      	adds	r6, #1
 8004dac:	e7d9      	b.n	8004d62 <_printf_common+0x8e>
	...

08004db0 <_printf_i>:
 8004db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004db4:	460c      	mov	r4, r1
 8004db6:	4691      	mov	r9, r2
 8004db8:	7e27      	ldrb	r7, [r4, #24]
 8004dba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004dbc:	2f78      	cmp	r7, #120	; 0x78
 8004dbe:	4680      	mov	r8, r0
 8004dc0:	469a      	mov	sl, r3
 8004dc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc6:	d807      	bhi.n	8004dd8 <_printf_i+0x28>
 8004dc8:	2f62      	cmp	r7, #98	; 0x62
 8004dca:	d80a      	bhi.n	8004de2 <_printf_i+0x32>
 8004dcc:	2f00      	cmp	r7, #0
 8004dce:	f000 80d8 	beq.w	8004f82 <_printf_i+0x1d2>
 8004dd2:	2f58      	cmp	r7, #88	; 0x58
 8004dd4:	f000 80a3 	beq.w	8004f1e <_printf_i+0x16e>
 8004dd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004de0:	e03a      	b.n	8004e58 <_printf_i+0xa8>
 8004de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004de6:	2b15      	cmp	r3, #21
 8004de8:	d8f6      	bhi.n	8004dd8 <_printf_i+0x28>
 8004dea:	a001      	add	r0, pc, #4	; (adr r0, 8004df0 <_printf_i+0x40>)
 8004dec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004df0:	08004e49 	.word	0x08004e49
 8004df4:	08004e5d 	.word	0x08004e5d
 8004df8:	08004dd9 	.word	0x08004dd9
 8004dfc:	08004dd9 	.word	0x08004dd9
 8004e00:	08004dd9 	.word	0x08004dd9
 8004e04:	08004dd9 	.word	0x08004dd9
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004dd9 	.word	0x08004dd9
 8004e10:	08004dd9 	.word	0x08004dd9
 8004e14:	08004dd9 	.word	0x08004dd9
 8004e18:	08004dd9 	.word	0x08004dd9
 8004e1c:	08004f69 	.word	0x08004f69
 8004e20:	08004e8d 	.word	0x08004e8d
 8004e24:	08004f4b 	.word	0x08004f4b
 8004e28:	08004dd9 	.word	0x08004dd9
 8004e2c:	08004dd9 	.word	0x08004dd9
 8004e30:	08004f8b 	.word	0x08004f8b
 8004e34:	08004dd9 	.word	0x08004dd9
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004dd9 	.word	0x08004dd9
 8004e40:	08004dd9 	.word	0x08004dd9
 8004e44:	08004f53 	.word	0x08004f53
 8004e48:	680b      	ldr	r3, [r1, #0]
 8004e4a:	1d1a      	adds	r2, r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	600a      	str	r2, [r1, #0]
 8004e50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0a3      	b.n	8004fa4 <_printf_i+0x1f4>
 8004e5c:	6825      	ldr	r5, [r4, #0]
 8004e5e:	6808      	ldr	r0, [r1, #0]
 8004e60:	062e      	lsls	r6, r5, #24
 8004e62:	f100 0304 	add.w	r3, r0, #4
 8004e66:	d50a      	bpl.n	8004e7e <_printf_i+0xce>
 8004e68:	6805      	ldr	r5, [r0, #0]
 8004e6a:	600b      	str	r3, [r1, #0]
 8004e6c:	2d00      	cmp	r5, #0
 8004e6e:	da03      	bge.n	8004e78 <_printf_i+0xc8>
 8004e70:	232d      	movs	r3, #45	; 0x2d
 8004e72:	426d      	negs	r5, r5
 8004e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e78:	485e      	ldr	r0, [pc, #376]	; (8004ff4 <_printf_i+0x244>)
 8004e7a:	230a      	movs	r3, #10
 8004e7c:	e019      	b.n	8004eb2 <_printf_i+0x102>
 8004e7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e82:	6805      	ldr	r5, [r0, #0]
 8004e84:	600b      	str	r3, [r1, #0]
 8004e86:	bf18      	it	ne
 8004e88:	b22d      	sxthne	r5, r5
 8004e8a:	e7ef      	b.n	8004e6c <_printf_i+0xbc>
 8004e8c:	680b      	ldr	r3, [r1, #0]
 8004e8e:	6825      	ldr	r5, [r4, #0]
 8004e90:	1d18      	adds	r0, r3, #4
 8004e92:	6008      	str	r0, [r1, #0]
 8004e94:	0628      	lsls	r0, r5, #24
 8004e96:	d501      	bpl.n	8004e9c <_printf_i+0xec>
 8004e98:	681d      	ldr	r5, [r3, #0]
 8004e9a:	e002      	b.n	8004ea2 <_printf_i+0xf2>
 8004e9c:	0669      	lsls	r1, r5, #25
 8004e9e:	d5fb      	bpl.n	8004e98 <_printf_i+0xe8>
 8004ea0:	881d      	ldrh	r5, [r3, #0]
 8004ea2:	4854      	ldr	r0, [pc, #336]	; (8004ff4 <_printf_i+0x244>)
 8004ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2308      	moveq	r3, #8
 8004eaa:	230a      	movne	r3, #10
 8004eac:	2100      	movs	r1, #0
 8004eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eb2:	6866      	ldr	r6, [r4, #4]
 8004eb4:	60a6      	str	r6, [r4, #8]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	bfa2      	ittt	ge
 8004eba:	6821      	ldrge	r1, [r4, #0]
 8004ebc:	f021 0104 	bicge.w	r1, r1, #4
 8004ec0:	6021      	strge	r1, [r4, #0]
 8004ec2:	b90d      	cbnz	r5, 8004ec8 <_printf_i+0x118>
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	d04d      	beq.n	8004f64 <_printf_i+0x1b4>
 8004ec8:	4616      	mov	r6, r2
 8004eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ece:	fb03 5711 	mls	r7, r3, r1, r5
 8004ed2:	5dc7      	ldrb	r7, [r0, r7]
 8004ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ed8:	462f      	mov	r7, r5
 8004eda:	42bb      	cmp	r3, r7
 8004edc:	460d      	mov	r5, r1
 8004ede:	d9f4      	bls.n	8004eca <_printf_i+0x11a>
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d10b      	bne.n	8004efc <_printf_i+0x14c>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	07df      	lsls	r7, r3, #31
 8004ee8:	d508      	bpl.n	8004efc <_printf_i+0x14c>
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	6861      	ldr	r1, [r4, #4]
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	bfde      	ittt	le
 8004ef2:	2330      	movle	r3, #48	; 0x30
 8004ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ef8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004efc:	1b92      	subs	r2, r2, r6
 8004efe:	6122      	str	r2, [r4, #16]
 8004f00:	f8cd a000 	str.w	sl, [sp]
 8004f04:	464b      	mov	r3, r9
 8004f06:	aa03      	add	r2, sp, #12
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f7ff fee2 	bl	8004cd4 <_printf_common>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d14c      	bne.n	8004fae <_printf_i+0x1fe>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f18:	b004      	add	sp, #16
 8004f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1e:	4835      	ldr	r0, [pc, #212]	; (8004ff4 <_printf_i+0x244>)
 8004f20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	680e      	ldr	r6, [r1, #0]
 8004f28:	061f      	lsls	r7, r3, #24
 8004f2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f2e:	600e      	str	r6, [r1, #0]
 8004f30:	d514      	bpl.n	8004f5c <_printf_i+0x1ac>
 8004f32:	07d9      	lsls	r1, r3, #31
 8004f34:	bf44      	itt	mi
 8004f36:	f043 0320 	orrmi.w	r3, r3, #32
 8004f3a:	6023      	strmi	r3, [r4, #0]
 8004f3c:	b91d      	cbnz	r5, 8004f46 <_printf_i+0x196>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f023 0320 	bic.w	r3, r3, #32
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	2310      	movs	r3, #16
 8004f48:	e7b0      	b.n	8004eac <_printf_i+0xfc>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	f043 0320 	orr.w	r3, r3, #32
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	2378      	movs	r3, #120	; 0x78
 8004f54:	4828      	ldr	r0, [pc, #160]	; (8004ff8 <_printf_i+0x248>)
 8004f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f5a:	e7e3      	b.n	8004f24 <_printf_i+0x174>
 8004f5c:	065e      	lsls	r6, r3, #25
 8004f5e:	bf48      	it	mi
 8004f60:	b2ad      	uxthmi	r5, r5
 8004f62:	e7e6      	b.n	8004f32 <_printf_i+0x182>
 8004f64:	4616      	mov	r6, r2
 8004f66:	e7bb      	b.n	8004ee0 <_printf_i+0x130>
 8004f68:	680b      	ldr	r3, [r1, #0]
 8004f6a:	6826      	ldr	r6, [r4, #0]
 8004f6c:	6960      	ldr	r0, [r4, #20]
 8004f6e:	1d1d      	adds	r5, r3, #4
 8004f70:	600d      	str	r5, [r1, #0]
 8004f72:	0635      	lsls	r5, r6, #24
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	d501      	bpl.n	8004f7c <_printf_i+0x1cc>
 8004f78:	6018      	str	r0, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <_printf_i+0x1d2>
 8004f7c:	0671      	lsls	r1, r6, #25
 8004f7e:	d5fb      	bpl.n	8004f78 <_printf_i+0x1c8>
 8004f80:	8018      	strh	r0, [r3, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	4616      	mov	r6, r2
 8004f88:	e7ba      	b.n	8004f00 <_printf_i+0x150>
 8004f8a:	680b      	ldr	r3, [r1, #0]
 8004f8c:	1d1a      	adds	r2, r3, #4
 8004f8e:	600a      	str	r2, [r1, #0]
 8004f90:	681e      	ldr	r6, [r3, #0]
 8004f92:	6862      	ldr	r2, [r4, #4]
 8004f94:	2100      	movs	r1, #0
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7fb f91a 	bl	80001d0 <memchr>
 8004f9c:	b108      	cbz	r0, 8004fa2 <_printf_i+0x1f2>
 8004f9e:	1b80      	subs	r0, r0, r6
 8004fa0:	6060      	str	r0, [r4, #4]
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	6123      	str	r3, [r4, #16]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fac:	e7a8      	b.n	8004f00 <_printf_i+0x150>
 8004fae:	6923      	ldr	r3, [r4, #16]
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	47d0      	blx	sl
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d0ab      	beq.n	8004f14 <_printf_i+0x164>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	079b      	lsls	r3, r3, #30
 8004fc0:	d413      	bmi.n	8004fea <_printf_i+0x23a>
 8004fc2:	68e0      	ldr	r0, [r4, #12]
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	4298      	cmp	r0, r3
 8004fc8:	bfb8      	it	lt
 8004fca:	4618      	movlt	r0, r3
 8004fcc:	e7a4      	b.n	8004f18 <_printf_i+0x168>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	47d0      	blx	sl
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d09b      	beq.n	8004f14 <_printf_i+0x164>
 8004fdc:	3501      	adds	r5, #1
 8004fde:	68e3      	ldr	r3, [r4, #12]
 8004fe0:	9903      	ldr	r1, [sp, #12]
 8004fe2:	1a5b      	subs	r3, r3, r1
 8004fe4:	42ab      	cmp	r3, r5
 8004fe6:	dcf2      	bgt.n	8004fce <_printf_i+0x21e>
 8004fe8:	e7eb      	b.n	8004fc2 <_printf_i+0x212>
 8004fea:	2500      	movs	r5, #0
 8004fec:	f104 0619 	add.w	r6, r4, #25
 8004ff0:	e7f5      	b.n	8004fde <_printf_i+0x22e>
 8004ff2:	bf00      	nop
 8004ff4:	08005719 	.word	0x08005719
 8004ff8:	0800572a 	.word	0x0800572a

08004ffc <_sbrk_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d06      	ldr	r5, [pc, #24]	; (8005018 <_sbrk_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f000 faf6 	bl	80055f8 <_sbrk>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_sbrk_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_sbrk_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	20012ea0 	.word	0x20012ea0

0800501c <__sread>:
 800501c:	b510      	push	{r4, lr}
 800501e:	460c      	mov	r4, r1
 8005020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005024:	f000 fab4 	bl	8005590 <_read_r>
 8005028:	2800      	cmp	r0, #0
 800502a:	bfab      	itete	ge
 800502c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800502e:	89a3      	ldrhlt	r3, [r4, #12]
 8005030:	181b      	addge	r3, r3, r0
 8005032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005036:	bfac      	ite	ge
 8005038:	6563      	strge	r3, [r4, #84]	; 0x54
 800503a:	81a3      	strhlt	r3, [r4, #12]
 800503c:	bd10      	pop	{r4, pc}

0800503e <__swrite>:
 800503e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005042:	461f      	mov	r7, r3
 8005044:	898b      	ldrh	r3, [r1, #12]
 8005046:	05db      	lsls	r3, r3, #23
 8005048:	4605      	mov	r5, r0
 800504a:	460c      	mov	r4, r1
 800504c:	4616      	mov	r6, r2
 800504e:	d505      	bpl.n	800505c <__swrite+0x1e>
 8005050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005054:	2302      	movs	r3, #2
 8005056:	2200      	movs	r2, #0
 8005058:	f000 f9c8 	bl	80053ec <_lseek_r>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005066:	81a3      	strh	r3, [r4, #12]
 8005068:	4632      	mov	r2, r6
 800506a:	463b      	mov	r3, r7
 800506c:	4628      	mov	r0, r5
 800506e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005072:	f000 b869 	b.w	8005148 <_write_r>

08005076 <__sseek>:
 8005076:	b510      	push	{r4, lr}
 8005078:	460c      	mov	r4, r1
 800507a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507e:	f000 f9b5 	bl	80053ec <_lseek_r>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	bf15      	itete	ne
 8005088:	6560      	strne	r0, [r4, #84]	; 0x54
 800508a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800508e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005092:	81a3      	strheq	r3, [r4, #12]
 8005094:	bf18      	it	ne
 8005096:	81a3      	strhne	r3, [r4, #12]
 8005098:	bd10      	pop	{r4, pc}

0800509a <__sclose>:
 800509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509e:	f000 b8d3 	b.w	8005248 <_close_r>
	...

080050a4 <__swbuf_r>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	460e      	mov	r6, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	4605      	mov	r5, r0
 80050ac:	b118      	cbz	r0, 80050b6 <__swbuf_r+0x12>
 80050ae:	6983      	ldr	r3, [r0, #24]
 80050b0:	b90b      	cbnz	r3, 80050b6 <__swbuf_r+0x12>
 80050b2:	f7ff fbbb 	bl	800482c <__sinit>
 80050b6:	4b21      	ldr	r3, [pc, #132]	; (800513c <__swbuf_r+0x98>)
 80050b8:	429c      	cmp	r4, r3
 80050ba:	d12b      	bne.n	8005114 <__swbuf_r+0x70>
 80050bc:	686c      	ldr	r4, [r5, #4]
 80050be:	69a3      	ldr	r3, [r4, #24]
 80050c0:	60a3      	str	r3, [r4, #8]
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	071a      	lsls	r2, r3, #28
 80050c6:	d52f      	bpl.n	8005128 <__swbuf_r+0x84>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	b36b      	cbz	r3, 8005128 <__swbuf_r+0x84>
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	1ac0      	subs	r0, r0, r3
 80050d2:	6963      	ldr	r3, [r4, #20]
 80050d4:	b2f6      	uxtb	r6, r6
 80050d6:	4283      	cmp	r3, r0
 80050d8:	4637      	mov	r7, r6
 80050da:	dc04      	bgt.n	80050e6 <__swbuf_r+0x42>
 80050dc:	4621      	mov	r1, r4
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 f948 	bl	8005374 <_fflush_r>
 80050e4:	bb30      	cbnz	r0, 8005134 <__swbuf_r+0x90>
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	701e      	strb	r6, [r3, #0]
 80050f4:	6963      	ldr	r3, [r4, #20]
 80050f6:	3001      	adds	r0, #1
 80050f8:	4283      	cmp	r3, r0
 80050fa:	d004      	beq.n	8005106 <__swbuf_r+0x62>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	07db      	lsls	r3, r3, #31
 8005100:	d506      	bpl.n	8005110 <__swbuf_r+0x6c>
 8005102:	2e0a      	cmp	r6, #10
 8005104:	d104      	bne.n	8005110 <__swbuf_r+0x6c>
 8005106:	4621      	mov	r1, r4
 8005108:	4628      	mov	r0, r5
 800510a:	f000 f933 	bl	8005374 <_fflush_r>
 800510e:	b988      	cbnz	r0, 8005134 <__swbuf_r+0x90>
 8005110:	4638      	mov	r0, r7
 8005112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <__swbuf_r+0x9c>)
 8005116:	429c      	cmp	r4, r3
 8005118:	d101      	bne.n	800511e <__swbuf_r+0x7a>
 800511a:	68ac      	ldr	r4, [r5, #8]
 800511c:	e7cf      	b.n	80050be <__swbuf_r+0x1a>
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <__swbuf_r+0xa0>)
 8005120:	429c      	cmp	r4, r3
 8005122:	bf08      	it	eq
 8005124:	68ec      	ldreq	r4, [r5, #12]
 8005126:	e7ca      	b.n	80050be <__swbuf_r+0x1a>
 8005128:	4621      	mov	r1, r4
 800512a:	4628      	mov	r0, r5
 800512c:	f000 f81e 	bl	800516c <__swsetup_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	d0cb      	beq.n	80050cc <__swbuf_r+0x28>
 8005134:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005138:	e7ea      	b.n	8005110 <__swbuf_r+0x6c>
 800513a:	bf00      	nop
 800513c:	080056c8 	.word	0x080056c8
 8005140:	080056e8 	.word	0x080056e8
 8005144:	080056a8 	.word	0x080056a8

08005148 <_write_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d07      	ldr	r5, [pc, #28]	; (8005168 <_write_r+0x20>)
 800514c:	4604      	mov	r4, r0
 800514e:	4608      	mov	r0, r1
 8005150:	4611      	mov	r1, r2
 8005152:	2200      	movs	r2, #0
 8005154:	602a      	str	r2, [r5, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	f7fb fd47 	bl	8000bea <_write>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d102      	bne.n	8005166 <_write_r+0x1e>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	b103      	cbz	r3, 8005166 <_write_r+0x1e>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	20012ea0 	.word	0x20012ea0

0800516c <__swsetup_r>:
 800516c:	4b32      	ldr	r3, [pc, #200]	; (8005238 <__swsetup_r+0xcc>)
 800516e:	b570      	push	{r4, r5, r6, lr}
 8005170:	681d      	ldr	r5, [r3, #0]
 8005172:	4606      	mov	r6, r0
 8005174:	460c      	mov	r4, r1
 8005176:	b125      	cbz	r5, 8005182 <__swsetup_r+0x16>
 8005178:	69ab      	ldr	r3, [r5, #24]
 800517a:	b913      	cbnz	r3, 8005182 <__swsetup_r+0x16>
 800517c:	4628      	mov	r0, r5
 800517e:	f7ff fb55 	bl	800482c <__sinit>
 8005182:	4b2e      	ldr	r3, [pc, #184]	; (800523c <__swsetup_r+0xd0>)
 8005184:	429c      	cmp	r4, r3
 8005186:	d10f      	bne.n	80051a8 <__swsetup_r+0x3c>
 8005188:	686c      	ldr	r4, [r5, #4]
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005190:	0719      	lsls	r1, r3, #28
 8005192:	d42c      	bmi.n	80051ee <__swsetup_r+0x82>
 8005194:	06dd      	lsls	r5, r3, #27
 8005196:	d411      	bmi.n	80051bc <__swsetup_r+0x50>
 8005198:	2309      	movs	r3, #9
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051a6:	e03e      	b.n	8005226 <__swsetup_r+0xba>
 80051a8:	4b25      	ldr	r3, [pc, #148]	; (8005240 <__swsetup_r+0xd4>)
 80051aa:	429c      	cmp	r4, r3
 80051ac:	d101      	bne.n	80051b2 <__swsetup_r+0x46>
 80051ae:	68ac      	ldr	r4, [r5, #8]
 80051b0:	e7eb      	b.n	800518a <__swsetup_r+0x1e>
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <__swsetup_r+0xd8>)
 80051b4:	429c      	cmp	r4, r3
 80051b6:	bf08      	it	eq
 80051b8:	68ec      	ldreq	r4, [r5, #12]
 80051ba:	e7e6      	b.n	800518a <__swsetup_r+0x1e>
 80051bc:	0758      	lsls	r0, r3, #29
 80051be:	d512      	bpl.n	80051e6 <__swsetup_r+0x7a>
 80051c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051c2:	b141      	cbz	r1, 80051d6 <__swsetup_r+0x6a>
 80051c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c8:	4299      	cmp	r1, r3
 80051ca:	d002      	beq.n	80051d2 <__swsetup_r+0x66>
 80051cc:	4630      	mov	r0, r6
 80051ce:	f000 f98f 	bl	80054f0 <_free_r>
 80051d2:	2300      	movs	r3, #0
 80051d4:	6363      	str	r3, [r4, #52]	; 0x34
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	2300      	movs	r3, #0
 80051e0:	6063      	str	r3, [r4, #4]
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	f043 0308 	orr.w	r3, r3, #8
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	b94b      	cbnz	r3, 8005206 <__swsetup_r+0x9a>
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fc:	d003      	beq.n	8005206 <__swsetup_r+0x9a>
 80051fe:	4621      	mov	r1, r4
 8005200:	4630      	mov	r0, r6
 8005202:	f000 f929 	bl	8005458 <__smakebuf_r>
 8005206:	89a0      	ldrh	r0, [r4, #12]
 8005208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800520c:	f010 0301 	ands.w	r3, r0, #1
 8005210:	d00a      	beq.n	8005228 <__swsetup_r+0xbc>
 8005212:	2300      	movs	r3, #0
 8005214:	60a3      	str	r3, [r4, #8]
 8005216:	6963      	ldr	r3, [r4, #20]
 8005218:	425b      	negs	r3, r3
 800521a:	61a3      	str	r3, [r4, #24]
 800521c:	6923      	ldr	r3, [r4, #16]
 800521e:	b943      	cbnz	r3, 8005232 <__swsetup_r+0xc6>
 8005220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005224:	d1ba      	bne.n	800519c <__swsetup_r+0x30>
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	0781      	lsls	r1, r0, #30
 800522a:	bf58      	it	pl
 800522c:	6963      	ldrpl	r3, [r4, #20]
 800522e:	60a3      	str	r3, [r4, #8]
 8005230:	e7f4      	b.n	800521c <__swsetup_r+0xb0>
 8005232:	2000      	movs	r0, #0
 8005234:	e7f7      	b.n	8005226 <__swsetup_r+0xba>
 8005236:	bf00      	nop
 8005238:	20000014 	.word	0x20000014
 800523c:	080056c8 	.word	0x080056c8
 8005240:	080056e8 	.word	0x080056e8
 8005244:	080056a8 	.word	0x080056a8

08005248 <_close_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d06      	ldr	r5, [pc, #24]	; (8005264 <_close_r+0x1c>)
 800524c:	2300      	movs	r3, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	602b      	str	r3, [r5, #0]
 8005254:	f7fb fce5 	bl	8000c22 <_close>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_close_r+0x1a>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_close_r+0x1a>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	20012ea0 	.word	0x20012ea0

08005268 <__sflush_r>:
 8005268:	898a      	ldrh	r2, [r1, #12]
 800526a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526e:	4605      	mov	r5, r0
 8005270:	0710      	lsls	r0, r2, #28
 8005272:	460c      	mov	r4, r1
 8005274:	d458      	bmi.n	8005328 <__sflush_r+0xc0>
 8005276:	684b      	ldr	r3, [r1, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	dc05      	bgt.n	8005288 <__sflush_r+0x20>
 800527c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	dc02      	bgt.n	8005288 <__sflush_r+0x20>
 8005282:	2000      	movs	r0, #0
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800528a:	2e00      	cmp	r6, #0
 800528c:	d0f9      	beq.n	8005282 <__sflush_r+0x1a>
 800528e:	2300      	movs	r3, #0
 8005290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005294:	682f      	ldr	r7, [r5, #0]
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	d032      	beq.n	8005300 <__sflush_r+0x98>
 800529a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	075a      	lsls	r2, r3, #29
 80052a0:	d505      	bpl.n	80052ae <__sflush_r+0x46>
 80052a2:	6863      	ldr	r3, [r4, #4]
 80052a4:	1ac0      	subs	r0, r0, r3
 80052a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052a8:	b10b      	cbz	r3, 80052ae <__sflush_r+0x46>
 80052aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ac:	1ac0      	subs	r0, r0, r3
 80052ae:	2300      	movs	r3, #0
 80052b0:	4602      	mov	r2, r0
 80052b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052b4:	6a21      	ldr	r1, [r4, #32]
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b0      	blx	r6
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	d106      	bne.n	80052ce <__sflush_r+0x66>
 80052c0:	6829      	ldr	r1, [r5, #0]
 80052c2:	291d      	cmp	r1, #29
 80052c4:	d82c      	bhi.n	8005320 <__sflush_r+0xb8>
 80052c6:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <__sflush_r+0x108>)
 80052c8:	40ca      	lsrs	r2, r1
 80052ca:	07d6      	lsls	r6, r2, #31
 80052cc:	d528      	bpl.n	8005320 <__sflush_r+0xb8>
 80052ce:	2200      	movs	r2, #0
 80052d0:	6062      	str	r2, [r4, #4]
 80052d2:	04d9      	lsls	r1, r3, #19
 80052d4:	6922      	ldr	r2, [r4, #16]
 80052d6:	6022      	str	r2, [r4, #0]
 80052d8:	d504      	bpl.n	80052e4 <__sflush_r+0x7c>
 80052da:	1c42      	adds	r2, r0, #1
 80052dc:	d101      	bne.n	80052e2 <__sflush_r+0x7a>
 80052de:	682b      	ldr	r3, [r5, #0]
 80052e0:	b903      	cbnz	r3, 80052e4 <__sflush_r+0x7c>
 80052e2:	6560      	str	r0, [r4, #84]	; 0x54
 80052e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052e6:	602f      	str	r7, [r5, #0]
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d0ca      	beq.n	8005282 <__sflush_r+0x1a>
 80052ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052f0:	4299      	cmp	r1, r3
 80052f2:	d002      	beq.n	80052fa <__sflush_r+0x92>
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 f8fb 	bl	80054f0 <_free_r>
 80052fa:	2000      	movs	r0, #0
 80052fc:	6360      	str	r0, [r4, #52]	; 0x34
 80052fe:	e7c1      	b.n	8005284 <__sflush_r+0x1c>
 8005300:	6a21      	ldr	r1, [r4, #32]
 8005302:	2301      	movs	r3, #1
 8005304:	4628      	mov	r0, r5
 8005306:	47b0      	blx	r6
 8005308:	1c41      	adds	r1, r0, #1
 800530a:	d1c7      	bne.n	800529c <__sflush_r+0x34>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0c4      	beq.n	800529c <__sflush_r+0x34>
 8005312:	2b1d      	cmp	r3, #29
 8005314:	d001      	beq.n	800531a <__sflush_r+0xb2>
 8005316:	2b16      	cmp	r3, #22
 8005318:	d101      	bne.n	800531e <__sflush_r+0xb6>
 800531a:	602f      	str	r7, [r5, #0]
 800531c:	e7b1      	b.n	8005282 <__sflush_r+0x1a>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	e7ad      	b.n	8005284 <__sflush_r+0x1c>
 8005328:	690f      	ldr	r7, [r1, #16]
 800532a:	2f00      	cmp	r7, #0
 800532c:	d0a9      	beq.n	8005282 <__sflush_r+0x1a>
 800532e:	0793      	lsls	r3, r2, #30
 8005330:	680e      	ldr	r6, [r1, #0]
 8005332:	bf08      	it	eq
 8005334:	694b      	ldreq	r3, [r1, #20]
 8005336:	600f      	str	r7, [r1, #0]
 8005338:	bf18      	it	ne
 800533a:	2300      	movne	r3, #0
 800533c:	eba6 0807 	sub.w	r8, r6, r7
 8005340:	608b      	str	r3, [r1, #8]
 8005342:	f1b8 0f00 	cmp.w	r8, #0
 8005346:	dd9c      	ble.n	8005282 <__sflush_r+0x1a>
 8005348:	6a21      	ldr	r1, [r4, #32]
 800534a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800534c:	4643      	mov	r3, r8
 800534e:	463a      	mov	r2, r7
 8005350:	4628      	mov	r0, r5
 8005352:	47b0      	blx	r6
 8005354:	2800      	cmp	r0, #0
 8005356:	dc06      	bgt.n	8005366 <__sflush_r+0xfe>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005364:	e78e      	b.n	8005284 <__sflush_r+0x1c>
 8005366:	4407      	add	r7, r0
 8005368:	eba8 0800 	sub.w	r8, r8, r0
 800536c:	e7e9      	b.n	8005342 <__sflush_r+0xda>
 800536e:	bf00      	nop
 8005370:	20400001 	.word	0x20400001

08005374 <_fflush_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	4605      	mov	r5, r0
 800537a:	460c      	mov	r4, r1
 800537c:	b913      	cbnz	r3, 8005384 <_fflush_r+0x10>
 800537e:	2500      	movs	r5, #0
 8005380:	4628      	mov	r0, r5
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	b118      	cbz	r0, 800538e <_fflush_r+0x1a>
 8005386:	6983      	ldr	r3, [r0, #24]
 8005388:	b90b      	cbnz	r3, 800538e <_fflush_r+0x1a>
 800538a:	f7ff fa4f 	bl	800482c <__sinit>
 800538e:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <_fflush_r+0x6c>)
 8005390:	429c      	cmp	r4, r3
 8005392:	d11b      	bne.n	80053cc <_fflush_r+0x58>
 8005394:	686c      	ldr	r4, [r5, #4]
 8005396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0ef      	beq.n	800537e <_fflush_r+0xa>
 800539e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053a0:	07d0      	lsls	r0, r2, #31
 80053a2:	d404      	bmi.n	80053ae <_fflush_r+0x3a>
 80053a4:	0599      	lsls	r1, r3, #22
 80053a6:	d402      	bmi.n	80053ae <_fflush_r+0x3a>
 80053a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053aa:	f7ff fadd 	bl	8004968 <__retarget_lock_acquire_recursive>
 80053ae:	4628      	mov	r0, r5
 80053b0:	4621      	mov	r1, r4
 80053b2:	f7ff ff59 	bl	8005268 <__sflush_r>
 80053b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053b8:	07da      	lsls	r2, r3, #31
 80053ba:	4605      	mov	r5, r0
 80053bc:	d4e0      	bmi.n	8005380 <_fflush_r+0xc>
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	059b      	lsls	r3, r3, #22
 80053c2:	d4dd      	bmi.n	8005380 <_fflush_r+0xc>
 80053c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053c6:	f7ff fad0 	bl	800496a <__retarget_lock_release_recursive>
 80053ca:	e7d9      	b.n	8005380 <_fflush_r+0xc>
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <_fflush_r+0x70>)
 80053ce:	429c      	cmp	r4, r3
 80053d0:	d101      	bne.n	80053d6 <_fflush_r+0x62>
 80053d2:	68ac      	ldr	r4, [r5, #8]
 80053d4:	e7df      	b.n	8005396 <_fflush_r+0x22>
 80053d6:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <_fflush_r+0x74>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	bf08      	it	eq
 80053dc:	68ec      	ldreq	r4, [r5, #12]
 80053de:	e7da      	b.n	8005396 <_fflush_r+0x22>
 80053e0:	080056c8 	.word	0x080056c8
 80053e4:	080056e8 	.word	0x080056e8
 80053e8:	080056a8 	.word	0x080056a8

080053ec <_lseek_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	; (800540c <_lseek_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fb fc38 	bl	8000c70 <_lseek>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_lseek_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_lseek_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20012ea0 	.word	0x20012ea0

08005410 <__swhatbuf_r>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	460e      	mov	r6, r1
 8005414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005418:	2900      	cmp	r1, #0
 800541a:	b096      	sub	sp, #88	; 0x58
 800541c:	4614      	mov	r4, r2
 800541e:	461d      	mov	r5, r3
 8005420:	da07      	bge.n	8005432 <__swhatbuf_r+0x22>
 8005422:	2300      	movs	r3, #0
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	89b3      	ldrh	r3, [r6, #12]
 8005428:	061a      	lsls	r2, r3, #24
 800542a:	d410      	bmi.n	800544e <__swhatbuf_r+0x3e>
 800542c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005430:	e00e      	b.n	8005450 <__swhatbuf_r+0x40>
 8005432:	466a      	mov	r2, sp
 8005434:	f000 f8be 	bl	80055b4 <_fstat_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	dbf2      	blt.n	8005422 <__swhatbuf_r+0x12>
 800543c:	9a01      	ldr	r2, [sp, #4]
 800543e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005442:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005446:	425a      	negs	r2, r3
 8005448:	415a      	adcs	r2, r3
 800544a:	602a      	str	r2, [r5, #0]
 800544c:	e7ee      	b.n	800542c <__swhatbuf_r+0x1c>
 800544e:	2340      	movs	r3, #64	; 0x40
 8005450:	2000      	movs	r0, #0
 8005452:	6023      	str	r3, [r4, #0]
 8005454:	b016      	add	sp, #88	; 0x58
 8005456:	bd70      	pop	{r4, r5, r6, pc}

08005458 <__smakebuf_r>:
 8005458:	898b      	ldrh	r3, [r1, #12]
 800545a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800545c:	079d      	lsls	r5, r3, #30
 800545e:	4606      	mov	r6, r0
 8005460:	460c      	mov	r4, r1
 8005462:	d507      	bpl.n	8005474 <__smakebuf_r+0x1c>
 8005464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	2301      	movs	r3, #1
 800546e:	6163      	str	r3, [r4, #20]
 8005470:	b002      	add	sp, #8
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	ab01      	add	r3, sp, #4
 8005476:	466a      	mov	r2, sp
 8005478:	f7ff ffca 	bl	8005410 <__swhatbuf_r>
 800547c:	9900      	ldr	r1, [sp, #0]
 800547e:	4605      	mov	r5, r0
 8005480:	4630      	mov	r0, r6
 8005482:	f7ff fa73 	bl	800496c <_malloc_r>
 8005486:	b948      	cbnz	r0, 800549c <__smakebuf_r+0x44>
 8005488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800548c:	059a      	lsls	r2, r3, #22
 800548e:	d4ef      	bmi.n	8005470 <__smakebuf_r+0x18>
 8005490:	f023 0303 	bic.w	r3, r3, #3
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	e7e3      	b.n	8005464 <__smakebuf_r+0xc>
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <__smakebuf_r+0x7c>)
 800549e:	62b3      	str	r3, [r6, #40]	; 0x28
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	6020      	str	r0, [r4, #0]
 80054a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	9b00      	ldr	r3, [sp, #0]
 80054ac:	6163      	str	r3, [r4, #20]
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	6120      	str	r0, [r4, #16]
 80054b2:	b15b      	cbz	r3, 80054cc <__smakebuf_r+0x74>
 80054b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b8:	4630      	mov	r0, r6
 80054ba:	f000 f88d 	bl	80055d8 <_isatty_r>
 80054be:	b128      	cbz	r0, 80054cc <__smakebuf_r+0x74>
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	81a3      	strh	r3, [r4, #12]
 80054cc:	89a0      	ldrh	r0, [r4, #12]
 80054ce:	4305      	orrs	r5, r0
 80054d0:	81a5      	strh	r5, [r4, #12]
 80054d2:	e7cd      	b.n	8005470 <__smakebuf_r+0x18>
 80054d4:	080047c5 	.word	0x080047c5

080054d8 <__malloc_lock>:
 80054d8:	4801      	ldr	r0, [pc, #4]	; (80054e0 <__malloc_lock+0x8>)
 80054da:	f7ff ba45 	b.w	8004968 <__retarget_lock_acquire_recursive>
 80054de:	bf00      	nop
 80054e0:	20012e98 	.word	0x20012e98

080054e4 <__malloc_unlock>:
 80054e4:	4801      	ldr	r0, [pc, #4]	; (80054ec <__malloc_unlock+0x8>)
 80054e6:	f7ff ba40 	b.w	800496a <__retarget_lock_release_recursive>
 80054ea:	bf00      	nop
 80054ec:	20012e98 	.word	0x20012e98

080054f0 <_free_r>:
 80054f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054f2:	2900      	cmp	r1, #0
 80054f4:	d048      	beq.n	8005588 <_free_r+0x98>
 80054f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fa:	9001      	str	r0, [sp, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005502:	bfb8      	it	lt
 8005504:	18e4      	addlt	r4, r4, r3
 8005506:	f7ff ffe7 	bl	80054d8 <__malloc_lock>
 800550a:	4a20      	ldr	r2, [pc, #128]	; (800558c <_free_r+0x9c>)
 800550c:	9801      	ldr	r0, [sp, #4]
 800550e:	6813      	ldr	r3, [r2, #0]
 8005510:	4615      	mov	r5, r2
 8005512:	b933      	cbnz	r3, 8005522 <_free_r+0x32>
 8005514:	6063      	str	r3, [r4, #4]
 8005516:	6014      	str	r4, [r2, #0]
 8005518:	b003      	add	sp, #12
 800551a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800551e:	f7ff bfe1 	b.w	80054e4 <__malloc_unlock>
 8005522:	42a3      	cmp	r3, r4
 8005524:	d90b      	bls.n	800553e <_free_r+0x4e>
 8005526:	6821      	ldr	r1, [r4, #0]
 8005528:	1862      	adds	r2, r4, r1
 800552a:	4293      	cmp	r3, r2
 800552c:	bf04      	itt	eq
 800552e:	681a      	ldreq	r2, [r3, #0]
 8005530:	685b      	ldreq	r3, [r3, #4]
 8005532:	6063      	str	r3, [r4, #4]
 8005534:	bf04      	itt	eq
 8005536:	1852      	addeq	r2, r2, r1
 8005538:	6022      	streq	r2, [r4, #0]
 800553a:	602c      	str	r4, [r5, #0]
 800553c:	e7ec      	b.n	8005518 <_free_r+0x28>
 800553e:	461a      	mov	r2, r3
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	b10b      	cbz	r3, 8005548 <_free_r+0x58>
 8005544:	42a3      	cmp	r3, r4
 8005546:	d9fa      	bls.n	800553e <_free_r+0x4e>
 8005548:	6811      	ldr	r1, [r2, #0]
 800554a:	1855      	adds	r5, r2, r1
 800554c:	42a5      	cmp	r5, r4
 800554e:	d10b      	bne.n	8005568 <_free_r+0x78>
 8005550:	6824      	ldr	r4, [r4, #0]
 8005552:	4421      	add	r1, r4
 8005554:	1854      	adds	r4, r2, r1
 8005556:	42a3      	cmp	r3, r4
 8005558:	6011      	str	r1, [r2, #0]
 800555a:	d1dd      	bne.n	8005518 <_free_r+0x28>
 800555c:	681c      	ldr	r4, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	6053      	str	r3, [r2, #4]
 8005562:	4421      	add	r1, r4
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	e7d7      	b.n	8005518 <_free_r+0x28>
 8005568:	d902      	bls.n	8005570 <_free_r+0x80>
 800556a:	230c      	movs	r3, #12
 800556c:	6003      	str	r3, [r0, #0]
 800556e:	e7d3      	b.n	8005518 <_free_r+0x28>
 8005570:	6825      	ldr	r5, [r4, #0]
 8005572:	1961      	adds	r1, r4, r5
 8005574:	428b      	cmp	r3, r1
 8005576:	bf04      	itt	eq
 8005578:	6819      	ldreq	r1, [r3, #0]
 800557a:	685b      	ldreq	r3, [r3, #4]
 800557c:	6063      	str	r3, [r4, #4]
 800557e:	bf04      	itt	eq
 8005580:	1949      	addeq	r1, r1, r5
 8005582:	6021      	streq	r1, [r4, #0]
 8005584:	6054      	str	r4, [r2, #4]
 8005586:	e7c7      	b.n	8005518 <_free_r+0x28>
 8005588:	b003      	add	sp, #12
 800558a:	bd30      	pop	{r4, r5, pc}
 800558c:	20012dfc 	.word	0x20012dfc

08005590 <_read_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4d07      	ldr	r5, [pc, #28]	; (80055b0 <_read_r+0x20>)
 8005594:	4604      	mov	r4, r0
 8005596:	4608      	mov	r0, r1
 8005598:	4611      	mov	r1, r2
 800559a:	2200      	movs	r2, #0
 800559c:	602a      	str	r2, [r5, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f7fb fb06 	bl	8000bb0 <_read>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_read_r+0x1e>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_read_r+0x1e>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	20012ea0 	.word	0x20012ea0

080055b4 <_fstat_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4d07      	ldr	r5, [pc, #28]	; (80055d4 <_fstat_r+0x20>)
 80055b8:	2300      	movs	r3, #0
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	602b      	str	r3, [r5, #0]
 80055c2:	f7fb fb3a 	bl	8000c3a <_fstat>
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	d102      	bne.n	80055d0 <_fstat_r+0x1c>
 80055ca:	682b      	ldr	r3, [r5, #0]
 80055cc:	b103      	cbz	r3, 80055d0 <_fstat_r+0x1c>
 80055ce:	6023      	str	r3, [r4, #0]
 80055d0:	bd38      	pop	{r3, r4, r5, pc}
 80055d2:	bf00      	nop
 80055d4:	20012ea0 	.word	0x20012ea0

080055d8 <_isatty_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4d06      	ldr	r5, [pc, #24]	; (80055f4 <_isatty_r+0x1c>)
 80055dc:	2300      	movs	r3, #0
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	f7fb fb39 	bl	8000c5a <_isatty>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_isatty_r+0x1a>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_isatty_r+0x1a>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20012ea0 	.word	0x20012ea0

080055f8 <_sbrk>:
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <_sbrk+0x14>)
 80055fa:	6819      	ldr	r1, [r3, #0]
 80055fc:	4602      	mov	r2, r0
 80055fe:	b909      	cbnz	r1, 8005604 <_sbrk+0xc>
 8005600:	4903      	ldr	r1, [pc, #12]	; (8005610 <_sbrk+0x18>)
 8005602:	6019      	str	r1, [r3, #0]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	4402      	add	r2, r0
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	4770      	bx	lr
 800560c:	20012e04 	.word	0x20012e04
 8005610:	20012ea8 	.word	0x20012ea8

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
