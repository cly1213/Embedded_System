
001_Tasks2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004040  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d0  080042d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d8  080042d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080042e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012da8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e20  20012e20  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c978  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020fc  00000000  00000000  0002ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  0002eb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c10  00000000  00000000  0002f838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226a1  00000000  00000000  00030448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6c3  00000000  00000000  00052ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d15cd  00000000  00000000  000611ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00132779  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d80  00000000  00000000  001327cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041b8 	.word	0x080041b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080041b8 	.word	0x080041b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fbcf 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f84d 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8b5 	bl	80006f0 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <main+0x8c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <main+0x8c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2302      	movs	r3, #2
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <main+0x90>)
 800059e:	22c8      	movs	r2, #200	; 0xc8
 80005a0:	4919      	ldr	r1, [pc, #100]	; (8000608 <main+0x94>)
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <main+0x98>)
 80005a4:	f001 fe73 	bl	800228e <xTaskCreate>
 80005a8:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d00a      	beq.n	80005c6 <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c2:	bf00      	nop
 80005c4:	e7fe      	b.n	80005c4 <main+0x50>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0x9c>)
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	4910      	ldr	r1, [pc, #64]	; (8000614 <main+0xa0>)
 80005d4:	4810      	ldr	r0, [pc, #64]	; (8000618 <main+0xa4>)
 80005d6:	f001 fe5a 	bl	800228e <xTaskCreate>
 80005da:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x84>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	60fb      	str	r3, [r7, #12]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x82>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005f8:	f001 ff80 	bl	80024fc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x88>
 80005fe:	bf00      	nop
 8000600:	e0001000 	.word	0xe0001000
 8000604:	080041d0 	.word	0x080041d0
 8000608:	080041e8 	.word	0x080041e8
 800060c:	080009ad 	.word	0x080009ad
 8000610:	080041f0 	.word	0x080041f0
 8000614:	08004208 	.word	0x08004208
 8000618:	080009d9 	.word	0x080009d9

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fe20 	bl	8003270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000690:	2332      	movs	r3, #50	; 0x32
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000694:	2304      	movs	r3, #4
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fe15 	bl	80012d0 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f9bc 	bl	8000a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f876 	bl	80017c0 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f9a5 	bl	8000a28 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4ba2      	ldr	r3, [pc, #648]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4aa1      	ldr	r2, [pc, #644]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b9f      	ldr	r3, [pc, #636]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	4b9b      	ldr	r3, [pc, #620]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a9a      	ldr	r2, [pc, #616]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b98      	ldr	r3, [pc, #608]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b94      	ldr	r3, [pc, #592]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a93      	ldr	r2, [pc, #588]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b91      	ldr	r3, [pc, #580]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b8d      	ldr	r3, [pc, #564]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a8c      	ldr	r2, [pc, #560]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b8a      	ldr	r3, [pc, #552]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b86      	ldr	r3, [pc, #536]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a85      	ldr	r2, [pc, #532]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b83      	ldr	r3, [pc, #524]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b7f      	ldr	r3, [pc, #508]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a7e      	ldr	r2, [pc, #504]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b7c      	ldr	r3, [pc, #496]	; (8000994 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	4879      	ldr	r0, [pc, #484]	; (8000998 <MX_GPIO_Init+0x2a8>)
 80007b4:	f000 fd72 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	4877      	ldr	r0, [pc, #476]	; (800099c <MX_GPIO_Init+0x2ac>)
 80007be:	f000 fd6d 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c2:	2200      	movs	r2, #0
 80007c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c8:	4875      	ldr	r0, [pc, #468]	; (80009a0 <MX_GPIO_Init+0x2b0>)
 80007ca:	f000 fd67 	bl	800129c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ce:	2308      	movs	r3, #8
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	486c      	ldr	r0, [pc, #432]	; (8000998 <MX_GPIO_Init+0x2a8>)
 80007e6:	f000 fbbd 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4866      	ldr	r0, [pc, #408]	; (800099c <MX_GPIO_Init+0x2ac>)
 8000802:	f000 fbaf 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000806:	2308      	movs	r3, #8
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000816:	2305      	movs	r3, #5
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	485e      	ldr	r0, [pc, #376]	; (800099c <MX_GPIO_Init+0x2ac>)
 8000822:	f000 fb9f 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	485a      	ldr	r0, [pc, #360]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800083c:	f000 fb92 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000840:	2310      	movs	r3, #16
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000850:	2306      	movs	r3, #6
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4852      	ldr	r0, [pc, #328]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800085c:	f000 fb82 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000860:	23e0      	movs	r3, #224	; 0xe0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000870:	2305      	movs	r3, #5
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	484a      	ldr	r0, [pc, #296]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800087c:	f000 fb72 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000880:	2304      	movs	r3, #4
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4845      	ldr	r0, [pc, #276]	; (80009a8 <MX_GPIO_Init+0x2b8>)
 8000894:	f000 fb66 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	483c      	ldr	r0, [pc, #240]	; (80009a8 <MX_GPIO_Init+0x2b8>)
 80008b6:	f000 fb55 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4833      	ldr	r0, [pc, #204]	; (80009a0 <MX_GPIO_Init+0x2b0>)
 80008d4:	f000 fb46 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ea:	2306      	movs	r3, #6
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4829      	ldr	r0, [pc, #164]	; (800099c <MX_GPIO_Init+0x2ac>)
 80008f6:	f000 fb35 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4825      	ldr	r0, [pc, #148]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000910:	f000 fb28 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000914:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000926:	230a      	movs	r3, #10
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	481c      	ldr	r0, [pc, #112]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 8000932:	f000 fb17 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000936:	2320      	movs	r3, #32
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4815      	ldr	r0, [pc, #84]	; (80009a0 <MX_GPIO_Init+0x2b0>)
 800094a:	f000 fb0b 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800094e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000954:	2312      	movs	r3, #18
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	2301      	movs	r3, #1
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000960:	2304      	movs	r3, #4
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	480f      	ldr	r0, [pc, #60]	; (80009a8 <MX_GPIO_Init+0x2b8>)
 800096c:	f000 fafa 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000974:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_GPIO_Init+0x2a8>)
 8000986:	f000 faed 	bl	8000f64 <HAL_GPIO_Init>

}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	; 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020400 	.word	0x40020400

080009ac <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	//char msg[100];

	while(1)
	{
		printf("%s\r\n", (char*) parameters); //through SWO
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <task1_handler+0x24>)
 80009b8:	f002 fc62 	bl	8003280 <iprintf>

		//snprintf(msg,100,"%s\n", (char*)parameters);

		//SEGGER_SYSVIEW_PrintfTarget(msg);

		taskYIELD(); //leave processor
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <task1_handler+0x28>)
 80009be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	f3bf 8f6f 	isb	sy
		printf("%s\r\n", (char*) parameters); //through SWO
 80009cc:	e7f2      	b.n	80009b4 <task1_handler+0x8>
 80009ce:	bf00      	nop
 80009d0:	08004210 	.word	0x08004210
 80009d4:	e000ed04 	.word	0xe000ed04

080009d8 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	//char msg[100];

	while(1)
	{
		printf("%s\r\n", (char*) parameters);
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <task2_handler+0x24>)
 80009e4:	f002 fc4c 	bl	8003280 <iprintf>

		//snprintf(msg,100,"%s\n", (char*)parameters);

		//SEGGER_SYSVIEW_PrintfTarget(msg);

		taskYIELD();
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <task2_handler+0x28>)
 80009ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	f3bf 8f4f 	dsb	sy
 80009f4:	f3bf 8f6f 	isb	sy
		printf("%s\r\n", (char*) parameters);
 80009f8:	e7f2      	b.n	80009e0 <task2_handler+0x8>
 80009fa:	bf00      	nop
 80009fc:	08004210 	.word	0x08004210
 8000a00:	e000ed04 	.word	0xe000ed04

08000a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a16:	f000 f9a3 	bl	8000d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40001000 	.word	0x40001000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	2036      	movs	r0, #54	; 0x36
 8000a9a:	f000 fa39 	bl	8000f10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a9e:	2036      	movs	r0, #54	; 0x36
 8000aa0:	f000 fa52 	bl	8000f48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <HAL_InitTick+0xa4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <HAL_InitTick+0xa4>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0xa4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 0310 	and.w	r3, r3, #16
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f884 	bl	8001bd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ad0:	f001 f86e 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <HAL_InitTick+0xa8>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0c9b      	lsrs	r3, r3, #18
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_InitTick+0xac>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <HAL_InitTick+0xb0>)
 8000aec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_InitTick+0xac>)
 8000af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_InitTick+0xac>)
 8000af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_InitTick+0xac>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_InitTick+0xac>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <HAL_InitTick+0xac>)
 8000b0a:	f001 f897 	bl	8001c3c <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d104      	bne.n	8000b1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <HAL_InitTick+0xac>)
 8000b16:	f001 f8eb 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	431bde83 	.word	0x431bde83
 8000b30:	20000094 	.word	0x20000094
 8000b34:	40001000 	.word	0x40001000

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM6_DAC_IRQHandler+0x10>)
 8000b6a:	f001 f931 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000094 	.word	0x20000094

08000b78 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <ITM_SendChar+0x48>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <ITM_SendChar+0x48>)
 8000b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b8c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <ITM_SendChar+0x4c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <ITM_SendChar+0x4c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b9a:	bf00      	nop
 8000b9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f8      	beq.n	8000b9c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000baa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	6013      	str	r3, [r2, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000edfc 	.word	0xe000edfc
 8000bc4:	e0000e00 	.word	0xe0000e00

08000bc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
	}

return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e009      	b.n	8000c28 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ffab 	bl	8000b78 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf1      	blt.n	8000c14 <_write+0x12>

	}
	return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_close>:

int _close(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
	return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	605a      	str	r2, [r3, #4]
	return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_isatty>:

int _isatty(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
	return 1;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
	return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cce:	490e      	ldr	r1, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce4:	4c0b      	ldr	r4, [pc, #44]	; (8000d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cf2:	f7ff ffd7 	bl	8000ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f002 fa97 	bl	8003228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc3b 	bl	8000574 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d0c:	080042e0 	.word	0x080042e0
  ldr r2, =_sbss
 8000d10:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d14:	20012e20 	.word	0x20012e20

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f8d8 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fe9a 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fe70 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	200000dc 	.word	0x200000dc

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200000dc 	.word	0x200000dc

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f22:	f7ff ff61 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff ffb1 	bl	8000e94 <NVIC_EncodePriority>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff80 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff54 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e16b      	b.n	8001258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 815a 	bne.w	8001252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d130      	bne.n	8001018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 0201 	and.w	r2, r3, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b03      	cmp	r3, #3
 8001022:	d017      	beq.n	8001054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80b4 	beq.w	8001252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b60      	ldr	r3, [pc, #384]	; (8001270 <HAL_GPIO_Init+0x30c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a5f      	ldr	r2, [pc, #380]	; (8001270 <HAL_GPIO_Init+0x30c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b5d      	ldr	r3, [pc, #372]	; (8001270 <HAL_GPIO_Init+0x30c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a5b      	ldr	r2, [pc, #364]	; (8001274 <HAL_GPIO_Init+0x310>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a52      	ldr	r2, [pc, #328]	; (8001278 <HAL_GPIO_Init+0x314>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d02b      	beq.n	800118a <HAL_GPIO_Init+0x226>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a51      	ldr	r2, [pc, #324]	; (800127c <HAL_GPIO_Init+0x318>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d025      	beq.n	8001186 <HAL_GPIO_Init+0x222>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a50      	ldr	r2, [pc, #320]	; (8001280 <HAL_GPIO_Init+0x31c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01f      	beq.n	8001182 <HAL_GPIO_Init+0x21e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4f      	ldr	r2, [pc, #316]	; (8001284 <HAL_GPIO_Init+0x320>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d019      	beq.n	800117e <HAL_GPIO_Init+0x21a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_GPIO_Init+0x324>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0x216>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4d      	ldr	r2, [pc, #308]	; (800128c <HAL_GPIO_Init+0x328>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00d      	beq.n	8001176 <HAL_GPIO_Init+0x212>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_GPIO_Init+0x32c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d007      	beq.n	8001172 <HAL_GPIO_Init+0x20e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_GPIO_Init+0x330>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d101      	bne.n	800116e <HAL_GPIO_Init+0x20a>
 800116a:	2307      	movs	r3, #7
 800116c:	e00e      	b.n	800118c <HAL_GPIO_Init+0x228>
 800116e:	2308      	movs	r3, #8
 8001170:	e00c      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001172:	2306      	movs	r3, #6
 8001174:	e00a      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001176:	2305      	movs	r3, #5
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x228>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x228>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x228>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	; (8001274 <HAL_GPIO_Init+0x310>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a32      	ldr	r2, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_GPIO_Init+0x334>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x334>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_GPIO_Init+0x334>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_GPIO_Init+0x334>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f ae90 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40021400 	.word	0x40021400
 8001290:	40021800 	.word	0x40021800
 8001294:	40021c00 	.word	0x40021c00
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e267      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d075      	beq.n	80013da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d00c      	beq.n	8001314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d112      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4b82      	ldr	r3, [pc, #520]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001312:	d10b      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d05b      	beq.n	80013d8 <HAL_RCC_OscConfig+0x108>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d157      	bne.n	80013d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e242      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x74>
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b70      	ldr	r3, [pc, #448]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6f      	ldr	r2, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6c      	ldr	r2, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001368:	4b69      	ldr	r3, [pc, #420]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a68      	ldr	r2, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b66      	ldr	r3, [pc, #408]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a65      	ldr	r2, [pc, #404]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcfe 	bl	8000d88 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fcfa 	bl	8000d88 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e207      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xc0>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcea 	bl	8000d88 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fce6 	bl	8000d88 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1f3      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	4b51      	ldr	r3, [pc, #324]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0xe8>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d11c      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b44      	ldr	r3, [pc, #272]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e1c7      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4937      	ldr	r1, [pc, #220]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e03a      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x244>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fc9f 	bl	8000d88 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fc9b 	bl	8000d88 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1a8      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4925      	ldr	r1, [pc, #148]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_OscConfig+0x244>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc7e 	bl	8000d88 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fc7a 	bl	8000d88 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e187      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d036      	beq.n	8001528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d016      	beq.n	80014f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_RCC_OscConfig+0x248>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fc5e 	bl	8000d88 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc5a 	bl	8000d88 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e167      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x200>
 80014ee:	e01b      	b.n	8001528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RCC_OscConfig+0x248>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fc47 	bl	8000d88 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00e      	b.n	800151c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc43 	bl	8000d88 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d907      	bls.n	800151c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e150      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001510:	40023800 	.word	0x40023800
 8001514:	42470000 	.word	0x42470000
 8001518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b88      	ldr	r3, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ea      	bne.n	80014fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8097 	beq.w	8001664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b81      	ldr	r3, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b7d      	ldr	r3, [pc, #500]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a7c      	ldr	r2, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b77      	ldr	r3, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a73      	ldr	r2, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fc03 	bl	8000d88 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001586:	f7ff fbff 	bl	8000d88 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e10c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x2ea>
 80015ac:	4b64      	ldr	r3, [pc, #400]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	4a63      	ldr	r2, [pc, #396]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	; 0x70
 80015b8:	e01c      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x30c>
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a5e      	ldr	r2, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a57      	ldr	r2, [pc, #348]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	4a54      	ldr	r2, [pc, #336]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d015      	beq.n	8001628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fbc4 	bl	8000d88 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fbc0 	bl	8000d88 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0cb      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	4b49      	ldr	r3, [pc, #292]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ee      	beq.n	8001604 <HAL_RCC_OscConfig+0x334>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fbae 	bl	8000d88 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fbaa 	bl	8000d88 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0b5      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ee      	bne.n	8001630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	4a38      	ldr	r2, [pc, #224]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a1 	beq.w	80017b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d05c      	beq.n	8001734 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d141      	bne.n	8001706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb7e 	bl	8000d88 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb7a 	bl	8000d88 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e087      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	019b      	lsls	r3, r3, #6
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	3b01      	subs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	491b      	ldr	r1, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x478>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb53 	bl	8000d88 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fb4f 	bl	8000d88 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e05c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x416>
 8001704:	e054      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x478>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb3c 	bl	8000d88 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fb38 	bl	8000d88 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e045      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
 8001732:	e03d      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e038      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000
 8001748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x4ec>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d028      	beq.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d121      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d11a      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800177c:	4013      	ands	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001784:	4293      	cmp	r3, r2
 8001786:	d111      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0cc      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d90c      	bls.n	80017fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b8      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001814:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800182c:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a52      	ldr	r2, [pc, #328]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	494d      	ldr	r1, [pc, #308]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d044      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e067      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4934      	ldr	r1, [pc, #208]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fa6a 	bl	8000d88 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff fa66 	bl	8000d88 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e04f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20c      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e032      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4916      	ldr	r1, [pc, #88]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	490e      	ldr	r1, [pc, #56]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001946:	f000 f821 	bl	800198c <HAL_RCC_GetSysClockFreq>
 800194a:	4602      	mov	r2, r0
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	490a      	ldr	r1, [pc, #40]	; (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	5ccb      	ldrb	r3, [r1, r3]
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f88c 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00
 800197c:	40023800 	.word	0x40023800
 8001980:	08004220 	.word	0x08004220
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001990:	b094      	sub	sp, #80	; 0x50
 8001992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
 8001998:	2300      	movs	r3, #0
 800199a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800199c:	2300      	movs	r3, #0
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a4:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d00d      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x40>
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	f200 80e1 	bhi.w	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x34>
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019be:	e0db      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019c4:	e0db      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ca:	e0d8      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	2200      	movs	r2, #0
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
 80019fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019fe:	4622      	mov	r2, r4
 8001a00:	462b      	mov	r3, r5
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4621      	mov	r1, r4
 8001a18:	1a51      	subs	r1, r2, r1
 8001a1a:	6139      	str	r1, [r7, #16]
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a30:	4659      	mov	r1, fp
 8001a32:	018b      	lsls	r3, r1, #6
 8001a34:	4651      	mov	r1, sl
 8001a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	018a      	lsls	r2, r1, #6
 8001a3e:	4651      	mov	r1, sl
 8001a40:	ebb2 0801 	subs.w	r8, r2, r1
 8001a44:	4659      	mov	r1, fp
 8001a46:	eb63 0901 	sbc.w	r9, r3, r1
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a5e:	4690      	mov	r8, r2
 8001a60:	4699      	mov	r9, r3
 8001a62:	4623      	mov	r3, r4
 8001a64:	eb18 0303 	adds.w	r3, r8, r3
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	eb49 0303 	adc.w	r3, r9, r3
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	024b      	lsls	r3, r1, #9
 8001a82:	4621      	mov	r1, r4
 8001a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a88:	4621      	mov	r1, r4
 8001a8a:	024a      	lsls	r2, r1, #9
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a92:	2200      	movs	r2, #0
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a9c:	f7fe fbe8 	bl	8000270 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa8:	e058      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	0159      	lsls	r1, r3, #5
 8001ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad6:	0150      	lsls	r0, r2, #5
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001afc:	ebb2 040a 	subs.w	r4, r2, sl
 8001b00:	eb63 050b 	sbc.w	r5, r3, fp
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	00eb      	lsls	r3, r5, #3
 8001b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b12:	00e2      	lsls	r2, r4, #3
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	4643      	mov	r3, r8
 8001b1a:	18e3      	adds	r3, r4, r3
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	464b      	mov	r3, r9
 8001b20:	eb45 0303 	adc.w	r3, r5, r3
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b32:	4629      	mov	r1, r5
 8001b34:	028b      	lsls	r3, r1, #10
 8001b36:	4621      	mov	r1, r4
 8001b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	028a      	lsls	r2, r1, #10
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	61fa      	str	r2, [r7, #28]
 8001b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b50:	f7fe fb8e 	bl	8000270 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3750      	adds	r7, #80	; 0x50
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200

08001b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0a9b      	lsrs	r3, r3, #10
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08004230 	.word	0x08004230

08001bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	220f      	movs	r2, #15
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_RCC_GetClockConfig+0x60>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f839 	bl	8001cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 f9d8 	bl	8002030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e04e      	b.n	8001da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d32:	d01d      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d010      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40010400 	.word	0x40010400
 8001dc8:	40014000 	.word	0x40014000
 8001dcc:	40001800 	.word	0x40001800

08001dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0202 	mvn.w	r2, #2
 8001dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8ee 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8e0 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8f1 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0204 	mvn.w	r2, #4
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8c4 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8b6 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8c7 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0208 	mvn.w	r2, #8
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f89a 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f88c 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f89d 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d122      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d11b      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0210 	mvn.w	r2, #16
 8001ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2208      	movs	r2, #8
 8001efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f870 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f862 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f873 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0201 	mvn.w	r2, #1
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fd58 	bl	8000a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f902 	bl	8002184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b40      	cmp	r3, #64	; 0x40
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f98:	2b40      	cmp	r3, #64	; 0x40
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f838 	bl	800201c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d107      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0220 	mvn.w	r2, #32
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8cc 	bl	8002170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a40      	ldr	r2, [pc, #256]	; (8002144 <TIM_Base_SetConfig+0x114>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204e:	d00f      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3d      	ldr	r2, [pc, #244]	; (8002148 <TIM_Base_SetConfig+0x118>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00b      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3c      	ldr	r2, [pc, #240]	; (800214c <TIM_Base_SetConfig+0x11c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d007      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3b      	ldr	r2, [pc, #236]	; (8002150 <TIM_Base_SetConfig+0x120>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <TIM_Base_SetConfig+0x124>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d108      	bne.n	8002082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <TIM_Base_SetConfig+0x114>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d027      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <TIM_Base_SetConfig+0x118>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d023      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2b      	ldr	r2, [pc, #172]	; (800214c <TIM_Base_SetConfig+0x11c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <TIM_Base_SetConfig+0x120>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01b      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a29      	ldr	r2, [pc, #164]	; (8002154 <TIM_Base_SetConfig+0x124>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d017      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a28      	ldr	r2, [pc, #160]	; (8002158 <TIM_Base_SetConfig+0x128>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <TIM_Base_SetConfig+0x12c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00f      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <TIM_Base_SetConfig+0x130>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00b      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <TIM_Base_SetConfig+0x134>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a24      	ldr	r2, [pc, #144]	; (8002168 <TIM_Base_SetConfig+0x138>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d003      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a23      	ldr	r2, [pc, #140]	; (800216c <TIM_Base_SetConfig+0x13c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d108      	bne.n	80020f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <TIM_Base_SetConfig+0x114>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <TIM_Base_SetConfig+0xf8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <TIM_Base_SetConfig+0x124>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d103      	bne.n	8002130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	615a      	str	r2, [r3, #20]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40010000 	.word	0x40010000
 8002148:	40000400 	.word	0x40000400
 800214c:	40000800 	.word	0x40000800
 8002150:	40000c00 	.word	0x40000c00
 8002154:	40010400 	.word	0x40010400
 8002158:	40014000 	.word	0x40014000
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800
 8002164:	40001800 	.word	0x40001800
 8002168:	40001c00 	.word	0x40001c00
 800216c:	40002000 	.word	0x40002000

08002170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0208 	add.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f103 0208 	add.w	r2, r3, #8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f103 0208 	add.w	r2, r3, #8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6892      	ldr	r2, [r2, #8]
 8002250:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6852      	ldr	r2, [r2, #4]
 800225a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	429a      	cmp	r2, r3
 8002264:	d103      	bne.n	800226e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800228e:	b580      	push	{r7, lr}
 8002290:	b08c      	sub	sp, #48	; 0x30
 8002292:	af04      	add	r7, sp, #16
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fdc2 	bl	8002e2c <pvPortMalloc>
 80022a8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022b0:	2058      	movs	r0, #88	; 0x58
 80022b2:	f000 fdbb 	bl	8002e2c <pvPortMalloc>
 80022b6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
 80022c4:	e005      	b.n	80022d2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f000 fe90 	bl	8002fec <vPortFree>
 80022cc:	e001      	b.n	80022d2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	2300      	movs	r3, #0
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f80e 	bl	8002310 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80022f4:	69f8      	ldr	r0, [r7, #28]
 80022f6:	f000 f8a1 	bl	800243c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	e002      	b.n	8002306 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002304:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002306:	69bb      	ldr	r3, [r7, #24]
    }
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	461a      	mov	r2, r3
 8002328:	21a5      	movs	r1, #165	; 0xa5
 800232a:	f000 ffa1 	bl	8003270 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002338:	3b01      	subs	r3, #1
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f023 0307 	bic.w	r3, r3, #7
 8002346:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002356:	f383 8811 	msr	BASEPRI, r3
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	617b      	str	r3, [r7, #20]
    }
 8002364:	bf00      	nop
 8002366:	e7fe      	b.n	8002366 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01f      	beq.n	80023ae <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e012      	b.n	800239a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	7819      	ldrb	r1, [r3, #0]
 800237c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	4413      	add	r3, r2
 8002382:	3334      	adds	r3, #52	; 0x34
 8002384:	460a      	mov	r2, r1
 8002386:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	3301      	adds	r3, #1
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d9e9      	bls.n	8002374 <prvInitialiseNewTask+0x64>
 80023a0:	e000      	b.n	80023a4 <prvInitialiseNewTask+0x94>
            {
                break;
 80023a2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023ac:	e003      	b.n	80023b6 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d901      	bls.n	80023c0 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023bc:	2304      	movs	r3, #4
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ca:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80023cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ce:	2200      	movs	r2, #0
 80023d0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	3304      	adds	r3, #4
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fefe 	bl	80021d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	3318      	adds	r3, #24
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fef9 	bl	80021d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	f1c3 0205 	rsb	r2, r3, #5
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	3350      	adds	r3, #80	; 0x50
 8002400:	2204      	movs	r2, #4
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f000 ff33 	bl	8003270 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	3354      	adds	r3, #84	; 0x54
 800240e:	2201      	movs	r2, #1
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f000 ff2c 	bl	8003270 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	68f9      	ldr	r1, [r7, #12]
 800241c:	69b8      	ldr	r0, [r7, #24]
 800241e:	f000 faf3 	bl	8002a08 <pxPortInitialiseStack>
 8002422:	4602      	mov	r2, r0
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002432:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002444:	f000 fc10 	bl	8002c68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002448:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <prvAddNewTaskToReadyList+0xa8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <prvAddNewTaskToReadyList+0xa8>)
 8002450:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <prvAddNewTaskToReadyList+0xac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800245a:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <prvAddNewTaskToReadyList+0xac>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <prvAddNewTaskToReadyList+0xa8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d110      	bne.n	800248a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002468:	f000 fa34 	bl	80028d4 <prvInitialiseTaskLists>
 800246c:	e00d      	b.n	800248a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800246e:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <prvAddNewTaskToReadyList+0xb0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <prvAddNewTaskToReadyList+0xac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	429a      	cmp	r2, r3
 8002482:	d802      	bhi.n	800248a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002484:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <prvAddNewTaskToReadyList+0xac>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <prvAddNewTaskToReadyList+0xb4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <prvAddNewTaskToReadyList+0xb4>)
 8002492:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <prvAddNewTaskToReadyList+0xb4>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	2201      	movs	r2, #1
 80024a2:	409a      	lsls	r2, r3
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <prvAddNewTaskToReadyList+0xb8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <prvAddNewTaskToReadyList+0xb8>)
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <prvAddNewTaskToReadyList+0xbc>)
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	4619      	mov	r1, r3
 80024c4:	4610      	mov	r0, r2
 80024c6:	f7ff fe94 	bl	80021f2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024ca:	f000 fbfd 	bl	8002cc8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <prvAddNewTaskToReadyList+0xb0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <prvAddNewTaskToReadyList+0xac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200001b8 	.word	0x200001b8
 80024e8:	200000e0 	.word	0x200000e0
 80024ec:	200001c4 	.word	0x200001c4
 80024f0:	200001d4 	.word	0x200001d4
 80024f4:	200001c0 	.word	0x200001c0
 80024f8:	200000e4 	.word	0x200000e4

080024fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <vTaskStartScheduler+0x7c>)
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	2282      	movs	r2, #130	; 0x82
 800250e:	491b      	ldr	r1, [pc, #108]	; (800257c <vTaskStartScheduler+0x80>)
 8002510:	481b      	ldr	r0, [pc, #108]	; (8002580 <vTaskStartScheduler+0x84>)
 8002512:	f7ff febc 	bl	800228e <xTaskCreate>
 8002516:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d116      	bne.n	800254c <vTaskStartScheduler+0x50>
        __asm volatile
 800251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002522:	f383 8811 	msr	BASEPRI, r3
 8002526:	f3bf 8f6f 	isb	sy
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	60bb      	str	r3, [r7, #8]
    }
 8002530:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <vTaskStartScheduler+0x88>)
 8002534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002538:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <vTaskStartScheduler+0x8c>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <vTaskStartScheduler+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002546:	f000 faed 	bl	8002b24 <xPortStartScheduler>
 800254a:	e00e      	b.n	800256a <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002552:	d10a      	bne.n	800256a <vTaskStartScheduler+0x6e>
        __asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	607b      	str	r3, [r7, #4]
    }
 8002566:	bf00      	nop
 8002568:	e7fe      	b.n	8002568 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <vTaskStartScheduler+0x94>)
 800256c:	681b      	ldr	r3, [r3, #0]
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200001dc 	.word	0x200001dc
 800257c:	08004218 	.word	0x08004218
 8002580:	080028b1 	.word	0x080028b1
 8002584:	200001d8 	.word	0x200001d8
 8002588:	200001c4 	.word	0x200001c4
 800258c:	200001bc 	.word	0x200001bc
 8002590:	2000000c 	.word	0x2000000c

08002594 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <vTaskSuspendAll+0x18>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	4a03      	ldr	r2, [pc, #12]	; (80025ac <vTaskSuspendAll+0x18>)
 80025a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	200001e0 	.word	0x200001e0

080025b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <xTaskResumeAll+0xfc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <xTaskResumeAll+0x2c>
        __asm volatile
 80025c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	603b      	str	r3, [r7, #0]
    }
 80025d8:	bf00      	nop
 80025da:	e7fe      	b.n	80025da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025dc:	f000 fb44 	bl	8002c68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025e0:	4b32      	ldr	r3, [pc, #200]	; (80026ac <xTaskResumeAll+0xfc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	4a31      	ldr	r2, [pc, #196]	; (80026ac <xTaskResumeAll+0xfc>)
 80025e8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <xTaskResumeAll+0xfc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d155      	bne.n	800269e <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <xTaskResumeAll+0x100>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d051      	beq.n	800269e <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025fa:	e02e      	b.n	800265a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <xTaskResumeAll+0x104>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3318      	adds	r3, #24
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fe16 	bl	800223a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3304      	adds	r3, #4
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fe11 	bl	800223a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <xTaskResumeAll+0x108>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <xTaskResumeAll+0x108>)
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <xTaskResumeAll+0x10c>)
 8002638:	441a      	add	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3304      	adds	r3, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f7ff fdd6 	bl	80021f2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <xTaskResumeAll+0x110>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <xTaskResumeAll+0x114>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <xTaskResumeAll+0x104>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1cc      	bne.n	80025fc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002668:	f000 f9b2 	bl	80029d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800266c:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <xTaskResumeAll+0x118>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002678:	f000 f828 	bl	80026cc <xTaskIncrementTick>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <xTaskResumeAll+0x114>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3b01      	subs	r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f1      	bne.n	8002678 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <xTaskResumeAll+0x118>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <xTaskResumeAll+0x114>)
 800269c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800269e:	f000 fb13 	bl	8002cc8 <vPortExitCritical>

    return xAlreadyYielded;
 80026a2:	687b      	ldr	r3, [r7, #4]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200001e0 	.word	0x200001e0
 80026b0:	200001b8 	.word	0x200001b8
 80026b4:	20000178 	.word	0x20000178
 80026b8:	200001c0 	.word	0x200001c0
 80026bc:	200000e4 	.word	0x200000e4
 80026c0:	200000e0 	.word	0x200000e0
 80026c4:	200001cc 	.word	0x200001cc
 80026c8:	200001c8 	.word	0x200001c8

080026cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <xTaskIncrementTick+0x108>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d16f      	bne.n	80027be <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026de:	4b3e      	ldr	r3, [pc, #248]	; (80027d8 <xTaskIncrementTick+0x10c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026e6:	4a3c      	ldr	r2, [pc, #240]	; (80027d8 <xTaskIncrementTick+0x10c>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d120      	bne.n	8002734 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80026f2:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <xTaskIncrementTick+0x110>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <xTaskIncrementTick+0x46>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	603b      	str	r3, [r7, #0]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xTaskIncrementTick+0x44>
 8002712:	4b32      	ldr	r3, [pc, #200]	; (80027dc <xTaskIncrementTick+0x110>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <xTaskIncrementTick+0x114>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2f      	ldr	r2, [pc, #188]	; (80027dc <xTaskIncrementTick+0x110>)
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <xTaskIncrementTick+0x114>)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <xTaskIncrementTick+0x118>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <xTaskIncrementTick+0x118>)
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	f000 f94e 	bl	80029d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002734:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <xTaskIncrementTick+0x11c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	429a      	cmp	r2, r3
 800273c:	d344      	bcc.n	80027c8 <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800273e:	4b27      	ldr	r3, [pc, #156]	; (80027dc <xTaskIncrementTick+0x110>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <xTaskIncrementTick+0x11c>)
 800274a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800274e:	601a      	str	r2, [r3, #0]
                    break;
 8002750:	e03a      	b.n	80027c8 <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002752:	4b22      	ldr	r3, [pc, #136]	; (80027dc <xTaskIncrementTick+0x110>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	d203      	bcs.n	8002772 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800276a:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <xTaskIncrementTick+0x11c>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002770:	e02a      	b.n	80027c8 <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3304      	adds	r3, #4
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fd5f 	bl	800223a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	3318      	adds	r3, #24
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fd56 	bl	800223a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	2201      	movs	r2, #1
 8002794:	409a      	lsls	r2, r3
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <xTaskIncrementTick+0x120>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	4a13      	ldr	r2, [pc, #76]	; (80027ec <xTaskIncrementTick+0x120>)
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <xTaskIncrementTick+0x124>)
 80027ae:	441a      	add	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f7ff fd1b 	bl	80021f2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027bc:	e7bf      	b.n	800273e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <xTaskIncrementTick+0x128>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <xTaskIncrementTick+0x128>)
 80027c6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80027c8:	697b      	ldr	r3, [r7, #20]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200001e0 	.word	0x200001e0
 80027d8:	200001bc 	.word	0x200001bc
 80027dc:	20000170 	.word	0x20000170
 80027e0:	20000174 	.word	0x20000174
 80027e4:	200001d0 	.word	0x200001d0
 80027e8:	200001d8 	.word	0x200001d8
 80027ec:	200001c0 	.word	0x200001c0
 80027f0:	200000e4 	.word	0x200000e4
 80027f4:	200001c8 	.word	0x200001c8

080027f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027fe:	4b27      	ldr	r3, [pc, #156]	; (800289c <vTaskSwitchContext+0xa4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <vTaskSwitchContext+0xa8>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800280c:	e03f      	b.n	800288e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <vTaskSwitchContext+0xa8>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <vTaskSwitchContext+0xac>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002822:	7afb      	ldrb	r3, [r7, #11]
 8002824:	f1c3 031f 	rsb	r3, r3, #31
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	491f      	ldr	r1, [pc, #124]	; (80028a8 <vTaskSwitchContext+0xb0>)
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <vTaskSwitchContext+0x5c>
        __asm volatile
 800283e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002842:	f383 8811 	msr	BASEPRI, r3
 8002846:	f3bf 8f6f 	isb	sy
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	607b      	str	r3, [r7, #4]
    }
 8002850:	bf00      	nop
 8002852:	e7fe      	b.n	8002852 <vTaskSwitchContext+0x5a>
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <vTaskSwitchContext+0xb0>)
 8002860:	4413      	add	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	3308      	adds	r3, #8
 8002876:	429a      	cmp	r2, r3
 8002878:	d104      	bne.n	8002884 <vTaskSwitchContext+0x8c>
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <vTaskSwitchContext+0xb4>)
 800288c:	6013      	str	r3, [r2, #0]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	200001e0 	.word	0x200001e0
 80028a0:	200001cc 	.word	0x200001cc
 80028a4:	200001c0 	.word	0x200001c0
 80028a8:	200000e4 	.word	0x200000e4
 80028ac:	200000e0 	.word	0x200000e0

080028b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80028b8:	f000 f84c 	bl	8002954 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <prvIdleTask+0x20>)
 80028be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80028cc:	e7f4      	b.n	80028b8 <prvIdleTask+0x8>
 80028ce:	bf00      	nop
 80028d0:	e000ed04 	.word	0xe000ed04

080028d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	e00c      	b.n	80028fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <prvInitialiseTaskLists+0x60>)
 80028ec:	4413      	add	r3, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fc52 	bl	8002198 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3301      	adds	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d9ef      	bls.n	80028e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002900:	480d      	ldr	r0, [pc, #52]	; (8002938 <prvInitialiseTaskLists+0x64>)
 8002902:	f7ff fc49 	bl	8002198 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002906:	480d      	ldr	r0, [pc, #52]	; (800293c <prvInitialiseTaskLists+0x68>)
 8002908:	f7ff fc46 	bl	8002198 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <prvInitialiseTaskLists+0x6c>)
 800290e:	f7ff fc43 	bl	8002198 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002912:	480c      	ldr	r0, [pc, #48]	; (8002944 <prvInitialiseTaskLists+0x70>)
 8002914:	f7ff fc40 	bl	8002198 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002918:	480b      	ldr	r0, [pc, #44]	; (8002948 <prvInitialiseTaskLists+0x74>)
 800291a:	f7ff fc3d 	bl	8002198 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <prvInitialiseTaskLists+0x78>)
 8002920:	4a05      	ldr	r2, [pc, #20]	; (8002938 <prvInitialiseTaskLists+0x64>)
 8002922:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <prvInitialiseTaskLists+0x7c>)
 8002926:	4a05      	ldr	r2, [pc, #20]	; (800293c <prvInitialiseTaskLists+0x68>)
 8002928:	601a      	str	r2, [r3, #0]
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200000e4 	.word	0x200000e4
 8002938:	20000148 	.word	0x20000148
 800293c:	2000015c 	.word	0x2000015c
 8002940:	20000178 	.word	0x20000178
 8002944:	2000018c 	.word	0x2000018c
 8002948:	200001a4 	.word	0x200001a4
 800294c:	20000170 	.word	0x20000170
 8002950:	20000174 	.word	0x20000174

08002954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800295a:	e019      	b.n	8002990 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800295c:	f000 f984 	bl	8002c68 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <prvCheckTasksWaitingTermination+0x50>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fc64 	bl	800223a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <prvCheckTasksWaitingTermination+0x54>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3b01      	subs	r3, #1
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <prvCheckTasksWaitingTermination+0x54>)
 800297a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <prvCheckTasksWaitingTermination+0x58>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3b01      	subs	r3, #1
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <prvCheckTasksWaitingTermination+0x58>)
 8002984:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002986:	f000 f99f 	bl	8002cc8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f810 	bl	80029b0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <prvCheckTasksWaitingTermination+0x58>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e1      	bne.n	800295c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	2000018c 	.word	0x2000018c
 80029a8:	200001b8 	.word	0x200001b8
 80029ac:	200001a0 	.word	0x200001a0

080029b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fb15 	bl	8002fec <vPortFree>
                vPortFree( pxTCB );
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fb12 	bl	8002fec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <prvResetNextTaskUnblockTime+0x30>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <prvResetNextTaskUnblockTime+0x34>)
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029e6:	e005      	b.n	80029f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <prvResetNextTaskUnblockTime+0x30>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <prvResetNextTaskUnblockTime+0x34>)
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000170 	.word	0x20000170
 8002a04:	200001d8 	.word	0x200001d8

08002a08 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3b04      	subs	r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3b04      	subs	r3, #4
 8002a26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f023 0201 	bic.w	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3b04      	subs	r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a38:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <pxPortInitialiseStack+0x64>)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3b14      	subs	r3, #20
 8002a42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3b04      	subs	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f06f 0202 	mvn.w	r2, #2
 8002a56:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3b20      	subs	r3, #32
 8002a5c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	08002a71 	.word	0x08002a71

08002a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <prvTaskExitError+0x54>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a82:	d00a      	beq.n	8002a9a <prvTaskExitError+0x2a>
        __asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	60fb      	str	r3, [r7, #12]
    }
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <prvTaskExitError+0x28>
        __asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	60bb      	str	r3, [r7, #8]
    }
 8002aac:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002aae:	bf00      	nop
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0fc      	beq.n	8002ab0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	20000010 	.word	0x20000010
	...

08002ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <pxCurrentTCBConst2>)
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	6808      	ldr	r0, [r1, #0]
 8002ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ada:	f380 8809 	msr	PSP, r0
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f380 8811 	msr	BASEPRI, r0
 8002aea:	4770      	bx	lr
 8002aec:	f3af 8000 	nop.w

08002af0 <pxCurrentTCBConst2>:
 8002af0:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop

08002af8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002af8:	4808      	ldr	r0, [pc, #32]	; (8002b1c <prvPortStartFirstTask+0x24>)
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	6800      	ldr	r0, [r0, #0]
 8002afe:	f380 8808 	msr	MSP, r0
 8002b02:	f04f 0000 	mov.w	r0, #0
 8002b06:	f380 8814 	msr	CONTROL, r0
 8002b0a:	b662      	cpsie	i
 8002b0c:	b661      	cpsie	f
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	df00      	svc	0
 8002b18:	bf00      	nop
 8002b1a:	0000      	.short	0x0000
 8002b1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop

08002b24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <xPortStartScheduler+0x120>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a46      	ldr	r2, [pc, #280]	; (8002c48 <xPortStartScheduler+0x124>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10a      	bne.n	8002b4a <xPortStartScheduler+0x26>
        __asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	613b      	str	r3, [r7, #16]
    }
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <xPortStartScheduler+0x120>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a3f      	ldr	r2, [pc, #252]	; (8002c4c <xPortStartScheduler+0x128>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10a      	bne.n	8002b6a <xPortStartScheduler+0x46>
        __asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	60fb      	str	r3, [r7, #12]
    }
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b6a:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <xPortStartScheduler+0x12c>)
 8002b6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	22ff      	movs	r2, #255	; 0xff
 8002b7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <xPortStartScheduler+0x130>)
 8002b90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b92:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <xPortStartScheduler+0x134>)
 8002b94:	2207      	movs	r2, #7
 8002b96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b98:	e009      	b.n	8002bae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <xPortStartScheduler+0x134>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <xPortStartScheduler+0x134>)
 8002ba2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b80      	cmp	r3, #128	; 0x80
 8002bb8:	d0ef      	beq.n	8002b9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bba:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <xPortStartScheduler+0x134>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d00a      	beq.n	8002bdc <xPortStartScheduler+0xb8>
        __asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	60bb      	str	r3, [r7, #8]
    }
 8002bd8:	bf00      	nop
 8002bda:	e7fe      	b.n	8002bda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <xPortStartScheduler+0x134>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <xPortStartScheduler+0x134>)
 8002be4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002be6:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <xPortStartScheduler+0x134>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bee:	4a1a      	ldr	r2, [pc, #104]	; (8002c58 <xPortStartScheduler+0x134>)
 8002bf0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <xPortStartScheduler+0x138>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <xPortStartScheduler+0x138>)
 8002c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <xPortStartScheduler+0x138>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <xPortStartScheduler+0x138>)
 8002c0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c12:	f000 f8db 	bl	8002dcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <xPortStartScheduler+0x13c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c1c:	f000 f8fa 	bl	8002e14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <xPortStartScheduler+0x140>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0f      	ldr	r2, [pc, #60]	; (8002c64 <xPortStartScheduler+0x140>)
 8002c26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c2c:	f7ff ff64 	bl	8002af8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c30:	f7ff fde2 	bl	80027f8 <vTaskSwitchContext>
    prvTaskExitError();
 8002c34:	f7ff ff1c 	bl	8002a70 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00
 8002c48:	410fc271 	.word	0x410fc271
 8002c4c:	410fc270 	.word	0x410fc270
 8002c50:	e000e400 	.word	0xe000e400
 8002c54:	200001e4 	.word	0x200001e4
 8002c58:	200001e8 	.word	0x200001e8
 8002c5c:	e000ed20 	.word	0xe000ed20
 8002c60:	20000010 	.word	0x20000010
 8002c64:	e000ef34 	.word	0xe000ef34

08002c68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	607b      	str	r3, [r7, #4]
    }
 8002c80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <vPortEnterCritical+0x58>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <vPortEnterCritical+0x58>)
 8002c8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <vPortEnterCritical+0x58>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d10f      	bne.n	8002cb4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <vPortEnterCritical+0x5c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <vPortEnterCritical+0x4c>
        __asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	603b      	str	r3, [r7, #0]
    }
 8002cb0:	bf00      	nop
 8002cb2:	e7fe      	b.n	8002cb2 <vPortEnterCritical+0x4a>
    }
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	20000010 	.word	0x20000010
 8002cc4:	e000ed04 	.word	0xe000ed04

08002cc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <vPortExitCritical+0x50>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <vPortExitCritical+0x24>
        __asm volatile
 8002cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cda:	f383 8811 	msr	BASEPRI, r3
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	607b      	str	r3, [r7, #4]
    }
 8002ce8:	bf00      	nop
 8002cea:	e7fe      	b.n	8002cea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <vPortExitCritical+0x50>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <vPortExitCritical+0x50>)
 8002cf4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002cf6:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <vPortExitCritical+0x50>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <vPortExitCritical+0x42>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002d08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000010 	.word	0x20000010
 8002d1c:	00000000 	.word	0x00000000

08002d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002d20:	f3ef 8009 	mrs	r0, PSP
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <pxCurrentTCBConst>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	f01e 0f10 	tst.w	lr, #16
 8002d30:	bf08      	it	eq
 8002d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d3a:	6010      	str	r0, [r2, #0]
 8002d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d44:	f380 8811 	msr	BASEPRI, r0
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f7ff fd52 	bl	80027f8 <vTaskSwitchContext>
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	f380 8811 	msr	BASEPRI, r0
 8002d5c:	bc09      	pop	{r0, r3}
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	6808      	ldr	r0, [r1, #0]
 8002d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d66:	f01e 0f10 	tst.w	lr, #16
 8002d6a:	bf08      	it	eq
 8002d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d70:	f380 8809 	msr	PSP, r0
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	f3af 8000 	nop.w

08002d80 <pxCurrentTCBConst>:
 8002d80:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop

08002d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	607b      	str	r3, [r7, #4]
    }
 8002da0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002da2:	f7ff fc93 	bl	80026cc <xTaskIncrementTick>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <SysTick_Handler+0x40>)
 8002dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f383 8811 	msr	BASEPRI, r3
    }
 8002dbe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <vPortSetupTimerInterrupt+0x34>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <vPortSetupTimerInterrupt+0x38>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <vPortSetupTimerInterrupt+0x3c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <vPortSetupTimerInterrupt+0x40>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <vPortSetupTimerInterrupt+0x44>)
 8002dea:	3b01      	subs	r3, #1
 8002dec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <vPortSetupTimerInterrupt+0x34>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e010 	.word	0xe000e010
 8002e04:	e000e018 	.word	0xe000e018
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	10624dd3 	.word	0x10624dd3
 8002e10:	e000e014 	.word	0xe000e014

08002e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e24 <vPortEnableVFP+0x10>
 8002e18:	6801      	ldr	r1, [r0, #0]
 8002e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e1e:	6001      	str	r1, [r0, #0]
 8002e20:	4770      	bx	lr
 8002e22:	0000      	.short	0x0000
 8002e24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop

08002e2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002e38:	f7ff fbac 	bl	8002594 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e3c:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <pvPortMalloc+0x1a8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002e44:	f000 f934 	bl	80030b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e48:	4b63      	ldr	r3, [pc, #396]	; (8002fd8 <pvPortMalloc+0x1ac>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f040 80a7 	bne.w	8002fa4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d02d      	beq.n	8002eb8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d227      	bcs.n	8002eb8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002e68:	2208      	movs	r2, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d021      	beq.n	8002ebe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f023 0307 	bic.w	r3, r3, #7
 8002e80:	3308      	adds	r3, #8
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d214      	bcs.n	8002eb2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f023 0307 	bic.w	r3, r3, #7
 8002e8e:	3308      	adds	r3, #8
 8002e90:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <pvPortMalloc+0x92>
        __asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	617b      	str	r3, [r7, #20]
    }
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002eb6:	e002      	b.n	8002ebe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	e000      	b.n	8002ec0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ebe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d06e      	beq.n	8002fa4 <pvPortMalloc+0x178>
 8002ec6:	4b45      	ldr	r3, [pc, #276]	; (8002fdc <pvPortMalloc+0x1b0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d869      	bhi.n	8002fa4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <pvPortMalloc+0x1b4>)
 8002ed2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002ed4:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <pvPortMalloc+0x1b4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002eda:	e004      	b.n	8002ee6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d903      	bls.n	8002ef8 <pvPortMalloc+0xcc>
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f1      	bne.n	8002edc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <pvPortMalloc+0x1a8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d050      	beq.n	8002fa4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2208      	movs	r2, #8
 8002f08:	4413      	add	r3, r2
 8002f0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	1ad2      	subs	r2, r2, r3
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d91f      	bls.n	8002f64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <pvPortMalloc+0x120>
        __asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	613b      	str	r3, [r7, #16]
    }
 8002f48:	bf00      	nop
 8002f4a:	e7fe      	b.n	8002f4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1ad2      	subs	r2, r2, r3
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f5e:	69b8      	ldr	r0, [r7, #24]
 8002f60:	f000 f908 	bl	8003174 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <pvPortMalloc+0x1b0>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <pvPortMalloc+0x1b0>)
 8002f70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <pvPortMalloc+0x1b0>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <pvPortMalloc+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d203      	bcs.n	8002f86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <pvPortMalloc+0x1b0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <pvPortMalloc+0x1b8>)
 8002f84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <pvPortMalloc+0x1ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <pvPortMalloc+0x1bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <pvPortMalloc+0x1bc>)
 8002fa2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002fa4:	f7ff fb04 	bl	80025b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <pvPortMalloc+0x19c>
        __asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	60fb      	str	r3, [r7, #12]
    }
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <pvPortMalloc+0x19a>
    return pvReturn;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20012df4 	.word	0x20012df4
 8002fd8:	20012e08 	.word	0x20012e08
 8002fdc:	20012df8 	.word	0x20012df8
 8002fe0:	20012dec 	.word	0x20012dec
 8002fe4:	20012dfc 	.word	0x20012dfc
 8002fe8:	20012e00 	.word	0x20012e00

08002fec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04d      	beq.n	800309a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ffe:	2308      	movs	r3, #8
 8003000:	425b      	negs	r3, r3
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <vPortFree+0xb8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <vPortFree+0x44>
        __asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	60fb      	str	r3, [r7, #12]
    }
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <vPortFree+0x62>
        __asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	60bb      	str	r3, [r7, #8]
    }
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <vPortFree+0xb8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01e      	beq.n	800309a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d11a      	bne.n	800309a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <vPortFree+0xb8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	43db      	mvns	r3, r3
 800306e:	401a      	ands	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003074:	f7ff fa8e 	bl	8002594 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <vPortFree+0xbc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4413      	add	r3, r2
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <vPortFree+0xbc>)
 8003084:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003086:	6938      	ldr	r0, [r7, #16]
 8003088:	f000 f874 	bl	8003174 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800308c:	4b07      	ldr	r3, [pc, #28]	; (80030ac <vPortFree+0xc0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	4a06      	ldr	r2, [pc, #24]	; (80030ac <vPortFree+0xc0>)
 8003094:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003096:	f7ff fa8b 	bl	80025b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800309a:	bf00      	nop
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20012e08 	.word	0x20012e08
 80030a8:	20012df8 	.word	0x20012df8
 80030ac:	20012e04 	.word	0x20012e04

080030b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80030ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <prvHeapInit+0xac>)
 80030be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00c      	beq.n	80030e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3307      	adds	r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0307 	bic.w	r3, r3, #7
 80030d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	4a1f      	ldr	r2, [pc, #124]	; (800315c <prvHeapInit+0xac>)
 80030e0:	4413      	add	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030e8:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <prvHeapInit+0xb0>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <prvHeapInit+0xb0>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4413      	add	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80030fc:	2208      	movs	r2, #8
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0307 	bic.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a15      	ldr	r2, [pc, #84]	; (8003164 <prvHeapInit+0xb4>)
 8003110:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003112:	4b14      	ldr	r3, [pc, #80]	; (8003164 <prvHeapInit+0xb4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2200      	movs	r2, #0
 8003118:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <prvHeapInit+0xb4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	1ad2      	subs	r2, r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <prvHeapInit+0xb4>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <prvHeapInit+0xb8>)
 800313e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a09      	ldr	r2, [pc, #36]	; (800316c <prvHeapInit+0xbc>)
 8003146:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <prvHeapInit+0xc0>)
 800314a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800314e:	601a      	str	r2, [r3, #0]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	200001ec 	.word	0x200001ec
 8003160:	20012dec 	.word	0x20012dec
 8003164:	20012df4 	.word	0x20012df4
 8003168:	20012dfc 	.word	0x20012dfc
 800316c:	20012df8 	.word	0x20012df8
 8003170:	20012e08 	.word	0x20012e08

08003174 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800317c:	4b28      	ldr	r3, [pc, #160]	; (8003220 <prvInsertBlockIntoFreeList+0xac>)
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e002      	b.n	8003188 <prvInsertBlockIntoFreeList+0x14>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d8f7      	bhi.n	8003182 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	4413      	add	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d108      	bne.n	80031b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	441a      	add	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	441a      	add	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d118      	bne.n	80031fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <prvInsertBlockIntoFreeList+0xb0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d00d      	beq.n	80031f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e008      	b.n	8003204 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031f2:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <prvInsertBlockIntoFreeList+0xb0>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e003      	b.n	8003204 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d002      	beq.n	8003212 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20012dec 	.word	0x20012dec
 8003224:	20012df4 	.word	0x20012df4

08003228 <__libc_init_array>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4d0d      	ldr	r5, [pc, #52]	; (8003260 <__libc_init_array+0x38>)
 800322c:	4c0d      	ldr	r4, [pc, #52]	; (8003264 <__libc_init_array+0x3c>)
 800322e:	1b64      	subs	r4, r4, r5
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	2600      	movs	r6, #0
 8003234:	42a6      	cmp	r6, r4
 8003236:	d109      	bne.n	800324c <__libc_init_array+0x24>
 8003238:	4d0b      	ldr	r5, [pc, #44]	; (8003268 <__libc_init_array+0x40>)
 800323a:	4c0c      	ldr	r4, [pc, #48]	; (800326c <__libc_init_array+0x44>)
 800323c:	f000 ffbc 	bl	80041b8 <_init>
 8003240:	1b64      	subs	r4, r4, r5
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	2600      	movs	r6, #0
 8003246:	42a6      	cmp	r6, r4
 8003248:	d105      	bne.n	8003256 <__libc_init_array+0x2e>
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003250:	4798      	blx	r3
 8003252:	3601      	adds	r6, #1
 8003254:	e7ee      	b.n	8003234 <__libc_init_array+0xc>
 8003256:	f855 3b04 	ldr.w	r3, [r5], #4
 800325a:	4798      	blx	r3
 800325c:	3601      	adds	r6, #1
 800325e:	e7f2      	b.n	8003246 <__libc_init_array+0x1e>
 8003260:	080042d8 	.word	0x080042d8
 8003264:	080042d8 	.word	0x080042d8
 8003268:	080042d8 	.word	0x080042d8
 800326c:	080042dc 	.word	0x080042dc

08003270 <memset>:
 8003270:	4402      	add	r2, r0
 8003272:	4603      	mov	r3, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	f803 1b01 	strb.w	r1, [r3], #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <iprintf>:
 8003280:	b40f      	push	{r0, r1, r2, r3}
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <iprintf+0x2c>)
 8003284:	b513      	push	{r0, r1, r4, lr}
 8003286:	681c      	ldr	r4, [r3, #0]
 8003288:	b124      	cbz	r4, 8003294 <iprintf+0x14>
 800328a:	69a3      	ldr	r3, [r4, #24]
 800328c:	b913      	cbnz	r3, 8003294 <iprintf+0x14>
 800328e:	4620      	mov	r0, r4
 8003290:	f000 f866 	bl	8003360 <__sinit>
 8003294:	ab05      	add	r3, sp, #20
 8003296:	9a04      	ldr	r2, [sp, #16]
 8003298:	68a1      	ldr	r1, [r4, #8]
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	4620      	mov	r0, r4
 800329e:	f000 f9bd 	bl	800361c <_vfiprintf_r>
 80032a2:	b002      	add	sp, #8
 80032a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a8:	b004      	add	sp, #16
 80032aa:	4770      	bx	lr
 80032ac:	20000014 	.word	0x20000014

080032b0 <std>:
 80032b0:	2300      	movs	r3, #0
 80032b2:	b510      	push	{r4, lr}
 80032b4:	4604      	mov	r4, r0
 80032b6:	e9c0 3300 	strd	r3, r3, [r0]
 80032ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032be:	6083      	str	r3, [r0, #8]
 80032c0:	8181      	strh	r1, [r0, #12]
 80032c2:	6643      	str	r3, [r0, #100]	; 0x64
 80032c4:	81c2      	strh	r2, [r0, #14]
 80032c6:	6183      	str	r3, [r0, #24]
 80032c8:	4619      	mov	r1, r3
 80032ca:	2208      	movs	r2, #8
 80032cc:	305c      	adds	r0, #92	; 0x5c
 80032ce:	f7ff ffcf 	bl	8003270 <memset>
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <std+0x38>)
 80032d4:	6263      	str	r3, [r4, #36]	; 0x24
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <std+0x3c>)
 80032d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <std+0x40>)
 80032dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <std+0x44>)
 80032e0:	6224      	str	r4, [r4, #32]
 80032e2:	6323      	str	r3, [r4, #48]	; 0x30
 80032e4:	bd10      	pop	{r4, pc}
 80032e6:	bf00      	nop
 80032e8:	08003bc5 	.word	0x08003bc5
 80032ec:	08003be7 	.word	0x08003be7
 80032f0:	08003c1f 	.word	0x08003c1f
 80032f4:	08003c43 	.word	0x08003c43

080032f8 <_cleanup_r>:
 80032f8:	4901      	ldr	r1, [pc, #4]	; (8003300 <_cleanup_r+0x8>)
 80032fa:	f000 b8af 	b.w	800345c <_fwalk_reent>
 80032fe:	bf00      	nop
 8003300:	08003f1d 	.word	0x08003f1d

08003304 <__sfmoreglue>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	2268      	movs	r2, #104	; 0x68
 8003308:	1e4d      	subs	r5, r1, #1
 800330a:	4355      	muls	r5, r2
 800330c:	460e      	mov	r6, r1
 800330e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003312:	f000 f8e5 	bl	80034e0 <_malloc_r>
 8003316:	4604      	mov	r4, r0
 8003318:	b140      	cbz	r0, 800332c <__sfmoreglue+0x28>
 800331a:	2100      	movs	r1, #0
 800331c:	e9c0 1600 	strd	r1, r6, [r0]
 8003320:	300c      	adds	r0, #12
 8003322:	60a0      	str	r0, [r4, #8]
 8003324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003328:	f7ff ffa2 	bl	8003270 <memset>
 800332c:	4620      	mov	r0, r4
 800332e:	bd70      	pop	{r4, r5, r6, pc}

08003330 <__sfp_lock_acquire>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__sfp_lock_acquire+0x8>)
 8003332:	f000 b8b3 	b.w	800349c <__retarget_lock_acquire_recursive>
 8003336:	bf00      	nop
 8003338:	20012e0d 	.word	0x20012e0d

0800333c <__sfp_lock_release>:
 800333c:	4801      	ldr	r0, [pc, #4]	; (8003344 <__sfp_lock_release+0x8>)
 800333e:	f000 b8ae 	b.w	800349e <__retarget_lock_release_recursive>
 8003342:	bf00      	nop
 8003344:	20012e0d 	.word	0x20012e0d

08003348 <__sinit_lock_acquire>:
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <__sinit_lock_acquire+0x8>)
 800334a:	f000 b8a7 	b.w	800349c <__retarget_lock_acquire_recursive>
 800334e:	bf00      	nop
 8003350:	20012e0e 	.word	0x20012e0e

08003354 <__sinit_lock_release>:
 8003354:	4801      	ldr	r0, [pc, #4]	; (800335c <__sinit_lock_release+0x8>)
 8003356:	f000 b8a2 	b.w	800349e <__retarget_lock_release_recursive>
 800335a:	bf00      	nop
 800335c:	20012e0e 	.word	0x20012e0e

08003360 <__sinit>:
 8003360:	b510      	push	{r4, lr}
 8003362:	4604      	mov	r4, r0
 8003364:	f7ff fff0 	bl	8003348 <__sinit_lock_acquire>
 8003368:	69a3      	ldr	r3, [r4, #24]
 800336a:	b11b      	cbz	r3, 8003374 <__sinit+0x14>
 800336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003370:	f7ff bff0 	b.w	8003354 <__sinit_lock_release>
 8003374:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003378:	6523      	str	r3, [r4, #80]	; 0x50
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <__sinit+0x68>)
 800337c:	4a13      	ldr	r2, [pc, #76]	; (80033cc <__sinit+0x6c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	62a2      	str	r2, [r4, #40]	; 0x28
 8003382:	42a3      	cmp	r3, r4
 8003384:	bf04      	itt	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	61a3      	streq	r3, [r4, #24]
 800338a:	4620      	mov	r0, r4
 800338c:	f000 f820 	bl	80033d0 <__sfp>
 8003390:	6060      	str	r0, [r4, #4]
 8003392:	4620      	mov	r0, r4
 8003394:	f000 f81c 	bl	80033d0 <__sfp>
 8003398:	60a0      	str	r0, [r4, #8]
 800339a:	4620      	mov	r0, r4
 800339c:	f000 f818 	bl	80033d0 <__sfp>
 80033a0:	2200      	movs	r2, #0
 80033a2:	60e0      	str	r0, [r4, #12]
 80033a4:	2104      	movs	r1, #4
 80033a6:	6860      	ldr	r0, [r4, #4]
 80033a8:	f7ff ff82 	bl	80032b0 <std>
 80033ac:	68a0      	ldr	r0, [r4, #8]
 80033ae:	2201      	movs	r2, #1
 80033b0:	2109      	movs	r1, #9
 80033b2:	f7ff ff7d 	bl	80032b0 <std>
 80033b6:	68e0      	ldr	r0, [r4, #12]
 80033b8:	2202      	movs	r2, #2
 80033ba:	2112      	movs	r1, #18
 80033bc:	f7ff ff78 	bl	80032b0 <std>
 80033c0:	2301      	movs	r3, #1
 80033c2:	61a3      	str	r3, [r4, #24]
 80033c4:	e7d2      	b.n	800336c <__sinit+0xc>
 80033c6:	bf00      	nop
 80033c8:	08004238 	.word	0x08004238
 80033cc:	080032f9 	.word	0x080032f9

080033d0 <__sfp>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	4607      	mov	r7, r0
 80033d4:	f7ff ffac 	bl	8003330 <__sfp_lock_acquire>
 80033d8:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <__sfp+0x84>)
 80033da:	681e      	ldr	r6, [r3, #0]
 80033dc:	69b3      	ldr	r3, [r6, #24]
 80033de:	b913      	cbnz	r3, 80033e6 <__sfp+0x16>
 80033e0:	4630      	mov	r0, r6
 80033e2:	f7ff ffbd 	bl	8003360 <__sinit>
 80033e6:	3648      	adds	r6, #72	; 0x48
 80033e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	d503      	bpl.n	80033f8 <__sfp+0x28>
 80033f0:	6833      	ldr	r3, [r6, #0]
 80033f2:	b30b      	cbz	r3, 8003438 <__sfp+0x68>
 80033f4:	6836      	ldr	r6, [r6, #0]
 80033f6:	e7f7      	b.n	80033e8 <__sfp+0x18>
 80033f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033fc:	b9d5      	cbnz	r5, 8003434 <__sfp+0x64>
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <__sfp+0x88>)
 8003400:	60e3      	str	r3, [r4, #12]
 8003402:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003406:	6665      	str	r5, [r4, #100]	; 0x64
 8003408:	f000 f847 	bl	800349a <__retarget_lock_init_recursive>
 800340c:	f7ff ff96 	bl	800333c <__sfp_lock_release>
 8003410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003418:	6025      	str	r5, [r4, #0]
 800341a:	61a5      	str	r5, [r4, #24]
 800341c:	2208      	movs	r2, #8
 800341e:	4629      	mov	r1, r5
 8003420:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003424:	f7ff ff24 	bl	8003270 <memset>
 8003428:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800342c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003430:	4620      	mov	r0, r4
 8003432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003434:	3468      	adds	r4, #104	; 0x68
 8003436:	e7d9      	b.n	80033ec <__sfp+0x1c>
 8003438:	2104      	movs	r1, #4
 800343a:	4638      	mov	r0, r7
 800343c:	f7ff ff62 	bl	8003304 <__sfmoreglue>
 8003440:	4604      	mov	r4, r0
 8003442:	6030      	str	r0, [r6, #0]
 8003444:	2800      	cmp	r0, #0
 8003446:	d1d5      	bne.n	80033f4 <__sfp+0x24>
 8003448:	f7ff ff78 	bl	800333c <__sfp_lock_release>
 800344c:	230c      	movs	r3, #12
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	e7ee      	b.n	8003430 <__sfp+0x60>
 8003452:	bf00      	nop
 8003454:	08004238 	.word	0x08004238
 8003458:	ffff0001 	.word	0xffff0001

0800345c <_fwalk_reent>:
 800345c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003460:	4606      	mov	r6, r0
 8003462:	4688      	mov	r8, r1
 8003464:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003468:	2700      	movs	r7, #0
 800346a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800346e:	f1b9 0901 	subs.w	r9, r9, #1
 8003472:	d505      	bpl.n	8003480 <_fwalk_reent+0x24>
 8003474:	6824      	ldr	r4, [r4, #0]
 8003476:	2c00      	cmp	r4, #0
 8003478:	d1f7      	bne.n	800346a <_fwalk_reent+0xe>
 800347a:	4638      	mov	r0, r7
 800347c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003480:	89ab      	ldrh	r3, [r5, #12]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d907      	bls.n	8003496 <_fwalk_reent+0x3a>
 8003486:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800348a:	3301      	adds	r3, #1
 800348c:	d003      	beq.n	8003496 <_fwalk_reent+0x3a>
 800348e:	4629      	mov	r1, r5
 8003490:	4630      	mov	r0, r6
 8003492:	47c0      	blx	r8
 8003494:	4307      	orrs	r7, r0
 8003496:	3568      	adds	r5, #104	; 0x68
 8003498:	e7e9      	b.n	800346e <_fwalk_reent+0x12>

0800349a <__retarget_lock_init_recursive>:
 800349a:	4770      	bx	lr

0800349c <__retarget_lock_acquire_recursive>:
 800349c:	4770      	bx	lr

0800349e <__retarget_lock_release_recursive>:
 800349e:	4770      	bx	lr

080034a0 <sbrk_aligned>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4e0e      	ldr	r6, [pc, #56]	; (80034dc <sbrk_aligned+0x3c>)
 80034a4:	460c      	mov	r4, r1
 80034a6:	6831      	ldr	r1, [r6, #0]
 80034a8:	4605      	mov	r5, r0
 80034aa:	b911      	cbnz	r1, 80034b2 <sbrk_aligned+0x12>
 80034ac:	f000 fb7a 	bl	8003ba4 <_sbrk_r>
 80034b0:	6030      	str	r0, [r6, #0]
 80034b2:	4621      	mov	r1, r4
 80034b4:	4628      	mov	r0, r5
 80034b6:	f000 fb75 	bl	8003ba4 <_sbrk_r>
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	d00a      	beq.n	80034d4 <sbrk_aligned+0x34>
 80034be:	1cc4      	adds	r4, r0, #3
 80034c0:	f024 0403 	bic.w	r4, r4, #3
 80034c4:	42a0      	cmp	r0, r4
 80034c6:	d007      	beq.n	80034d8 <sbrk_aligned+0x38>
 80034c8:	1a21      	subs	r1, r4, r0
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 fb6a 	bl	8003ba4 <_sbrk_r>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d101      	bne.n	80034d8 <sbrk_aligned+0x38>
 80034d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80034d8:	4620      	mov	r0, r4
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	20012e14 	.word	0x20012e14

080034e0 <_malloc_r>:
 80034e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e4:	1ccd      	adds	r5, r1, #3
 80034e6:	f025 0503 	bic.w	r5, r5, #3
 80034ea:	3508      	adds	r5, #8
 80034ec:	2d0c      	cmp	r5, #12
 80034ee:	bf38      	it	cc
 80034f0:	250c      	movcc	r5, #12
 80034f2:	2d00      	cmp	r5, #0
 80034f4:	4607      	mov	r7, r0
 80034f6:	db01      	blt.n	80034fc <_malloc_r+0x1c>
 80034f8:	42a9      	cmp	r1, r5
 80034fa:	d905      	bls.n	8003508 <_malloc_r+0x28>
 80034fc:	230c      	movs	r3, #12
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	2600      	movs	r6, #0
 8003502:	4630      	mov	r0, r6
 8003504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003508:	4e2e      	ldr	r6, [pc, #184]	; (80035c4 <_malloc_r+0xe4>)
 800350a:	f000 fdbb 	bl	8004084 <__malloc_lock>
 800350e:	6833      	ldr	r3, [r6, #0]
 8003510:	461c      	mov	r4, r3
 8003512:	bb34      	cbnz	r4, 8003562 <_malloc_r+0x82>
 8003514:	4629      	mov	r1, r5
 8003516:	4638      	mov	r0, r7
 8003518:	f7ff ffc2 	bl	80034a0 <sbrk_aligned>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	4604      	mov	r4, r0
 8003520:	d14d      	bne.n	80035be <_malloc_r+0xde>
 8003522:	6834      	ldr	r4, [r6, #0]
 8003524:	4626      	mov	r6, r4
 8003526:	2e00      	cmp	r6, #0
 8003528:	d140      	bne.n	80035ac <_malloc_r+0xcc>
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	4631      	mov	r1, r6
 800352e:	4638      	mov	r0, r7
 8003530:	eb04 0803 	add.w	r8, r4, r3
 8003534:	f000 fb36 	bl	8003ba4 <_sbrk_r>
 8003538:	4580      	cmp	r8, r0
 800353a:	d13a      	bne.n	80035b2 <_malloc_r+0xd2>
 800353c:	6821      	ldr	r1, [r4, #0]
 800353e:	3503      	adds	r5, #3
 8003540:	1a6d      	subs	r5, r5, r1
 8003542:	f025 0503 	bic.w	r5, r5, #3
 8003546:	3508      	adds	r5, #8
 8003548:	2d0c      	cmp	r5, #12
 800354a:	bf38      	it	cc
 800354c:	250c      	movcc	r5, #12
 800354e:	4629      	mov	r1, r5
 8003550:	4638      	mov	r0, r7
 8003552:	f7ff ffa5 	bl	80034a0 <sbrk_aligned>
 8003556:	3001      	adds	r0, #1
 8003558:	d02b      	beq.n	80035b2 <_malloc_r+0xd2>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	442b      	add	r3, r5
 800355e:	6023      	str	r3, [r4, #0]
 8003560:	e00e      	b.n	8003580 <_malloc_r+0xa0>
 8003562:	6822      	ldr	r2, [r4, #0]
 8003564:	1b52      	subs	r2, r2, r5
 8003566:	d41e      	bmi.n	80035a6 <_malloc_r+0xc6>
 8003568:	2a0b      	cmp	r2, #11
 800356a:	d916      	bls.n	800359a <_malloc_r+0xba>
 800356c:	1961      	adds	r1, r4, r5
 800356e:	42a3      	cmp	r3, r4
 8003570:	6025      	str	r5, [r4, #0]
 8003572:	bf18      	it	ne
 8003574:	6059      	strne	r1, [r3, #4]
 8003576:	6863      	ldr	r3, [r4, #4]
 8003578:	bf08      	it	eq
 800357a:	6031      	streq	r1, [r6, #0]
 800357c:	5162      	str	r2, [r4, r5]
 800357e:	604b      	str	r3, [r1, #4]
 8003580:	4638      	mov	r0, r7
 8003582:	f104 060b 	add.w	r6, r4, #11
 8003586:	f000 fd83 	bl	8004090 <__malloc_unlock>
 800358a:	f026 0607 	bic.w	r6, r6, #7
 800358e:	1d23      	adds	r3, r4, #4
 8003590:	1af2      	subs	r2, r6, r3
 8003592:	d0b6      	beq.n	8003502 <_malloc_r+0x22>
 8003594:	1b9b      	subs	r3, r3, r6
 8003596:	50a3      	str	r3, [r4, r2]
 8003598:	e7b3      	b.n	8003502 <_malloc_r+0x22>
 800359a:	6862      	ldr	r2, [r4, #4]
 800359c:	42a3      	cmp	r3, r4
 800359e:	bf0c      	ite	eq
 80035a0:	6032      	streq	r2, [r6, #0]
 80035a2:	605a      	strne	r2, [r3, #4]
 80035a4:	e7ec      	b.n	8003580 <_malloc_r+0xa0>
 80035a6:	4623      	mov	r3, r4
 80035a8:	6864      	ldr	r4, [r4, #4]
 80035aa:	e7b2      	b.n	8003512 <_malloc_r+0x32>
 80035ac:	4634      	mov	r4, r6
 80035ae:	6876      	ldr	r6, [r6, #4]
 80035b0:	e7b9      	b.n	8003526 <_malloc_r+0x46>
 80035b2:	230c      	movs	r3, #12
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4638      	mov	r0, r7
 80035b8:	f000 fd6a 	bl	8004090 <__malloc_unlock>
 80035bc:	e7a1      	b.n	8003502 <_malloc_r+0x22>
 80035be:	6025      	str	r5, [r4, #0]
 80035c0:	e7de      	b.n	8003580 <_malloc_r+0xa0>
 80035c2:	bf00      	nop
 80035c4:	20012e10 	.word	0x20012e10

080035c8 <__sfputc_r>:
 80035c8:	6893      	ldr	r3, [r2, #8]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	b410      	push	{r4}
 80035d0:	6093      	str	r3, [r2, #8]
 80035d2:	da08      	bge.n	80035e6 <__sfputc_r+0x1e>
 80035d4:	6994      	ldr	r4, [r2, #24]
 80035d6:	42a3      	cmp	r3, r4
 80035d8:	db01      	blt.n	80035de <__sfputc_r+0x16>
 80035da:	290a      	cmp	r1, #10
 80035dc:	d103      	bne.n	80035e6 <__sfputc_r+0x1e>
 80035de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e2:	f000 bb33 	b.w	8003c4c <__swbuf_r>
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	1c58      	adds	r0, r3, #1
 80035ea:	6010      	str	r0, [r2, #0]
 80035ec:	7019      	strb	r1, [r3, #0]
 80035ee:	4608      	mov	r0, r1
 80035f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <__sfputs_r>:
 80035f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f8:	4606      	mov	r6, r0
 80035fa:	460f      	mov	r7, r1
 80035fc:	4614      	mov	r4, r2
 80035fe:	18d5      	adds	r5, r2, r3
 8003600:	42ac      	cmp	r4, r5
 8003602:	d101      	bne.n	8003608 <__sfputs_r+0x12>
 8003604:	2000      	movs	r0, #0
 8003606:	e007      	b.n	8003618 <__sfputs_r+0x22>
 8003608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800360c:	463a      	mov	r2, r7
 800360e:	4630      	mov	r0, r6
 8003610:	f7ff ffda 	bl	80035c8 <__sfputc_r>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d1f3      	bne.n	8003600 <__sfputs_r+0xa>
 8003618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800361c <_vfiprintf_r>:
 800361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003620:	460d      	mov	r5, r1
 8003622:	b09d      	sub	sp, #116	; 0x74
 8003624:	4614      	mov	r4, r2
 8003626:	4698      	mov	r8, r3
 8003628:	4606      	mov	r6, r0
 800362a:	b118      	cbz	r0, 8003634 <_vfiprintf_r+0x18>
 800362c:	6983      	ldr	r3, [r0, #24]
 800362e:	b90b      	cbnz	r3, 8003634 <_vfiprintf_r+0x18>
 8003630:	f7ff fe96 	bl	8003360 <__sinit>
 8003634:	4b89      	ldr	r3, [pc, #548]	; (800385c <_vfiprintf_r+0x240>)
 8003636:	429d      	cmp	r5, r3
 8003638:	d11b      	bne.n	8003672 <_vfiprintf_r+0x56>
 800363a:	6875      	ldr	r5, [r6, #4]
 800363c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800363e:	07d9      	lsls	r1, r3, #31
 8003640:	d405      	bmi.n	800364e <_vfiprintf_r+0x32>
 8003642:	89ab      	ldrh	r3, [r5, #12]
 8003644:	059a      	lsls	r2, r3, #22
 8003646:	d402      	bmi.n	800364e <_vfiprintf_r+0x32>
 8003648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800364a:	f7ff ff27 	bl	800349c <__retarget_lock_acquire_recursive>
 800364e:	89ab      	ldrh	r3, [r5, #12]
 8003650:	071b      	lsls	r3, r3, #28
 8003652:	d501      	bpl.n	8003658 <_vfiprintf_r+0x3c>
 8003654:	692b      	ldr	r3, [r5, #16]
 8003656:	b9eb      	cbnz	r3, 8003694 <_vfiprintf_r+0x78>
 8003658:	4629      	mov	r1, r5
 800365a:	4630      	mov	r0, r6
 800365c:	f000 fb5a 	bl	8003d14 <__swsetup_r>
 8003660:	b1c0      	cbz	r0, 8003694 <_vfiprintf_r+0x78>
 8003662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003664:	07dc      	lsls	r4, r3, #31
 8003666:	d50e      	bpl.n	8003686 <_vfiprintf_r+0x6a>
 8003668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800366c:	b01d      	add	sp, #116	; 0x74
 800366e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003672:	4b7b      	ldr	r3, [pc, #492]	; (8003860 <_vfiprintf_r+0x244>)
 8003674:	429d      	cmp	r5, r3
 8003676:	d101      	bne.n	800367c <_vfiprintf_r+0x60>
 8003678:	68b5      	ldr	r5, [r6, #8]
 800367a:	e7df      	b.n	800363c <_vfiprintf_r+0x20>
 800367c:	4b79      	ldr	r3, [pc, #484]	; (8003864 <_vfiprintf_r+0x248>)
 800367e:	429d      	cmp	r5, r3
 8003680:	bf08      	it	eq
 8003682:	68f5      	ldreq	r5, [r6, #12]
 8003684:	e7da      	b.n	800363c <_vfiprintf_r+0x20>
 8003686:	89ab      	ldrh	r3, [r5, #12]
 8003688:	0598      	lsls	r0, r3, #22
 800368a:	d4ed      	bmi.n	8003668 <_vfiprintf_r+0x4c>
 800368c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800368e:	f7ff ff06 	bl	800349e <__retarget_lock_release_recursive>
 8003692:	e7e9      	b.n	8003668 <_vfiprintf_r+0x4c>
 8003694:	2300      	movs	r3, #0
 8003696:	9309      	str	r3, [sp, #36]	; 0x24
 8003698:	2320      	movs	r3, #32
 800369a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800369e:	f8cd 800c 	str.w	r8, [sp, #12]
 80036a2:	2330      	movs	r3, #48	; 0x30
 80036a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003868 <_vfiprintf_r+0x24c>
 80036a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036ac:	f04f 0901 	mov.w	r9, #1
 80036b0:	4623      	mov	r3, r4
 80036b2:	469a      	mov	sl, r3
 80036b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036b8:	b10a      	cbz	r2, 80036be <_vfiprintf_r+0xa2>
 80036ba:	2a25      	cmp	r2, #37	; 0x25
 80036bc:	d1f9      	bne.n	80036b2 <_vfiprintf_r+0x96>
 80036be:	ebba 0b04 	subs.w	fp, sl, r4
 80036c2:	d00b      	beq.n	80036dc <_vfiprintf_r+0xc0>
 80036c4:	465b      	mov	r3, fp
 80036c6:	4622      	mov	r2, r4
 80036c8:	4629      	mov	r1, r5
 80036ca:	4630      	mov	r0, r6
 80036cc:	f7ff ff93 	bl	80035f6 <__sfputs_r>
 80036d0:	3001      	adds	r0, #1
 80036d2:	f000 80aa 	beq.w	800382a <_vfiprintf_r+0x20e>
 80036d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036d8:	445a      	add	r2, fp
 80036da:	9209      	str	r2, [sp, #36]	; 0x24
 80036dc:	f89a 3000 	ldrb.w	r3, [sl]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80a2 	beq.w	800382a <_vfiprintf_r+0x20e>
 80036e6:	2300      	movs	r3, #0
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036f0:	f10a 0a01 	add.w	sl, sl, #1
 80036f4:	9304      	str	r3, [sp, #16]
 80036f6:	9307      	str	r3, [sp, #28]
 80036f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036fc:	931a      	str	r3, [sp, #104]	; 0x68
 80036fe:	4654      	mov	r4, sl
 8003700:	2205      	movs	r2, #5
 8003702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003706:	4858      	ldr	r0, [pc, #352]	; (8003868 <_vfiprintf_r+0x24c>)
 8003708:	f7fc fd62 	bl	80001d0 <memchr>
 800370c:	9a04      	ldr	r2, [sp, #16]
 800370e:	b9d8      	cbnz	r0, 8003748 <_vfiprintf_r+0x12c>
 8003710:	06d1      	lsls	r1, r2, #27
 8003712:	bf44      	itt	mi
 8003714:	2320      	movmi	r3, #32
 8003716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800371a:	0713      	lsls	r3, r2, #28
 800371c:	bf44      	itt	mi
 800371e:	232b      	movmi	r3, #43	; 0x2b
 8003720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003724:	f89a 3000 	ldrb.w	r3, [sl]
 8003728:	2b2a      	cmp	r3, #42	; 0x2a
 800372a:	d015      	beq.n	8003758 <_vfiprintf_r+0x13c>
 800372c:	9a07      	ldr	r2, [sp, #28]
 800372e:	4654      	mov	r4, sl
 8003730:	2000      	movs	r0, #0
 8003732:	f04f 0c0a 	mov.w	ip, #10
 8003736:	4621      	mov	r1, r4
 8003738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800373c:	3b30      	subs	r3, #48	; 0x30
 800373e:	2b09      	cmp	r3, #9
 8003740:	d94e      	bls.n	80037e0 <_vfiprintf_r+0x1c4>
 8003742:	b1b0      	cbz	r0, 8003772 <_vfiprintf_r+0x156>
 8003744:	9207      	str	r2, [sp, #28]
 8003746:	e014      	b.n	8003772 <_vfiprintf_r+0x156>
 8003748:	eba0 0308 	sub.w	r3, r0, r8
 800374c:	fa09 f303 	lsl.w	r3, r9, r3
 8003750:	4313      	orrs	r3, r2
 8003752:	9304      	str	r3, [sp, #16]
 8003754:	46a2      	mov	sl, r4
 8003756:	e7d2      	b.n	80036fe <_vfiprintf_r+0xe2>
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	1d19      	adds	r1, r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	9103      	str	r1, [sp, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	bfbb      	ittet	lt
 8003764:	425b      	neglt	r3, r3
 8003766:	f042 0202 	orrlt.w	r2, r2, #2
 800376a:	9307      	strge	r3, [sp, #28]
 800376c:	9307      	strlt	r3, [sp, #28]
 800376e:	bfb8      	it	lt
 8003770:	9204      	strlt	r2, [sp, #16]
 8003772:	7823      	ldrb	r3, [r4, #0]
 8003774:	2b2e      	cmp	r3, #46	; 0x2e
 8003776:	d10c      	bne.n	8003792 <_vfiprintf_r+0x176>
 8003778:	7863      	ldrb	r3, [r4, #1]
 800377a:	2b2a      	cmp	r3, #42	; 0x2a
 800377c:	d135      	bne.n	80037ea <_vfiprintf_r+0x1ce>
 800377e:	9b03      	ldr	r3, [sp, #12]
 8003780:	1d1a      	adds	r2, r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	9203      	str	r2, [sp, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	bfb8      	it	lt
 800378a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800378e:	3402      	adds	r4, #2
 8003790:	9305      	str	r3, [sp, #20]
 8003792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003878 <_vfiprintf_r+0x25c>
 8003796:	7821      	ldrb	r1, [r4, #0]
 8003798:	2203      	movs	r2, #3
 800379a:	4650      	mov	r0, sl
 800379c:	f7fc fd18 	bl	80001d0 <memchr>
 80037a0:	b140      	cbz	r0, 80037b4 <_vfiprintf_r+0x198>
 80037a2:	2340      	movs	r3, #64	; 0x40
 80037a4:	eba0 000a 	sub.w	r0, r0, sl
 80037a8:	fa03 f000 	lsl.w	r0, r3, r0
 80037ac:	9b04      	ldr	r3, [sp, #16]
 80037ae:	4303      	orrs	r3, r0
 80037b0:	3401      	adds	r4, #1
 80037b2:	9304      	str	r3, [sp, #16]
 80037b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b8:	482c      	ldr	r0, [pc, #176]	; (800386c <_vfiprintf_r+0x250>)
 80037ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037be:	2206      	movs	r2, #6
 80037c0:	f7fc fd06 	bl	80001d0 <memchr>
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d03f      	beq.n	8003848 <_vfiprintf_r+0x22c>
 80037c8:	4b29      	ldr	r3, [pc, #164]	; (8003870 <_vfiprintf_r+0x254>)
 80037ca:	bb1b      	cbnz	r3, 8003814 <_vfiprintf_r+0x1f8>
 80037cc:	9b03      	ldr	r3, [sp, #12]
 80037ce:	3307      	adds	r3, #7
 80037d0:	f023 0307 	bic.w	r3, r3, #7
 80037d4:	3308      	adds	r3, #8
 80037d6:	9303      	str	r3, [sp, #12]
 80037d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037da:	443b      	add	r3, r7
 80037dc:	9309      	str	r3, [sp, #36]	; 0x24
 80037de:	e767      	b.n	80036b0 <_vfiprintf_r+0x94>
 80037e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80037e4:	460c      	mov	r4, r1
 80037e6:	2001      	movs	r0, #1
 80037e8:	e7a5      	b.n	8003736 <_vfiprintf_r+0x11a>
 80037ea:	2300      	movs	r3, #0
 80037ec:	3401      	adds	r4, #1
 80037ee:	9305      	str	r3, [sp, #20]
 80037f0:	4619      	mov	r1, r3
 80037f2:	f04f 0c0a 	mov.w	ip, #10
 80037f6:	4620      	mov	r0, r4
 80037f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037fc:	3a30      	subs	r2, #48	; 0x30
 80037fe:	2a09      	cmp	r2, #9
 8003800:	d903      	bls.n	800380a <_vfiprintf_r+0x1ee>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0c5      	beq.n	8003792 <_vfiprintf_r+0x176>
 8003806:	9105      	str	r1, [sp, #20]
 8003808:	e7c3      	b.n	8003792 <_vfiprintf_r+0x176>
 800380a:	fb0c 2101 	mla	r1, ip, r1, r2
 800380e:	4604      	mov	r4, r0
 8003810:	2301      	movs	r3, #1
 8003812:	e7f0      	b.n	80037f6 <_vfiprintf_r+0x1da>
 8003814:	ab03      	add	r3, sp, #12
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	462a      	mov	r2, r5
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <_vfiprintf_r+0x258>)
 800381c:	a904      	add	r1, sp, #16
 800381e:	4630      	mov	r0, r6
 8003820:	f3af 8000 	nop.w
 8003824:	4607      	mov	r7, r0
 8003826:	1c78      	adds	r0, r7, #1
 8003828:	d1d6      	bne.n	80037d8 <_vfiprintf_r+0x1bc>
 800382a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800382c:	07d9      	lsls	r1, r3, #31
 800382e:	d405      	bmi.n	800383c <_vfiprintf_r+0x220>
 8003830:	89ab      	ldrh	r3, [r5, #12]
 8003832:	059a      	lsls	r2, r3, #22
 8003834:	d402      	bmi.n	800383c <_vfiprintf_r+0x220>
 8003836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003838:	f7ff fe31 	bl	800349e <__retarget_lock_release_recursive>
 800383c:	89ab      	ldrh	r3, [r5, #12]
 800383e:	065b      	lsls	r3, r3, #25
 8003840:	f53f af12 	bmi.w	8003668 <_vfiprintf_r+0x4c>
 8003844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003846:	e711      	b.n	800366c <_vfiprintf_r+0x50>
 8003848:	ab03      	add	r3, sp, #12
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	462a      	mov	r2, r5
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <_vfiprintf_r+0x258>)
 8003850:	a904      	add	r1, sp, #16
 8003852:	4630      	mov	r0, r6
 8003854:	f000 f880 	bl	8003958 <_printf_i>
 8003858:	e7e4      	b.n	8003824 <_vfiprintf_r+0x208>
 800385a:	bf00      	nop
 800385c:	0800425c 	.word	0x0800425c
 8003860:	0800427c 	.word	0x0800427c
 8003864:	0800423c 	.word	0x0800423c
 8003868:	0800429c 	.word	0x0800429c
 800386c:	080042a6 	.word	0x080042a6
 8003870:	00000000 	.word	0x00000000
 8003874:	080035f7 	.word	0x080035f7
 8003878:	080042a2 	.word	0x080042a2

0800387c <_printf_common>:
 800387c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003880:	4616      	mov	r6, r2
 8003882:	4699      	mov	r9, r3
 8003884:	688a      	ldr	r2, [r1, #8]
 8003886:	690b      	ldr	r3, [r1, #16]
 8003888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800388c:	4293      	cmp	r3, r2
 800388e:	bfb8      	it	lt
 8003890:	4613      	movlt	r3, r2
 8003892:	6033      	str	r3, [r6, #0]
 8003894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003898:	4607      	mov	r7, r0
 800389a:	460c      	mov	r4, r1
 800389c:	b10a      	cbz	r2, 80038a2 <_printf_common+0x26>
 800389e:	3301      	adds	r3, #1
 80038a0:	6033      	str	r3, [r6, #0]
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	0699      	lsls	r1, r3, #26
 80038a6:	bf42      	ittt	mi
 80038a8:	6833      	ldrmi	r3, [r6, #0]
 80038aa:	3302      	addmi	r3, #2
 80038ac:	6033      	strmi	r3, [r6, #0]
 80038ae:	6825      	ldr	r5, [r4, #0]
 80038b0:	f015 0506 	ands.w	r5, r5, #6
 80038b4:	d106      	bne.n	80038c4 <_printf_common+0x48>
 80038b6:	f104 0a19 	add.w	sl, r4, #25
 80038ba:	68e3      	ldr	r3, [r4, #12]
 80038bc:	6832      	ldr	r2, [r6, #0]
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	42ab      	cmp	r3, r5
 80038c2:	dc26      	bgt.n	8003912 <_printf_common+0x96>
 80038c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038c8:	1e13      	subs	r3, r2, #0
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	bf18      	it	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	0692      	lsls	r2, r2, #26
 80038d2:	d42b      	bmi.n	800392c <_printf_common+0xb0>
 80038d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038d8:	4649      	mov	r1, r9
 80038da:	4638      	mov	r0, r7
 80038dc:	47c0      	blx	r8
 80038de:	3001      	adds	r0, #1
 80038e0:	d01e      	beq.n	8003920 <_printf_common+0xa4>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	68e5      	ldr	r5, [r4, #12]
 80038e6:	6832      	ldr	r2, [r6, #0]
 80038e8:	f003 0306 	and.w	r3, r3, #6
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	bf08      	it	eq
 80038f0:	1aad      	subeq	r5, r5, r2
 80038f2:	68a3      	ldr	r3, [r4, #8]
 80038f4:	6922      	ldr	r2, [r4, #16]
 80038f6:	bf0c      	ite	eq
 80038f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038fc:	2500      	movne	r5, #0
 80038fe:	4293      	cmp	r3, r2
 8003900:	bfc4      	itt	gt
 8003902:	1a9b      	subgt	r3, r3, r2
 8003904:	18ed      	addgt	r5, r5, r3
 8003906:	2600      	movs	r6, #0
 8003908:	341a      	adds	r4, #26
 800390a:	42b5      	cmp	r5, r6
 800390c:	d11a      	bne.n	8003944 <_printf_common+0xc8>
 800390e:	2000      	movs	r0, #0
 8003910:	e008      	b.n	8003924 <_printf_common+0xa8>
 8003912:	2301      	movs	r3, #1
 8003914:	4652      	mov	r2, sl
 8003916:	4649      	mov	r1, r9
 8003918:	4638      	mov	r0, r7
 800391a:	47c0      	blx	r8
 800391c:	3001      	adds	r0, #1
 800391e:	d103      	bne.n	8003928 <_printf_common+0xac>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003928:	3501      	adds	r5, #1
 800392a:	e7c6      	b.n	80038ba <_printf_common+0x3e>
 800392c:	18e1      	adds	r1, r4, r3
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	2030      	movs	r0, #48	; 0x30
 8003932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003936:	4422      	add	r2, r4
 8003938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800393c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003940:	3302      	adds	r3, #2
 8003942:	e7c7      	b.n	80038d4 <_printf_common+0x58>
 8003944:	2301      	movs	r3, #1
 8003946:	4622      	mov	r2, r4
 8003948:	4649      	mov	r1, r9
 800394a:	4638      	mov	r0, r7
 800394c:	47c0      	blx	r8
 800394e:	3001      	adds	r0, #1
 8003950:	d0e6      	beq.n	8003920 <_printf_common+0xa4>
 8003952:	3601      	adds	r6, #1
 8003954:	e7d9      	b.n	800390a <_printf_common+0x8e>
	...

08003958 <_printf_i>:
 8003958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	7e0f      	ldrb	r7, [r1, #24]
 800395e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003960:	2f78      	cmp	r7, #120	; 0x78
 8003962:	4691      	mov	r9, r2
 8003964:	4680      	mov	r8, r0
 8003966:	460c      	mov	r4, r1
 8003968:	469a      	mov	sl, r3
 800396a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800396e:	d807      	bhi.n	8003980 <_printf_i+0x28>
 8003970:	2f62      	cmp	r7, #98	; 0x62
 8003972:	d80a      	bhi.n	800398a <_printf_i+0x32>
 8003974:	2f00      	cmp	r7, #0
 8003976:	f000 80d8 	beq.w	8003b2a <_printf_i+0x1d2>
 800397a:	2f58      	cmp	r7, #88	; 0x58
 800397c:	f000 80a3 	beq.w	8003ac6 <_printf_i+0x16e>
 8003980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003988:	e03a      	b.n	8003a00 <_printf_i+0xa8>
 800398a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800398e:	2b15      	cmp	r3, #21
 8003990:	d8f6      	bhi.n	8003980 <_printf_i+0x28>
 8003992:	a101      	add	r1, pc, #4	; (adr r1, 8003998 <_printf_i+0x40>)
 8003994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003998:	080039f1 	.word	0x080039f1
 800399c:	08003a05 	.word	0x08003a05
 80039a0:	08003981 	.word	0x08003981
 80039a4:	08003981 	.word	0x08003981
 80039a8:	08003981 	.word	0x08003981
 80039ac:	08003981 	.word	0x08003981
 80039b0:	08003a05 	.word	0x08003a05
 80039b4:	08003981 	.word	0x08003981
 80039b8:	08003981 	.word	0x08003981
 80039bc:	08003981 	.word	0x08003981
 80039c0:	08003981 	.word	0x08003981
 80039c4:	08003b11 	.word	0x08003b11
 80039c8:	08003a35 	.word	0x08003a35
 80039cc:	08003af3 	.word	0x08003af3
 80039d0:	08003981 	.word	0x08003981
 80039d4:	08003981 	.word	0x08003981
 80039d8:	08003b33 	.word	0x08003b33
 80039dc:	08003981 	.word	0x08003981
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003981 	.word	0x08003981
 80039e8:	08003981 	.word	0x08003981
 80039ec:	08003afb 	.word	0x08003afb
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	602a      	str	r2, [r5, #0]
 80039f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0a3      	b.n	8003b4c <_printf_i+0x1f4>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	6829      	ldr	r1, [r5, #0]
 8003a08:	0606      	lsls	r6, r0, #24
 8003a0a:	f101 0304 	add.w	r3, r1, #4
 8003a0e:	d50a      	bpl.n	8003a26 <_printf_i+0xce>
 8003a10:	680e      	ldr	r6, [r1, #0]
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	2e00      	cmp	r6, #0
 8003a16:	da03      	bge.n	8003a20 <_printf_i+0xc8>
 8003a18:	232d      	movs	r3, #45	; 0x2d
 8003a1a:	4276      	negs	r6, r6
 8003a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a20:	485e      	ldr	r0, [pc, #376]	; (8003b9c <_printf_i+0x244>)
 8003a22:	230a      	movs	r3, #10
 8003a24:	e019      	b.n	8003a5a <_printf_i+0x102>
 8003a26:	680e      	ldr	r6, [r1, #0]
 8003a28:	602b      	str	r3, [r5, #0]
 8003a2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a2e:	bf18      	it	ne
 8003a30:	b236      	sxthne	r6, r6
 8003a32:	e7ef      	b.n	8003a14 <_printf_i+0xbc>
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	6820      	ldr	r0, [r4, #0]
 8003a38:	1d19      	adds	r1, r3, #4
 8003a3a:	6029      	str	r1, [r5, #0]
 8003a3c:	0601      	lsls	r1, r0, #24
 8003a3e:	d501      	bpl.n	8003a44 <_printf_i+0xec>
 8003a40:	681e      	ldr	r6, [r3, #0]
 8003a42:	e002      	b.n	8003a4a <_printf_i+0xf2>
 8003a44:	0646      	lsls	r6, r0, #25
 8003a46:	d5fb      	bpl.n	8003a40 <_printf_i+0xe8>
 8003a48:	881e      	ldrh	r6, [r3, #0]
 8003a4a:	4854      	ldr	r0, [pc, #336]	; (8003b9c <_printf_i+0x244>)
 8003a4c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a4e:	bf0c      	ite	eq
 8003a50:	2308      	moveq	r3, #8
 8003a52:	230a      	movne	r3, #10
 8003a54:	2100      	movs	r1, #0
 8003a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a5a:	6865      	ldr	r5, [r4, #4]
 8003a5c:	60a5      	str	r5, [r4, #8]
 8003a5e:	2d00      	cmp	r5, #0
 8003a60:	bfa2      	ittt	ge
 8003a62:	6821      	ldrge	r1, [r4, #0]
 8003a64:	f021 0104 	bicge.w	r1, r1, #4
 8003a68:	6021      	strge	r1, [r4, #0]
 8003a6a:	b90e      	cbnz	r6, 8003a70 <_printf_i+0x118>
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	d04d      	beq.n	8003b0c <_printf_i+0x1b4>
 8003a70:	4615      	mov	r5, r2
 8003a72:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a76:	fb03 6711 	mls	r7, r3, r1, r6
 8003a7a:	5dc7      	ldrb	r7, [r0, r7]
 8003a7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a80:	4637      	mov	r7, r6
 8003a82:	42bb      	cmp	r3, r7
 8003a84:	460e      	mov	r6, r1
 8003a86:	d9f4      	bls.n	8003a72 <_printf_i+0x11a>
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d10b      	bne.n	8003aa4 <_printf_i+0x14c>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	07de      	lsls	r6, r3, #31
 8003a90:	d508      	bpl.n	8003aa4 <_printf_i+0x14c>
 8003a92:	6923      	ldr	r3, [r4, #16]
 8003a94:	6861      	ldr	r1, [r4, #4]
 8003a96:	4299      	cmp	r1, r3
 8003a98:	bfde      	ittt	le
 8003a9a:	2330      	movle	r3, #48	; 0x30
 8003a9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003aa0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003aa4:	1b52      	subs	r2, r2, r5
 8003aa6:	6122      	str	r2, [r4, #16]
 8003aa8:	f8cd a000 	str.w	sl, [sp]
 8003aac:	464b      	mov	r3, r9
 8003aae:	aa03      	add	r2, sp, #12
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	f7ff fee2 	bl	800387c <_printf_common>
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d14c      	bne.n	8003b56 <_printf_i+0x1fe>
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ac0:	b004      	add	sp, #16
 8003ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac6:	4835      	ldr	r0, [pc, #212]	; (8003b9c <_printf_i+0x244>)
 8003ac8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003acc:	6829      	ldr	r1, [r5, #0]
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ad4:	6029      	str	r1, [r5, #0]
 8003ad6:	061d      	lsls	r5, r3, #24
 8003ad8:	d514      	bpl.n	8003b04 <_printf_i+0x1ac>
 8003ada:	07df      	lsls	r7, r3, #31
 8003adc:	bf44      	itt	mi
 8003ade:	f043 0320 	orrmi.w	r3, r3, #32
 8003ae2:	6023      	strmi	r3, [r4, #0]
 8003ae4:	b91e      	cbnz	r6, 8003aee <_printf_i+0x196>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	f023 0320 	bic.w	r3, r3, #32
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	2310      	movs	r3, #16
 8003af0:	e7b0      	b.n	8003a54 <_printf_i+0xfc>
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	f043 0320 	orr.w	r3, r3, #32
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	2378      	movs	r3, #120	; 0x78
 8003afc:	4828      	ldr	r0, [pc, #160]	; (8003ba0 <_printf_i+0x248>)
 8003afe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b02:	e7e3      	b.n	8003acc <_printf_i+0x174>
 8003b04:	0659      	lsls	r1, r3, #25
 8003b06:	bf48      	it	mi
 8003b08:	b2b6      	uxthmi	r6, r6
 8003b0a:	e7e6      	b.n	8003ada <_printf_i+0x182>
 8003b0c:	4615      	mov	r5, r2
 8003b0e:	e7bb      	b.n	8003a88 <_printf_i+0x130>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	6826      	ldr	r6, [r4, #0]
 8003b14:	6961      	ldr	r1, [r4, #20]
 8003b16:	1d18      	adds	r0, r3, #4
 8003b18:	6028      	str	r0, [r5, #0]
 8003b1a:	0635      	lsls	r5, r6, #24
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	d501      	bpl.n	8003b24 <_printf_i+0x1cc>
 8003b20:	6019      	str	r1, [r3, #0]
 8003b22:	e002      	b.n	8003b2a <_printf_i+0x1d2>
 8003b24:	0670      	lsls	r0, r6, #25
 8003b26:	d5fb      	bpl.n	8003b20 <_printf_i+0x1c8>
 8003b28:	8019      	strh	r1, [r3, #0]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6123      	str	r3, [r4, #16]
 8003b2e:	4615      	mov	r5, r2
 8003b30:	e7ba      	b.n	8003aa8 <_printf_i+0x150>
 8003b32:	682b      	ldr	r3, [r5, #0]
 8003b34:	1d1a      	adds	r2, r3, #4
 8003b36:	602a      	str	r2, [r5, #0]
 8003b38:	681d      	ldr	r5, [r3, #0]
 8003b3a:	6862      	ldr	r2, [r4, #4]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f7fc fb46 	bl	80001d0 <memchr>
 8003b44:	b108      	cbz	r0, 8003b4a <_printf_i+0x1f2>
 8003b46:	1b40      	subs	r0, r0, r5
 8003b48:	6060      	str	r0, [r4, #4]
 8003b4a:	6863      	ldr	r3, [r4, #4]
 8003b4c:	6123      	str	r3, [r4, #16]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b54:	e7a8      	b.n	8003aa8 <_printf_i+0x150>
 8003b56:	6923      	ldr	r3, [r4, #16]
 8003b58:	462a      	mov	r2, r5
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	47d0      	blx	sl
 8003b60:	3001      	adds	r0, #1
 8003b62:	d0ab      	beq.n	8003abc <_printf_i+0x164>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	079b      	lsls	r3, r3, #30
 8003b68:	d413      	bmi.n	8003b92 <_printf_i+0x23a>
 8003b6a:	68e0      	ldr	r0, [r4, #12]
 8003b6c:	9b03      	ldr	r3, [sp, #12]
 8003b6e:	4298      	cmp	r0, r3
 8003b70:	bfb8      	it	lt
 8003b72:	4618      	movlt	r0, r3
 8003b74:	e7a4      	b.n	8003ac0 <_printf_i+0x168>
 8003b76:	2301      	movs	r3, #1
 8003b78:	4632      	mov	r2, r6
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4640      	mov	r0, r8
 8003b7e:	47d0      	blx	sl
 8003b80:	3001      	adds	r0, #1
 8003b82:	d09b      	beq.n	8003abc <_printf_i+0x164>
 8003b84:	3501      	adds	r5, #1
 8003b86:	68e3      	ldr	r3, [r4, #12]
 8003b88:	9903      	ldr	r1, [sp, #12]
 8003b8a:	1a5b      	subs	r3, r3, r1
 8003b8c:	42ab      	cmp	r3, r5
 8003b8e:	dcf2      	bgt.n	8003b76 <_printf_i+0x21e>
 8003b90:	e7eb      	b.n	8003b6a <_printf_i+0x212>
 8003b92:	2500      	movs	r5, #0
 8003b94:	f104 0619 	add.w	r6, r4, #25
 8003b98:	e7f5      	b.n	8003b86 <_printf_i+0x22e>
 8003b9a:	bf00      	nop
 8003b9c:	080042ad 	.word	0x080042ad
 8003ba0:	080042be 	.word	0x080042be

08003ba4 <_sbrk_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	4d06      	ldr	r5, [pc, #24]	; (8003bc0 <_sbrk_r+0x1c>)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4604      	mov	r4, r0
 8003bac:	4608      	mov	r0, r1
 8003bae:	602b      	str	r3, [r5, #0]
 8003bb0:	f000 faf4 	bl	800419c <_sbrk>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d102      	bne.n	8003bbe <_sbrk_r+0x1a>
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	b103      	cbz	r3, 8003bbe <_sbrk_r+0x1a>
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	20012e18 	.word	0x20012e18

08003bc4 <__sread>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bcc:	f000 fab2 	bl	8004134 <_read_r>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	bfab      	itete	ge
 8003bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003bd8:	181b      	addge	r3, r3, r0
 8003bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bde:	bfac      	ite	ge
 8003be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003be2:	81a3      	strhlt	r3, [r4, #12]
 8003be4:	bd10      	pop	{r4, pc}

08003be6 <__swrite>:
 8003be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bea:	461f      	mov	r7, r3
 8003bec:	898b      	ldrh	r3, [r1, #12]
 8003bee:	05db      	lsls	r3, r3, #23
 8003bf0:	4605      	mov	r5, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	4616      	mov	r6, r2
 8003bf6:	d505      	bpl.n	8003c04 <__swrite+0x1e>
 8003bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f000 f9c8 	bl	8003f94 <_lseek_r>
 8003c04:	89a3      	ldrh	r3, [r4, #12]
 8003c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c0e:	81a3      	strh	r3, [r4, #12]
 8003c10:	4632      	mov	r2, r6
 8003c12:	463b      	mov	r3, r7
 8003c14:	4628      	mov	r0, r5
 8003c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1a:	f000 b869 	b.w	8003cf0 <_write_r>

08003c1e <__sseek>:
 8003c1e:	b510      	push	{r4, lr}
 8003c20:	460c      	mov	r4, r1
 8003c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c26:	f000 f9b5 	bl	8003f94 <_lseek_r>
 8003c2a:	1c43      	adds	r3, r0, #1
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	bf15      	itete	ne
 8003c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c3a:	81a3      	strheq	r3, [r4, #12]
 8003c3c:	bf18      	it	ne
 8003c3e:	81a3      	strhne	r3, [r4, #12]
 8003c40:	bd10      	pop	{r4, pc}

08003c42 <__sclose>:
 8003c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c46:	f000 b8d3 	b.w	8003df0 <_close_r>
	...

08003c4c <__swbuf_r>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	460e      	mov	r6, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	4605      	mov	r5, r0
 8003c54:	b118      	cbz	r0, 8003c5e <__swbuf_r+0x12>
 8003c56:	6983      	ldr	r3, [r0, #24]
 8003c58:	b90b      	cbnz	r3, 8003c5e <__swbuf_r+0x12>
 8003c5a:	f7ff fb81 	bl	8003360 <__sinit>
 8003c5e:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <__swbuf_r+0x98>)
 8003c60:	429c      	cmp	r4, r3
 8003c62:	d12b      	bne.n	8003cbc <__swbuf_r+0x70>
 8003c64:	686c      	ldr	r4, [r5, #4]
 8003c66:	69a3      	ldr	r3, [r4, #24]
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	071a      	lsls	r2, r3, #28
 8003c6e:	d52f      	bpl.n	8003cd0 <__swbuf_r+0x84>
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	b36b      	cbz	r3, 8003cd0 <__swbuf_r+0x84>
 8003c74:	6923      	ldr	r3, [r4, #16]
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	1ac0      	subs	r0, r0, r3
 8003c7a:	6963      	ldr	r3, [r4, #20]
 8003c7c:	b2f6      	uxtb	r6, r6
 8003c7e:	4283      	cmp	r3, r0
 8003c80:	4637      	mov	r7, r6
 8003c82:	dc04      	bgt.n	8003c8e <__swbuf_r+0x42>
 8003c84:	4621      	mov	r1, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 f948 	bl	8003f1c <_fflush_r>
 8003c8c:	bb30      	cbnz	r0, 8003cdc <__swbuf_r+0x90>
 8003c8e:	68a3      	ldr	r3, [r4, #8]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	60a3      	str	r3, [r4, #8]
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	6022      	str	r2, [r4, #0]
 8003c9a:	701e      	strb	r6, [r3, #0]
 8003c9c:	6963      	ldr	r3, [r4, #20]
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	4283      	cmp	r3, r0
 8003ca2:	d004      	beq.n	8003cae <__swbuf_r+0x62>
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	07db      	lsls	r3, r3, #31
 8003ca8:	d506      	bpl.n	8003cb8 <__swbuf_r+0x6c>
 8003caa:	2e0a      	cmp	r6, #10
 8003cac:	d104      	bne.n	8003cb8 <__swbuf_r+0x6c>
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 f933 	bl	8003f1c <_fflush_r>
 8003cb6:	b988      	cbnz	r0, 8003cdc <__swbuf_r+0x90>
 8003cb8:	4638      	mov	r0, r7
 8003cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <__swbuf_r+0x9c>)
 8003cbe:	429c      	cmp	r4, r3
 8003cc0:	d101      	bne.n	8003cc6 <__swbuf_r+0x7a>
 8003cc2:	68ac      	ldr	r4, [r5, #8]
 8003cc4:	e7cf      	b.n	8003c66 <__swbuf_r+0x1a>
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <__swbuf_r+0xa0>)
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	bf08      	it	eq
 8003ccc:	68ec      	ldreq	r4, [r5, #12]
 8003cce:	e7ca      	b.n	8003c66 <__swbuf_r+0x1a>
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f000 f81e 	bl	8003d14 <__swsetup_r>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d0cb      	beq.n	8003c74 <__swbuf_r+0x28>
 8003cdc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ce0:	e7ea      	b.n	8003cb8 <__swbuf_r+0x6c>
 8003ce2:	bf00      	nop
 8003ce4:	0800425c 	.word	0x0800425c
 8003ce8:	0800427c 	.word	0x0800427c
 8003cec:	0800423c 	.word	0x0800423c

08003cf0 <_write_r>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	4d07      	ldr	r5, [pc, #28]	; (8003d10 <_write_r+0x20>)
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	602a      	str	r2, [r5, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f7fc ff7f 	bl	8000c02 <_write>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d102      	bne.n	8003d0e <_write_r+0x1e>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b103      	cbz	r3, 8003d0e <_write_r+0x1e>
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	20012e18 	.word	0x20012e18

08003d14 <__swsetup_r>:
 8003d14:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <__swsetup_r+0xcc>)
 8003d16:	b570      	push	{r4, r5, r6, lr}
 8003d18:	681d      	ldr	r5, [r3, #0]
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	b125      	cbz	r5, 8003d2a <__swsetup_r+0x16>
 8003d20:	69ab      	ldr	r3, [r5, #24]
 8003d22:	b913      	cbnz	r3, 8003d2a <__swsetup_r+0x16>
 8003d24:	4628      	mov	r0, r5
 8003d26:	f7ff fb1b 	bl	8003360 <__sinit>
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <__swsetup_r+0xd0>)
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	d10f      	bne.n	8003d50 <__swsetup_r+0x3c>
 8003d30:	686c      	ldr	r4, [r5, #4]
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d38:	0719      	lsls	r1, r3, #28
 8003d3a:	d42c      	bmi.n	8003d96 <__swsetup_r+0x82>
 8003d3c:	06dd      	lsls	r5, r3, #27
 8003d3e:	d411      	bmi.n	8003d64 <__swsetup_r+0x50>
 8003d40:	2309      	movs	r3, #9
 8003d42:	6033      	str	r3, [r6, #0]
 8003d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d48:	81a3      	strh	r3, [r4, #12]
 8003d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d4e:	e03e      	b.n	8003dce <__swsetup_r+0xba>
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <__swsetup_r+0xd4>)
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d101      	bne.n	8003d5a <__swsetup_r+0x46>
 8003d56:	68ac      	ldr	r4, [r5, #8]
 8003d58:	e7eb      	b.n	8003d32 <__swsetup_r+0x1e>
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <__swsetup_r+0xd8>)
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	bf08      	it	eq
 8003d60:	68ec      	ldreq	r4, [r5, #12]
 8003d62:	e7e6      	b.n	8003d32 <__swsetup_r+0x1e>
 8003d64:	0758      	lsls	r0, r3, #29
 8003d66:	d512      	bpl.n	8003d8e <__swsetup_r+0x7a>
 8003d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d6a:	b141      	cbz	r1, 8003d7e <__swsetup_r+0x6a>
 8003d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d70:	4299      	cmp	r1, r3
 8003d72:	d002      	beq.n	8003d7a <__swsetup_r+0x66>
 8003d74:	4630      	mov	r0, r6
 8003d76:	f000 f991 	bl	800409c <_free_r>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	2300      	movs	r3, #0
 8003d88:	6063      	str	r3, [r4, #4]
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f043 0308 	orr.w	r3, r3, #8
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	b94b      	cbnz	r3, 8003dae <__swsetup_r+0x9a>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d003      	beq.n	8003dae <__swsetup_r+0x9a>
 8003da6:	4621      	mov	r1, r4
 8003da8:	4630      	mov	r0, r6
 8003daa:	f000 f92b 	bl	8004004 <__smakebuf_r>
 8003dae:	89a0      	ldrh	r0, [r4, #12]
 8003db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003db4:	f010 0301 	ands.w	r3, r0, #1
 8003db8:	d00a      	beq.n	8003dd0 <__swsetup_r+0xbc>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60a3      	str	r3, [r4, #8]
 8003dbe:	6963      	ldr	r3, [r4, #20]
 8003dc0:	425b      	negs	r3, r3
 8003dc2:	61a3      	str	r3, [r4, #24]
 8003dc4:	6923      	ldr	r3, [r4, #16]
 8003dc6:	b943      	cbnz	r3, 8003dda <__swsetup_r+0xc6>
 8003dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dcc:	d1ba      	bne.n	8003d44 <__swsetup_r+0x30>
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	0781      	lsls	r1, r0, #30
 8003dd2:	bf58      	it	pl
 8003dd4:	6963      	ldrpl	r3, [r4, #20]
 8003dd6:	60a3      	str	r3, [r4, #8]
 8003dd8:	e7f4      	b.n	8003dc4 <__swsetup_r+0xb0>
 8003dda:	2000      	movs	r0, #0
 8003ddc:	e7f7      	b.n	8003dce <__swsetup_r+0xba>
 8003dde:	bf00      	nop
 8003de0:	20000014 	.word	0x20000014
 8003de4:	0800425c 	.word	0x0800425c
 8003de8:	0800427c 	.word	0x0800427c
 8003dec:	0800423c 	.word	0x0800423c

08003df0 <_close_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4d06      	ldr	r5, [pc, #24]	; (8003e0c <_close_r+0x1c>)
 8003df4:	2300      	movs	r3, #0
 8003df6:	4604      	mov	r4, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	602b      	str	r3, [r5, #0]
 8003dfc:	f7fc ff1d 	bl	8000c3a <_close>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d102      	bne.n	8003e0a <_close_r+0x1a>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	b103      	cbz	r3, 8003e0a <_close_r+0x1a>
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
 8003e0c:	20012e18 	.word	0x20012e18

08003e10 <__sflush_r>:
 8003e10:	898a      	ldrh	r2, [r1, #12]
 8003e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e16:	4605      	mov	r5, r0
 8003e18:	0710      	lsls	r0, r2, #28
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	d458      	bmi.n	8003ed0 <__sflush_r+0xc0>
 8003e1e:	684b      	ldr	r3, [r1, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dc05      	bgt.n	8003e30 <__sflush_r+0x20>
 8003e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	dc02      	bgt.n	8003e30 <__sflush_r+0x20>
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e32:	2e00      	cmp	r6, #0
 8003e34:	d0f9      	beq.n	8003e2a <__sflush_r+0x1a>
 8003e36:	2300      	movs	r3, #0
 8003e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e3c:	682f      	ldr	r7, [r5, #0]
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	d032      	beq.n	8003ea8 <__sflush_r+0x98>
 8003e42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	075a      	lsls	r2, r3, #29
 8003e48:	d505      	bpl.n	8003e56 <__sflush_r+0x46>
 8003e4a:	6863      	ldr	r3, [r4, #4]
 8003e4c:	1ac0      	subs	r0, r0, r3
 8003e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e50:	b10b      	cbz	r3, 8003e56 <__sflush_r+0x46>
 8003e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e54:	1ac0      	subs	r0, r0, r3
 8003e56:	2300      	movs	r3, #0
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e5c:	6a21      	ldr	r1, [r4, #32]
 8003e5e:	4628      	mov	r0, r5
 8003e60:	47b0      	blx	r6
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	d106      	bne.n	8003e76 <__sflush_r+0x66>
 8003e68:	6829      	ldr	r1, [r5, #0]
 8003e6a:	291d      	cmp	r1, #29
 8003e6c:	d82c      	bhi.n	8003ec8 <__sflush_r+0xb8>
 8003e6e:	4a2a      	ldr	r2, [pc, #168]	; (8003f18 <__sflush_r+0x108>)
 8003e70:	40ca      	lsrs	r2, r1
 8003e72:	07d6      	lsls	r6, r2, #31
 8003e74:	d528      	bpl.n	8003ec8 <__sflush_r+0xb8>
 8003e76:	2200      	movs	r2, #0
 8003e78:	6062      	str	r2, [r4, #4]
 8003e7a:	04d9      	lsls	r1, r3, #19
 8003e7c:	6922      	ldr	r2, [r4, #16]
 8003e7e:	6022      	str	r2, [r4, #0]
 8003e80:	d504      	bpl.n	8003e8c <__sflush_r+0x7c>
 8003e82:	1c42      	adds	r2, r0, #1
 8003e84:	d101      	bne.n	8003e8a <__sflush_r+0x7a>
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	b903      	cbnz	r3, 8003e8c <__sflush_r+0x7c>
 8003e8a:	6560      	str	r0, [r4, #84]	; 0x54
 8003e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e8e:	602f      	str	r7, [r5, #0]
 8003e90:	2900      	cmp	r1, #0
 8003e92:	d0ca      	beq.n	8003e2a <__sflush_r+0x1a>
 8003e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d002      	beq.n	8003ea2 <__sflush_r+0x92>
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	f000 f8fd 	bl	800409c <_free_r>
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8003ea6:	e7c1      	b.n	8003e2c <__sflush_r+0x1c>
 8003ea8:	6a21      	ldr	r1, [r4, #32]
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4628      	mov	r0, r5
 8003eae:	47b0      	blx	r6
 8003eb0:	1c41      	adds	r1, r0, #1
 8003eb2:	d1c7      	bne.n	8003e44 <__sflush_r+0x34>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0c4      	beq.n	8003e44 <__sflush_r+0x34>
 8003eba:	2b1d      	cmp	r3, #29
 8003ebc:	d001      	beq.n	8003ec2 <__sflush_r+0xb2>
 8003ebe:	2b16      	cmp	r3, #22
 8003ec0:	d101      	bne.n	8003ec6 <__sflush_r+0xb6>
 8003ec2:	602f      	str	r7, [r5, #0]
 8003ec4:	e7b1      	b.n	8003e2a <__sflush_r+0x1a>
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ecc:	81a3      	strh	r3, [r4, #12]
 8003ece:	e7ad      	b.n	8003e2c <__sflush_r+0x1c>
 8003ed0:	690f      	ldr	r7, [r1, #16]
 8003ed2:	2f00      	cmp	r7, #0
 8003ed4:	d0a9      	beq.n	8003e2a <__sflush_r+0x1a>
 8003ed6:	0793      	lsls	r3, r2, #30
 8003ed8:	680e      	ldr	r6, [r1, #0]
 8003eda:	bf08      	it	eq
 8003edc:	694b      	ldreq	r3, [r1, #20]
 8003ede:	600f      	str	r7, [r1, #0]
 8003ee0:	bf18      	it	ne
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	eba6 0807 	sub.w	r8, r6, r7
 8003ee8:	608b      	str	r3, [r1, #8]
 8003eea:	f1b8 0f00 	cmp.w	r8, #0
 8003eee:	dd9c      	ble.n	8003e2a <__sflush_r+0x1a>
 8003ef0:	6a21      	ldr	r1, [r4, #32]
 8003ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ef4:	4643      	mov	r3, r8
 8003ef6:	463a      	mov	r2, r7
 8003ef8:	4628      	mov	r0, r5
 8003efa:	47b0      	blx	r6
 8003efc:	2800      	cmp	r0, #0
 8003efe:	dc06      	bgt.n	8003f0e <__sflush_r+0xfe>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f0c:	e78e      	b.n	8003e2c <__sflush_r+0x1c>
 8003f0e:	4407      	add	r7, r0
 8003f10:	eba8 0800 	sub.w	r8, r8, r0
 8003f14:	e7e9      	b.n	8003eea <__sflush_r+0xda>
 8003f16:	bf00      	nop
 8003f18:	20400001 	.word	0x20400001

08003f1c <_fflush_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	690b      	ldr	r3, [r1, #16]
 8003f20:	4605      	mov	r5, r0
 8003f22:	460c      	mov	r4, r1
 8003f24:	b913      	cbnz	r3, 8003f2c <_fflush_r+0x10>
 8003f26:	2500      	movs	r5, #0
 8003f28:	4628      	mov	r0, r5
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	b118      	cbz	r0, 8003f36 <_fflush_r+0x1a>
 8003f2e:	6983      	ldr	r3, [r0, #24]
 8003f30:	b90b      	cbnz	r3, 8003f36 <_fflush_r+0x1a>
 8003f32:	f7ff fa15 	bl	8003360 <__sinit>
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <_fflush_r+0x6c>)
 8003f38:	429c      	cmp	r4, r3
 8003f3a:	d11b      	bne.n	8003f74 <_fflush_r+0x58>
 8003f3c:	686c      	ldr	r4, [r5, #4]
 8003f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0ef      	beq.n	8003f26 <_fflush_r+0xa>
 8003f46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f48:	07d0      	lsls	r0, r2, #31
 8003f4a:	d404      	bmi.n	8003f56 <_fflush_r+0x3a>
 8003f4c:	0599      	lsls	r1, r3, #22
 8003f4e:	d402      	bmi.n	8003f56 <_fflush_r+0x3a>
 8003f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f52:	f7ff faa3 	bl	800349c <__retarget_lock_acquire_recursive>
 8003f56:	4628      	mov	r0, r5
 8003f58:	4621      	mov	r1, r4
 8003f5a:	f7ff ff59 	bl	8003e10 <__sflush_r>
 8003f5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f60:	07da      	lsls	r2, r3, #31
 8003f62:	4605      	mov	r5, r0
 8003f64:	d4e0      	bmi.n	8003f28 <_fflush_r+0xc>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	059b      	lsls	r3, r3, #22
 8003f6a:	d4dd      	bmi.n	8003f28 <_fflush_r+0xc>
 8003f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f6e:	f7ff fa96 	bl	800349e <__retarget_lock_release_recursive>
 8003f72:	e7d9      	b.n	8003f28 <_fflush_r+0xc>
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <_fflush_r+0x70>)
 8003f76:	429c      	cmp	r4, r3
 8003f78:	d101      	bne.n	8003f7e <_fflush_r+0x62>
 8003f7a:	68ac      	ldr	r4, [r5, #8]
 8003f7c:	e7df      	b.n	8003f3e <_fflush_r+0x22>
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <_fflush_r+0x74>)
 8003f80:	429c      	cmp	r4, r3
 8003f82:	bf08      	it	eq
 8003f84:	68ec      	ldreq	r4, [r5, #12]
 8003f86:	e7da      	b.n	8003f3e <_fflush_r+0x22>
 8003f88:	0800425c 	.word	0x0800425c
 8003f8c:	0800427c 	.word	0x0800427c
 8003f90:	0800423c 	.word	0x0800423c

08003f94 <_lseek_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	4d07      	ldr	r5, [pc, #28]	; (8003fb4 <_lseek_r+0x20>)
 8003f98:	4604      	mov	r4, r0
 8003f9a:	4608      	mov	r0, r1
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	602a      	str	r2, [r5, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f7fc fe70 	bl	8000c88 <_lseek>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d102      	bne.n	8003fb2 <_lseek_r+0x1e>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	b103      	cbz	r3, 8003fb2 <_lseek_r+0x1e>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
 8003fb4:	20012e18 	.word	0x20012e18

08003fb8 <__swhatbuf_r>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	460e      	mov	r6, r1
 8003fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	b096      	sub	sp, #88	; 0x58
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	da08      	bge.n	8003fdc <__swhatbuf_r+0x24>
 8003fca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	602a      	str	r2, [r5, #0]
 8003fd2:	061a      	lsls	r2, r3, #24
 8003fd4:	d410      	bmi.n	8003ff8 <__swhatbuf_r+0x40>
 8003fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fda:	e00e      	b.n	8003ffa <__swhatbuf_r+0x42>
 8003fdc:	466a      	mov	r2, sp
 8003fde:	f000 f8bb 	bl	8004158 <_fstat_r>
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	dbf1      	blt.n	8003fca <__swhatbuf_r+0x12>
 8003fe6:	9a01      	ldr	r2, [sp, #4]
 8003fe8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ff0:	425a      	negs	r2, r3
 8003ff2:	415a      	adcs	r2, r3
 8003ff4:	602a      	str	r2, [r5, #0]
 8003ff6:	e7ee      	b.n	8003fd6 <__swhatbuf_r+0x1e>
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	b016      	add	sp, #88	; 0x58
 8004000:	bd70      	pop	{r4, r5, r6, pc}
	...

08004004 <__smakebuf_r>:
 8004004:	898b      	ldrh	r3, [r1, #12]
 8004006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004008:	079d      	lsls	r5, r3, #30
 800400a:	4606      	mov	r6, r0
 800400c:	460c      	mov	r4, r1
 800400e:	d507      	bpl.n	8004020 <__smakebuf_r+0x1c>
 8004010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	6123      	str	r3, [r4, #16]
 8004018:	2301      	movs	r3, #1
 800401a:	6163      	str	r3, [r4, #20]
 800401c:	b002      	add	sp, #8
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	ab01      	add	r3, sp, #4
 8004022:	466a      	mov	r2, sp
 8004024:	f7ff ffc8 	bl	8003fb8 <__swhatbuf_r>
 8004028:	9900      	ldr	r1, [sp, #0]
 800402a:	4605      	mov	r5, r0
 800402c:	4630      	mov	r0, r6
 800402e:	f7ff fa57 	bl	80034e0 <_malloc_r>
 8004032:	b948      	cbnz	r0, 8004048 <__smakebuf_r+0x44>
 8004034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004038:	059a      	lsls	r2, r3, #22
 800403a:	d4ef      	bmi.n	800401c <__smakebuf_r+0x18>
 800403c:	f023 0303 	bic.w	r3, r3, #3
 8004040:	f043 0302 	orr.w	r3, r3, #2
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	e7e3      	b.n	8004010 <__smakebuf_r+0xc>
 8004048:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <__smakebuf_r+0x7c>)
 800404a:	62b3      	str	r3, [r6, #40]	; 0x28
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	6020      	str	r0, [r4, #0]
 8004050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004054:	81a3      	strh	r3, [r4, #12]
 8004056:	9b00      	ldr	r3, [sp, #0]
 8004058:	6163      	str	r3, [r4, #20]
 800405a:	9b01      	ldr	r3, [sp, #4]
 800405c:	6120      	str	r0, [r4, #16]
 800405e:	b15b      	cbz	r3, 8004078 <__smakebuf_r+0x74>
 8004060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004064:	4630      	mov	r0, r6
 8004066:	f000 f889 	bl	800417c <_isatty_r>
 800406a:	b128      	cbz	r0, 8004078 <__smakebuf_r+0x74>
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	89a0      	ldrh	r0, [r4, #12]
 800407a:	4305      	orrs	r5, r0
 800407c:	81a5      	strh	r5, [r4, #12]
 800407e:	e7cd      	b.n	800401c <__smakebuf_r+0x18>
 8004080:	080032f9 	.word	0x080032f9

08004084 <__malloc_lock>:
 8004084:	4801      	ldr	r0, [pc, #4]	; (800408c <__malloc_lock+0x8>)
 8004086:	f7ff ba09 	b.w	800349c <__retarget_lock_acquire_recursive>
 800408a:	bf00      	nop
 800408c:	20012e0c 	.word	0x20012e0c

08004090 <__malloc_unlock>:
 8004090:	4801      	ldr	r0, [pc, #4]	; (8004098 <__malloc_unlock+0x8>)
 8004092:	f7ff ba04 	b.w	800349e <__retarget_lock_release_recursive>
 8004096:	bf00      	nop
 8004098:	20012e0c 	.word	0x20012e0c

0800409c <_free_r>:
 800409c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800409e:	2900      	cmp	r1, #0
 80040a0:	d044      	beq.n	800412c <_free_r+0x90>
 80040a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a6:	9001      	str	r0, [sp, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f1a1 0404 	sub.w	r4, r1, #4
 80040ae:	bfb8      	it	lt
 80040b0:	18e4      	addlt	r4, r4, r3
 80040b2:	f7ff ffe7 	bl	8004084 <__malloc_lock>
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <_free_r+0x94>)
 80040b8:	9801      	ldr	r0, [sp, #4]
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	b933      	cbnz	r3, 80040cc <_free_r+0x30>
 80040be:	6063      	str	r3, [r4, #4]
 80040c0:	6014      	str	r4, [r2, #0]
 80040c2:	b003      	add	sp, #12
 80040c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040c8:	f7ff bfe2 	b.w	8004090 <__malloc_unlock>
 80040cc:	42a3      	cmp	r3, r4
 80040ce:	d908      	bls.n	80040e2 <_free_r+0x46>
 80040d0:	6825      	ldr	r5, [r4, #0]
 80040d2:	1961      	adds	r1, r4, r5
 80040d4:	428b      	cmp	r3, r1
 80040d6:	bf01      	itttt	eq
 80040d8:	6819      	ldreq	r1, [r3, #0]
 80040da:	685b      	ldreq	r3, [r3, #4]
 80040dc:	1949      	addeq	r1, r1, r5
 80040de:	6021      	streq	r1, [r4, #0]
 80040e0:	e7ed      	b.n	80040be <_free_r+0x22>
 80040e2:	461a      	mov	r2, r3
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	b10b      	cbz	r3, 80040ec <_free_r+0x50>
 80040e8:	42a3      	cmp	r3, r4
 80040ea:	d9fa      	bls.n	80040e2 <_free_r+0x46>
 80040ec:	6811      	ldr	r1, [r2, #0]
 80040ee:	1855      	adds	r5, r2, r1
 80040f0:	42a5      	cmp	r5, r4
 80040f2:	d10b      	bne.n	800410c <_free_r+0x70>
 80040f4:	6824      	ldr	r4, [r4, #0]
 80040f6:	4421      	add	r1, r4
 80040f8:	1854      	adds	r4, r2, r1
 80040fa:	42a3      	cmp	r3, r4
 80040fc:	6011      	str	r1, [r2, #0]
 80040fe:	d1e0      	bne.n	80040c2 <_free_r+0x26>
 8004100:	681c      	ldr	r4, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	6053      	str	r3, [r2, #4]
 8004106:	4421      	add	r1, r4
 8004108:	6011      	str	r1, [r2, #0]
 800410a:	e7da      	b.n	80040c2 <_free_r+0x26>
 800410c:	d902      	bls.n	8004114 <_free_r+0x78>
 800410e:	230c      	movs	r3, #12
 8004110:	6003      	str	r3, [r0, #0]
 8004112:	e7d6      	b.n	80040c2 <_free_r+0x26>
 8004114:	6825      	ldr	r5, [r4, #0]
 8004116:	1961      	adds	r1, r4, r5
 8004118:	428b      	cmp	r3, r1
 800411a:	bf04      	itt	eq
 800411c:	6819      	ldreq	r1, [r3, #0]
 800411e:	685b      	ldreq	r3, [r3, #4]
 8004120:	6063      	str	r3, [r4, #4]
 8004122:	bf04      	itt	eq
 8004124:	1949      	addeq	r1, r1, r5
 8004126:	6021      	streq	r1, [r4, #0]
 8004128:	6054      	str	r4, [r2, #4]
 800412a:	e7ca      	b.n	80040c2 <_free_r+0x26>
 800412c:	b003      	add	sp, #12
 800412e:	bd30      	pop	{r4, r5, pc}
 8004130:	20012e10 	.word	0x20012e10

08004134 <_read_r>:
 8004134:	b538      	push	{r3, r4, r5, lr}
 8004136:	4d07      	ldr	r5, [pc, #28]	; (8004154 <_read_r+0x20>)
 8004138:	4604      	mov	r4, r0
 800413a:	4608      	mov	r0, r1
 800413c:	4611      	mov	r1, r2
 800413e:	2200      	movs	r2, #0
 8004140:	602a      	str	r2, [r5, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	f7fc fd40 	bl	8000bc8 <_read>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <_read_r+0x1e>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	b103      	cbz	r3, 8004152 <_read_r+0x1e>
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	20012e18 	.word	0x20012e18

08004158 <_fstat_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4d07      	ldr	r5, [pc, #28]	; (8004178 <_fstat_r+0x20>)
 800415c:	2300      	movs	r3, #0
 800415e:	4604      	mov	r4, r0
 8004160:	4608      	mov	r0, r1
 8004162:	4611      	mov	r1, r2
 8004164:	602b      	str	r3, [r5, #0]
 8004166:	f7fc fd74 	bl	8000c52 <_fstat>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	d102      	bne.n	8004174 <_fstat_r+0x1c>
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	b103      	cbz	r3, 8004174 <_fstat_r+0x1c>
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	bd38      	pop	{r3, r4, r5, pc}
 8004176:	bf00      	nop
 8004178:	20012e18 	.word	0x20012e18

0800417c <_isatty_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d06      	ldr	r5, [pc, #24]	; (8004198 <_isatty_r+0x1c>)
 8004180:	2300      	movs	r3, #0
 8004182:	4604      	mov	r4, r0
 8004184:	4608      	mov	r0, r1
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	f7fc fd73 	bl	8000c72 <_isatty>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d102      	bne.n	8004196 <_isatty_r+0x1a>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	b103      	cbz	r3, 8004196 <_isatty_r+0x1a>
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	bd38      	pop	{r3, r4, r5, pc}
 8004198:	20012e18 	.word	0x20012e18

0800419c <_sbrk>:
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <_sbrk+0x14>)
 800419e:	6811      	ldr	r1, [r2, #0]
 80041a0:	4603      	mov	r3, r0
 80041a2:	b909      	cbnz	r1, 80041a8 <_sbrk+0xc>
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <_sbrk+0x18>)
 80041a6:	6011      	str	r1, [r2, #0]
 80041a8:	6810      	ldr	r0, [r2, #0]
 80041aa:	4403      	add	r3, r0
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4770      	bx	lr
 80041b0:	20012e1c 	.word	0x20012e1c
 80041b4:	20012e20 	.word	0x20012e20

080041b8 <_init>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	bf00      	nop
 80041bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041be:	bc08      	pop	{r3}
 80041c0:	469e      	mov	lr, r3
 80041c2:	4770      	bx	lr

080041c4 <_fini>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr
