
011_Counting_Semaphore_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005208  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054ec  080054ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f4  080054f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f4  080054f4  000154f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080054fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012ea8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f20  20012f20  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e828  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000247c  00000000  00000000  0002e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00030d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d50  00000000  00000000  00031bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f27  00000000  00000000  00032908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010665  00000000  00000000  0005582f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2bee  00000000  00000000  00065e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138a82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044ec  00000000  00000000  00138ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005380 	.word	0x08005380

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005380 	.word	0x08005380

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	db0b      	blt.n	800059e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f003 021f 	and.w	r2, r3, #31
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <__NVIC_EnableIRQ+0x38>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	095b      	lsrs	r3, r3, #5
 8000594:	2001      	movs	r0, #1
 8000596:	fa00 f202 	lsl.w	r2, r0, r2
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0c      	blt.n	80005dc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <__NVIC_SetPendingIRQ+0x38>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	3340      	adds	r3, #64	; 0x40
 80005d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fc27 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f83b 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f8a3 	bl	8000798 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <main+0x6c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <main+0x6c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6013      	str	r3, [r2, #0]
  //printmsg(usr_msg);

  /* Before a semaphore is used it must be explicitly created.  In this example
  	a counting semaphore is created.  The semaphore is created to have a maximum
  	count value of 10, and an initial count value of 0. */
      xCountingSemaphore = xSemaphoreCreateCounting( 10, 0 );
 800065e:	2100      	movs	r1, #0
 8000660:	200a      	movs	r0, #10
 8000662:	f001 ffe8 	bl	8002636 <xQueueCreateCountingSemaphore>
 8000666:	4603      	mov	r3, r0
 8000668:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <main+0x70>)
 800066a:	6013      	str	r3, [r2, #0]

  	/* Check the semaphore was created successfully. */
  	if( xCountingSemaphore != NULL )
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <main+0x70>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d019      	beq.n	80006a8 <main+0x68>
  	{
      	/* Enable the button interrupt and set its priority. */
      	prvSetupSoftwareInterrupt();
 8000674:	f000 fa2e 	bl	8000ad4 <prvSetupSoftwareInterrupt>

  		/* Create the 'handler' task.  This is the task that will be synchronized
  		with the interrupt.  The handler task is created with a high priority to
  		ensure it runs immediately after the interrupt exits.  In this case a
  		priority of 3 is chosen. */
  		xTaskCreate( vHandlerTask, "Handler", 500, NULL, 1, NULL );
 8000678:	2300      	movs	r3, #0
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2301      	movs	r3, #1
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000686:	490b      	ldr	r1, [pc, #44]	; (80006b4 <main+0x74>)
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <main+0x78>)
 800068a:	f002 fa0b 	bl	8002aa4 <xTaskCreate>

  		/* Create the task that will periodically generate a software interrupt.
  		This is created with a priority below the handler task to ensure it will
  		get preempted each time the handler task exist the Blocked state. */
  		xTaskCreate( vPeriodicTask, "Periodic", 500, NULL, 3, NULL );
 800068e:	2300      	movs	r3, #0
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2303      	movs	r3, #3
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <main+0x7c>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <main+0x80>)
 80006a0:	f002 fa00 	bl	8002aa4 <xTaskCreate>

  		/* Start the scheduler so the created tasks start executing. */
  		vTaskStartScheduler();
 80006a4:	f002 fb6a 	bl	8002d7c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x68>
 80006aa:	bf00      	nop
 80006ac:	e0001000 	.word	0xe0001000
 80006b0:	20000190 	.word	0x20000190
 80006b4:	08005398 	.word	0x08005398
 80006b8:	08000a55 	.word	0x08000a55
 80006bc:	080053a0 	.word	0x080053a0
 80006c0:	08000a8d 	.word	0x08000a8d

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fce2 	bl	800409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fe7f 	bl	800144c <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 fa26 	bl	8000ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f8e0 	bl	800193c <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 fa0f 	bl	8000ba4 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4ba2      	ldr	r3, [pc, #648]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4aa1      	ldr	r2, [pc, #644]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b9f      	ldr	r3, [pc, #636]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b9b      	ldr	r3, [pc, #620]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a9a      	ldr	r2, [pc, #616]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b98      	ldr	r3, [pc, #608]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a93      	ldr	r2, [pc, #588]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b91      	ldr	r3, [pc, #580]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b8d      	ldr	r3, [pc, #564]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a8c      	ldr	r2, [pc, #560]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b8a      	ldr	r3, [pc, #552]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b86      	ldr	r3, [pc, #536]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a85      	ldr	r2, [pc, #532]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b83      	ldr	r3, [pc, #524]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b7f      	ldr	r3, [pc, #508]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a7e      	ldr	r2, [pc, #504]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b7c      	ldr	r3, [pc, #496]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4879      	ldr	r0, [pc, #484]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 800085c:	f000 fddc 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4877      	ldr	r0, [pc, #476]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fdd7 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000870:	4875      	ldr	r0, [pc, #468]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 8000872:	f000 fdd1 	bl	8001418 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	486c      	ldr	r0, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 800088e:	f000 fc27 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4866      	ldr	r0, [pc, #408]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fc19 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008be:	2305      	movs	r3, #5
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	485e      	ldr	r0, [pc, #376]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 80008ca:	f000 fc09 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	485a      	ldr	r0, [pc, #360]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fbfc 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e8:	2310      	movs	r3, #16
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f8:	2306      	movs	r3, #6
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4852      	ldr	r0, [pc, #328]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fbec 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000908:	23e0      	movs	r3, #224	; 0xe0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000918:	2305      	movs	r3, #5
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	484a      	ldr	r0, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 8000924:	f000 fbdc 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 800093c:	f000 fbd0 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	483c      	ldr	r0, [pc, #240]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 800095e:	f000 fbbf 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000962:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000966:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4833      	ldr	r0, [pc, #204]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 800097c:	f000 fbb0 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000980:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000992:	2306      	movs	r3, #6
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4829      	ldr	r0, [pc, #164]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 800099e:	f000 fb9f 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80009b8:	f000 fb92 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ce:	230a      	movs	r3, #10
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80009da:	f000 fb81 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 80009f2:	f000 fb75 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fc:	2312      	movs	r3, #18
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 8000a14:	f000 fb64 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 8000a2e:	f000 fb57 	bl	80010e0 <HAL_GPIO_Init>

}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400

08000a54 <vHandlerTask>:

/* USER CODE BEGIN 4 */
static void vHandlerTask( void *pvParameters )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
		/* Use the semaphore to wait for the event.  The semaphore was created
		before the scheduler was started so before this task ran for the first
		time.  The task blocks indefinitely meaning this function call will only
		return once the semaphore has been successfully obtained - so there is no
		need to check the returned value. */
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <vHandlerTask+0x28>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 feb5 	bl	80027d4 <xQueueSemaphoreTake>

		/* To get here the event must have occurred.  Process the event (in this
		case we just print out a message). */
		sprintf(usr_msg, "Handler task - Processing event.\r\n");
 8000a6a:	4905      	ldr	r1, [pc, #20]	; (8000a80 <vHandlerTask+0x2c>)
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <vHandlerTask+0x30>)
 8000a6e:	f003 fb35 	bl	80040dc <siprintf>
		//printmsg(usr_msg);
		printf("%s\r\n", usr_msg); //through SWO
 8000a72:	4904      	ldr	r1, [pc, #16]	; (8000a84 <vHandlerTask+0x30>)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <vHandlerTask+0x34>)
 8000a76:	f003 fb19 	bl	80040ac <iprintf>
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 8000a7a:	e7ef      	b.n	8000a5c <vHandlerTask+0x8>
 8000a7c:	20000190 	.word	0x20000190
 8000a80:	080053ac 	.word	0x080053ac
 8000a84:	20000094 	.word	0x20000094
 8000a88:	080053d0 	.word	0x080053d0

08000a8c <vPeriodicTask>:
	}
}
/*-----------------------------------------------------------*/

static void vPeriodicTask( void *pvParameters )
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	/* As per most tasks, this task is implemented within an infinite loop. */
	for( ;; )
	{
		/* This task is just used to 'simulate' an interrupt.  This is done by
		periodically generating a software interrupt. */
		vTaskDelay( pdMS_TO_TICKS(500) );
 8000a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a98:	f002 f93c 	bl	8002d14 <vTaskDelay>

		/* Generate the interrupt, printing a message both before hand and
		afterwards so the sequence of execution is evident from the output. */
        sprintf(usr_msg, "Periodic task - Pending the interrupt.\r\n" );
 8000a9c:	4909      	ldr	r1, [pc, #36]	; (8000ac4 <vPeriodicTask+0x38>)
 8000a9e:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <vPeriodicTask+0x3c>)
 8000aa0:	f003 fb1c 	bl	80040dc <siprintf>
    	//printmsg(usr_msg);
        printf("%s\r\n", usr_msg); //through SWO
 8000aa4:	4908      	ldr	r1, [pc, #32]	; (8000ac8 <vPeriodicTask+0x3c>)
 8000aa6:	4809      	ldr	r0, [pc, #36]	; (8000acc <vPeriodicTask+0x40>)
 8000aa8:	f003 fb00 	bl	80040ac <iprintf>

        //pend the interrupt
        NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 8000aac:	2028      	movs	r0, #40	; 0x28
 8000aae:	f7ff fd7f 	bl	80005b0 <__NVIC_SetPendingIRQ>

        sprintf(usr_msg, "Periodic task - Resuming.\r\n" );
 8000ab2:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <vPeriodicTask+0x44>)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <vPeriodicTask+0x3c>)
 8000ab6:	f003 fb11 	bl	80040dc <siprintf>
        //printmsg(usr_msg);
        printf("%s\r\n", usr_msg); //through SWO
 8000aba:	4903      	ldr	r1, [pc, #12]	; (8000ac8 <vPeriodicTask+0x3c>)
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <vPeriodicTask+0x40>)
 8000abe:	f003 faf5 	bl	80040ac <iprintf>
		vTaskDelay( pdMS_TO_TICKS(500) );
 8000ac2:	e7e7      	b.n	8000a94 <vPeriodicTask+0x8>
 8000ac4:	080053d8 	.word	0x080053d8
 8000ac8:	20000094 	.word	0x20000094
 8000acc:	080053d0 	.word	0x080053d0
 8000ad0:	08005404 	.word	0x08005404

08000ad4 <prvSetupSoftwareInterrupt>:
	}
}
/*-----------------------------------------------------------*/

static void prvSetupSoftwareInterrupt()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

	/* The interrupt service routine uses an (interrupt safe) FreeRTOS API
	function so the interrupt priority must be at or below the priority defined
	by configSYSCALL_INTERRUPT_PRIORITY. */

	NVIC_SetPriority( EXTI15_10_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
 8000ad8:	2105      	movs	r1, #5
 8000ada:	2028      	movs	r0, #40	; 0x28
 8000adc:	f7ff fd86 	bl	80005ec <__NVIC_SetPriority>

	/* Enable the interrupt. */
	NVIC_EnableIRQ( EXTI15_10_IRQn );
 8000ae0:	2028      	movs	r0, #40	; 0x28
 8000ae2:	f7ff fd47 	bl	8000574 <__NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <EXTI15_10_IRQHandler>:
/*-----------------------------------------------------------*/

void EXTI15_10_IRQHandler( void )
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
	task, the following 'gives' are to demonstrate that the semaphore latches
	the events to allow the handler task to process them in turn without any
	events getting lost.  This simulates multiple interrupts being taken by the
	processor, even though in this case the events are simulated within a single
	interrupt occurrence.*/
	sprintf(usr_msg,"==>Button_Handler\r\n");
 8000af6:	491d      	ldr	r1, [pc, #116]	; (8000b6c <EXTI15_10_IRQHandler+0x80>)
 8000af8:	481d      	ldr	r0, [pc, #116]	; (8000b70 <EXTI15_10_IRQHandler+0x84>)
 8000afa:	f003 faef 	bl	80040dc <siprintf>
	//printmsg(usr_msg);
	printf("%s\r\n", usr_msg); //through SWO
 8000afe:	491c      	ldr	r1, [pc, #112]	; (8000b70 <EXTI15_10_IRQHandler+0x84>)
 8000b00:	481c      	ldr	r0, [pc, #112]	; (8000b74 <EXTI15_10_IRQHandler+0x88>)
 8000b02:	f003 fad3 	bl	80040ac <iprintf>

	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <EXTI15_10_IRQHandler+0x8c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1d3a      	adds	r2, r7, #4
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fdc4 	bl	800269c <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <EXTI15_10_IRQHandler+0x8c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	1d3a      	adds	r2, r7, #4
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fdbd 	bl	800269c <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <EXTI15_10_IRQHandler+0x8c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1d3a      	adds	r2, r7, #4
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fdb6 	bl	800269c <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <EXTI15_10_IRQHandler+0x8c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	1d3a      	adds	r2, r7, #4
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fdaf 	bl	800269c <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <EXTI15_10_IRQHandler+0x8c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	1d3a      	adds	r2, r7, #4
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fda8 	bl	800269c <xQueueGiveFromISR>
    higher priority task.
    NOTE: The syntax for forcing a context switch within an ISR varies between
    FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
    the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
    from an ISR! */
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d007      	beq.n	8000b62 <EXTI15_10_IRQHandler+0x76>
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <EXTI15_10_IRQHandler+0x90>)
 8000b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	f3bf 8f4f 	dsb	sy
 8000b5e:	f3bf 8f6f 	isb	sy
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	08005420 	.word	0x08005420
 8000b70:	20000094 	.word	0x20000094
 8000b74:	080053d0 	.word	0x080053d0
 8000b78:	20000190 	.word	0x20000190
 8000b7c:	e000ed04 	.word	0xe000ed04

08000b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b92:	f000 f9a3 	bl	8000edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40001000 	.word	0x40001000

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	2036      	movs	r0, #54	; 0x36
 8000c16:	f000 fa39 	bl	800108c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c1a:	2036      	movs	r0, #54	; 0x36
 8000c1c:	f000 fa52 	bl	80010c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <HAL_InitTick+0xa4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_InitTick+0xa4>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <HAL_InitTick+0xa4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3c:	f107 0210 	add.w	r2, r7, #16
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 f884 	bl	8001d54 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c4c:	f001 f86e 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8000c50:	4603      	mov	r3, r0
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	0c9b      	lsrs	r3, r3, #18
 8000c60:	3b01      	subs	r3, #1
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_InitTick+0xac>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <HAL_InitTick+0xb0>)
 8000c68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_InitTick+0xac>)
 8000c6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_InitTick+0xac>)
 8000c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_InitTick+0xac>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_InitTick+0xac>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_InitTick+0xac>)
 8000c86:	f001 f897 	bl	8001db8 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d104      	bne.n	8000c9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <HAL_InitTick+0xac>)
 8000c92:	f001 f8eb 	bl	8001e6c <HAL_TIM_Base_Start_IT>
 8000c96:	4603      	mov	r3, r0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	431bde83 	.word	0x431bde83
 8000cac:	20000194 	.word	0x20000194
 8000cb0:	40001000 	.word	0x40001000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM6_DAC_IRQHandler+0x10>)
 8000ce6:	f001 f931 	bl	8001f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000194 	.word	0x20000194

08000cf4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <ITM_SendChar+0x48>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <ITM_SendChar+0x48>)
 8000d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d08:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <ITM_SendChar+0x4c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <ITM_SendChar+0x4c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000d16:	bf00      	nop
 8000d18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f8      	beq.n	8000d18 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000d26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	6013      	str	r3, [r2, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000edfc 	.word	0xe000edfc
 8000d40:	e0000e00 	.word	0xe0000e00

08000d44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00a      	b.n	8000d6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d56:	f3af 8000 	nop.w
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	b2ca      	uxtb	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf0      	blt.n	8000d56 <_read+0x12>
	}

return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e009      	b.n	8000da4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffab 	bl	8000cf4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf1      	blt.n	8000d90 <_write+0x12>

	}
	return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
	return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4a:	490e      	ldr	r1, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e60:	4c0b      	ldr	r4, [pc, #44]	; (8000e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6e:	f7ff ffd7 	bl	8000e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f003 f8e1 	bl	8004038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fbe3 	bl	8000640 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e88:	080054fc 	.word	0x080054fc
  ldr r2, =_sbss
 8000e8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e90:	20012f20 	.word	0x20012f20

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f8d8 	bl	8001076 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fe9a 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fe70 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	200001dc 	.word	0x200001dc

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001dc 	.word	0x200001dc

08000f1c <__NVIC_SetPriorityGrouping>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff4c 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109e:	f7ff ff61 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	6978      	ldr	r0, [r7, #20]
 80010aa:	f7ff ffb1 	bl	8001010 <NVIC_EncodePriority>
 80010ae:	4602      	mov	r2, r0
 80010b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff80 	bl	8000fbc <__NVIC_SetPriority>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff54 	bl	8000f80 <__NVIC_EnableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	e16b      	b.n	80013d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	429a      	cmp	r2, r3
 8001116:	f040 815a 	bne.w	80013ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d005      	beq.n	8001132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	2b02      	cmp	r3, #2
 8001130:	d130      	bne.n	8001194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 0201 	and.w	r2, r3, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b03      	cmp	r3, #3
 800119e:	d017      	beq.n	80011d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d123      	bne.n	8001224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	69b9      	ldr	r1, [r7, #24]
 8001220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80b4 	beq.w	80013ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b60      	ldr	r3, [pc, #384]	; (80013ec <HAL_GPIO_Init+0x30c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a5f      	ldr	r2, [pc, #380]	; (80013ec <HAL_GPIO_Init+0x30c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_GPIO_Init+0x30c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001282:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <HAL_GPIO_Init+0x310>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <HAL_GPIO_Init+0x314>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d02b      	beq.n	8001306 <HAL_GPIO_Init+0x226>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a51      	ldr	r2, [pc, #324]	; (80013f8 <HAL_GPIO_Init+0x318>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x222>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a50      	ldr	r2, [pc, #320]	; (80013fc <HAL_GPIO_Init+0x31c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x21e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	; (8001400 <HAL_GPIO_Init+0x320>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x21a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <HAL_GPIO_Init+0x324>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x216>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	; (8001408 <HAL_GPIO_Init+0x328>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x212>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_GPIO_Init+0x32c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x20e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <HAL_GPIO_Init+0x330>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x20a>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e00e      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012ea:	2308      	movs	r3, #8
 80012ec:	e00c      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012ee:	2306      	movs	r3, #6
 80012f0:	e00a      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012f2:	2305      	movs	r3, #5
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x228>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x228>
 8001306:	2300      	movs	r3, #0
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001318:	4935      	ldr	r1, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x310>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134a:	4a32      	ldr	r2, [pc, #200]	; (8001414 <HAL_GPIO_Init+0x334>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001374:	4a27      	ldr	r2, [pc, #156]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_GPIO_Init+0x334>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139e:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_GPIO_Init+0x334>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_GPIO_Init+0x334>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c8:	4a12      	ldr	r2, [pc, #72]	; (8001414 <HAL_GPIO_Init+0x334>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	f67f ae90 	bls.w	80010fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40021400 	.word	0x40021400
 800140c:	40021800 	.word	0x40021800
 8001410:	40021c00 	.word	0x40021c00
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e267      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d075      	beq.n	8001556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146a:	4b88      	ldr	r3, [pc, #544]	; (800168c <HAL_RCC_OscConfig+0x240>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b04      	cmp	r3, #4
 8001474:	d00c      	beq.n	8001490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001476:	4b85      	ldr	r3, [pc, #532]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147e:	2b08      	cmp	r3, #8
 8001480:	d112      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001482:	4b82      	ldr	r3, [pc, #520]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800148e:	d10b      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	4b7e      	ldr	r3, [pc, #504]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d05b      	beq.n	8001554 <HAL_RCC_OscConfig+0x108>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d157      	bne.n	8001554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e242      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x74>
 80014b2:	4b76      	ldr	r3, [pc, #472]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a75      	ldr	r2, [pc, #468]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x98>
 80014ca:	4b70      	ldr	r3, [pc, #448]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6f      	ldr	r2, [pc, #444]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b6d      	ldr	r3, [pc, #436]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6c      	ldr	r2, [pc, #432]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014e4:	4b69      	ldr	r3, [pc, #420]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a68      	ldr	r2, [pc, #416]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b66      	ldr	r3, [pc, #408]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a65      	ldr	r2, [pc, #404]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fcfe 	bl	8000f04 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fcfa 	bl	8000f04 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e207      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b5b      	ldr	r3, [pc, #364]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0xc0>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fcea 	bl	8000f04 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fce6 	bl	8000f04 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1f3      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0xe8>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d063      	beq.n	800162a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001562:	4b4a      	ldr	r3, [pc, #296]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001576:	2b08      	cmp	r3, #8
 8001578:	d11c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_RCC_OscConfig+0x240>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d116      	bne.n	80015b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x152>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e1c7      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4937      	ldr	r1, [pc, #220]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	e03a      	b.n	800162a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <HAL_RCC_OscConfig+0x244>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fc9f 	bl	8000f04 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fc9b 	bl	8000f04 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1a8      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4925      	ldr	r1, [pc, #148]	; (800168c <HAL_RCC_OscConfig+0x240>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_RCC_OscConfig+0x244>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fc7e 	bl	8000f04 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160c:	f7ff fc7a 	bl	8000f04 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e187      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d036      	beq.n	80016a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d016      	beq.n	800166c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_RCC_OscConfig+0x248>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fc5e 	bl	8000f04 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fc5a 	bl	8000f04 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e167      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_RCC_OscConfig+0x240>)
 8001660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x200>
 800166a:	e01b      	b.n	80016a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_RCC_OscConfig+0x248>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff fc47 	bl	8000f04 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	e00e      	b.n	8001698 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fc43 	bl	8000f04 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d907      	bls.n	8001698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e150      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
 800168c:	40023800 	.word	0x40023800
 8001690:	42470000 	.word	0x42470000
 8001694:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001698:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 800169a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ea      	bne.n	800167a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 8097 	beq.w	80017e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b6:	4b81      	ldr	r3, [pc, #516]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b7d      	ldr	r3, [pc, #500]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a7c      	ldr	r2, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b7a      	ldr	r3, [pc, #488]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016de:	2301      	movs	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e2:	4b77      	ldr	r3, [pc, #476]	; (80018c0 <HAL_RCC_OscConfig+0x474>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d118      	bne.n	8001720 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ee:	4b74      	ldr	r3, [pc, #464]	; (80018c0 <HAL_RCC_OscConfig+0x474>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a73      	ldr	r2, [pc, #460]	; (80018c0 <HAL_RCC_OscConfig+0x474>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fc03 	bl	8000f04 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001702:	f7ff fbff 	bl	8000f04 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e10c      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_RCC_OscConfig+0x474>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x2ea>
 8001728:	4b64      	ldr	r3, [pc, #400]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a63      	ldr	r2, [pc, #396]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	e01c      	b.n	8001770 <HAL_RCC_OscConfig+0x324>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b05      	cmp	r3, #5
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x30c>
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a5b      	ldr	r2, [pc, #364]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0x324>
 8001758:	4b58      	ldr	r3, [pc, #352]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a57      	ldr	r2, [pc, #348]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
 8001764:	4b55      	ldr	r3, [pc, #340]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a54      	ldr	r2, [pc, #336]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 800176a:	f023 0304 	bic.w	r3, r3, #4
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d015      	beq.n	80017a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fbc4 	bl	8000f04 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff fbc0 	bl	8000f04 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e0cb      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001796:	4b49      	ldr	r3, [pc, #292]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0ee      	beq.n	8001780 <HAL_RCC_OscConfig+0x334>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff fbae 	bl	8000f04 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff fbaa 	bl	8000f04 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e0b5      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c2:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ee      	bne.n	80017ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a38      	ldr	r2, [pc, #224]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 80017da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80a1 	beq.w	800192c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d05c      	beq.n	80018b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d141      	bne.n	8001882 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <HAL_RCC_OscConfig+0x478>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fb7e 	bl	8000f04 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff fb7a 	bl	8000f04 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e087      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181e:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69da      	ldr	r2, [r3, #28]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	019b      	lsls	r3, r3, #6
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	085b      	lsrs	r3, r3, #1
 8001842:	3b01      	subs	r3, #1
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	061b      	lsls	r3, r3, #24
 800184e:	491b      	ldr	r1, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x478>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fb53 	bl	8000f04 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001862:	f7ff fb4f 	bl	8000f04 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e05c      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x416>
 8001880:	e054      	b.n	800192c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_RCC_OscConfig+0x478>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fb3c 	bl	8000f04 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff fb38 	bl	8000f04 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e045      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_OscConfig+0x470>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x444>
 80018ae:	e03d      	b.n	800192c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d107      	bne.n	80018c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e038      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000
 80018c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x4ec>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d028      	beq.n	8001928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d121      	bne.n	8001928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d11a      	bne.n	8001928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001900:	4293      	cmp	r3, r2
 8001902:	d111      	bne.n	8001928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	085b      	lsrs	r3, r3, #1
 8001910:	3b01      	subs	r3, #1
 8001912:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d107      	bne.n	8001928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0cc      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d90c      	bls.n	8001978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b65      	ldr	r3, [pc, #404]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0b8      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800199a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a52      	ldr	r2, [pc, #328]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	494d      	ldr	r1, [pc, #308]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d044      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d119      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e07f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e067      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4934      	ldr	r1, [pc, #208]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff fa6a 	bl	8000f04 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff fa66 	bl	8000f04 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e04f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d20c      	bcs.n	8001a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e032      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4916      	ldr	r1, [pc, #88]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ac2:	f000 f821 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	490a      	ldr	r1, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	5ccb      	ldrb	r3, [r1, r3]
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f88c 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00
 8001af8:	40023800 	.word	0x40023800
 8001afc:	0800543c 	.word	0x0800543c
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b0c:	b094      	sub	sp, #80	; 0x50
 8001b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
 8001b14:	2300      	movs	r3, #0
 8001b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b18:	2300      	movs	r3, #0
 8001b1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b20:	4b79      	ldr	r3, [pc, #484]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d00d      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x40>
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	f200 80e1 	bhi.w	8001cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x34>
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b3a:	e0db      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b40:	e0db      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b42:	4b73      	ldr	r3, [pc, #460]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b46:	e0d8      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b52:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d063      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	2200      	movs	r2, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
 8001b76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	462b      	mov	r3, r5
 8001b7e:	f04f 0000 	mov.w	r0, #0
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	0159      	lsls	r1, r3, #5
 8001b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8c:	0150      	lsls	r0, r2, #5
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4621      	mov	r1, r4
 8001b94:	1a51      	subs	r1, r2, r1
 8001b96:	6139      	str	r1, [r7, #16]
 8001b98:	4629      	mov	r1, r5
 8001b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bac:	4659      	mov	r1, fp
 8001bae:	018b      	lsls	r3, r1, #6
 8001bb0:	4651      	mov	r1, sl
 8001bb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bb6:	4651      	mov	r1, sl
 8001bb8:	018a      	lsls	r2, r1, #6
 8001bba:	4651      	mov	r1, sl
 8001bbc:	ebb2 0801 	subs.w	r8, r2, r1
 8001bc0:	4659      	mov	r1, fp
 8001bc2:	eb63 0901 	sbc.w	r9, r3, r1
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bda:	4690      	mov	r8, r2
 8001bdc:	4699      	mov	r9, r3
 8001bde:	4623      	mov	r3, r4
 8001be0:	eb18 0303 	adds.w	r3, r8, r3
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	462b      	mov	r3, r5
 8001be8:	eb49 0303 	adc.w	r3, r9, r3
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	024b      	lsls	r3, r1, #9
 8001bfe:	4621      	mov	r1, r4
 8001c00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c04:	4621      	mov	r1, r4
 8001c06:	024a      	lsls	r2, r1, #9
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c18:	f7fe fb2a 	bl	8000270 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c24:	e058      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	099b      	lsrs	r3, r3, #6
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4611      	mov	r1, r2
 8001c32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c40:	4642      	mov	r2, r8
 8001c42:	464b      	mov	r3, r9
 8001c44:	f04f 0000 	mov.w	r0, #0
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	0159      	lsls	r1, r3, #5
 8001c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c52:	0150      	lsls	r0, r2, #5
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4641      	mov	r1, r8
 8001c5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c5e:	4649      	mov	r1, r9
 8001c60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c78:	ebb2 040a 	subs.w	r4, r2, sl
 8001c7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	00eb      	lsls	r3, r5, #3
 8001c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8e:	00e2      	lsls	r2, r4, #3
 8001c90:	4614      	mov	r4, r2
 8001c92:	461d      	mov	r5, r3
 8001c94:	4643      	mov	r3, r8
 8001c96:	18e3      	adds	r3, r4, r3
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cae:	4629      	mov	r1, r5
 8001cb0:	028b      	lsls	r3, r1, #10
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb8:	4621      	mov	r1, r4
 8001cba:	028a      	lsls	r2, r1, #10
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	61fa      	str	r2, [r7, #28]
 8001cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ccc:	f7fe fad0 	bl	8000270 <__aeabi_uldivmod>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf2:	e002      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3750      	adds	r7, #80	; 0x50
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200

08001d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d30:	f7ff fff0 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0a9b      	lsrs	r3, r3, #10
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4903      	ldr	r1, [pc, #12]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	0800544c 	.word	0x0800544c

08001d54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	220f      	movs	r2, #15
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	08db      	lsrs	r3, r3, #3
 8001d8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <HAL_RCC_GetClockConfig+0x60>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0207 	and.w	r2, r3, #7
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e041      	b.n	8001e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f839 	bl	8001e56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f000 f9d8 	bl	80021ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d001      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e04e      	b.n	8001f22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d022      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x80>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eae:	d01d      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x80>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1f      	ldr	r2, [pc, #124]	; (8001f34 <HAL_TIM_Base_Start_IT+0xc8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d018      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x80>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d013      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x80>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00e      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x80>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x80>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d004      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x80>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d111      	bne.n	8001f10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d010      	beq.n	8001f20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0e:	e007      	b.n	8001f20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40000800 	.word	0x40000800
 8001f3c:	40000c00 	.word	0x40000c00
 8001f40:	40010400 	.word	0x40010400
 8001f44:	40014000 	.word	0x40014000
 8001f48:	40001800 	.word	0x40001800

08001f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d122      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0202 	mvn.w	r2, #2
 8001f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8ee 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8e0 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8f1 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0204 	mvn.w	r2, #4
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8c4 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8b6 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f8c7 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b08      	cmp	r3, #8
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b08      	cmp	r3, #8
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0208 	mvn.w	r2, #8
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2204      	movs	r2, #4
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f89a 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f88c 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f89d 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b10      	cmp	r3, #16
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b10      	cmp	r3, #16
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0210 	mvn.w	r2, #16
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2208      	movs	r2, #8
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f870 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f862 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f873 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0201 	mvn.w	r2, #1
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fd58 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e8:	2b80      	cmp	r3, #128	; 0x80
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f902 	bl	8002300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d107      	bne.n	8002128 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f838 	bl	8002198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b20      	cmp	r3, #32
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b20      	cmp	r3, #32
 8002142:	d107      	bne.n	8002154 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0220 	mvn.w	r2, #32
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8cc 	bl	80022ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a40      	ldr	r2, [pc, #256]	; (80022c0 <TIM_Base_SetConfig+0x114>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ca:	d00f      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3d      	ldr	r2, [pc, #244]	; (80022c4 <TIM_Base_SetConfig+0x118>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00b      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3c      	ldr	r2, [pc, #240]	; (80022c8 <TIM_Base_SetConfig+0x11c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d007      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <TIM_Base_SetConfig+0x120>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d003      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <TIM_Base_SetConfig+0x124>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d108      	bne.n	80021fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a2f      	ldr	r2, [pc, #188]	; (80022c0 <TIM_Base_SetConfig+0x114>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d02b      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d027      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <TIM_Base_SetConfig+0x118>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d023      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a2b      	ldr	r2, [pc, #172]	; (80022c8 <TIM_Base_SetConfig+0x11c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <TIM_Base_SetConfig+0x120>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01b      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <TIM_Base_SetConfig+0x124>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d017      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <TIM_Base_SetConfig+0x128>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <TIM_Base_SetConfig+0x12c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00f      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a26      	ldr	r2, [pc, #152]	; (80022dc <TIM_Base_SetConfig+0x130>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00b      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <TIM_Base_SetConfig+0x134>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <TIM_Base_SetConfig+0x138>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d003      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <TIM_Base_SetConfig+0x13c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d108      	bne.n	8002270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <TIM_Base_SetConfig+0x114>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <TIM_Base_SetConfig+0xf8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <TIM_Base_SetConfig+0x124>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	615a      	str	r2, [r3, #20]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40000c00 	.word	0x40000c00
 80022d0:	40010400 	.word	0x40010400
 80022d4:	40014000 	.word	0x40014000
 80022d8:	40014400 	.word	0x40014400
 80022dc:	40014800 	.word	0x40014800
 80022e0:	40001800 	.word	0x40001800
 80022e4:	40001c00 	.word	0x40001c00
 80022e8:	40002000 	.word	0x40002000

080022ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f103 0208 	add.w	r2, r3, #8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800232c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f103 0208 	add.w	r2, r3, #8
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f103 0208 	add.w	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	601a      	str	r2, [r3, #0]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023cc:	d103      	bne.n	80023d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e00c      	b.n	80023f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3308      	adds	r3, #8
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e002      	b.n	80023e4 <vListInsert+0x2e>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d2f6      	bcs.n	80023de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	601a      	str	r2, [r3, #0]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6892      	ldr	r2, [r2, #8]
 800243e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6852      	ldr	r2, [r2, #4]
 8002448:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	429a      	cmp	r2, r3
 8002452:	d103      	bne.n	800245c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	1e5a      	subs	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80024a2:	bf00      	nop
 80024a4:	e7fe      	b.n	80024a4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80024a6:	f001 faa7 	bl	80039f8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b2:	68f9      	ldr	r1, [r7, #12]
 80024b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	441a      	add	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	3b01      	subs	r3, #1
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	441a      	add	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	22ff      	movs	r2, #255	; 0xff
 80024ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	22ff      	movs	r2, #255	; 0xff
 80024f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00f      	beq.n	8002524 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3310      	adds	r3, #16
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fe35 	bl	8003178 <xTaskRemoveFromEventList>
 800250e:	e009      	b.n	8002524 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3310      	adds	r3, #16
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fefd 	bl	8002314 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3324      	adds	r3, #36	; 0x24
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fef8 	bl	8002314 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002524:	f001 fa98 	bl	8003a58 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002532:	b580      	push	{r7, lr}
 8002534:	b08c      	sub	sp, #48	; 0x30
 8002536:	af02      	add	r7, sp, #8
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	4613      	mov	r3, r2
 800253e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <xQueueGenericCreate+0x2a>
        __asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	61bb      	str	r3, [r7, #24]
    }
 8002558:	bf00      	nop
 800255a:	e7fe      	b.n	800255a <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <xQueueGenericCreate+0x48>
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	429a      	cmp	r2, r3
 8002578:	d101      	bne.n	800257e <xQueueGenericCreate+0x4c>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <xQueueGenericCreate+0x4e>
 800257e:	2300      	movs	r3, #0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <xQueueGenericCreate+0x68>
        __asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	617b      	str	r3, [r7, #20]
    }
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80025a0:	d90a      	bls.n	80025b8 <xQueueGenericCreate+0x86>
        __asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	613b      	str	r3, [r7, #16]
    }
 80025b4:	bf00      	nop
 80025b6:	e7fe      	b.n	80025b6 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	3350      	adds	r3, #80	; 0x50
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 fb3d 	bl	8003c3c <pvPortMalloc>
 80025c2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00d      	beq.n	80025e6 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3350      	adds	r3, #80	; 0x50
 80025d2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f805 	bl	80025f0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025e6:	6a3b      	ldr	r3, [r7, #32]
    }
 80025e8:	4618      	mov	r0, r3
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e002      	b.n	8002612 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800261e:	2101      	movs	r1, #1
 8002620:	69b8      	ldr	r0, [r7, #24]
 8002622:	f7ff ff2b 	bl	800247c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	613b      	str	r3, [r7, #16]
    }
 8002658:	bf00      	nop
 800265a:	e7fe      	b.n	800265a <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	d90a      	bls.n	800267a <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	60fb      	str	r3, [r7, #12]
    }
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800267a:	2202      	movs	r2, #2
 800267c:	2100      	movs	r1, #0
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ff57 	bl	8002532 <xQueueGenericCreate>
 8002684:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8002692:	697b      	ldr	r3, [r7, #20]
    }
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	; 0x38
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <xQueueGiveFromISR+0x2a>
        __asm volatile
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	623b      	str	r3, [r7, #32]
    }
 80026c2:	bf00      	nop
 80026c4:	e7fe      	b.n	80026c4 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <xQueueGiveFromISR+0x48>
        __asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	61fb      	str	r3, [r7, #28]
    }
 80026e0:	bf00      	nop
 80026e2:	e7fe      	b.n	80026e2 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d103      	bne.n	80026f4 <xQueueGiveFromISR+0x58>
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <xQueueGiveFromISR+0x5c>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <xQueueGiveFromISR+0x5e>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <xQueueGiveFromISR+0x78>
        __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	61bb      	str	r3, [r7, #24]
    }
 8002710:	bf00      	nop
 8002712:	e7fe      	b.n	8002712 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002714:	f001 fa52 	bl	8003bbc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002718:	f3ef 8211 	mrs	r2, BASEPRI
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	617a      	str	r2, [r7, #20]
 800272e:	613b      	str	r3, [r7, #16]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002730:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002740:	429a      	cmp	r2, r3
 8002742:	d23a      	bcs.n	80027ba <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800274a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002756:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800275e:	d112      	bne.n	8002786 <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d025      	beq.n	80027b4 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	3324      	adds	r3, #36	; 0x24
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fd03 	bl	8003178 <xTaskRemoveFromEventList>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01d      	beq.n	80027b4 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01a      	beq.n	80027b4 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e016      	b.n	80027b4 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002786:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800278a:	2b7f      	cmp	r3, #127	; 0x7f
 800278c:	d10a      	bne.n	80027a4 <xQueueGiveFromISR+0x108>
        __asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	60fb      	str	r3, [r7, #12]
    }
 80027a0:	bf00      	nop
 80027a2:	e7fe      	b.n	80027a2 <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027a8:	3301      	adds	r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	b25a      	sxtb	r2, r3
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80027b4:	2301      	movs	r3, #1
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
 80027b8:	e001      	b.n	80027be <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80027c8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3738      	adds	r7, #56	; 0x38
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	; 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80027de:	2300      	movs	r3, #0
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <xQueueSemaphoreTake+0x32>
        __asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	61bb      	str	r3, [r7, #24]
    }
 8002802:	bf00      	nop
 8002804:	e7fe      	b.n	8002804 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	617b      	str	r3, [r7, #20]
    }
 8002820:	bf00      	nop
 8002822:	e7fe      	b.n	8002822 <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002824:	f001 f8e8 	bl	80039f8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d019      	beq.n	8002868 <xQueueSemaphoreTake+0x94>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <xQueueSemaphoreTake+0x7a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002844:	f000 ff32 	bl	80036ac <pvTaskIncrementMutexHeldCount>
 8002848:	4602      	mov	r2, r0
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <xQueueSemaphoreTake+0x8c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	3310      	adds	r3, #16
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fc8c 	bl	8003178 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002860:	f001 f8fa 	bl	8003a58 <vPortExitCritical>
                return pdPASS;
 8002864:	2301      	movs	r3, #1
 8002866:	e097      	b.n	8002998 <xQueueSemaphoreTake+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d111      	bne.n	8002892 <xQueueSemaphoreTake+0xbe>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <xQueueSemaphoreTake+0xb6>
        __asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	613b      	str	r3, [r7, #16]
    }
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <xQueueSemaphoreTake+0xb4>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800288a:	f001 f8e5 	bl	8003a58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800288e:	2300      	movs	r3, #0
 8002890:	e082      	b.n	8002998 <xQueueSemaphoreTake+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d106      	bne.n	80028a6 <xQueueSemaphoreTake+0xd2>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002898:	f107 0308 	add.w	r3, r7, #8
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fccd 	bl	800323c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028a6:	f001 f8d7 	bl	8003a58 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028aa:	f000 fab3 	bl	8002e14 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028ae:	f001 f8a3 	bl	80039f8 <vPortEnterCritical>
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028be:	d103      	bne.n	80028c8 <xQueueSemaphoreTake+0xf4>
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d4:	d103      	bne.n	80028de <xQueueSemaphoreTake+0x10a>
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028de:	f001 f8bb 	bl	8003a58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e2:	463a      	mov	r2, r7
 80028e4:	f107 0308 	add.w	r3, r7, #8
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fcbc 	bl	8003268 <xTaskCheckForTimeOut>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d132      	bne.n	800295c <xQueueSemaphoreTake+0x188>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028f8:	f000 f8be 	bl	8002a78 <prvIsQueueEmpty>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d026      	beq.n	8002950 <xQueueSemaphoreTake+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <xQueueSemaphoreTake+0x14a>
                        {
                            taskENTER_CRITICAL();
 800290a:	f001 f875 	bl	80039f8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fdc6 	bl	80034a4 <xTaskPriorityInherit>
 8002918:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 800291a:	f001 f89d 	bl	8003a58 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	3324      	adds	r3, #36	; 0x24
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fc02 	bl	8003130 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800292c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800292e:	f000 f851 	bl	80029d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002932:	f000 fa7d 	bl	8002e30 <xTaskResumeAll>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f47f af73 	bne.w	8002824 <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <xQueueSemaphoreTake+0x1cc>)
 8002940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	e769      	b.n	8002824 <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002952:	f000 f83f 	bl	80029d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002956:	f000 fa6b 	bl	8002e30 <xTaskResumeAll>
 800295a:	e763      	b.n	8002824 <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800295c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800295e:	f000 f839 	bl	80029d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002962:	f000 fa65 	bl	8002e30 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002968:	f000 f886 	bl	8002a78 <prvIsQueueEmpty>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	f43f af58 	beq.w	8002824 <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <xQueueSemaphoreTake+0x1c2>
                        {
                            taskENTER_CRITICAL();
 800297a:	f001 f83d 	bl	80039f8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800297e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002980:	f000 f810 	bl	80029a4 <prvGetDisinheritPriorityAfterTimeout>
 8002984:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	69f9      	ldr	r1, [r7, #28]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fdff 	bl	8003590 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8002992:	f001 f861 	bl	8003a58 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002996:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002998:	4618      	mov	r0, r3
 800299a:	3730      	adds	r7, #48	; 0x30
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	e000ed04 	.word	0xe000ed04

080029a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1c3 0305 	rsb	r3, r3, #5
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e001      	b.n	80029c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80029c6:	68fb      	ldr	r3, [r7, #12]
    }
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80029dc:	f001 f80c 	bl	80039f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029e8:	e011      	b.n	8002a0e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d012      	beq.n	8002a18 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3324      	adds	r3, #36	; 0x24
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fbbe 	bl	8003178 <xTaskRemoveFromEventList>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002a02:	f000 fc97 	bl	8003334 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	dce9      	bgt.n	80029ea <prvUnlockQueue+0x16>
 8002a16:	e000      	b.n	8002a1a <prvUnlockQueue+0x46>
                        break;
 8002a18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a22:	f001 f819 	bl	8003a58 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a26:	f000 ffe7 	bl	80039f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a32:	e011      	b.n	8002a58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d012      	beq.n	8002a62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3310      	adds	r3, #16
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fb99 	bl	8003178 <xTaskRemoveFromEventList>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a4c:	f000 fc72 	bl	8003334 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	dce9      	bgt.n	8002a34 <prvUnlockQueue+0x60>
 8002a60:	e000      	b.n	8002a64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	22ff      	movs	r2, #255	; 0xff
 8002a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a6c:	f000 fff4 	bl	8003a58 <vPortExitCritical>
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a80:	f000 ffba 	bl	80039f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e001      	b.n	8002a96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a96:	f000 ffdf 	bl	8003a58 <vPortExitCritical>

    return xReturn;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	; 0x30
 8002aa8:	af04      	add	r7, sp, #16
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 f8bf 	bl	8003c3c <pvPortMalloc>
 8002abe:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ac6:	2058      	movs	r0, #88	; 0x58
 8002ac8:	f001 f8b8 	bl	8003c3c <pvPortMalloc>
 8002acc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8002ada:	e005      	b.n	8002ae8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002adc:	6978      	ldr	r0, [r7, #20]
 8002ade:	f001 f98d 	bl	8003dfc <vPortFree>
 8002ae2:	e001      	b.n	8002ae8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d013      	beq.n	8002b16 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002aee:	88fa      	ldrh	r2, [r7, #6]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9303      	str	r3, [sp, #12]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	9302      	str	r3, [sp, #8]
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f80e 	bl	8002b26 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b0a:	69f8      	ldr	r0, [r7, #28]
 8002b0c:	f000 f8a2 	bl	8002c54 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b10:	2301      	movs	r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	e002      	b.n	8002b1c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b1a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
    }
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b088      	sub	sp, #32
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	21a5      	movs	r1, #165	; 0xa5
 8002b40:	f001 faac 	bl	800409c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f023 0307 	bic.w	r3, r3, #7
 8002b5c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	617b      	str	r3, [r7, #20]
    }
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01f      	beq.n	8002bc4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	e012      	b.n	8002bb0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	7819      	ldrb	r1, [r3, #0]
 8002b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	3334      	adds	r3, #52	; 0x34
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3301      	adds	r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b09      	cmp	r3, #9
 8002bb4:	d9e9      	bls.n	8002b8a <prvInitialiseNewTask+0x64>
 8002bb6:	e000      	b.n	8002bba <prvInitialiseNewTask+0x94>
            {
                break;
 8002bb8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bc2:	e003      	b.n	8002bcc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d901      	bls.n	8002bd6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	2200      	movs	r2, #0
 8002be6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	3304      	adds	r3, #4
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fbb1 	bl	8002354 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fbac 	bl	8002354 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c00:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	f1c3 0205 	rsb	r2, r3, #5
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	3350      	adds	r3, #80	; 0x50
 8002c16:	2204      	movs	r2, #4
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 fa3e 	bl	800409c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	3354      	adds	r3, #84	; 0x54
 8002c24:	2201      	movs	r2, #1
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fa37 	bl	800409c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	69b8      	ldr	r0, [r7, #24]
 8002c34:	f000 fdb4 	bl	80037a0 <pxPortInitialiseStack>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c4a:	bf00      	nop
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c5c:	f000 fecc 	bl	80039f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c60:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <prvAddNewTaskToReadyList+0xa8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3301      	adds	r3, #1
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <prvAddNewTaskToReadyList+0xa8>)
 8002c68:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c6a:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <prvAddNewTaskToReadyList+0xac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <prvAddNewTaskToReadyList+0xac>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c78:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <prvAddNewTaskToReadyList+0xa8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d110      	bne.n	8002ca2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c80:	f000 fb76 	bl	8003370 <prvInitialiseTaskLists>
 8002c84:	e00d      	b.n	8002ca2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c86:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <prvAddNewTaskToReadyList+0xb0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <prvAddNewTaskToReadyList+0xac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d802      	bhi.n	8002ca2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c9c:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <prvAddNewTaskToReadyList+0xac>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <prvAddNewTaskToReadyList+0xb4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <prvAddNewTaskToReadyList+0xb4>)
 8002caa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cac:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <prvAddNewTaskToReadyList+0xb4>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2201      	movs	r2, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <prvAddNewTaskToReadyList+0xb8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <prvAddNewTaskToReadyList+0xb8>)
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	; (8002d10 <prvAddNewTaskToReadyList+0xbc>)
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f7ff fb46 	bl	800236e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ce2:	f000 feb9 	bl	8003a58 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <prvAddNewTaskToReadyList+0xb0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <prvAddNewTaskToReadyList+0xac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200002b8 	.word	0x200002b8
 8002d00:	200001e0 	.word	0x200001e0
 8002d04:	200002c4 	.word	0x200002c4
 8002d08:	200002d4 	.word	0x200002d4
 8002d0c:	200002c0 	.word	0x200002c0
 8002d10:	200001e4 	.word	0x200001e4

08002d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d017      	beq.n	8002d56 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <vTaskDelay+0x60>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <vTaskDelay+0x30>
        __asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	60bb      	str	r3, [r7, #8]
    }
 8002d40:	bf00      	nop
 8002d42:	e7fe      	b.n	8002d42 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002d44:	f000 f866 	bl	8002e14 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d48:	2100      	movs	r1, #0
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fcc2 	bl	80036d4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002d50:	f000 f86e 	bl	8002e30 <xTaskResumeAll>
 8002d54:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <vTaskDelay+0x64>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200002e0 	.word	0x200002e0
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <vTaskStartScheduler+0x7c>)
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	2300      	movs	r3, #0
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2282      	movs	r2, #130	; 0x82
 8002d8e:	491b      	ldr	r1, [pc, #108]	; (8002dfc <vTaskStartScheduler+0x80>)
 8002d90:	481b      	ldr	r0, [pc, #108]	; (8002e00 <vTaskStartScheduler+0x84>)
 8002d92:	f7ff fe87 	bl	8002aa4 <xTaskCreate>
 8002d96:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d116      	bne.n	8002dcc <vTaskStartScheduler+0x50>
        __asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	60bb      	str	r3, [r7, #8]
    }
 8002db0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <vTaskStartScheduler+0x88>)
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002db8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <vTaskStartScheduler+0x8c>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <vTaskStartScheduler+0x90>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002dc6:	f000 fd75 	bl	80038b4 <xPortStartScheduler>
 8002dca:	e00e      	b.n	8002dea <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd2:	d10a      	bne.n	8002dea <vTaskStartScheduler+0x6e>
        __asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	607b      	str	r3, [r7, #4]
    }
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <vTaskStartScheduler+0x94>)
 8002dec:	681b      	ldr	r3, [r3, #0]
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200002dc 	.word	0x200002dc
 8002dfc:	08005434 	.word	0x08005434
 8002e00:	0800334d 	.word	0x0800334d
 8002e04:	200002d8 	.word	0x200002d8
 8002e08:	200002c4 	.word	0x200002c4
 8002e0c:	200002bc 	.word	0x200002bc
 8002e10:	2000000c 	.word	0x2000000c

08002e14 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <vTaskSuspendAll+0x18>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a03      	ldr	r2, [pc, #12]	; (8002e2c <vTaskSuspendAll+0x18>)
 8002e20:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	200002e0 	.word	0x200002e0

08002e30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <xTaskResumeAll+0xfc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <xTaskResumeAll+0x2c>
        __asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	603b      	str	r3, [r7, #0]
    }
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e5c:	f000 fdcc 	bl	80039f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e60:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <xTaskResumeAll+0xfc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	4a31      	ldr	r2, [pc, #196]	; (8002f2c <xTaskResumeAll+0xfc>)
 8002e68:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e6a:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <xTaskResumeAll+0xfc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d155      	bne.n	8002f1e <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <xTaskResumeAll+0x100>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d051      	beq.n	8002f1e <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e7a:	e02e      	b.n	8002eda <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <xTaskResumeAll+0x104>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3318      	adds	r3, #24
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff facd 	bl	8002428 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fac8 	bl	8002428 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <xTaskResumeAll+0x108>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <xTaskResumeAll+0x108>)
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <xTaskResumeAll+0x10c>)
 8002eb8:	441a      	add	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	f7ff fa54 	bl	800236e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <xTaskResumeAll+0x110>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d302      	bcc.n	8002eda <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <xTaskResumeAll+0x114>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <xTaskResumeAll+0x104>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1cc      	bne.n	8002e7c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ee8:	f000 fac0 	bl	800346c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <xTaskResumeAll+0x118>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ef8:	f000 f828 	bl	8002f4c <xTaskIncrementTick>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <xTaskResumeAll+0x114>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f1      	bne.n	8002ef8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <xTaskResumeAll+0x118>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <xTaskResumeAll+0x114>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f1e:	f000 fd9b 	bl	8003a58 <vPortExitCritical>

    return xAlreadyYielded;
 8002f22:	687b      	ldr	r3, [r7, #4]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200002e0 	.word	0x200002e0
 8002f30:	200002b8 	.word	0x200002b8
 8002f34:	20000278 	.word	0x20000278
 8002f38:	200002c0 	.word	0x200002c0
 8002f3c:	200001e4 	.word	0x200001e4
 8002f40:	200001e0 	.word	0x200001e0
 8002f44:	200002cc 	.word	0x200002cc
 8002f48:	200002c8 	.word	0x200002c8

08002f4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <xTaskIncrementTick+0x108>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d16f      	bne.n	800303e <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <xTaskIncrementTick+0x10c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f66:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <xTaskIncrementTick+0x10c>)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d120      	bne.n	8002fb4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f72:	4b3a      	ldr	r3, [pc, #232]	; (800305c <xTaskIncrementTick+0x110>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <xTaskIncrementTick+0x46>
        __asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	603b      	str	r3, [r7, #0]
    }
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xTaskIncrementTick+0x44>
 8002f92:	4b32      	ldr	r3, [pc, #200]	; (800305c <xTaskIncrementTick+0x110>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	4b31      	ldr	r3, [pc, #196]	; (8003060 <xTaskIncrementTick+0x114>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2f      	ldr	r2, [pc, #188]	; (800305c <xTaskIncrementTick+0x110>)
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <xTaskIncrementTick+0x114>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <xTaskIncrementTick+0x118>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a2d      	ldr	r2, [pc, #180]	; (8003064 <xTaskIncrementTick+0x118>)
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	f000 fa5c 	bl	800346c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <xTaskIncrementTick+0x11c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d344      	bcc.n	8003048 <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fbe:	4b27      	ldr	r3, [pc, #156]	; (800305c <xTaskIncrementTick+0x110>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <xTaskIncrementTick+0x11c>)
 8002fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fce:	601a      	str	r2, [r3, #0]
                    break;
 8002fd0:	e03a      	b.n	8003048 <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd2:	4b22      	ldr	r3, [pc, #136]	; (800305c <xTaskIncrementTick+0x110>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d203      	bcs.n	8002ff2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002fea:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <xTaskIncrementTick+0x11c>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ff0:	e02a      	b.n	8003048 <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fa16 	bl	8002428 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d004      	beq.n	800300e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	3318      	adds	r3, #24
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fa0d 	bl	8002428 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	2201      	movs	r2, #1
 8003014:	409a      	lsls	r2, r3
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <xTaskIncrementTick+0x120>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <xTaskIncrementTick+0x120>)
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4a10      	ldr	r2, [pc, #64]	; (8003070 <xTaskIncrementTick+0x124>)
 800302e:	441a      	add	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f7ff f999 	bl	800236e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800303c:	e7bf      	b.n	8002fbe <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <xTaskIncrementTick+0x128>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <xTaskIncrementTick+0x128>)
 8003046:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003048:	697b      	ldr	r3, [r7, #20]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200002e0 	.word	0x200002e0
 8003058:	200002bc 	.word	0x200002bc
 800305c:	20000270 	.word	0x20000270
 8003060:	20000274 	.word	0x20000274
 8003064:	200002d0 	.word	0x200002d0
 8003068:	200002d8 	.word	0x200002d8
 800306c:	200002c0 	.word	0x200002c0
 8003070:	200001e4 	.word	0x200001e4
 8003074:	200002c8 	.word	0x200002c8

08003078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800307e:	4b27      	ldr	r3, [pc, #156]	; (800311c <vTaskSwitchContext+0xa4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <vTaskSwitchContext+0xa8>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800308c:	e03f      	b.n	800310e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <vTaskSwitchContext+0xa8>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003094:	4b23      	ldr	r3, [pc, #140]	; (8003124 <vTaskSwitchContext+0xac>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80030a2:	7afb      	ldrb	r3, [r7, #11]
 80030a4:	f1c3 031f 	rsb	r3, r3, #31
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	491f      	ldr	r1, [pc, #124]	; (8003128 <vTaskSwitchContext+0xb0>)
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	607b      	str	r3, [r7, #4]
    }
 80030d0:	bf00      	nop
 80030d2:	e7fe      	b.n	80030d2 <vTaskSwitchContext+0x5a>
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4a12      	ldr	r2, [pc, #72]	; (8003128 <vTaskSwitchContext+0xb0>)
 80030e0:	4413      	add	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	3308      	adds	r3, #8
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d104      	bne.n	8003104 <vTaskSwitchContext+0x8c>
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4a08      	ldr	r2, [pc, #32]	; (800312c <vTaskSwitchContext+0xb4>)
 800310c:	6013      	str	r3, [r2, #0]
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	200002e0 	.word	0x200002e0
 8003120:	200002cc 	.word	0x200002cc
 8003124:	200002c0 	.word	0x200002c0
 8003128:	200001e4 	.word	0x200001e4
 800312c:	200001e0 	.word	0x200001e0

08003130 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	60fb      	str	r3, [r7, #12]
    }
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003156:	4b07      	ldr	r3, [pc, #28]	; (8003174 <vTaskPlaceOnEventList+0x44>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3318      	adds	r3, #24
 800315c:	4619      	mov	r1, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff f929 	bl	80023b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003164:	2101      	movs	r1, #1
 8003166:	6838      	ldr	r0, [r7, #0]
 8003168:	f000 fab4 	bl	80036d4 <prvAddCurrentTaskToDelayedList>
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200001e0 	.word	0x200001e0

08003178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	60fb      	str	r3, [r7, #12]
    }
 80031a0:	bf00      	nop
 80031a2:	e7fe      	b.n	80031a2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	3318      	adds	r3, #24
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff f93d 	bl	8002428 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <xTaskRemoveFromEventList+0xac>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11c      	bne.n	80031f0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f934 	bl	8002428 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <xTaskRemoveFromEventList+0xb0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	4a16      	ldr	r2, [pc, #88]	; (8003228 <xTaskRemoveFromEventList+0xb0>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4a13      	ldr	r2, [pc, #76]	; (800322c <xTaskRemoveFromEventList+0xb4>)
 80031e0:	441a      	add	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f7ff f8c0 	bl	800236e <vListInsertEnd>
 80031ee:	e005      	b.n	80031fc <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	3318      	adds	r3, #24
 80031f4:	4619      	mov	r1, r3
 80031f6:	480e      	ldr	r0, [pc, #56]	; (8003230 <xTaskRemoveFromEventList+0xb8>)
 80031f8:	f7ff f8b9 	bl	800236e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <xTaskRemoveFromEventList+0xbc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	429a      	cmp	r2, r3
 8003208:	d905      	bls.n	8003216 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800320a:	2301      	movs	r3, #1
 800320c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <xTaskRemoveFromEventList+0xc0>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e001      	b.n	800321a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800321a:	697b      	ldr	r3, [r7, #20]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	200002e0 	.word	0x200002e0
 8003228:	200002c0 	.word	0x200002c0
 800322c:	200001e4 	.word	0x200001e4
 8003230:	20000278 	.word	0x20000278
 8003234:	200001e0 	.word	0x200001e0
 8003238:	200002cc 	.word	0x200002cc

0800323c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <vTaskInternalSetTimeOutState+0x24>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <vTaskInternalSetTimeOutState+0x28>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	605a      	str	r2, [r3, #4]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	200002d0 	.word	0x200002d0
 8003264:	200002bc 	.word	0x200002bc

08003268 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	613b      	str	r3, [r7, #16]
    }
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	60fb      	str	r3, [r7, #12]
    }
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80032aa:	f000 fba5 	bl	80039f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032ae:	4b1f      	ldr	r3, [pc, #124]	; (800332c <xTaskCheckForTimeOut+0xc4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c6:	d102      	bne.n	80032ce <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	e026      	b.n	800331c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <xTaskCheckForTimeOut+0xc8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d00a      	beq.n	80032f0 <xTaskCheckForTimeOut+0x88>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d305      	bcc.n	80032f0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80032e4:	2301      	movs	r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e015      	b.n	800331c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d20b      	bcs.n	8003312 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad2      	subs	r2, r2, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff98 	bl	800323c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	e004      	b.n	800331c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003318:	2301      	movs	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800331c:	f000 fb9c 	bl	8003a58 <vPortExitCritical>

    return xReturn;
 8003320:	69fb      	ldr	r3, [r7, #28]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200002bc 	.word	0x200002bc
 8003330:	200002d0 	.word	0x200002d0

08003334 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <vTaskMissedYield+0x14>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	200002cc 	.word	0x200002cc

0800334c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003354:	f000 f84c 	bl	80033f0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <prvIdleTask+0x20>)
 800335a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003368:	e7f4      	b.n	8003354 <prvIdleTask+0x8>
 800336a:	bf00      	nop
 800336c:	e000ed04 	.word	0xe000ed04

08003370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	e00c      	b.n	8003396 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <prvInitialiseTaskLists+0x60>)
 8003388:	4413      	add	r3, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe ffc2 	bl	8002314 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3301      	adds	r3, #1
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d9ef      	bls.n	800337c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800339c:	480d      	ldr	r0, [pc, #52]	; (80033d4 <prvInitialiseTaskLists+0x64>)
 800339e:	f7fe ffb9 	bl	8002314 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033a2:	480d      	ldr	r0, [pc, #52]	; (80033d8 <prvInitialiseTaskLists+0x68>)
 80033a4:	f7fe ffb6 	bl	8002314 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033a8:	480c      	ldr	r0, [pc, #48]	; (80033dc <prvInitialiseTaskLists+0x6c>)
 80033aa:	f7fe ffb3 	bl	8002314 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80033ae:	480c      	ldr	r0, [pc, #48]	; (80033e0 <prvInitialiseTaskLists+0x70>)
 80033b0:	f7fe ffb0 	bl	8002314 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80033b4:	480b      	ldr	r0, [pc, #44]	; (80033e4 <prvInitialiseTaskLists+0x74>)
 80033b6:	f7fe ffad 	bl	8002314 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <prvInitialiseTaskLists+0x78>)
 80033bc:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <prvInitialiseTaskLists+0x64>)
 80033be:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <prvInitialiseTaskLists+0x7c>)
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <prvInitialiseTaskLists+0x68>)
 80033c4:	601a      	str	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200001e4 	.word	0x200001e4
 80033d4:	20000248 	.word	0x20000248
 80033d8:	2000025c 	.word	0x2000025c
 80033dc:	20000278 	.word	0x20000278
 80033e0:	2000028c 	.word	0x2000028c
 80033e4:	200002a4 	.word	0x200002a4
 80033e8:	20000270 	.word	0x20000270
 80033ec:	20000274 	.word	0x20000274

080033f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033f6:	e019      	b.n	800342c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80033f8:	f000 fafe 	bl	80039f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <prvCheckTasksWaitingTermination+0x50>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff f80d 	bl	8002428 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <prvCheckTasksWaitingTermination+0x54>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3b01      	subs	r3, #1
 8003414:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <prvCheckTasksWaitingTermination+0x54>)
 8003416:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <prvCheckTasksWaitingTermination+0x58>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3b01      	subs	r3, #1
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <prvCheckTasksWaitingTermination+0x58>)
 8003420:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003422:	f000 fb19 	bl	8003a58 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f810 	bl	800344c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <prvCheckTasksWaitingTermination+0x58>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e1      	bne.n	80033f8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	2000028c 	.word	0x2000028c
 8003444:	200002b8 	.word	0x200002b8
 8003448:	200002a0 	.word	0x200002a0

0800344c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fccf 	bl	8003dfc <vPortFree>
                vPortFree( pxTCB );
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fccc 	bl	8003dfc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003470:	4b0a      	ldr	r3, [pc, #40]	; (800349c <prvResetNextTaskUnblockTime+0x30>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <prvResetNextTaskUnblockTime+0x34>)
 800347c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003480:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003482:	e005      	b.n	8003490 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <prvResetNextTaskUnblockTime+0x30>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <prvResetNextTaskUnblockTime+0x34>)
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000270 	.word	0x20000270
 80034a0:	200002d8 	.word	0x200002d8

080034a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d05e      	beq.n	8003578 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	4b31      	ldr	r3, [pc, #196]	; (8003584 <xTaskPriorityInherit+0xe0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d24e      	bcs.n	8003566 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db06      	blt.n	80034de <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d0:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <xTaskPriorityInherit+0xe0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	f1c3 0205 	rsb	r2, r3, #5
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6959      	ldr	r1, [r3, #20]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4a26      	ldr	r2, [pc, #152]	; (8003588 <xTaskPriorityInherit+0xe4>)
 80034f0:	4413      	add	r3, r2
 80034f2:	4299      	cmp	r1, r3
 80034f4:	d12f      	bne.n	8003556 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	3304      	adds	r3, #4
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe ff94 	bl	8002428 <uxListRemove>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	2201      	movs	r2, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43da      	mvns	r2, r3
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <xTaskPriorityInherit+0xe8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4013      	ands	r3, r2
 8003518:	4a1c      	ldr	r2, [pc, #112]	; (800358c <xTaskPriorityInherit+0xe8>)
 800351a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800351c:	4b19      	ldr	r3, [pc, #100]	; (8003584 <xTaskPriorityInherit+0xe0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	2201      	movs	r2, #1
 800352c:	409a      	lsls	r2, r3
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <xTaskPriorityInherit+0xe8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	4a15      	ldr	r2, [pc, #84]	; (800358c <xTaskPriorityInherit+0xe8>)
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4a10      	ldr	r2, [pc, #64]	; (8003588 <xTaskPriorityInherit+0xe4>)
 8003546:	441a      	add	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7fe ff0d 	bl	800236e <vListInsertEnd>
 8003554:	e004      	b.n	8003560 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <xTaskPriorityInherit+0xe0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e008      	b.n	8003578 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <xTaskPriorityInherit+0xe0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	429a      	cmp	r2, r3
 8003572:	d201      	bcs.n	8003578 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003578:	68fb      	ldr	r3, [r7, #12]
    }
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200001e0 	.word	0x200001e0
 8003588:	200001e4 	.word	0x200001e4
 800358c:	200002c0 	.word	0x200002c0

08003590 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d077      	beq.n	8003698 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	60fb      	str	r3, [r7, #12]
    }
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d902      	bls.n	80035d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	e002      	b.n	80035dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035da:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d058      	beq.n	8003698 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d153      	bne.n	8003698 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80035f0:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10a      	bne.n	8003610 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	60bb      	str	r3, [r7, #8]
    }
 800360c:	bf00      	nop
 800360e:	e7fe      	b.n	800360e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	db04      	blt.n	800362e <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f1c3 0205 	rsb	r2, r3, #5
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6959      	ldr	r1, [r3, #20]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800363e:	4413      	add	r3, r2
 8003640:	4299      	cmp	r1, r3
 8003642:	d129      	bne.n	8003698 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe feed 	bl	8002428 <uxListRemove>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	2201      	movs	r2, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43da      	mvns	r2, r3
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4013      	ands	r3, r2
 8003666:	4a10      	ldr	r2, [pc, #64]	; (80036a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003668:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	2201      	movs	r2, #1
 8003670:	409a      	lsls	r2, r3
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4313      	orrs	r3, r2
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4a06      	ldr	r2, [pc, #24]	; (80036a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800368a:	441a      	add	r2, r3
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f7fe fe6b 	bl	800236e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003698:	bf00      	nop
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	200001e0 	.word	0x200001e0
 80036a4:	200001e4 	.word	0x200001e4
 80036a8:	200002c0 	.word	0x200002c0

080036ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d004      	beq.n	80036c2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036be:	3201      	adds	r2, #1
 80036c0:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80036c2:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80036c4:	681b      	ldr	r3, [r3, #0]
    }
 80036c6:	4618      	mov	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	200001e0 	.word	0x200001e0

080036d4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <prvAddCurrentTaskToDelayedList+0xb0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036e4:	4b28      	ldr	r3, [pc, #160]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fe9c 	bl	8002428 <uxListRemove>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036f6:	4b24      	ldr	r3, [pc, #144]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2201      	movs	r2, #1
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	4b21      	ldr	r3, [pc, #132]	; (800378c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4013      	ands	r3, r2
 800370a:	4a20      	ldr	r2, [pc, #128]	; (800378c <prvAddCurrentTaskToDelayedList+0xb8>)
 800370c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003714:	d10a      	bne.n	800372c <prvAddCurrentTaskToDelayedList+0x58>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3304      	adds	r3, #4
 8003722:	4619      	mov	r1, r3
 8003724:	481a      	ldr	r0, [pc, #104]	; (8003790 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003726:	f7fe fe22 	bl	800236e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800372a:	e026      	b.n	800377a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d209      	bcs.n	8003758 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3304      	adds	r3, #4
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7fe fe30 	bl	80023b6 <vListInsert>
}
 8003756:	e010      	b.n	800377a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <prvAddCurrentTaskToDelayedList+0xc4>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3304      	adds	r3, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f7fe fe26 	bl	80023b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <prvAddCurrentTaskToDelayedList+0xc8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d202      	bcs.n	800377a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003774:	4a09      	ldr	r2, [pc, #36]	; (800379c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6013      	str	r3, [r2, #0]
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200002bc 	.word	0x200002bc
 8003788:	200001e0 	.word	0x200001e0
 800378c:	200002c0 	.word	0x200002c0
 8003790:	200002a4 	.word	0x200002a4
 8003794:	20000274 	.word	0x20000274
 8003798:	20000270 	.word	0x20000270
 800379c:	200002d8 	.word	0x200002d8

080037a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3b04      	subs	r3, #4
 80037b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3b04      	subs	r3, #4
 80037be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f023 0201 	bic.w	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3b04      	subs	r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <pxPortInitialiseStack+0x64>)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b14      	subs	r3, #20
 80037da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b04      	subs	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f06f 0202 	mvn.w	r2, #2
 80037ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3b20      	subs	r3, #32
 80037f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80037f6:	68fb      	ldr	r3, [r7, #12]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	08003809 	.word	0x08003809

08003808 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <prvTaskExitError+0x54>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381a:	d00a      	beq.n	8003832 <prvTaskExitError+0x2a>
        __asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	60fb      	str	r3, [r7, #12]
    }
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <prvTaskExitError+0x28>
        __asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	60bb      	str	r3, [r7, #8]
    }
 8003844:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003846:	bf00      	nop
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0fc      	beq.n	8003848 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	20000010 	.word	0x20000010

08003860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <pxCurrentTCBConst2>)
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	6808      	ldr	r0, [r1, #0]
 8003866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386a:	f380 8809 	msr	PSP, r0
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f380 8811 	msr	BASEPRI, r0
 800387a:	4770      	bx	lr
 800387c:	f3af 8000 	nop.w

08003880 <pxCurrentTCBConst2>:
 8003880:	200001e0 	.word	0x200001e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop

08003888 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003888:	4808      	ldr	r0, [pc, #32]	; (80038ac <prvPortStartFirstTask+0x24>)
 800388a:	6800      	ldr	r0, [r0, #0]
 800388c:	6800      	ldr	r0, [r0, #0]
 800388e:	f380 8808 	msr	MSP, r0
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f380 8814 	msr	CONTROL, r0
 800389a:	b662      	cpsie	i
 800389c:	b661      	cpsie	f
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	df00      	svc	0
 80038a8:	bf00      	nop
 80038aa:	0000      	.short	0x0000
 80038ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop

080038b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80038ba:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <xPortStartScheduler+0x120>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a46      	ldr	r2, [pc, #280]	; (80039d8 <xPortStartScheduler+0x124>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d10a      	bne.n	80038da <xPortStartScheduler+0x26>
        __asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	613b      	str	r3, [r7, #16]
    }
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038da:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <xPortStartScheduler+0x120>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a3f      	ldr	r2, [pc, #252]	; (80039dc <xPortStartScheduler+0x128>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10a      	bne.n	80038fa <xPortStartScheduler+0x46>
        __asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	60fb      	str	r3, [r7, #12]
    }
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038fa:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <xPortStartScheduler+0x12c>)
 80038fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	22ff      	movs	r2, #255	; 0xff
 800390a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <xPortStartScheduler+0x130>)
 8003920:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003922:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <xPortStartScheduler+0x134>)
 8003924:	2207      	movs	r2, #7
 8003926:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003928:	e009      	b.n	800393e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800392a:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <xPortStartScheduler+0x134>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3b01      	subs	r3, #1
 8003930:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <xPortStartScheduler+0x134>)
 8003932:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d0ef      	beq.n	800392a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800394a:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <xPortStartScheduler+0x134>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1c3 0307 	rsb	r3, r3, #7
 8003952:	2b04      	cmp	r3, #4
 8003954:	d00a      	beq.n	800396c <xPortStartScheduler+0xb8>
        __asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	60bb      	str	r3, [r7, #8]
    }
 8003968:	bf00      	nop
 800396a:	e7fe      	b.n	800396a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <xPortStartScheduler+0x134>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <xPortStartScheduler+0x134>)
 8003974:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003976:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <xPortStartScheduler+0x134>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800397e:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <xPortStartScheduler+0x134>)
 8003980:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <xPortStartScheduler+0x138>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <xPortStartScheduler+0x138>)
 8003990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003994:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <xPortStartScheduler+0x138>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a14      	ldr	r2, [pc, #80]	; (80039ec <xPortStartScheduler+0x138>)
 800399c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80039a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80039a2:	f000 f8db 	bl	8003b5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <xPortStartScheduler+0x13c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80039ac:	f000 f8fa 	bl	8003ba4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <xPortStartScheduler+0x140>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <xPortStartScheduler+0x140>)
 80039b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80039ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80039bc:	f7ff ff64 	bl	8003888 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80039c0:	f7ff fb5a 	bl	8003078 <vTaskSwitchContext>
    prvTaskExitError();
 80039c4:	f7ff ff20 	bl	8003808 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	e000ed00 	.word	0xe000ed00
 80039d8:	410fc271 	.word	0x410fc271
 80039dc:	410fc270 	.word	0x410fc270
 80039e0:	e000e400 	.word	0xe000e400
 80039e4:	200002e4 	.word	0x200002e4
 80039e8:	200002e8 	.word	0x200002e8
 80039ec:	e000ed20 	.word	0xe000ed20
 80039f0:	20000010 	.word	0x20000010
 80039f4:	e000ef34 	.word	0xe000ef34

080039f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
        __asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	607b      	str	r3, [r7, #4]
    }
 8003a10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <vPortEnterCritical+0x58>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <vPortEnterCritical+0x58>)
 8003a1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <vPortEnterCritical+0x58>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d10f      	bne.n	8003a44 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <vPortEnterCritical+0x5c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <vPortEnterCritical+0x4c>
        __asm volatile
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	603b      	str	r3, [r7, #0]
    }
 8003a40:	bf00      	nop
 8003a42:	e7fe      	b.n	8003a42 <vPortEnterCritical+0x4a>
    }
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	20000010 	.word	0x20000010
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <vPortExitCritical+0x50>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <vPortExitCritical+0x24>
        __asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	607b      	str	r3, [r7, #4]
    }
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <vPortExitCritical+0x50>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <vPortExitCritical+0x50>)
 8003a84:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <vPortExitCritical+0x50>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d105      	bne.n	8003a9a <vPortExitCritical+0x42>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f383 8811 	msr	BASEPRI, r3
    }
 8003a98:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000010 	.word	0x20000010
 8003aac:	00000000 	.word	0x00000000

08003ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ab0:	f3ef 8009 	mrs	r0, PSP
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <pxCurrentTCBConst>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	f01e 0f10 	tst.w	lr, #16
 8003ac0:	bf08      	it	eq
 8003ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aca:	6010      	str	r0, [r2, #0]
 8003acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ad4:	f380 8811 	msr	BASEPRI, r0
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f7ff faca 	bl	8003078 <vTaskSwitchContext>
 8003ae4:	f04f 0000 	mov.w	r0, #0
 8003ae8:	f380 8811 	msr	BASEPRI, r0
 8003aec:	bc09      	pop	{r0, r3}
 8003aee:	6819      	ldr	r1, [r3, #0]
 8003af0:	6808      	ldr	r0, [r1, #0]
 8003af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af6:	f01e 0f10 	tst.w	lr, #16
 8003afa:	bf08      	it	eq
 8003afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b00:	f380 8809 	msr	PSP, r0
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	f3af 8000 	nop.w

08003b10 <pxCurrentTCBConst>:
 8003b10:	200001e0 	.word	0x200001e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop

08003b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
        __asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	607b      	str	r3, [r7, #4]
    }
 8003b30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003b32:	f7ff fa0b 	bl	8002f4c <xTaskIncrementTick>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <SysTick_Handler+0x40>)
 8003b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	2300      	movs	r3, #0
 8003b46:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	f383 8811 	msr	BASEPRI, r3
    }
 8003b4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <vPortSetupTimerInterrupt+0x34>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <vPortSetupTimerInterrupt+0x38>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <vPortSetupTimerInterrupt+0x3c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <vPortSetupTimerInterrupt+0x40>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <vPortSetupTimerInterrupt+0x44>)
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b7e:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <vPortSetupTimerInterrupt+0x34>)
 8003b80:	2207      	movs	r2, #7
 8003b82:	601a      	str	r2, [r3, #0]
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	e000e010 	.word	0xe000e010
 8003b94:	e000e018 	.word	0xe000e018
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	10624dd3 	.word	0x10624dd3
 8003ba0:	e000e014 	.word	0xe000e014

08003ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003bb4 <vPortEnableVFP+0x10>
 8003ba8:	6801      	ldr	r1, [r0, #0]
 8003baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003bae:	6001      	str	r1, [r0, #0]
 8003bb0:	4770      	bx	lr
 8003bb2:	0000      	.short	0x0000
 8003bb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop

08003bbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003bc2:	f3ef 8305 	mrs	r3, IPSR
 8003bc6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b0f      	cmp	r3, #15
 8003bcc:	d914      	bls.n	8003bf8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <vPortValidateInterruptPriority+0x70>)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bd8:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <vPortValidateInterruptPriority+0x74>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	7afa      	ldrb	r2, [r7, #11]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d20a      	bcs.n	8003bf8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
    }
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <vPortValidateInterruptPriority+0x78>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c00:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <vPortValidateInterruptPriority+0x7c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d90a      	bls.n	8003c1e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	603b      	str	r3, [r7, #0]
    }
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <vPortValidateInterruptPriority+0x60>
    }
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	e000e3f0 	.word	0xe000e3f0
 8003c30:	200002e4 	.word	0x200002e4
 8003c34:	e000ed0c 	.word	0xe000ed0c
 8003c38:	200002e8 	.word	0x200002e8

08003c3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003c48:	f7ff f8e4 	bl	8002e14 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003c4c:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <pvPortMalloc+0x1a8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003c54:	f000 f934 	bl	8003ec0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c58:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <pvPortMalloc+0x1ac>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 80a7 	bne.w	8003db4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02d      	beq.n	8003cc8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d227      	bcs.n	8003cc8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003c78:	2208      	movs	r2, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d021      	beq.n	8003cce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f023 0307 	bic.w	r3, r3, #7
 8003c90:	3308      	adds	r3, #8
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d214      	bcs.n	8003cc2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d010      	beq.n	8003cce <pvPortMalloc+0x92>
        __asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	617b      	str	r3, [r7, #20]
    }
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cc6:	e002      	b.n	8003cce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	e000      	b.n	8003cd0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d06e      	beq.n	8003db4 <pvPortMalloc+0x178>
 8003cd6:	4b45      	ldr	r3, [pc, #276]	; (8003dec <pvPortMalloc+0x1b0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d869      	bhi.n	8003db4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003ce0:	4b43      	ldr	r3, [pc, #268]	; (8003df0 <pvPortMalloc+0x1b4>)
 8003ce2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003ce4:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <pvPortMalloc+0x1b4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cea:	e004      	b.n	8003cf6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d903      	bls.n	8003d08 <pvPortMalloc+0xcc>
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f1      	bne.n	8003cec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003d08:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <pvPortMalloc+0x1a8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d050      	beq.n	8003db4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2208      	movs	r2, #8
 8003d18:	4413      	add	r3, r2
 8003d1a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d91f      	bls.n	8003d74 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <pvPortMalloc+0x120>
        __asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	613b      	str	r3, [r7, #16]
    }
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d6e:	69b8      	ldr	r0, [r7, #24]
 8003d70:	f000 f908 	bl	8003f84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <pvPortMalloc+0x1b0>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <pvPortMalloc+0x1b0>)
 8003d80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d82:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <pvPortMalloc+0x1b0>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <pvPortMalloc+0x1b8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d203      	bcs.n	8003d96 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <pvPortMalloc+0x1b0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <pvPortMalloc+0x1b8>)
 8003d94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <pvPortMalloc+0x1ac>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <pvPortMalloc+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <pvPortMalloc+0x1bc>)
 8003db2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003db4:	f7ff f83c 	bl	8002e30 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <pvPortMalloc+0x19c>
        __asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	60fb      	str	r3, [r7, #12]
    }
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3728      	adds	r7, #40	; 0x28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20012ef4 	.word	0x20012ef4
 8003de8:	20012f08 	.word	0x20012f08
 8003dec:	20012ef8 	.word	0x20012ef8
 8003df0:	20012eec 	.word	0x20012eec
 8003df4:	20012efc 	.word	0x20012efc
 8003df8:	20012f00 	.word	0x20012f00

08003dfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04d      	beq.n	8003eaa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e0e:	2308      	movs	r3, #8
 8003e10:	425b      	negs	r3, r3
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4413      	add	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <vPortFree+0xb8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <vPortFree+0x44>
        __asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	60fb      	str	r3, [r7, #12]
    }
 8003e3c:	bf00      	nop
 8003e3e:	e7fe      	b.n	8003e3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <vPortFree+0x62>
        __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	60bb      	str	r3, [r7, #8]
    }
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <vPortFree+0xb8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01e      	beq.n	8003eaa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d11a      	bne.n	8003eaa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <vPortFree+0xb8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	401a      	ands	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003e84:	f7fe ffc6 	bl	8002e14 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <vPortFree+0xbc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <vPortFree+0xbc>)
 8003e94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e96:	6938      	ldr	r0, [r7, #16]
 8003e98:	f000 f874 	bl	8003f84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003e9c:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <vPortFree+0xc0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	4a06      	ldr	r2, [pc, #24]	; (8003ebc <vPortFree+0xc0>)
 8003ea4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003ea6:	f7fe ffc3 	bl	8002e30 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003eaa:	bf00      	nop
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20012f08 	.word	0x20012f08
 8003eb8:	20012ef8 	.word	0x20012ef8
 8003ebc:	20012f04 	.word	0x20012f04

08003ec0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ec6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003eca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <prvHeapInit+0xac>)
 8003ece:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00c      	beq.n	8003ef4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3307      	adds	r3, #7
 8003ede:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0307 	bic.w	r3, r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <prvHeapInit+0xac>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <prvHeapInit+0xb0>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <prvHeapInit+0xb0>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4413      	add	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <prvHeapInit+0xb4>)
 8003f20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <prvHeapInit+0xb4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <prvHeapInit+0xb4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <prvHeapInit+0xb4>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <prvHeapInit+0xb8>)
 8003f4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <prvHeapInit+0xbc>)
 8003f56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <prvHeapInit+0xc0>)
 8003f5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f5e:	601a      	str	r2, [r3, #0]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	200002ec 	.word	0x200002ec
 8003f70:	20012eec 	.word	0x20012eec
 8003f74:	20012ef4 	.word	0x20012ef4
 8003f78:	20012efc 	.word	0x20012efc
 8003f7c:	20012ef8 	.word	0x20012ef8
 8003f80:	20012f08 	.word	0x20012f08

08003f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f8c:	4b28      	ldr	r3, [pc, #160]	; (8004030 <prvInsertBlockIntoFreeList+0xac>)
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e002      	b.n	8003f98 <prvInsertBlockIntoFreeList+0x14>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d8f7      	bhi.n	8003f92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4413      	add	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d108      	bne.n	8003fc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d118      	bne.n	800400c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <prvInsertBlockIntoFreeList+0xb0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d00d      	beq.n	8004002 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e008      	b.n	8004014 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <prvInsertBlockIntoFreeList+0xb0>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e003      	b.n	8004014 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d002      	beq.n	8004022 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20012eec 	.word	0x20012eec
 8004034:	20012ef4 	.word	0x20012ef4

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4d0d      	ldr	r5, [pc, #52]	; (8004070 <__libc_init_array+0x38>)
 800403c:	4c0d      	ldr	r4, [pc, #52]	; (8004074 <__libc_init_array+0x3c>)
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	2600      	movs	r6, #0
 8004044:	42a6      	cmp	r6, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	4d0b      	ldr	r5, [pc, #44]	; (8004078 <__libc_init_array+0x40>)
 800404a:	4c0c      	ldr	r4, [pc, #48]	; (800407c <__libc_init_array+0x44>)
 800404c:	f001 f998 	bl	8005380 <_init>
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	2600      	movs	r6, #0
 8004056:	42a6      	cmp	r6, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004060:	4798      	blx	r3
 8004062:	3601      	adds	r6, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	f855 3b04 	ldr.w	r3, [r5], #4
 800406a:	4798      	blx	r3
 800406c:	3601      	adds	r6, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	080054f4 	.word	0x080054f4
 8004074:	080054f4 	.word	0x080054f4
 8004078:	080054f4 	.word	0x080054f4
 800407c:	080054f8 	.word	0x080054f8

08004080 <memcpy>:
 8004080:	440a      	add	r2, r1
 8004082:	4291      	cmp	r1, r2
 8004084:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004088:	d100      	bne.n	800408c <memcpy+0xc>
 800408a:	4770      	bx	lr
 800408c:	b510      	push	{r4, lr}
 800408e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004096:	4291      	cmp	r1, r2
 8004098:	d1f9      	bne.n	800408e <memcpy+0xe>
 800409a:	bd10      	pop	{r4, pc}

0800409c <memset>:
 800409c:	4402      	add	r2, r0
 800409e:	4603      	mov	r3, r0
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d100      	bne.n	80040a6 <memset+0xa>
 80040a4:	4770      	bx	lr
 80040a6:	f803 1b01 	strb.w	r1, [r3], #1
 80040aa:	e7f9      	b.n	80040a0 <memset+0x4>

080040ac <iprintf>:
 80040ac:	b40f      	push	{r0, r1, r2, r3}
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <iprintf+0x2c>)
 80040b0:	b513      	push	{r0, r1, r4, lr}
 80040b2:	681c      	ldr	r4, [r3, #0]
 80040b4:	b124      	cbz	r4, 80040c0 <iprintf+0x14>
 80040b6:	69a3      	ldr	r3, [r4, #24]
 80040b8:	b913      	cbnz	r3, 80040c0 <iprintf+0x14>
 80040ba:	4620      	mov	r0, r4
 80040bc:	f000 f886 	bl	80041cc <__sinit>
 80040c0:	ab05      	add	r3, sp, #20
 80040c2:	9a04      	ldr	r2, [sp, #16]
 80040c4:	68a1      	ldr	r1, [r4, #8]
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 fb39 	bl	8004740 <_vfiprintf_r>
 80040ce:	b002      	add	sp, #8
 80040d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040d4:	b004      	add	sp, #16
 80040d6:	4770      	bx	lr
 80040d8:	20000014 	.word	0x20000014

080040dc <siprintf>:
 80040dc:	b40e      	push	{r1, r2, r3}
 80040de:	b500      	push	{lr}
 80040e0:	b09c      	sub	sp, #112	; 0x70
 80040e2:	ab1d      	add	r3, sp, #116	; 0x74
 80040e4:	9002      	str	r0, [sp, #8]
 80040e6:	9006      	str	r0, [sp, #24]
 80040e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040ec:	4809      	ldr	r0, [pc, #36]	; (8004114 <siprintf+0x38>)
 80040ee:	9107      	str	r1, [sp, #28]
 80040f0:	9104      	str	r1, [sp, #16]
 80040f2:	4909      	ldr	r1, [pc, #36]	; (8004118 <siprintf+0x3c>)
 80040f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f8:	9105      	str	r1, [sp, #20]
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	a902      	add	r1, sp, #8
 8004100:	f000 f9f4 	bl	80044ec <_svfiprintf_r>
 8004104:	9b02      	ldr	r3, [sp, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	b01c      	add	sp, #112	; 0x70
 800410c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004110:	b003      	add	sp, #12
 8004112:	4770      	bx	lr
 8004114:	20000014 	.word	0x20000014
 8004118:	ffff0208 	.word	0xffff0208

0800411c <std>:
 800411c:	2300      	movs	r3, #0
 800411e:	b510      	push	{r4, lr}
 8004120:	4604      	mov	r4, r0
 8004122:	e9c0 3300 	strd	r3, r3, [r0]
 8004126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800412a:	6083      	str	r3, [r0, #8]
 800412c:	8181      	strh	r1, [r0, #12]
 800412e:	6643      	str	r3, [r0, #100]	; 0x64
 8004130:	81c2      	strh	r2, [r0, #14]
 8004132:	6183      	str	r3, [r0, #24]
 8004134:	4619      	mov	r1, r3
 8004136:	2208      	movs	r2, #8
 8004138:	305c      	adds	r0, #92	; 0x5c
 800413a:	f7ff ffaf 	bl	800409c <memset>
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <std+0x38>)
 8004140:	6263      	str	r3, [r4, #36]	; 0x24
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <std+0x3c>)
 8004144:	62a3      	str	r3, [r4, #40]	; 0x28
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <std+0x40>)
 8004148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <std+0x44>)
 800414c:	6224      	str	r4, [r4, #32]
 800414e:	6323      	str	r3, [r4, #48]	; 0x30
 8004150:	bd10      	pop	{r4, pc}
 8004152:	bf00      	nop
 8004154:	08004ce9 	.word	0x08004ce9
 8004158:	08004d0b 	.word	0x08004d0b
 800415c:	08004d43 	.word	0x08004d43
 8004160:	08004d67 	.word	0x08004d67

08004164 <_cleanup_r>:
 8004164:	4901      	ldr	r1, [pc, #4]	; (800416c <_cleanup_r+0x8>)
 8004166:	f000 b8af 	b.w	80042c8 <_fwalk_reent>
 800416a:	bf00      	nop
 800416c:	08005041 	.word	0x08005041

08004170 <__sfmoreglue>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	2268      	movs	r2, #104	; 0x68
 8004174:	1e4d      	subs	r5, r1, #1
 8004176:	4355      	muls	r5, r2
 8004178:	460e      	mov	r6, r1
 800417a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800417e:	f000 f8e5 	bl	800434c <_malloc_r>
 8004182:	4604      	mov	r4, r0
 8004184:	b140      	cbz	r0, 8004198 <__sfmoreglue+0x28>
 8004186:	2100      	movs	r1, #0
 8004188:	e9c0 1600 	strd	r1, r6, [r0]
 800418c:	300c      	adds	r0, #12
 800418e:	60a0      	str	r0, [r4, #8]
 8004190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004194:	f7ff ff82 	bl	800409c <memset>
 8004198:	4620      	mov	r0, r4
 800419a:	bd70      	pop	{r4, r5, r6, pc}

0800419c <__sfp_lock_acquire>:
 800419c:	4801      	ldr	r0, [pc, #4]	; (80041a4 <__sfp_lock_acquire+0x8>)
 800419e:	f000 b8b3 	b.w	8004308 <__retarget_lock_acquire_recursive>
 80041a2:	bf00      	nop
 80041a4:	20012f0d 	.word	0x20012f0d

080041a8 <__sfp_lock_release>:
 80041a8:	4801      	ldr	r0, [pc, #4]	; (80041b0 <__sfp_lock_release+0x8>)
 80041aa:	f000 b8ae 	b.w	800430a <__retarget_lock_release_recursive>
 80041ae:	bf00      	nop
 80041b0:	20012f0d 	.word	0x20012f0d

080041b4 <__sinit_lock_acquire>:
 80041b4:	4801      	ldr	r0, [pc, #4]	; (80041bc <__sinit_lock_acquire+0x8>)
 80041b6:	f000 b8a7 	b.w	8004308 <__retarget_lock_acquire_recursive>
 80041ba:	bf00      	nop
 80041bc:	20012f0e 	.word	0x20012f0e

080041c0 <__sinit_lock_release>:
 80041c0:	4801      	ldr	r0, [pc, #4]	; (80041c8 <__sinit_lock_release+0x8>)
 80041c2:	f000 b8a2 	b.w	800430a <__retarget_lock_release_recursive>
 80041c6:	bf00      	nop
 80041c8:	20012f0e 	.word	0x20012f0e

080041cc <__sinit>:
 80041cc:	b510      	push	{r4, lr}
 80041ce:	4604      	mov	r4, r0
 80041d0:	f7ff fff0 	bl	80041b4 <__sinit_lock_acquire>
 80041d4:	69a3      	ldr	r3, [r4, #24]
 80041d6:	b11b      	cbz	r3, 80041e0 <__sinit+0x14>
 80041d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041dc:	f7ff bff0 	b.w	80041c0 <__sinit_lock_release>
 80041e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80041e4:	6523      	str	r3, [r4, #80]	; 0x50
 80041e6:	4b13      	ldr	r3, [pc, #76]	; (8004234 <__sinit+0x68>)
 80041e8:	4a13      	ldr	r2, [pc, #76]	; (8004238 <__sinit+0x6c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	bf04      	itt	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	61a3      	streq	r3, [r4, #24]
 80041f6:	4620      	mov	r0, r4
 80041f8:	f000 f820 	bl	800423c <__sfp>
 80041fc:	6060      	str	r0, [r4, #4]
 80041fe:	4620      	mov	r0, r4
 8004200:	f000 f81c 	bl	800423c <__sfp>
 8004204:	60a0      	str	r0, [r4, #8]
 8004206:	4620      	mov	r0, r4
 8004208:	f000 f818 	bl	800423c <__sfp>
 800420c:	2200      	movs	r2, #0
 800420e:	60e0      	str	r0, [r4, #12]
 8004210:	2104      	movs	r1, #4
 8004212:	6860      	ldr	r0, [r4, #4]
 8004214:	f7ff ff82 	bl	800411c <std>
 8004218:	68a0      	ldr	r0, [r4, #8]
 800421a:	2201      	movs	r2, #1
 800421c:	2109      	movs	r1, #9
 800421e:	f7ff ff7d 	bl	800411c <std>
 8004222:	68e0      	ldr	r0, [r4, #12]
 8004224:	2202      	movs	r2, #2
 8004226:	2112      	movs	r1, #18
 8004228:	f7ff ff78 	bl	800411c <std>
 800422c:	2301      	movs	r3, #1
 800422e:	61a3      	str	r3, [r4, #24]
 8004230:	e7d2      	b.n	80041d8 <__sinit+0xc>
 8004232:	bf00      	nop
 8004234:	08005454 	.word	0x08005454
 8004238:	08004165 	.word	0x08004165

0800423c <__sfp>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	4607      	mov	r7, r0
 8004240:	f7ff ffac 	bl	800419c <__sfp_lock_acquire>
 8004244:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <__sfp+0x84>)
 8004246:	681e      	ldr	r6, [r3, #0]
 8004248:	69b3      	ldr	r3, [r6, #24]
 800424a:	b913      	cbnz	r3, 8004252 <__sfp+0x16>
 800424c:	4630      	mov	r0, r6
 800424e:	f7ff ffbd 	bl	80041cc <__sinit>
 8004252:	3648      	adds	r6, #72	; 0x48
 8004254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004258:	3b01      	subs	r3, #1
 800425a:	d503      	bpl.n	8004264 <__sfp+0x28>
 800425c:	6833      	ldr	r3, [r6, #0]
 800425e:	b30b      	cbz	r3, 80042a4 <__sfp+0x68>
 8004260:	6836      	ldr	r6, [r6, #0]
 8004262:	e7f7      	b.n	8004254 <__sfp+0x18>
 8004264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004268:	b9d5      	cbnz	r5, 80042a0 <__sfp+0x64>
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <__sfp+0x88>)
 800426c:	60e3      	str	r3, [r4, #12]
 800426e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004272:	6665      	str	r5, [r4, #100]	; 0x64
 8004274:	f000 f847 	bl	8004306 <__retarget_lock_init_recursive>
 8004278:	f7ff ff96 	bl	80041a8 <__sfp_lock_release>
 800427c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004280:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004284:	6025      	str	r5, [r4, #0]
 8004286:	61a5      	str	r5, [r4, #24]
 8004288:	2208      	movs	r2, #8
 800428a:	4629      	mov	r1, r5
 800428c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004290:	f7ff ff04 	bl	800409c <memset>
 8004294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800429c:	4620      	mov	r0, r4
 800429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a0:	3468      	adds	r4, #104	; 0x68
 80042a2:	e7d9      	b.n	8004258 <__sfp+0x1c>
 80042a4:	2104      	movs	r1, #4
 80042a6:	4638      	mov	r0, r7
 80042a8:	f7ff ff62 	bl	8004170 <__sfmoreglue>
 80042ac:	4604      	mov	r4, r0
 80042ae:	6030      	str	r0, [r6, #0]
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d1d5      	bne.n	8004260 <__sfp+0x24>
 80042b4:	f7ff ff78 	bl	80041a8 <__sfp_lock_release>
 80042b8:	230c      	movs	r3, #12
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	e7ee      	b.n	800429c <__sfp+0x60>
 80042be:	bf00      	nop
 80042c0:	08005454 	.word	0x08005454
 80042c4:	ffff0001 	.word	0xffff0001

080042c8 <_fwalk_reent>:
 80042c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042cc:	4606      	mov	r6, r0
 80042ce:	4688      	mov	r8, r1
 80042d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042d4:	2700      	movs	r7, #0
 80042d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042da:	f1b9 0901 	subs.w	r9, r9, #1
 80042de:	d505      	bpl.n	80042ec <_fwalk_reent+0x24>
 80042e0:	6824      	ldr	r4, [r4, #0]
 80042e2:	2c00      	cmp	r4, #0
 80042e4:	d1f7      	bne.n	80042d6 <_fwalk_reent+0xe>
 80042e6:	4638      	mov	r0, r7
 80042e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ec:	89ab      	ldrh	r3, [r5, #12]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d907      	bls.n	8004302 <_fwalk_reent+0x3a>
 80042f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042f6:	3301      	adds	r3, #1
 80042f8:	d003      	beq.n	8004302 <_fwalk_reent+0x3a>
 80042fa:	4629      	mov	r1, r5
 80042fc:	4630      	mov	r0, r6
 80042fe:	47c0      	blx	r8
 8004300:	4307      	orrs	r7, r0
 8004302:	3568      	adds	r5, #104	; 0x68
 8004304:	e7e9      	b.n	80042da <_fwalk_reent+0x12>

08004306 <__retarget_lock_init_recursive>:
 8004306:	4770      	bx	lr

08004308 <__retarget_lock_acquire_recursive>:
 8004308:	4770      	bx	lr

0800430a <__retarget_lock_release_recursive>:
 800430a:	4770      	bx	lr

0800430c <sbrk_aligned>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	4e0e      	ldr	r6, [pc, #56]	; (8004348 <sbrk_aligned+0x3c>)
 8004310:	460c      	mov	r4, r1
 8004312:	6831      	ldr	r1, [r6, #0]
 8004314:	4605      	mov	r5, r0
 8004316:	b911      	cbnz	r1, 800431e <sbrk_aligned+0x12>
 8004318:	f000 fcd6 	bl	8004cc8 <_sbrk_r>
 800431c:	6030      	str	r0, [r6, #0]
 800431e:	4621      	mov	r1, r4
 8004320:	4628      	mov	r0, r5
 8004322:	f000 fcd1 	bl	8004cc8 <_sbrk_r>
 8004326:	1c43      	adds	r3, r0, #1
 8004328:	d00a      	beq.n	8004340 <sbrk_aligned+0x34>
 800432a:	1cc4      	adds	r4, r0, #3
 800432c:	f024 0403 	bic.w	r4, r4, #3
 8004330:	42a0      	cmp	r0, r4
 8004332:	d007      	beq.n	8004344 <sbrk_aligned+0x38>
 8004334:	1a21      	subs	r1, r4, r0
 8004336:	4628      	mov	r0, r5
 8004338:	f000 fcc6 	bl	8004cc8 <_sbrk_r>
 800433c:	3001      	adds	r0, #1
 800433e:	d101      	bne.n	8004344 <sbrk_aligned+0x38>
 8004340:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004344:	4620      	mov	r0, r4
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	20012f14 	.word	0x20012f14

0800434c <_malloc_r>:
 800434c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004350:	1ccd      	adds	r5, r1, #3
 8004352:	f025 0503 	bic.w	r5, r5, #3
 8004356:	3508      	adds	r5, #8
 8004358:	2d0c      	cmp	r5, #12
 800435a:	bf38      	it	cc
 800435c:	250c      	movcc	r5, #12
 800435e:	2d00      	cmp	r5, #0
 8004360:	4607      	mov	r7, r0
 8004362:	db01      	blt.n	8004368 <_malloc_r+0x1c>
 8004364:	42a9      	cmp	r1, r5
 8004366:	d905      	bls.n	8004374 <_malloc_r+0x28>
 8004368:	230c      	movs	r3, #12
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	2600      	movs	r6, #0
 800436e:	4630      	mov	r0, r6
 8004370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004374:	4e2e      	ldr	r6, [pc, #184]	; (8004430 <_malloc_r+0xe4>)
 8004376:	f000 ff31 	bl	80051dc <__malloc_lock>
 800437a:	6833      	ldr	r3, [r6, #0]
 800437c:	461c      	mov	r4, r3
 800437e:	bb34      	cbnz	r4, 80043ce <_malloc_r+0x82>
 8004380:	4629      	mov	r1, r5
 8004382:	4638      	mov	r0, r7
 8004384:	f7ff ffc2 	bl	800430c <sbrk_aligned>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	4604      	mov	r4, r0
 800438c:	d14d      	bne.n	800442a <_malloc_r+0xde>
 800438e:	6834      	ldr	r4, [r6, #0]
 8004390:	4626      	mov	r6, r4
 8004392:	2e00      	cmp	r6, #0
 8004394:	d140      	bne.n	8004418 <_malloc_r+0xcc>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	4631      	mov	r1, r6
 800439a:	4638      	mov	r0, r7
 800439c:	eb04 0803 	add.w	r8, r4, r3
 80043a0:	f000 fc92 	bl	8004cc8 <_sbrk_r>
 80043a4:	4580      	cmp	r8, r0
 80043a6:	d13a      	bne.n	800441e <_malloc_r+0xd2>
 80043a8:	6821      	ldr	r1, [r4, #0]
 80043aa:	3503      	adds	r5, #3
 80043ac:	1a6d      	subs	r5, r5, r1
 80043ae:	f025 0503 	bic.w	r5, r5, #3
 80043b2:	3508      	adds	r5, #8
 80043b4:	2d0c      	cmp	r5, #12
 80043b6:	bf38      	it	cc
 80043b8:	250c      	movcc	r5, #12
 80043ba:	4629      	mov	r1, r5
 80043bc:	4638      	mov	r0, r7
 80043be:	f7ff ffa5 	bl	800430c <sbrk_aligned>
 80043c2:	3001      	adds	r0, #1
 80043c4:	d02b      	beq.n	800441e <_malloc_r+0xd2>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	442b      	add	r3, r5
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	e00e      	b.n	80043ec <_malloc_r+0xa0>
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	1b52      	subs	r2, r2, r5
 80043d2:	d41e      	bmi.n	8004412 <_malloc_r+0xc6>
 80043d4:	2a0b      	cmp	r2, #11
 80043d6:	d916      	bls.n	8004406 <_malloc_r+0xba>
 80043d8:	1961      	adds	r1, r4, r5
 80043da:	42a3      	cmp	r3, r4
 80043dc:	6025      	str	r5, [r4, #0]
 80043de:	bf18      	it	ne
 80043e0:	6059      	strne	r1, [r3, #4]
 80043e2:	6863      	ldr	r3, [r4, #4]
 80043e4:	bf08      	it	eq
 80043e6:	6031      	streq	r1, [r6, #0]
 80043e8:	5162      	str	r2, [r4, r5]
 80043ea:	604b      	str	r3, [r1, #4]
 80043ec:	4638      	mov	r0, r7
 80043ee:	f104 060b 	add.w	r6, r4, #11
 80043f2:	f000 fef9 	bl	80051e8 <__malloc_unlock>
 80043f6:	f026 0607 	bic.w	r6, r6, #7
 80043fa:	1d23      	adds	r3, r4, #4
 80043fc:	1af2      	subs	r2, r6, r3
 80043fe:	d0b6      	beq.n	800436e <_malloc_r+0x22>
 8004400:	1b9b      	subs	r3, r3, r6
 8004402:	50a3      	str	r3, [r4, r2]
 8004404:	e7b3      	b.n	800436e <_malloc_r+0x22>
 8004406:	6862      	ldr	r2, [r4, #4]
 8004408:	42a3      	cmp	r3, r4
 800440a:	bf0c      	ite	eq
 800440c:	6032      	streq	r2, [r6, #0]
 800440e:	605a      	strne	r2, [r3, #4]
 8004410:	e7ec      	b.n	80043ec <_malloc_r+0xa0>
 8004412:	4623      	mov	r3, r4
 8004414:	6864      	ldr	r4, [r4, #4]
 8004416:	e7b2      	b.n	800437e <_malloc_r+0x32>
 8004418:	4634      	mov	r4, r6
 800441a:	6876      	ldr	r6, [r6, #4]
 800441c:	e7b9      	b.n	8004392 <_malloc_r+0x46>
 800441e:	230c      	movs	r3, #12
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	4638      	mov	r0, r7
 8004424:	f000 fee0 	bl	80051e8 <__malloc_unlock>
 8004428:	e7a1      	b.n	800436e <_malloc_r+0x22>
 800442a:	6025      	str	r5, [r4, #0]
 800442c:	e7de      	b.n	80043ec <_malloc_r+0xa0>
 800442e:	bf00      	nop
 8004430:	20012f10 	.word	0x20012f10

08004434 <__ssputs_r>:
 8004434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	688e      	ldr	r6, [r1, #8]
 800443a:	429e      	cmp	r6, r3
 800443c:	4682      	mov	sl, r0
 800443e:	460c      	mov	r4, r1
 8004440:	4690      	mov	r8, r2
 8004442:	461f      	mov	r7, r3
 8004444:	d838      	bhi.n	80044b8 <__ssputs_r+0x84>
 8004446:	898a      	ldrh	r2, [r1, #12]
 8004448:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800444c:	d032      	beq.n	80044b4 <__ssputs_r+0x80>
 800444e:	6825      	ldr	r5, [r4, #0]
 8004450:	6909      	ldr	r1, [r1, #16]
 8004452:	eba5 0901 	sub.w	r9, r5, r1
 8004456:	6965      	ldr	r5, [r4, #20]
 8004458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800445c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004460:	3301      	adds	r3, #1
 8004462:	444b      	add	r3, r9
 8004464:	106d      	asrs	r5, r5, #1
 8004466:	429d      	cmp	r5, r3
 8004468:	bf38      	it	cc
 800446a:	461d      	movcc	r5, r3
 800446c:	0553      	lsls	r3, r2, #21
 800446e:	d531      	bpl.n	80044d4 <__ssputs_r+0xa0>
 8004470:	4629      	mov	r1, r5
 8004472:	f7ff ff6b 	bl	800434c <_malloc_r>
 8004476:	4606      	mov	r6, r0
 8004478:	b950      	cbnz	r0, 8004490 <__ssputs_r+0x5c>
 800447a:	230c      	movs	r3, #12
 800447c:	f8ca 3000 	str.w	r3, [sl]
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004486:	81a3      	strh	r3, [r4, #12]
 8004488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800448c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004490:	6921      	ldr	r1, [r4, #16]
 8004492:	464a      	mov	r2, r9
 8004494:	f7ff fdf4 	bl	8004080 <memcpy>
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800449e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a2:	81a3      	strh	r3, [r4, #12]
 80044a4:	6126      	str	r6, [r4, #16]
 80044a6:	6165      	str	r5, [r4, #20]
 80044a8:	444e      	add	r6, r9
 80044aa:	eba5 0509 	sub.w	r5, r5, r9
 80044ae:	6026      	str	r6, [r4, #0]
 80044b0:	60a5      	str	r5, [r4, #8]
 80044b2:	463e      	mov	r6, r7
 80044b4:	42be      	cmp	r6, r7
 80044b6:	d900      	bls.n	80044ba <__ssputs_r+0x86>
 80044b8:	463e      	mov	r6, r7
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	4632      	mov	r2, r6
 80044be:	4641      	mov	r1, r8
 80044c0:	f000 fe72 	bl	80051a8 <memmove>
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	1b9b      	subs	r3, r3, r6
 80044c8:	60a3      	str	r3, [r4, #8]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	4433      	add	r3, r6
 80044ce:	6023      	str	r3, [r4, #0]
 80044d0:	2000      	movs	r0, #0
 80044d2:	e7db      	b.n	800448c <__ssputs_r+0x58>
 80044d4:	462a      	mov	r2, r5
 80044d6:	f000 fed9 	bl	800528c <_realloc_r>
 80044da:	4606      	mov	r6, r0
 80044dc:	2800      	cmp	r0, #0
 80044de:	d1e1      	bne.n	80044a4 <__ssputs_r+0x70>
 80044e0:	6921      	ldr	r1, [r4, #16]
 80044e2:	4650      	mov	r0, sl
 80044e4:	f000 fe86 	bl	80051f4 <_free_r>
 80044e8:	e7c7      	b.n	800447a <__ssputs_r+0x46>
	...

080044ec <_svfiprintf_r>:
 80044ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f0:	4698      	mov	r8, r3
 80044f2:	898b      	ldrh	r3, [r1, #12]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	b09d      	sub	sp, #116	; 0x74
 80044f8:	4607      	mov	r7, r0
 80044fa:	460d      	mov	r5, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	d50e      	bpl.n	800451e <_svfiprintf_r+0x32>
 8004500:	690b      	ldr	r3, [r1, #16]
 8004502:	b963      	cbnz	r3, 800451e <_svfiprintf_r+0x32>
 8004504:	2140      	movs	r1, #64	; 0x40
 8004506:	f7ff ff21 	bl	800434c <_malloc_r>
 800450a:	6028      	str	r0, [r5, #0]
 800450c:	6128      	str	r0, [r5, #16]
 800450e:	b920      	cbnz	r0, 800451a <_svfiprintf_r+0x2e>
 8004510:	230c      	movs	r3, #12
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004518:	e0d1      	b.n	80046be <_svfiprintf_r+0x1d2>
 800451a:	2340      	movs	r3, #64	; 0x40
 800451c:	616b      	str	r3, [r5, #20]
 800451e:	2300      	movs	r3, #0
 8004520:	9309      	str	r3, [sp, #36]	; 0x24
 8004522:	2320      	movs	r3, #32
 8004524:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004528:	f8cd 800c 	str.w	r8, [sp, #12]
 800452c:	2330      	movs	r3, #48	; 0x30
 800452e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80046d8 <_svfiprintf_r+0x1ec>
 8004532:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004536:	f04f 0901 	mov.w	r9, #1
 800453a:	4623      	mov	r3, r4
 800453c:	469a      	mov	sl, r3
 800453e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004542:	b10a      	cbz	r2, 8004548 <_svfiprintf_r+0x5c>
 8004544:	2a25      	cmp	r2, #37	; 0x25
 8004546:	d1f9      	bne.n	800453c <_svfiprintf_r+0x50>
 8004548:	ebba 0b04 	subs.w	fp, sl, r4
 800454c:	d00b      	beq.n	8004566 <_svfiprintf_r+0x7a>
 800454e:	465b      	mov	r3, fp
 8004550:	4622      	mov	r2, r4
 8004552:	4629      	mov	r1, r5
 8004554:	4638      	mov	r0, r7
 8004556:	f7ff ff6d 	bl	8004434 <__ssputs_r>
 800455a:	3001      	adds	r0, #1
 800455c:	f000 80aa 	beq.w	80046b4 <_svfiprintf_r+0x1c8>
 8004560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004562:	445a      	add	r2, fp
 8004564:	9209      	str	r2, [sp, #36]	; 0x24
 8004566:	f89a 3000 	ldrb.w	r3, [sl]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80a2 	beq.w	80046b4 <_svfiprintf_r+0x1c8>
 8004570:	2300      	movs	r3, #0
 8004572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800457a:	f10a 0a01 	add.w	sl, sl, #1
 800457e:	9304      	str	r3, [sp, #16]
 8004580:	9307      	str	r3, [sp, #28]
 8004582:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004586:	931a      	str	r3, [sp, #104]	; 0x68
 8004588:	4654      	mov	r4, sl
 800458a:	2205      	movs	r2, #5
 800458c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004590:	4851      	ldr	r0, [pc, #324]	; (80046d8 <_svfiprintf_r+0x1ec>)
 8004592:	f7fb fe1d 	bl	80001d0 <memchr>
 8004596:	9a04      	ldr	r2, [sp, #16]
 8004598:	b9d8      	cbnz	r0, 80045d2 <_svfiprintf_r+0xe6>
 800459a:	06d0      	lsls	r0, r2, #27
 800459c:	bf44      	itt	mi
 800459e:	2320      	movmi	r3, #32
 80045a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a4:	0711      	lsls	r1, r2, #28
 80045a6:	bf44      	itt	mi
 80045a8:	232b      	movmi	r3, #43	; 0x2b
 80045aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ae:	f89a 3000 	ldrb.w	r3, [sl]
 80045b2:	2b2a      	cmp	r3, #42	; 0x2a
 80045b4:	d015      	beq.n	80045e2 <_svfiprintf_r+0xf6>
 80045b6:	9a07      	ldr	r2, [sp, #28]
 80045b8:	4654      	mov	r4, sl
 80045ba:	2000      	movs	r0, #0
 80045bc:	f04f 0c0a 	mov.w	ip, #10
 80045c0:	4621      	mov	r1, r4
 80045c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c6:	3b30      	subs	r3, #48	; 0x30
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	d94e      	bls.n	800466a <_svfiprintf_r+0x17e>
 80045cc:	b1b0      	cbz	r0, 80045fc <_svfiprintf_r+0x110>
 80045ce:	9207      	str	r2, [sp, #28]
 80045d0:	e014      	b.n	80045fc <_svfiprintf_r+0x110>
 80045d2:	eba0 0308 	sub.w	r3, r0, r8
 80045d6:	fa09 f303 	lsl.w	r3, r9, r3
 80045da:	4313      	orrs	r3, r2
 80045dc:	9304      	str	r3, [sp, #16]
 80045de:	46a2      	mov	sl, r4
 80045e0:	e7d2      	b.n	8004588 <_svfiprintf_r+0x9c>
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	1d19      	adds	r1, r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	9103      	str	r1, [sp, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfbb      	ittet	lt
 80045ee:	425b      	neglt	r3, r3
 80045f0:	f042 0202 	orrlt.w	r2, r2, #2
 80045f4:	9307      	strge	r3, [sp, #28]
 80045f6:	9307      	strlt	r3, [sp, #28]
 80045f8:	bfb8      	it	lt
 80045fa:	9204      	strlt	r2, [sp, #16]
 80045fc:	7823      	ldrb	r3, [r4, #0]
 80045fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004600:	d10c      	bne.n	800461c <_svfiprintf_r+0x130>
 8004602:	7863      	ldrb	r3, [r4, #1]
 8004604:	2b2a      	cmp	r3, #42	; 0x2a
 8004606:	d135      	bne.n	8004674 <_svfiprintf_r+0x188>
 8004608:	9b03      	ldr	r3, [sp, #12]
 800460a:	1d1a      	adds	r2, r3, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	9203      	str	r2, [sp, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	bfb8      	it	lt
 8004614:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004618:	3402      	adds	r4, #2
 800461a:	9305      	str	r3, [sp, #20]
 800461c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046e8 <_svfiprintf_r+0x1fc>
 8004620:	7821      	ldrb	r1, [r4, #0]
 8004622:	2203      	movs	r2, #3
 8004624:	4650      	mov	r0, sl
 8004626:	f7fb fdd3 	bl	80001d0 <memchr>
 800462a:	b140      	cbz	r0, 800463e <_svfiprintf_r+0x152>
 800462c:	2340      	movs	r3, #64	; 0x40
 800462e:	eba0 000a 	sub.w	r0, r0, sl
 8004632:	fa03 f000 	lsl.w	r0, r3, r0
 8004636:	9b04      	ldr	r3, [sp, #16]
 8004638:	4303      	orrs	r3, r0
 800463a:	3401      	adds	r4, #1
 800463c:	9304      	str	r3, [sp, #16]
 800463e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004642:	4826      	ldr	r0, [pc, #152]	; (80046dc <_svfiprintf_r+0x1f0>)
 8004644:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004648:	2206      	movs	r2, #6
 800464a:	f7fb fdc1 	bl	80001d0 <memchr>
 800464e:	2800      	cmp	r0, #0
 8004650:	d038      	beq.n	80046c4 <_svfiprintf_r+0x1d8>
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <_svfiprintf_r+0x1f4>)
 8004654:	bb1b      	cbnz	r3, 800469e <_svfiprintf_r+0x1b2>
 8004656:	9b03      	ldr	r3, [sp, #12]
 8004658:	3307      	adds	r3, #7
 800465a:	f023 0307 	bic.w	r3, r3, #7
 800465e:	3308      	adds	r3, #8
 8004660:	9303      	str	r3, [sp, #12]
 8004662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004664:	4433      	add	r3, r6
 8004666:	9309      	str	r3, [sp, #36]	; 0x24
 8004668:	e767      	b.n	800453a <_svfiprintf_r+0x4e>
 800466a:	fb0c 3202 	mla	r2, ip, r2, r3
 800466e:	460c      	mov	r4, r1
 8004670:	2001      	movs	r0, #1
 8004672:	e7a5      	b.n	80045c0 <_svfiprintf_r+0xd4>
 8004674:	2300      	movs	r3, #0
 8004676:	3401      	adds	r4, #1
 8004678:	9305      	str	r3, [sp, #20]
 800467a:	4619      	mov	r1, r3
 800467c:	f04f 0c0a 	mov.w	ip, #10
 8004680:	4620      	mov	r0, r4
 8004682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004686:	3a30      	subs	r2, #48	; 0x30
 8004688:	2a09      	cmp	r2, #9
 800468a:	d903      	bls.n	8004694 <_svfiprintf_r+0x1a8>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0c5      	beq.n	800461c <_svfiprintf_r+0x130>
 8004690:	9105      	str	r1, [sp, #20]
 8004692:	e7c3      	b.n	800461c <_svfiprintf_r+0x130>
 8004694:	fb0c 2101 	mla	r1, ip, r1, r2
 8004698:	4604      	mov	r4, r0
 800469a:	2301      	movs	r3, #1
 800469c:	e7f0      	b.n	8004680 <_svfiprintf_r+0x194>
 800469e:	ab03      	add	r3, sp, #12
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	462a      	mov	r2, r5
 80046a4:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <_svfiprintf_r+0x1f8>)
 80046a6:	a904      	add	r1, sp, #16
 80046a8:	4638      	mov	r0, r7
 80046aa:	f3af 8000 	nop.w
 80046ae:	1c42      	adds	r2, r0, #1
 80046b0:	4606      	mov	r6, r0
 80046b2:	d1d6      	bne.n	8004662 <_svfiprintf_r+0x176>
 80046b4:	89ab      	ldrh	r3, [r5, #12]
 80046b6:	065b      	lsls	r3, r3, #25
 80046b8:	f53f af2c 	bmi.w	8004514 <_svfiprintf_r+0x28>
 80046bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046be:	b01d      	add	sp, #116	; 0x74
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	ab03      	add	r3, sp, #12
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	462a      	mov	r2, r5
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <_svfiprintf_r+0x1f8>)
 80046cc:	a904      	add	r1, sp, #16
 80046ce:	4638      	mov	r0, r7
 80046d0:	f000 f9d4 	bl	8004a7c <_printf_i>
 80046d4:	e7eb      	b.n	80046ae <_svfiprintf_r+0x1c2>
 80046d6:	bf00      	nop
 80046d8:	080054b8 	.word	0x080054b8
 80046dc:	080054c2 	.word	0x080054c2
 80046e0:	00000000 	.word	0x00000000
 80046e4:	08004435 	.word	0x08004435
 80046e8:	080054be 	.word	0x080054be

080046ec <__sfputc_r>:
 80046ec:	6893      	ldr	r3, [r2, #8]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	b410      	push	{r4}
 80046f4:	6093      	str	r3, [r2, #8]
 80046f6:	da08      	bge.n	800470a <__sfputc_r+0x1e>
 80046f8:	6994      	ldr	r4, [r2, #24]
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	db01      	blt.n	8004702 <__sfputc_r+0x16>
 80046fe:	290a      	cmp	r1, #10
 8004700:	d103      	bne.n	800470a <__sfputc_r+0x1e>
 8004702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004706:	f000 bb33 	b.w	8004d70 <__swbuf_r>
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	1c58      	adds	r0, r3, #1
 800470e:	6010      	str	r0, [r2, #0]
 8004710:	7019      	strb	r1, [r3, #0]
 8004712:	4608      	mov	r0, r1
 8004714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004718:	4770      	bx	lr

0800471a <__sfputs_r>:
 800471a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471c:	4606      	mov	r6, r0
 800471e:	460f      	mov	r7, r1
 8004720:	4614      	mov	r4, r2
 8004722:	18d5      	adds	r5, r2, r3
 8004724:	42ac      	cmp	r4, r5
 8004726:	d101      	bne.n	800472c <__sfputs_r+0x12>
 8004728:	2000      	movs	r0, #0
 800472a:	e007      	b.n	800473c <__sfputs_r+0x22>
 800472c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004730:	463a      	mov	r2, r7
 8004732:	4630      	mov	r0, r6
 8004734:	f7ff ffda 	bl	80046ec <__sfputc_r>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d1f3      	bne.n	8004724 <__sfputs_r+0xa>
 800473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004740 <_vfiprintf_r>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	460d      	mov	r5, r1
 8004746:	b09d      	sub	sp, #116	; 0x74
 8004748:	4614      	mov	r4, r2
 800474a:	4698      	mov	r8, r3
 800474c:	4606      	mov	r6, r0
 800474e:	b118      	cbz	r0, 8004758 <_vfiprintf_r+0x18>
 8004750:	6983      	ldr	r3, [r0, #24]
 8004752:	b90b      	cbnz	r3, 8004758 <_vfiprintf_r+0x18>
 8004754:	f7ff fd3a 	bl	80041cc <__sinit>
 8004758:	4b89      	ldr	r3, [pc, #548]	; (8004980 <_vfiprintf_r+0x240>)
 800475a:	429d      	cmp	r5, r3
 800475c:	d11b      	bne.n	8004796 <_vfiprintf_r+0x56>
 800475e:	6875      	ldr	r5, [r6, #4]
 8004760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004762:	07d9      	lsls	r1, r3, #31
 8004764:	d405      	bmi.n	8004772 <_vfiprintf_r+0x32>
 8004766:	89ab      	ldrh	r3, [r5, #12]
 8004768:	059a      	lsls	r2, r3, #22
 800476a:	d402      	bmi.n	8004772 <_vfiprintf_r+0x32>
 800476c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800476e:	f7ff fdcb 	bl	8004308 <__retarget_lock_acquire_recursive>
 8004772:	89ab      	ldrh	r3, [r5, #12]
 8004774:	071b      	lsls	r3, r3, #28
 8004776:	d501      	bpl.n	800477c <_vfiprintf_r+0x3c>
 8004778:	692b      	ldr	r3, [r5, #16]
 800477a:	b9eb      	cbnz	r3, 80047b8 <_vfiprintf_r+0x78>
 800477c:	4629      	mov	r1, r5
 800477e:	4630      	mov	r0, r6
 8004780:	f000 fb5a 	bl	8004e38 <__swsetup_r>
 8004784:	b1c0      	cbz	r0, 80047b8 <_vfiprintf_r+0x78>
 8004786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004788:	07dc      	lsls	r4, r3, #31
 800478a:	d50e      	bpl.n	80047aa <_vfiprintf_r+0x6a>
 800478c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004790:	b01d      	add	sp, #116	; 0x74
 8004792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004796:	4b7b      	ldr	r3, [pc, #492]	; (8004984 <_vfiprintf_r+0x244>)
 8004798:	429d      	cmp	r5, r3
 800479a:	d101      	bne.n	80047a0 <_vfiprintf_r+0x60>
 800479c:	68b5      	ldr	r5, [r6, #8]
 800479e:	e7df      	b.n	8004760 <_vfiprintf_r+0x20>
 80047a0:	4b79      	ldr	r3, [pc, #484]	; (8004988 <_vfiprintf_r+0x248>)
 80047a2:	429d      	cmp	r5, r3
 80047a4:	bf08      	it	eq
 80047a6:	68f5      	ldreq	r5, [r6, #12]
 80047a8:	e7da      	b.n	8004760 <_vfiprintf_r+0x20>
 80047aa:	89ab      	ldrh	r3, [r5, #12]
 80047ac:	0598      	lsls	r0, r3, #22
 80047ae:	d4ed      	bmi.n	800478c <_vfiprintf_r+0x4c>
 80047b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047b2:	f7ff fdaa 	bl	800430a <__retarget_lock_release_recursive>
 80047b6:	e7e9      	b.n	800478c <_vfiprintf_r+0x4c>
 80047b8:	2300      	movs	r3, #0
 80047ba:	9309      	str	r3, [sp, #36]	; 0x24
 80047bc:	2320      	movs	r3, #32
 80047be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80047c6:	2330      	movs	r3, #48	; 0x30
 80047c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800498c <_vfiprintf_r+0x24c>
 80047cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047d0:	f04f 0901 	mov.w	r9, #1
 80047d4:	4623      	mov	r3, r4
 80047d6:	469a      	mov	sl, r3
 80047d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047dc:	b10a      	cbz	r2, 80047e2 <_vfiprintf_r+0xa2>
 80047de:	2a25      	cmp	r2, #37	; 0x25
 80047e0:	d1f9      	bne.n	80047d6 <_vfiprintf_r+0x96>
 80047e2:	ebba 0b04 	subs.w	fp, sl, r4
 80047e6:	d00b      	beq.n	8004800 <_vfiprintf_r+0xc0>
 80047e8:	465b      	mov	r3, fp
 80047ea:	4622      	mov	r2, r4
 80047ec:	4629      	mov	r1, r5
 80047ee:	4630      	mov	r0, r6
 80047f0:	f7ff ff93 	bl	800471a <__sfputs_r>
 80047f4:	3001      	adds	r0, #1
 80047f6:	f000 80aa 	beq.w	800494e <_vfiprintf_r+0x20e>
 80047fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047fc:	445a      	add	r2, fp
 80047fe:	9209      	str	r2, [sp, #36]	; 0x24
 8004800:	f89a 3000 	ldrb.w	r3, [sl]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a2 	beq.w	800494e <_vfiprintf_r+0x20e>
 800480a:	2300      	movs	r3, #0
 800480c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004814:	f10a 0a01 	add.w	sl, sl, #1
 8004818:	9304      	str	r3, [sp, #16]
 800481a:	9307      	str	r3, [sp, #28]
 800481c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004820:	931a      	str	r3, [sp, #104]	; 0x68
 8004822:	4654      	mov	r4, sl
 8004824:	2205      	movs	r2, #5
 8004826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800482a:	4858      	ldr	r0, [pc, #352]	; (800498c <_vfiprintf_r+0x24c>)
 800482c:	f7fb fcd0 	bl	80001d0 <memchr>
 8004830:	9a04      	ldr	r2, [sp, #16]
 8004832:	b9d8      	cbnz	r0, 800486c <_vfiprintf_r+0x12c>
 8004834:	06d1      	lsls	r1, r2, #27
 8004836:	bf44      	itt	mi
 8004838:	2320      	movmi	r3, #32
 800483a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800483e:	0713      	lsls	r3, r2, #28
 8004840:	bf44      	itt	mi
 8004842:	232b      	movmi	r3, #43	; 0x2b
 8004844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004848:	f89a 3000 	ldrb.w	r3, [sl]
 800484c:	2b2a      	cmp	r3, #42	; 0x2a
 800484e:	d015      	beq.n	800487c <_vfiprintf_r+0x13c>
 8004850:	9a07      	ldr	r2, [sp, #28]
 8004852:	4654      	mov	r4, sl
 8004854:	2000      	movs	r0, #0
 8004856:	f04f 0c0a 	mov.w	ip, #10
 800485a:	4621      	mov	r1, r4
 800485c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004860:	3b30      	subs	r3, #48	; 0x30
 8004862:	2b09      	cmp	r3, #9
 8004864:	d94e      	bls.n	8004904 <_vfiprintf_r+0x1c4>
 8004866:	b1b0      	cbz	r0, 8004896 <_vfiprintf_r+0x156>
 8004868:	9207      	str	r2, [sp, #28]
 800486a:	e014      	b.n	8004896 <_vfiprintf_r+0x156>
 800486c:	eba0 0308 	sub.w	r3, r0, r8
 8004870:	fa09 f303 	lsl.w	r3, r9, r3
 8004874:	4313      	orrs	r3, r2
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	46a2      	mov	sl, r4
 800487a:	e7d2      	b.n	8004822 <_vfiprintf_r+0xe2>
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	1d19      	adds	r1, r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	9103      	str	r1, [sp, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	bfbb      	ittet	lt
 8004888:	425b      	neglt	r3, r3
 800488a:	f042 0202 	orrlt.w	r2, r2, #2
 800488e:	9307      	strge	r3, [sp, #28]
 8004890:	9307      	strlt	r3, [sp, #28]
 8004892:	bfb8      	it	lt
 8004894:	9204      	strlt	r2, [sp, #16]
 8004896:	7823      	ldrb	r3, [r4, #0]
 8004898:	2b2e      	cmp	r3, #46	; 0x2e
 800489a:	d10c      	bne.n	80048b6 <_vfiprintf_r+0x176>
 800489c:	7863      	ldrb	r3, [r4, #1]
 800489e:	2b2a      	cmp	r3, #42	; 0x2a
 80048a0:	d135      	bne.n	800490e <_vfiprintf_r+0x1ce>
 80048a2:	9b03      	ldr	r3, [sp, #12]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	9203      	str	r2, [sp, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfb8      	it	lt
 80048ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048b2:	3402      	adds	r4, #2
 80048b4:	9305      	str	r3, [sp, #20]
 80048b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800499c <_vfiprintf_r+0x25c>
 80048ba:	7821      	ldrb	r1, [r4, #0]
 80048bc:	2203      	movs	r2, #3
 80048be:	4650      	mov	r0, sl
 80048c0:	f7fb fc86 	bl	80001d0 <memchr>
 80048c4:	b140      	cbz	r0, 80048d8 <_vfiprintf_r+0x198>
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	eba0 000a 	sub.w	r0, r0, sl
 80048cc:	fa03 f000 	lsl.w	r0, r3, r0
 80048d0:	9b04      	ldr	r3, [sp, #16]
 80048d2:	4303      	orrs	r3, r0
 80048d4:	3401      	adds	r4, #1
 80048d6:	9304      	str	r3, [sp, #16]
 80048d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048dc:	482c      	ldr	r0, [pc, #176]	; (8004990 <_vfiprintf_r+0x250>)
 80048de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048e2:	2206      	movs	r2, #6
 80048e4:	f7fb fc74 	bl	80001d0 <memchr>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d03f      	beq.n	800496c <_vfiprintf_r+0x22c>
 80048ec:	4b29      	ldr	r3, [pc, #164]	; (8004994 <_vfiprintf_r+0x254>)
 80048ee:	bb1b      	cbnz	r3, 8004938 <_vfiprintf_r+0x1f8>
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	3307      	adds	r3, #7
 80048f4:	f023 0307 	bic.w	r3, r3, #7
 80048f8:	3308      	adds	r3, #8
 80048fa:	9303      	str	r3, [sp, #12]
 80048fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048fe:	443b      	add	r3, r7
 8004900:	9309      	str	r3, [sp, #36]	; 0x24
 8004902:	e767      	b.n	80047d4 <_vfiprintf_r+0x94>
 8004904:	fb0c 3202 	mla	r2, ip, r2, r3
 8004908:	460c      	mov	r4, r1
 800490a:	2001      	movs	r0, #1
 800490c:	e7a5      	b.n	800485a <_vfiprintf_r+0x11a>
 800490e:	2300      	movs	r3, #0
 8004910:	3401      	adds	r4, #1
 8004912:	9305      	str	r3, [sp, #20]
 8004914:	4619      	mov	r1, r3
 8004916:	f04f 0c0a 	mov.w	ip, #10
 800491a:	4620      	mov	r0, r4
 800491c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004920:	3a30      	subs	r2, #48	; 0x30
 8004922:	2a09      	cmp	r2, #9
 8004924:	d903      	bls.n	800492e <_vfiprintf_r+0x1ee>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0c5      	beq.n	80048b6 <_vfiprintf_r+0x176>
 800492a:	9105      	str	r1, [sp, #20]
 800492c:	e7c3      	b.n	80048b6 <_vfiprintf_r+0x176>
 800492e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004932:	4604      	mov	r4, r0
 8004934:	2301      	movs	r3, #1
 8004936:	e7f0      	b.n	800491a <_vfiprintf_r+0x1da>
 8004938:	ab03      	add	r3, sp, #12
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	462a      	mov	r2, r5
 800493e:	4b16      	ldr	r3, [pc, #88]	; (8004998 <_vfiprintf_r+0x258>)
 8004940:	a904      	add	r1, sp, #16
 8004942:	4630      	mov	r0, r6
 8004944:	f3af 8000 	nop.w
 8004948:	4607      	mov	r7, r0
 800494a:	1c78      	adds	r0, r7, #1
 800494c:	d1d6      	bne.n	80048fc <_vfiprintf_r+0x1bc>
 800494e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004950:	07d9      	lsls	r1, r3, #31
 8004952:	d405      	bmi.n	8004960 <_vfiprintf_r+0x220>
 8004954:	89ab      	ldrh	r3, [r5, #12]
 8004956:	059a      	lsls	r2, r3, #22
 8004958:	d402      	bmi.n	8004960 <_vfiprintf_r+0x220>
 800495a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800495c:	f7ff fcd5 	bl	800430a <__retarget_lock_release_recursive>
 8004960:	89ab      	ldrh	r3, [r5, #12]
 8004962:	065b      	lsls	r3, r3, #25
 8004964:	f53f af12 	bmi.w	800478c <_vfiprintf_r+0x4c>
 8004968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800496a:	e711      	b.n	8004790 <_vfiprintf_r+0x50>
 800496c:	ab03      	add	r3, sp, #12
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	462a      	mov	r2, r5
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <_vfiprintf_r+0x258>)
 8004974:	a904      	add	r1, sp, #16
 8004976:	4630      	mov	r0, r6
 8004978:	f000 f880 	bl	8004a7c <_printf_i>
 800497c:	e7e4      	b.n	8004948 <_vfiprintf_r+0x208>
 800497e:	bf00      	nop
 8004980:	08005478 	.word	0x08005478
 8004984:	08005498 	.word	0x08005498
 8004988:	08005458 	.word	0x08005458
 800498c:	080054b8 	.word	0x080054b8
 8004990:	080054c2 	.word	0x080054c2
 8004994:	00000000 	.word	0x00000000
 8004998:	0800471b 	.word	0x0800471b
 800499c:	080054be 	.word	0x080054be

080049a0 <_printf_common>:
 80049a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a4:	4616      	mov	r6, r2
 80049a6:	4699      	mov	r9, r3
 80049a8:	688a      	ldr	r2, [r1, #8]
 80049aa:	690b      	ldr	r3, [r1, #16]
 80049ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049b0:	4293      	cmp	r3, r2
 80049b2:	bfb8      	it	lt
 80049b4:	4613      	movlt	r3, r2
 80049b6:	6033      	str	r3, [r6, #0]
 80049b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049bc:	4607      	mov	r7, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	b10a      	cbz	r2, 80049c6 <_printf_common+0x26>
 80049c2:	3301      	adds	r3, #1
 80049c4:	6033      	str	r3, [r6, #0]
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	0699      	lsls	r1, r3, #26
 80049ca:	bf42      	ittt	mi
 80049cc:	6833      	ldrmi	r3, [r6, #0]
 80049ce:	3302      	addmi	r3, #2
 80049d0:	6033      	strmi	r3, [r6, #0]
 80049d2:	6825      	ldr	r5, [r4, #0]
 80049d4:	f015 0506 	ands.w	r5, r5, #6
 80049d8:	d106      	bne.n	80049e8 <_printf_common+0x48>
 80049da:	f104 0a19 	add.w	sl, r4, #25
 80049de:	68e3      	ldr	r3, [r4, #12]
 80049e0:	6832      	ldr	r2, [r6, #0]
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	42ab      	cmp	r3, r5
 80049e6:	dc26      	bgt.n	8004a36 <_printf_common+0x96>
 80049e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049ec:	1e13      	subs	r3, r2, #0
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	bf18      	it	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	0692      	lsls	r2, r2, #26
 80049f6:	d42b      	bmi.n	8004a50 <_printf_common+0xb0>
 80049f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049fc:	4649      	mov	r1, r9
 80049fe:	4638      	mov	r0, r7
 8004a00:	47c0      	blx	r8
 8004a02:	3001      	adds	r0, #1
 8004a04:	d01e      	beq.n	8004a44 <_printf_common+0xa4>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	68e5      	ldr	r5, [r4, #12]
 8004a0a:	6832      	ldr	r2, [r6, #0]
 8004a0c:	f003 0306 	and.w	r3, r3, #6
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	bf08      	it	eq
 8004a14:	1aad      	subeq	r5, r5, r2
 8004a16:	68a3      	ldr	r3, [r4, #8]
 8004a18:	6922      	ldr	r2, [r4, #16]
 8004a1a:	bf0c      	ite	eq
 8004a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a20:	2500      	movne	r5, #0
 8004a22:	4293      	cmp	r3, r2
 8004a24:	bfc4      	itt	gt
 8004a26:	1a9b      	subgt	r3, r3, r2
 8004a28:	18ed      	addgt	r5, r5, r3
 8004a2a:	2600      	movs	r6, #0
 8004a2c:	341a      	adds	r4, #26
 8004a2e:	42b5      	cmp	r5, r6
 8004a30:	d11a      	bne.n	8004a68 <_printf_common+0xc8>
 8004a32:	2000      	movs	r0, #0
 8004a34:	e008      	b.n	8004a48 <_printf_common+0xa8>
 8004a36:	2301      	movs	r3, #1
 8004a38:	4652      	mov	r2, sl
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	47c0      	blx	r8
 8004a40:	3001      	adds	r0, #1
 8004a42:	d103      	bne.n	8004a4c <_printf_common+0xac>
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4c:	3501      	adds	r5, #1
 8004a4e:	e7c6      	b.n	80049de <_printf_common+0x3e>
 8004a50:	18e1      	adds	r1, r4, r3
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	2030      	movs	r0, #48	; 0x30
 8004a56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a5a:	4422      	add	r2, r4
 8004a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a64:	3302      	adds	r3, #2
 8004a66:	e7c7      	b.n	80049f8 <_printf_common+0x58>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	4638      	mov	r0, r7
 8004a70:	47c0      	blx	r8
 8004a72:	3001      	adds	r0, #1
 8004a74:	d0e6      	beq.n	8004a44 <_printf_common+0xa4>
 8004a76:	3601      	adds	r6, #1
 8004a78:	e7d9      	b.n	8004a2e <_printf_common+0x8e>
	...

08004a7c <_printf_i>:
 8004a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	7e0f      	ldrb	r7, [r1, #24]
 8004a82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a84:	2f78      	cmp	r7, #120	; 0x78
 8004a86:	4691      	mov	r9, r2
 8004a88:	4680      	mov	r8, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	469a      	mov	sl, r3
 8004a8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a92:	d807      	bhi.n	8004aa4 <_printf_i+0x28>
 8004a94:	2f62      	cmp	r7, #98	; 0x62
 8004a96:	d80a      	bhi.n	8004aae <_printf_i+0x32>
 8004a98:	2f00      	cmp	r7, #0
 8004a9a:	f000 80d8 	beq.w	8004c4e <_printf_i+0x1d2>
 8004a9e:	2f58      	cmp	r7, #88	; 0x58
 8004aa0:	f000 80a3 	beq.w	8004bea <_printf_i+0x16e>
 8004aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004aac:	e03a      	b.n	8004b24 <_printf_i+0xa8>
 8004aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ab2:	2b15      	cmp	r3, #21
 8004ab4:	d8f6      	bhi.n	8004aa4 <_printf_i+0x28>
 8004ab6:	a101      	add	r1, pc, #4	; (adr r1, 8004abc <_printf_i+0x40>)
 8004ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004abc:	08004b15 	.word	0x08004b15
 8004ac0:	08004b29 	.word	0x08004b29
 8004ac4:	08004aa5 	.word	0x08004aa5
 8004ac8:	08004aa5 	.word	0x08004aa5
 8004acc:	08004aa5 	.word	0x08004aa5
 8004ad0:	08004aa5 	.word	0x08004aa5
 8004ad4:	08004b29 	.word	0x08004b29
 8004ad8:	08004aa5 	.word	0x08004aa5
 8004adc:	08004aa5 	.word	0x08004aa5
 8004ae0:	08004aa5 	.word	0x08004aa5
 8004ae4:	08004aa5 	.word	0x08004aa5
 8004ae8:	08004c35 	.word	0x08004c35
 8004aec:	08004b59 	.word	0x08004b59
 8004af0:	08004c17 	.word	0x08004c17
 8004af4:	08004aa5 	.word	0x08004aa5
 8004af8:	08004aa5 	.word	0x08004aa5
 8004afc:	08004c57 	.word	0x08004c57
 8004b00:	08004aa5 	.word	0x08004aa5
 8004b04:	08004b59 	.word	0x08004b59
 8004b08:	08004aa5 	.word	0x08004aa5
 8004b0c:	08004aa5 	.word	0x08004aa5
 8004b10:	08004c1f 	.word	0x08004c1f
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	1d1a      	adds	r2, r3, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	602a      	str	r2, [r5, #0]
 8004b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0a3      	b.n	8004c70 <_printf_i+0x1f4>
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	6829      	ldr	r1, [r5, #0]
 8004b2c:	0606      	lsls	r6, r0, #24
 8004b2e:	f101 0304 	add.w	r3, r1, #4
 8004b32:	d50a      	bpl.n	8004b4a <_printf_i+0xce>
 8004b34:	680e      	ldr	r6, [r1, #0]
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	2e00      	cmp	r6, #0
 8004b3a:	da03      	bge.n	8004b44 <_printf_i+0xc8>
 8004b3c:	232d      	movs	r3, #45	; 0x2d
 8004b3e:	4276      	negs	r6, r6
 8004b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b44:	485e      	ldr	r0, [pc, #376]	; (8004cc0 <_printf_i+0x244>)
 8004b46:	230a      	movs	r3, #10
 8004b48:	e019      	b.n	8004b7e <_printf_i+0x102>
 8004b4a:	680e      	ldr	r6, [r1, #0]
 8004b4c:	602b      	str	r3, [r5, #0]
 8004b4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b52:	bf18      	it	ne
 8004b54:	b236      	sxthne	r6, r6
 8004b56:	e7ef      	b.n	8004b38 <_printf_i+0xbc>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	6820      	ldr	r0, [r4, #0]
 8004b5c:	1d19      	adds	r1, r3, #4
 8004b5e:	6029      	str	r1, [r5, #0]
 8004b60:	0601      	lsls	r1, r0, #24
 8004b62:	d501      	bpl.n	8004b68 <_printf_i+0xec>
 8004b64:	681e      	ldr	r6, [r3, #0]
 8004b66:	e002      	b.n	8004b6e <_printf_i+0xf2>
 8004b68:	0646      	lsls	r6, r0, #25
 8004b6a:	d5fb      	bpl.n	8004b64 <_printf_i+0xe8>
 8004b6c:	881e      	ldrh	r6, [r3, #0]
 8004b6e:	4854      	ldr	r0, [pc, #336]	; (8004cc0 <_printf_i+0x244>)
 8004b70:	2f6f      	cmp	r7, #111	; 0x6f
 8004b72:	bf0c      	ite	eq
 8004b74:	2308      	moveq	r3, #8
 8004b76:	230a      	movne	r3, #10
 8004b78:	2100      	movs	r1, #0
 8004b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b7e:	6865      	ldr	r5, [r4, #4]
 8004b80:	60a5      	str	r5, [r4, #8]
 8004b82:	2d00      	cmp	r5, #0
 8004b84:	bfa2      	ittt	ge
 8004b86:	6821      	ldrge	r1, [r4, #0]
 8004b88:	f021 0104 	bicge.w	r1, r1, #4
 8004b8c:	6021      	strge	r1, [r4, #0]
 8004b8e:	b90e      	cbnz	r6, 8004b94 <_printf_i+0x118>
 8004b90:	2d00      	cmp	r5, #0
 8004b92:	d04d      	beq.n	8004c30 <_printf_i+0x1b4>
 8004b94:	4615      	mov	r5, r2
 8004b96:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b9a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b9e:	5dc7      	ldrb	r7, [r0, r7]
 8004ba0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ba4:	4637      	mov	r7, r6
 8004ba6:	42bb      	cmp	r3, r7
 8004ba8:	460e      	mov	r6, r1
 8004baa:	d9f4      	bls.n	8004b96 <_printf_i+0x11a>
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d10b      	bne.n	8004bc8 <_printf_i+0x14c>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	07de      	lsls	r6, r3, #31
 8004bb4:	d508      	bpl.n	8004bc8 <_printf_i+0x14c>
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	6861      	ldr	r1, [r4, #4]
 8004bba:	4299      	cmp	r1, r3
 8004bbc:	bfde      	ittt	le
 8004bbe:	2330      	movle	r3, #48	; 0x30
 8004bc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bc4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004bc8:	1b52      	subs	r2, r2, r5
 8004bca:	6122      	str	r2, [r4, #16]
 8004bcc:	f8cd a000 	str.w	sl, [sp]
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	aa03      	add	r2, sp, #12
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	f7ff fee2 	bl	80049a0 <_printf_common>
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d14c      	bne.n	8004c7a <_printf_i+0x1fe>
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004be4:	b004      	add	sp, #16
 8004be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bea:	4835      	ldr	r0, [pc, #212]	; (8004cc0 <_printf_i+0x244>)
 8004bec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bf0:	6829      	ldr	r1, [r5, #0]
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bf8:	6029      	str	r1, [r5, #0]
 8004bfa:	061d      	lsls	r5, r3, #24
 8004bfc:	d514      	bpl.n	8004c28 <_printf_i+0x1ac>
 8004bfe:	07df      	lsls	r7, r3, #31
 8004c00:	bf44      	itt	mi
 8004c02:	f043 0320 	orrmi.w	r3, r3, #32
 8004c06:	6023      	strmi	r3, [r4, #0]
 8004c08:	b91e      	cbnz	r6, 8004c12 <_printf_i+0x196>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	f023 0320 	bic.w	r3, r3, #32
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	2310      	movs	r3, #16
 8004c14:	e7b0      	b.n	8004b78 <_printf_i+0xfc>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	f043 0320 	orr.w	r3, r3, #32
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	2378      	movs	r3, #120	; 0x78
 8004c20:	4828      	ldr	r0, [pc, #160]	; (8004cc4 <_printf_i+0x248>)
 8004c22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c26:	e7e3      	b.n	8004bf0 <_printf_i+0x174>
 8004c28:	0659      	lsls	r1, r3, #25
 8004c2a:	bf48      	it	mi
 8004c2c:	b2b6      	uxthmi	r6, r6
 8004c2e:	e7e6      	b.n	8004bfe <_printf_i+0x182>
 8004c30:	4615      	mov	r5, r2
 8004c32:	e7bb      	b.n	8004bac <_printf_i+0x130>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	6826      	ldr	r6, [r4, #0]
 8004c38:	6961      	ldr	r1, [r4, #20]
 8004c3a:	1d18      	adds	r0, r3, #4
 8004c3c:	6028      	str	r0, [r5, #0]
 8004c3e:	0635      	lsls	r5, r6, #24
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	d501      	bpl.n	8004c48 <_printf_i+0x1cc>
 8004c44:	6019      	str	r1, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <_printf_i+0x1d2>
 8004c48:	0670      	lsls	r0, r6, #25
 8004c4a:	d5fb      	bpl.n	8004c44 <_printf_i+0x1c8>
 8004c4c:	8019      	strh	r1, [r3, #0]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6123      	str	r3, [r4, #16]
 8004c52:	4615      	mov	r5, r2
 8004c54:	e7ba      	b.n	8004bcc <_printf_i+0x150>
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	1d1a      	adds	r2, r3, #4
 8004c5a:	602a      	str	r2, [r5, #0]
 8004c5c:	681d      	ldr	r5, [r3, #0]
 8004c5e:	6862      	ldr	r2, [r4, #4]
 8004c60:	2100      	movs	r1, #0
 8004c62:	4628      	mov	r0, r5
 8004c64:	f7fb fab4 	bl	80001d0 <memchr>
 8004c68:	b108      	cbz	r0, 8004c6e <_printf_i+0x1f2>
 8004c6a:	1b40      	subs	r0, r0, r5
 8004c6c:	6060      	str	r0, [r4, #4]
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	6123      	str	r3, [r4, #16]
 8004c72:	2300      	movs	r3, #0
 8004c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c78:	e7a8      	b.n	8004bcc <_printf_i+0x150>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	462a      	mov	r2, r5
 8004c7e:	4649      	mov	r1, r9
 8004c80:	4640      	mov	r0, r8
 8004c82:	47d0      	blx	sl
 8004c84:	3001      	adds	r0, #1
 8004c86:	d0ab      	beq.n	8004be0 <_printf_i+0x164>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	079b      	lsls	r3, r3, #30
 8004c8c:	d413      	bmi.n	8004cb6 <_printf_i+0x23a>
 8004c8e:	68e0      	ldr	r0, [r4, #12]
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	4298      	cmp	r0, r3
 8004c94:	bfb8      	it	lt
 8004c96:	4618      	movlt	r0, r3
 8004c98:	e7a4      	b.n	8004be4 <_printf_i+0x168>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4632      	mov	r2, r6
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	47d0      	blx	sl
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d09b      	beq.n	8004be0 <_printf_i+0x164>
 8004ca8:	3501      	adds	r5, #1
 8004caa:	68e3      	ldr	r3, [r4, #12]
 8004cac:	9903      	ldr	r1, [sp, #12]
 8004cae:	1a5b      	subs	r3, r3, r1
 8004cb0:	42ab      	cmp	r3, r5
 8004cb2:	dcf2      	bgt.n	8004c9a <_printf_i+0x21e>
 8004cb4:	e7eb      	b.n	8004c8e <_printf_i+0x212>
 8004cb6:	2500      	movs	r5, #0
 8004cb8:	f104 0619 	add.w	r6, r4, #25
 8004cbc:	e7f5      	b.n	8004caa <_printf_i+0x22e>
 8004cbe:	bf00      	nop
 8004cc0:	080054c9 	.word	0x080054c9
 8004cc4:	080054da 	.word	0x080054da

08004cc8 <_sbrk_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d06      	ldr	r5, [pc, #24]	; (8004ce4 <_sbrk_r+0x1c>)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f000 fb46 	bl	8005364 <_sbrk>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_sbrk_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_sbrk_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20012f18 	.word	0x20012f18

08004ce8 <__sread>:
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	460c      	mov	r4, r1
 8004cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf0:	f000 fafc 	bl	80052ec <_read_r>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	bfab      	itete	ge
 8004cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8004cfc:	181b      	addge	r3, r3, r0
 8004cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d02:	bfac      	ite	ge
 8004d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d06:	81a3      	strhlt	r3, [r4, #12]
 8004d08:	bd10      	pop	{r4, pc}

08004d0a <__swrite>:
 8004d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0e:	461f      	mov	r7, r3
 8004d10:	898b      	ldrh	r3, [r1, #12]
 8004d12:	05db      	lsls	r3, r3, #23
 8004d14:	4605      	mov	r5, r0
 8004d16:	460c      	mov	r4, r1
 8004d18:	4616      	mov	r6, r2
 8004d1a:	d505      	bpl.n	8004d28 <__swrite+0x1e>
 8004d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d20:	2302      	movs	r3, #2
 8004d22:	2200      	movs	r2, #0
 8004d24:	f000 f9c8 	bl	80050b8 <_lseek_r>
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d32:	81a3      	strh	r3, [r4, #12]
 8004d34:	4632      	mov	r2, r6
 8004d36:	463b      	mov	r3, r7
 8004d38:	4628      	mov	r0, r5
 8004d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3e:	f000 b869 	b.w	8004e14 <_write_r>

08004d42 <__sseek>:
 8004d42:	b510      	push	{r4, lr}
 8004d44:	460c      	mov	r4, r1
 8004d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4a:	f000 f9b5 	bl	80050b8 <_lseek_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	bf15      	itete	ne
 8004d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d5e:	81a3      	strheq	r3, [r4, #12]
 8004d60:	bf18      	it	ne
 8004d62:	81a3      	strhne	r3, [r4, #12]
 8004d64:	bd10      	pop	{r4, pc}

08004d66 <__sclose>:
 8004d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6a:	f000 b8d3 	b.w	8004f14 <_close_r>
	...

08004d70 <__swbuf_r>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	460e      	mov	r6, r1
 8004d74:	4614      	mov	r4, r2
 8004d76:	4605      	mov	r5, r0
 8004d78:	b118      	cbz	r0, 8004d82 <__swbuf_r+0x12>
 8004d7a:	6983      	ldr	r3, [r0, #24]
 8004d7c:	b90b      	cbnz	r3, 8004d82 <__swbuf_r+0x12>
 8004d7e:	f7ff fa25 	bl	80041cc <__sinit>
 8004d82:	4b21      	ldr	r3, [pc, #132]	; (8004e08 <__swbuf_r+0x98>)
 8004d84:	429c      	cmp	r4, r3
 8004d86:	d12b      	bne.n	8004de0 <__swbuf_r+0x70>
 8004d88:	686c      	ldr	r4, [r5, #4]
 8004d8a:	69a3      	ldr	r3, [r4, #24]
 8004d8c:	60a3      	str	r3, [r4, #8]
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	071a      	lsls	r2, r3, #28
 8004d92:	d52f      	bpl.n	8004df4 <__swbuf_r+0x84>
 8004d94:	6923      	ldr	r3, [r4, #16]
 8004d96:	b36b      	cbz	r3, 8004df4 <__swbuf_r+0x84>
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	6820      	ldr	r0, [r4, #0]
 8004d9c:	1ac0      	subs	r0, r0, r3
 8004d9e:	6963      	ldr	r3, [r4, #20]
 8004da0:	b2f6      	uxtb	r6, r6
 8004da2:	4283      	cmp	r3, r0
 8004da4:	4637      	mov	r7, r6
 8004da6:	dc04      	bgt.n	8004db2 <__swbuf_r+0x42>
 8004da8:	4621      	mov	r1, r4
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 f948 	bl	8005040 <_fflush_r>
 8004db0:	bb30      	cbnz	r0, 8004e00 <__swbuf_r+0x90>
 8004db2:	68a3      	ldr	r3, [r4, #8]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	60a3      	str	r3, [r4, #8]
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	6022      	str	r2, [r4, #0]
 8004dbe:	701e      	strb	r6, [r3, #0]
 8004dc0:	6963      	ldr	r3, [r4, #20]
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	4283      	cmp	r3, r0
 8004dc6:	d004      	beq.n	8004dd2 <__swbuf_r+0x62>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	07db      	lsls	r3, r3, #31
 8004dcc:	d506      	bpl.n	8004ddc <__swbuf_r+0x6c>
 8004dce:	2e0a      	cmp	r6, #10
 8004dd0:	d104      	bne.n	8004ddc <__swbuf_r+0x6c>
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 f933 	bl	8005040 <_fflush_r>
 8004dda:	b988      	cbnz	r0, 8004e00 <__swbuf_r+0x90>
 8004ddc:	4638      	mov	r0, r7
 8004dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <__swbuf_r+0x9c>)
 8004de2:	429c      	cmp	r4, r3
 8004de4:	d101      	bne.n	8004dea <__swbuf_r+0x7a>
 8004de6:	68ac      	ldr	r4, [r5, #8]
 8004de8:	e7cf      	b.n	8004d8a <__swbuf_r+0x1a>
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <__swbuf_r+0xa0>)
 8004dec:	429c      	cmp	r4, r3
 8004dee:	bf08      	it	eq
 8004df0:	68ec      	ldreq	r4, [r5, #12]
 8004df2:	e7ca      	b.n	8004d8a <__swbuf_r+0x1a>
 8004df4:	4621      	mov	r1, r4
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 f81e 	bl	8004e38 <__swsetup_r>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d0cb      	beq.n	8004d98 <__swbuf_r+0x28>
 8004e00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004e04:	e7ea      	b.n	8004ddc <__swbuf_r+0x6c>
 8004e06:	bf00      	nop
 8004e08:	08005478 	.word	0x08005478
 8004e0c:	08005498 	.word	0x08005498
 8004e10:	08005458 	.word	0x08005458

08004e14 <_write_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4d07      	ldr	r5, [pc, #28]	; (8004e34 <_write_r+0x20>)
 8004e18:	4604      	mov	r4, r0
 8004e1a:	4608      	mov	r0, r1
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	602a      	str	r2, [r5, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7fb ffab 	bl	8000d7e <_write>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_write_r+0x1e>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_write_r+0x1e>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	20012f18 	.word	0x20012f18

08004e38 <__swsetup_r>:
 8004e38:	4b32      	ldr	r3, [pc, #200]	; (8004f04 <__swsetup_r+0xcc>)
 8004e3a:	b570      	push	{r4, r5, r6, lr}
 8004e3c:	681d      	ldr	r5, [r3, #0]
 8004e3e:	4606      	mov	r6, r0
 8004e40:	460c      	mov	r4, r1
 8004e42:	b125      	cbz	r5, 8004e4e <__swsetup_r+0x16>
 8004e44:	69ab      	ldr	r3, [r5, #24]
 8004e46:	b913      	cbnz	r3, 8004e4e <__swsetup_r+0x16>
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f7ff f9bf 	bl	80041cc <__sinit>
 8004e4e:	4b2e      	ldr	r3, [pc, #184]	; (8004f08 <__swsetup_r+0xd0>)
 8004e50:	429c      	cmp	r4, r3
 8004e52:	d10f      	bne.n	8004e74 <__swsetup_r+0x3c>
 8004e54:	686c      	ldr	r4, [r5, #4]
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e5c:	0719      	lsls	r1, r3, #28
 8004e5e:	d42c      	bmi.n	8004eba <__swsetup_r+0x82>
 8004e60:	06dd      	lsls	r5, r3, #27
 8004e62:	d411      	bmi.n	8004e88 <__swsetup_r+0x50>
 8004e64:	2309      	movs	r3, #9
 8004e66:	6033      	str	r3, [r6, #0]
 8004e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e72:	e03e      	b.n	8004ef2 <__swsetup_r+0xba>
 8004e74:	4b25      	ldr	r3, [pc, #148]	; (8004f0c <__swsetup_r+0xd4>)
 8004e76:	429c      	cmp	r4, r3
 8004e78:	d101      	bne.n	8004e7e <__swsetup_r+0x46>
 8004e7a:	68ac      	ldr	r4, [r5, #8]
 8004e7c:	e7eb      	b.n	8004e56 <__swsetup_r+0x1e>
 8004e7e:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <__swsetup_r+0xd8>)
 8004e80:	429c      	cmp	r4, r3
 8004e82:	bf08      	it	eq
 8004e84:	68ec      	ldreq	r4, [r5, #12]
 8004e86:	e7e6      	b.n	8004e56 <__swsetup_r+0x1e>
 8004e88:	0758      	lsls	r0, r3, #29
 8004e8a:	d512      	bpl.n	8004eb2 <__swsetup_r+0x7a>
 8004e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e8e:	b141      	cbz	r1, 8004ea2 <__swsetup_r+0x6a>
 8004e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e94:	4299      	cmp	r1, r3
 8004e96:	d002      	beq.n	8004e9e <__swsetup_r+0x66>
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f000 f9ab 	bl	80051f4 <_free_r>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ea8:	81a3      	strh	r3, [r4, #12]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	f043 0308 	orr.w	r3, r3, #8
 8004eb8:	81a3      	strh	r3, [r4, #12]
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	b94b      	cbnz	r3, 8004ed2 <__swsetup_r+0x9a>
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec8:	d003      	beq.n	8004ed2 <__swsetup_r+0x9a>
 8004eca:	4621      	mov	r1, r4
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f000 f92b 	bl	8005128 <__smakebuf_r>
 8004ed2:	89a0      	ldrh	r0, [r4, #12]
 8004ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ed8:	f010 0301 	ands.w	r3, r0, #1
 8004edc:	d00a      	beq.n	8004ef4 <__swsetup_r+0xbc>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60a3      	str	r3, [r4, #8]
 8004ee2:	6963      	ldr	r3, [r4, #20]
 8004ee4:	425b      	negs	r3, r3
 8004ee6:	61a3      	str	r3, [r4, #24]
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	b943      	cbnz	r3, 8004efe <__swsetup_r+0xc6>
 8004eec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ef0:	d1ba      	bne.n	8004e68 <__swsetup_r+0x30>
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}
 8004ef4:	0781      	lsls	r1, r0, #30
 8004ef6:	bf58      	it	pl
 8004ef8:	6963      	ldrpl	r3, [r4, #20]
 8004efa:	60a3      	str	r3, [r4, #8]
 8004efc:	e7f4      	b.n	8004ee8 <__swsetup_r+0xb0>
 8004efe:	2000      	movs	r0, #0
 8004f00:	e7f7      	b.n	8004ef2 <__swsetup_r+0xba>
 8004f02:	bf00      	nop
 8004f04:	20000014 	.word	0x20000014
 8004f08:	08005478 	.word	0x08005478
 8004f0c:	08005498 	.word	0x08005498
 8004f10:	08005458 	.word	0x08005458

08004f14 <_close_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d06      	ldr	r5, [pc, #24]	; (8004f30 <_close_r+0x1c>)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f7fb ff49 	bl	8000db6 <_close>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_close_r+0x1a>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_close_r+0x1a>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20012f18 	.word	0x20012f18

08004f34 <__sflush_r>:
 8004f34:	898a      	ldrh	r2, [r1, #12]
 8004f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	0710      	lsls	r0, r2, #28
 8004f3e:	460c      	mov	r4, r1
 8004f40:	d458      	bmi.n	8004ff4 <__sflush_r+0xc0>
 8004f42:	684b      	ldr	r3, [r1, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	dc05      	bgt.n	8004f54 <__sflush_r+0x20>
 8004f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	dc02      	bgt.n	8004f54 <__sflush_r+0x20>
 8004f4e:	2000      	movs	r0, #0
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	d0f9      	beq.n	8004f4e <__sflush_r+0x1a>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f60:	682f      	ldr	r7, [r5, #0]
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	d032      	beq.n	8004fcc <__sflush_r+0x98>
 8004f66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	075a      	lsls	r2, r3, #29
 8004f6c:	d505      	bpl.n	8004f7a <__sflush_r+0x46>
 8004f6e:	6863      	ldr	r3, [r4, #4]
 8004f70:	1ac0      	subs	r0, r0, r3
 8004f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f74:	b10b      	cbz	r3, 8004f7a <__sflush_r+0x46>
 8004f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f78:	1ac0      	subs	r0, r0, r3
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f80:	6a21      	ldr	r1, [r4, #32]
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b0      	blx	r6
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	d106      	bne.n	8004f9a <__sflush_r+0x66>
 8004f8c:	6829      	ldr	r1, [r5, #0]
 8004f8e:	291d      	cmp	r1, #29
 8004f90:	d82c      	bhi.n	8004fec <__sflush_r+0xb8>
 8004f92:	4a2a      	ldr	r2, [pc, #168]	; (800503c <__sflush_r+0x108>)
 8004f94:	40ca      	lsrs	r2, r1
 8004f96:	07d6      	lsls	r6, r2, #31
 8004f98:	d528      	bpl.n	8004fec <__sflush_r+0xb8>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	6062      	str	r2, [r4, #4]
 8004f9e:	04d9      	lsls	r1, r3, #19
 8004fa0:	6922      	ldr	r2, [r4, #16]
 8004fa2:	6022      	str	r2, [r4, #0]
 8004fa4:	d504      	bpl.n	8004fb0 <__sflush_r+0x7c>
 8004fa6:	1c42      	adds	r2, r0, #1
 8004fa8:	d101      	bne.n	8004fae <__sflush_r+0x7a>
 8004faa:	682b      	ldr	r3, [r5, #0]
 8004fac:	b903      	cbnz	r3, 8004fb0 <__sflush_r+0x7c>
 8004fae:	6560      	str	r0, [r4, #84]	; 0x54
 8004fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fb2:	602f      	str	r7, [r5, #0]
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	d0ca      	beq.n	8004f4e <__sflush_r+0x1a>
 8004fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fbc:	4299      	cmp	r1, r3
 8004fbe:	d002      	beq.n	8004fc6 <__sflush_r+0x92>
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 f917 	bl	80051f4 <_free_r>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8004fca:	e7c1      	b.n	8004f50 <__sflush_r+0x1c>
 8004fcc:	6a21      	ldr	r1, [r4, #32]
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b0      	blx	r6
 8004fd4:	1c41      	adds	r1, r0, #1
 8004fd6:	d1c7      	bne.n	8004f68 <__sflush_r+0x34>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0c4      	beq.n	8004f68 <__sflush_r+0x34>
 8004fde:	2b1d      	cmp	r3, #29
 8004fe0:	d001      	beq.n	8004fe6 <__sflush_r+0xb2>
 8004fe2:	2b16      	cmp	r3, #22
 8004fe4:	d101      	bne.n	8004fea <__sflush_r+0xb6>
 8004fe6:	602f      	str	r7, [r5, #0]
 8004fe8:	e7b1      	b.n	8004f4e <__sflush_r+0x1a>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff0:	81a3      	strh	r3, [r4, #12]
 8004ff2:	e7ad      	b.n	8004f50 <__sflush_r+0x1c>
 8004ff4:	690f      	ldr	r7, [r1, #16]
 8004ff6:	2f00      	cmp	r7, #0
 8004ff8:	d0a9      	beq.n	8004f4e <__sflush_r+0x1a>
 8004ffa:	0793      	lsls	r3, r2, #30
 8004ffc:	680e      	ldr	r6, [r1, #0]
 8004ffe:	bf08      	it	eq
 8005000:	694b      	ldreq	r3, [r1, #20]
 8005002:	600f      	str	r7, [r1, #0]
 8005004:	bf18      	it	ne
 8005006:	2300      	movne	r3, #0
 8005008:	eba6 0807 	sub.w	r8, r6, r7
 800500c:	608b      	str	r3, [r1, #8]
 800500e:	f1b8 0f00 	cmp.w	r8, #0
 8005012:	dd9c      	ble.n	8004f4e <__sflush_r+0x1a>
 8005014:	6a21      	ldr	r1, [r4, #32]
 8005016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005018:	4643      	mov	r3, r8
 800501a:	463a      	mov	r2, r7
 800501c:	4628      	mov	r0, r5
 800501e:	47b0      	blx	r6
 8005020:	2800      	cmp	r0, #0
 8005022:	dc06      	bgt.n	8005032 <__sflush_r+0xfe>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005030:	e78e      	b.n	8004f50 <__sflush_r+0x1c>
 8005032:	4407      	add	r7, r0
 8005034:	eba8 0800 	sub.w	r8, r8, r0
 8005038:	e7e9      	b.n	800500e <__sflush_r+0xda>
 800503a:	bf00      	nop
 800503c:	20400001 	.word	0x20400001

08005040 <_fflush_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	690b      	ldr	r3, [r1, #16]
 8005044:	4605      	mov	r5, r0
 8005046:	460c      	mov	r4, r1
 8005048:	b913      	cbnz	r3, 8005050 <_fflush_r+0x10>
 800504a:	2500      	movs	r5, #0
 800504c:	4628      	mov	r0, r5
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	b118      	cbz	r0, 800505a <_fflush_r+0x1a>
 8005052:	6983      	ldr	r3, [r0, #24]
 8005054:	b90b      	cbnz	r3, 800505a <_fflush_r+0x1a>
 8005056:	f7ff f8b9 	bl	80041cc <__sinit>
 800505a:	4b14      	ldr	r3, [pc, #80]	; (80050ac <_fflush_r+0x6c>)
 800505c:	429c      	cmp	r4, r3
 800505e:	d11b      	bne.n	8005098 <_fflush_r+0x58>
 8005060:	686c      	ldr	r4, [r5, #4]
 8005062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ef      	beq.n	800504a <_fflush_r+0xa>
 800506a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800506c:	07d0      	lsls	r0, r2, #31
 800506e:	d404      	bmi.n	800507a <_fflush_r+0x3a>
 8005070:	0599      	lsls	r1, r3, #22
 8005072:	d402      	bmi.n	800507a <_fflush_r+0x3a>
 8005074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005076:	f7ff f947 	bl	8004308 <__retarget_lock_acquire_recursive>
 800507a:	4628      	mov	r0, r5
 800507c:	4621      	mov	r1, r4
 800507e:	f7ff ff59 	bl	8004f34 <__sflush_r>
 8005082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005084:	07da      	lsls	r2, r3, #31
 8005086:	4605      	mov	r5, r0
 8005088:	d4e0      	bmi.n	800504c <_fflush_r+0xc>
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	059b      	lsls	r3, r3, #22
 800508e:	d4dd      	bmi.n	800504c <_fflush_r+0xc>
 8005090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005092:	f7ff f93a 	bl	800430a <__retarget_lock_release_recursive>
 8005096:	e7d9      	b.n	800504c <_fflush_r+0xc>
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <_fflush_r+0x70>)
 800509a:	429c      	cmp	r4, r3
 800509c:	d101      	bne.n	80050a2 <_fflush_r+0x62>
 800509e:	68ac      	ldr	r4, [r5, #8]
 80050a0:	e7df      	b.n	8005062 <_fflush_r+0x22>
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <_fflush_r+0x74>)
 80050a4:	429c      	cmp	r4, r3
 80050a6:	bf08      	it	eq
 80050a8:	68ec      	ldreq	r4, [r5, #12]
 80050aa:	e7da      	b.n	8005062 <_fflush_r+0x22>
 80050ac:	08005478 	.word	0x08005478
 80050b0:	08005498 	.word	0x08005498
 80050b4:	08005458 	.word	0x08005458

080050b8 <_lseek_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d07      	ldr	r5, [pc, #28]	; (80050d8 <_lseek_r+0x20>)
 80050bc:	4604      	mov	r4, r0
 80050be:	4608      	mov	r0, r1
 80050c0:	4611      	mov	r1, r2
 80050c2:	2200      	movs	r2, #0
 80050c4:	602a      	str	r2, [r5, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f7fb fe9c 	bl	8000e04 <_lseek>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_lseek_r+0x1e>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_lseek_r+0x1e>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	20012f18 	.word	0x20012f18

080050dc <__swhatbuf_r>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	460e      	mov	r6, r1
 80050e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e4:	2900      	cmp	r1, #0
 80050e6:	b096      	sub	sp, #88	; 0x58
 80050e8:	4614      	mov	r4, r2
 80050ea:	461d      	mov	r5, r3
 80050ec:	da08      	bge.n	8005100 <__swhatbuf_r+0x24>
 80050ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	602a      	str	r2, [r5, #0]
 80050f6:	061a      	lsls	r2, r3, #24
 80050f8:	d410      	bmi.n	800511c <__swhatbuf_r+0x40>
 80050fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050fe:	e00e      	b.n	800511e <__swhatbuf_r+0x42>
 8005100:	466a      	mov	r2, sp
 8005102:	f000 f905 	bl	8005310 <_fstat_r>
 8005106:	2800      	cmp	r0, #0
 8005108:	dbf1      	blt.n	80050ee <__swhatbuf_r+0x12>
 800510a:	9a01      	ldr	r2, [sp, #4]
 800510c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005114:	425a      	negs	r2, r3
 8005116:	415a      	adcs	r2, r3
 8005118:	602a      	str	r2, [r5, #0]
 800511a:	e7ee      	b.n	80050fa <__swhatbuf_r+0x1e>
 800511c:	2340      	movs	r3, #64	; 0x40
 800511e:	2000      	movs	r0, #0
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	b016      	add	sp, #88	; 0x58
 8005124:	bd70      	pop	{r4, r5, r6, pc}
	...

08005128 <__smakebuf_r>:
 8005128:	898b      	ldrh	r3, [r1, #12]
 800512a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800512c:	079d      	lsls	r5, r3, #30
 800512e:	4606      	mov	r6, r0
 8005130:	460c      	mov	r4, r1
 8005132:	d507      	bpl.n	8005144 <__smakebuf_r+0x1c>
 8005134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	2301      	movs	r3, #1
 800513e:	6163      	str	r3, [r4, #20]
 8005140:	b002      	add	sp, #8
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	ab01      	add	r3, sp, #4
 8005146:	466a      	mov	r2, sp
 8005148:	f7ff ffc8 	bl	80050dc <__swhatbuf_r>
 800514c:	9900      	ldr	r1, [sp, #0]
 800514e:	4605      	mov	r5, r0
 8005150:	4630      	mov	r0, r6
 8005152:	f7ff f8fb 	bl	800434c <_malloc_r>
 8005156:	b948      	cbnz	r0, 800516c <__smakebuf_r+0x44>
 8005158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800515c:	059a      	lsls	r2, r3, #22
 800515e:	d4ef      	bmi.n	8005140 <__smakebuf_r+0x18>
 8005160:	f023 0303 	bic.w	r3, r3, #3
 8005164:	f043 0302 	orr.w	r3, r3, #2
 8005168:	81a3      	strh	r3, [r4, #12]
 800516a:	e7e3      	b.n	8005134 <__smakebuf_r+0xc>
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <__smakebuf_r+0x7c>)
 800516e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	6020      	str	r0, [r4, #0]
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	81a3      	strh	r3, [r4, #12]
 800517a:	9b00      	ldr	r3, [sp, #0]
 800517c:	6163      	str	r3, [r4, #20]
 800517e:	9b01      	ldr	r3, [sp, #4]
 8005180:	6120      	str	r0, [r4, #16]
 8005182:	b15b      	cbz	r3, 800519c <__smakebuf_r+0x74>
 8005184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005188:	4630      	mov	r0, r6
 800518a:	f000 f8d3 	bl	8005334 <_isatty_r>
 800518e:	b128      	cbz	r0, 800519c <__smakebuf_r+0x74>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	89a0      	ldrh	r0, [r4, #12]
 800519e:	4305      	orrs	r5, r0
 80051a0:	81a5      	strh	r5, [r4, #12]
 80051a2:	e7cd      	b.n	8005140 <__smakebuf_r+0x18>
 80051a4:	08004165 	.word	0x08004165

080051a8 <memmove>:
 80051a8:	4288      	cmp	r0, r1
 80051aa:	b510      	push	{r4, lr}
 80051ac:	eb01 0402 	add.w	r4, r1, r2
 80051b0:	d902      	bls.n	80051b8 <memmove+0x10>
 80051b2:	4284      	cmp	r4, r0
 80051b4:	4623      	mov	r3, r4
 80051b6:	d807      	bhi.n	80051c8 <memmove+0x20>
 80051b8:	1e43      	subs	r3, r0, #1
 80051ba:	42a1      	cmp	r1, r4
 80051bc:	d008      	beq.n	80051d0 <memmove+0x28>
 80051be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051c6:	e7f8      	b.n	80051ba <memmove+0x12>
 80051c8:	4402      	add	r2, r0
 80051ca:	4601      	mov	r1, r0
 80051cc:	428a      	cmp	r2, r1
 80051ce:	d100      	bne.n	80051d2 <memmove+0x2a>
 80051d0:	bd10      	pop	{r4, pc}
 80051d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051da:	e7f7      	b.n	80051cc <memmove+0x24>

080051dc <__malloc_lock>:
 80051dc:	4801      	ldr	r0, [pc, #4]	; (80051e4 <__malloc_lock+0x8>)
 80051de:	f7ff b893 	b.w	8004308 <__retarget_lock_acquire_recursive>
 80051e2:	bf00      	nop
 80051e4:	20012f0c 	.word	0x20012f0c

080051e8 <__malloc_unlock>:
 80051e8:	4801      	ldr	r0, [pc, #4]	; (80051f0 <__malloc_unlock+0x8>)
 80051ea:	f7ff b88e 	b.w	800430a <__retarget_lock_release_recursive>
 80051ee:	bf00      	nop
 80051f0:	20012f0c 	.word	0x20012f0c

080051f4 <_free_r>:
 80051f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051f6:	2900      	cmp	r1, #0
 80051f8:	d044      	beq.n	8005284 <_free_r+0x90>
 80051fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051fe:	9001      	str	r0, [sp, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f1a1 0404 	sub.w	r4, r1, #4
 8005206:	bfb8      	it	lt
 8005208:	18e4      	addlt	r4, r4, r3
 800520a:	f7ff ffe7 	bl	80051dc <__malloc_lock>
 800520e:	4a1e      	ldr	r2, [pc, #120]	; (8005288 <_free_r+0x94>)
 8005210:	9801      	ldr	r0, [sp, #4]
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	b933      	cbnz	r3, 8005224 <_free_r+0x30>
 8005216:	6063      	str	r3, [r4, #4]
 8005218:	6014      	str	r4, [r2, #0]
 800521a:	b003      	add	sp, #12
 800521c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005220:	f7ff bfe2 	b.w	80051e8 <__malloc_unlock>
 8005224:	42a3      	cmp	r3, r4
 8005226:	d908      	bls.n	800523a <_free_r+0x46>
 8005228:	6825      	ldr	r5, [r4, #0]
 800522a:	1961      	adds	r1, r4, r5
 800522c:	428b      	cmp	r3, r1
 800522e:	bf01      	itttt	eq
 8005230:	6819      	ldreq	r1, [r3, #0]
 8005232:	685b      	ldreq	r3, [r3, #4]
 8005234:	1949      	addeq	r1, r1, r5
 8005236:	6021      	streq	r1, [r4, #0]
 8005238:	e7ed      	b.n	8005216 <_free_r+0x22>
 800523a:	461a      	mov	r2, r3
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	b10b      	cbz	r3, 8005244 <_free_r+0x50>
 8005240:	42a3      	cmp	r3, r4
 8005242:	d9fa      	bls.n	800523a <_free_r+0x46>
 8005244:	6811      	ldr	r1, [r2, #0]
 8005246:	1855      	adds	r5, r2, r1
 8005248:	42a5      	cmp	r5, r4
 800524a:	d10b      	bne.n	8005264 <_free_r+0x70>
 800524c:	6824      	ldr	r4, [r4, #0]
 800524e:	4421      	add	r1, r4
 8005250:	1854      	adds	r4, r2, r1
 8005252:	42a3      	cmp	r3, r4
 8005254:	6011      	str	r1, [r2, #0]
 8005256:	d1e0      	bne.n	800521a <_free_r+0x26>
 8005258:	681c      	ldr	r4, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	6053      	str	r3, [r2, #4]
 800525e:	4421      	add	r1, r4
 8005260:	6011      	str	r1, [r2, #0]
 8005262:	e7da      	b.n	800521a <_free_r+0x26>
 8005264:	d902      	bls.n	800526c <_free_r+0x78>
 8005266:	230c      	movs	r3, #12
 8005268:	6003      	str	r3, [r0, #0]
 800526a:	e7d6      	b.n	800521a <_free_r+0x26>
 800526c:	6825      	ldr	r5, [r4, #0]
 800526e:	1961      	adds	r1, r4, r5
 8005270:	428b      	cmp	r3, r1
 8005272:	bf04      	itt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	6063      	str	r3, [r4, #4]
 800527a:	bf04      	itt	eq
 800527c:	1949      	addeq	r1, r1, r5
 800527e:	6021      	streq	r1, [r4, #0]
 8005280:	6054      	str	r4, [r2, #4]
 8005282:	e7ca      	b.n	800521a <_free_r+0x26>
 8005284:	b003      	add	sp, #12
 8005286:	bd30      	pop	{r4, r5, pc}
 8005288:	20012f10 	.word	0x20012f10

0800528c <_realloc_r>:
 800528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005290:	4680      	mov	r8, r0
 8005292:	4614      	mov	r4, r2
 8005294:	460e      	mov	r6, r1
 8005296:	b921      	cbnz	r1, 80052a2 <_realloc_r+0x16>
 8005298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800529c:	4611      	mov	r1, r2
 800529e:	f7ff b855 	b.w	800434c <_malloc_r>
 80052a2:	b92a      	cbnz	r2, 80052b0 <_realloc_r+0x24>
 80052a4:	f7ff ffa6 	bl	80051f4 <_free_r>
 80052a8:	4625      	mov	r5, r4
 80052aa:	4628      	mov	r0, r5
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b0:	f000 f850 	bl	8005354 <_malloc_usable_size_r>
 80052b4:	4284      	cmp	r4, r0
 80052b6:	4607      	mov	r7, r0
 80052b8:	d802      	bhi.n	80052c0 <_realloc_r+0x34>
 80052ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052be:	d812      	bhi.n	80052e6 <_realloc_r+0x5a>
 80052c0:	4621      	mov	r1, r4
 80052c2:	4640      	mov	r0, r8
 80052c4:	f7ff f842 	bl	800434c <_malloc_r>
 80052c8:	4605      	mov	r5, r0
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d0ed      	beq.n	80052aa <_realloc_r+0x1e>
 80052ce:	42bc      	cmp	r4, r7
 80052d0:	4622      	mov	r2, r4
 80052d2:	4631      	mov	r1, r6
 80052d4:	bf28      	it	cs
 80052d6:	463a      	movcs	r2, r7
 80052d8:	f7fe fed2 	bl	8004080 <memcpy>
 80052dc:	4631      	mov	r1, r6
 80052de:	4640      	mov	r0, r8
 80052e0:	f7ff ff88 	bl	80051f4 <_free_r>
 80052e4:	e7e1      	b.n	80052aa <_realloc_r+0x1e>
 80052e6:	4635      	mov	r5, r6
 80052e8:	e7df      	b.n	80052aa <_realloc_r+0x1e>
	...

080052ec <_read_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d07      	ldr	r5, [pc, #28]	; (800530c <_read_r+0x20>)
 80052f0:	4604      	mov	r4, r0
 80052f2:	4608      	mov	r0, r1
 80052f4:	4611      	mov	r1, r2
 80052f6:	2200      	movs	r2, #0
 80052f8:	602a      	str	r2, [r5, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f7fb fd22 	bl	8000d44 <_read>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_read_r+0x1e>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_read_r+0x1e>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	20012f18 	.word	0x20012f18

08005310 <_fstat_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d07      	ldr	r5, [pc, #28]	; (8005330 <_fstat_r+0x20>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	f7fb fd56 	bl	8000dce <_fstat>
 8005322:	1c43      	adds	r3, r0, #1
 8005324:	d102      	bne.n	800532c <_fstat_r+0x1c>
 8005326:	682b      	ldr	r3, [r5, #0]
 8005328:	b103      	cbz	r3, 800532c <_fstat_r+0x1c>
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	bd38      	pop	{r3, r4, r5, pc}
 800532e:	bf00      	nop
 8005330:	20012f18 	.word	0x20012f18

08005334 <_isatty_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d06      	ldr	r5, [pc, #24]	; (8005350 <_isatty_r+0x1c>)
 8005338:	2300      	movs	r3, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	f7fb fd55 	bl	8000dee <_isatty>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_isatty_r+0x1a>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_isatty_r+0x1a>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20012f18 	.word	0x20012f18

08005354 <_malloc_usable_size_r>:
 8005354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005358:	1f18      	subs	r0, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	bfbc      	itt	lt
 800535e:	580b      	ldrlt	r3, [r1, r0]
 8005360:	18c0      	addlt	r0, r0, r3
 8005362:	4770      	bx	lr

08005364 <_sbrk>:
 8005364:	4a04      	ldr	r2, [pc, #16]	; (8005378 <_sbrk+0x14>)
 8005366:	6811      	ldr	r1, [r2, #0]
 8005368:	4603      	mov	r3, r0
 800536a:	b909      	cbnz	r1, 8005370 <_sbrk+0xc>
 800536c:	4903      	ldr	r1, [pc, #12]	; (800537c <_sbrk+0x18>)
 800536e:	6011      	str	r1, [r2, #0]
 8005370:	6810      	ldr	r0, [r2, #0]
 8005372:	4403      	add	r3, r0
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	4770      	bx	lr
 8005378:	20012f1c 	.word	0x20012f1c
 800537c:	20012f20 	.word	0x20012f20

08005380 <_init>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	bf00      	nop
 8005384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005386:	bc08      	pop	{r3}
 8005388:	469e      	mov	lr, r3
 800538a:	4770      	bx	lr

0800538c <_fini>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr
