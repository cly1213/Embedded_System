
03_State_Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08001908  08001908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a48  08001a48  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08001a48  08001a48  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a48  08001a48  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a4c  08001a4c  00011a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08001a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000088  08001ad8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08001ad8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004fa6  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f8b  00000000  00000000  0002505e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  00025ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  000263f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207cd  00000000  00000000  00026768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000442c  00000000  00000000  00046f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1343  00000000  00000000  0004b361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c6a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b4  00000000  00000000  0010c6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080018f0 	.word	0x080018f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080018f0 	.word	0x080018f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:

uint8_t current_state;
static int Clock;

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

  HAL_Init();
 8000274:	f000 fa38 	bl	80006e8 <HAL_Init>


  state_machine_init();
 8000278:	f000 f81e 	bl	80002b8 <state_machine_init>

  //MX_GPIO_Init();

  while (1)
  {
	  state_table[current_state]();
 800027c:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <main+0x3c>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <main+0x40>)
 8000284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000288:	4798      	blx	r3
	  HAL_Delay(1000);
 800028a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028e:	f000 fa9d 	bl	80007cc <HAL_Delay>
	  Clock++;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <main+0x44>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	3301      	adds	r3, #1
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <main+0x44>)
 800029a:	6013      	str	r3, [r2, #0]

	  if(current_state == MAX_STATE){
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <main+0x3c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b06      	cmp	r3, #6
 80002a2:	d1eb      	bne.n	800027c <main+0xc>
		  current_state = 0;
 80002a4:	4b01      	ldr	r3, [pc, #4]	; (80002ac <main+0x3c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
	  state_table[current_state]();
 80002aa:	e7e7      	b.n	800027c <main+0xc>
 80002ac:	200000c4 	.word	0x200000c4
 80002b0:	20000000 	.word	0x20000000
 80002b4:	200000a4 	.word	0x200000a4

080002b8 <state_machine_init>:
	  }
  }

}

void state_machine_init(void){
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

	current_state = STATE_A;
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <state_machine_init+0x1c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
	Clock = 0 ;
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <state_machine_init+0x20>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]

}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	200000c4 	.word	0x200000c4
 80002d8:	200000a4 	.word	0x200000a4

080002dc <state_a_function>:

uint32_t sa_prev_time = 0;
uint32_t sa_now;
uint32_t sa_delta;

void state_a_function(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	if(Clock % 2){
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <state_a_function+0x4c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d01b      	beq.n	8000324 <state_a_function+0x48>
		current_state++;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <state_a_function+0x50>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	3301      	adds	r3, #1
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <state_a_function+0x50>)
 80002f6:	701a      	strb	r2, [r3, #0]

		sa_now = HAL_GetTick();
 80002f8:	f000 fa5c 	bl	80007b4 <HAL_GetTick>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <state_a_function+0x54>)
 8000300:	6013      	str	r3, [r2, #0]
		sa_delta = sa_now - sa_prev_time;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <state_a_function+0x54>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <state_a_function+0x58>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	1ad3      	subs	r3, r2, r3
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <state_a_function+0x5c>)
 800030e:	6013      	str	r3, [r2, #0]
		//To seconds
		//sa_delta /= 1000;
		sa_prev_time = sa_now;
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <state_a_function+0x54>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a07      	ldr	r2, [pc, #28]	; (8000334 <state_a_function+0x58>)
 8000316:	6013      	str	r3, [r2, #0]

		//printf("This is the execution of STATE A \n");
		printf("This is the output of STATE A: %ld millisecond ago \n\r ", sa_delta);
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <state_a_function+0x5c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4619      	mov	r1, r3
 800031e:	4807      	ldr	r0, [pc, #28]	; (800033c <state_a_function+0x60>)
 8000320:	f000 fb90 	bl	8000a44 <iprintf>
	}
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200000a4 	.word	0x200000a4
 800032c:	200000c4 	.word	0x200000c4
 8000330:	200000d8 	.word	0x200000d8
 8000334:	200000a8 	.word	0x200000a8
 8000338:	200000c8 	.word	0x200000c8
 800033c:	08001908 	.word	0x08001908

08000340 <state_b_function>:

uint32_t sb_prev_time = 0;
uint32_t sb_now;
uint32_t sb_delta;

void state_b_function(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	if(Clock % 5){
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <state_b_function+0x5c>)
 8000346:	6819      	ldr	r1, [r3, #0]
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <state_b_function+0x60>)
 800034a:	fb83 2301 	smull	r2, r3, r3, r1
 800034e:	105a      	asrs	r2, r3, #1
 8000350:	17cb      	asrs	r3, r1, #31
 8000352:	1ad2      	subs	r2, r2, r3
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	1aca      	subs	r2, r1, r3
 800035c:	2a00      	cmp	r2, #0
 800035e:	d01b      	beq.n	8000398 <state_b_function+0x58>
		current_state++;
 8000360:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <state_b_function+0x64>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <state_b_function+0x64>)
 800036a:	701a      	strb	r2, [r3, #0]

		sb_now = HAL_GetTick();
 800036c:	f000 fa22 	bl	80007b4 <HAL_GetTick>
 8000370:	4603      	mov	r3, r0
 8000372:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <state_b_function+0x68>)
 8000374:	6013      	str	r3, [r2, #0]

		sb_delta = sb_now - sb_prev_time;
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <state_b_function+0x68>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <state_b_function+0x6c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <state_b_function+0x70>)
 8000382:	6013      	str	r3, [r2, #0]
		//To seconds
		//sb_delta /= 1000;
		sb_prev_time = sb_now;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <state_b_function+0x68>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a08      	ldr	r2, [pc, #32]	; (80003ac <state_b_function+0x6c>)
 800038a:	6013      	str	r3, [r2, #0]

		printf("This is the output of STATE B: %ld millisecond ago \n\r ", sb_delta);
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <state_b_function+0x70>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4619      	mov	r1, r3
 8000392:	4808      	ldr	r0, [pc, #32]	; (80003b4 <state_b_function+0x74>)
 8000394:	f000 fb56 	bl	8000a44 <iprintf>

		//printf("This is the execution of STATE B \n");
	}
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200000a4 	.word	0x200000a4
 80003a0:	66666667 	.word	0x66666667
 80003a4:	200000c4 	.word	0x200000c4
 80003a8:	200000c0 	.word	0x200000c0
 80003ac:	200000ac 	.word	0x200000ac
 80003b0:	200000d4 	.word	0x200000d4
 80003b4:	08001940 	.word	0x08001940

080003b8 <state_c_function>:
uint32_t sc_prev_time = 0;
uint32_t sc_now;
uint32_t sc_delta;


void state_c_function(void){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	if(Clock % 9){
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <state_c_function+0x5c>)
 80003be:	6819      	ldr	r1, [r3, #0]
 80003c0:	4b15      	ldr	r3, [pc, #84]	; (8000418 <state_c_function+0x60>)
 80003c2:	fb83 2301 	smull	r2, r3, r3, r1
 80003c6:	105a      	asrs	r2, r3, #1
 80003c8:	17cb      	asrs	r3, r1, #31
 80003ca:	1ad2      	subs	r2, r2, r3
 80003cc:	4613      	mov	r3, r2
 80003ce:	00db      	lsls	r3, r3, #3
 80003d0:	4413      	add	r3, r2
 80003d2:	1aca      	subs	r2, r1, r3
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	d01b      	beq.n	8000410 <state_c_function+0x58>
		current_state++;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <state_c_function+0x64>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <state_c_function+0x64>)
 80003e2:	701a      	strb	r2, [r3, #0]
		sc_now = HAL_GetTick();
 80003e4:	f000 f9e6 	bl	80007b4 <HAL_GetTick>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <state_c_function+0x68>)
 80003ec:	6013      	str	r3, [r2, #0]

		sc_delta = sc_now - sc_prev_time;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <state_c_function+0x68>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <state_c_function+0x6c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	1ad3      	subs	r3, r2, r3
 80003f8:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <state_c_function+0x70>)
 80003fa:	6013      	str	r3, [r2, #0]
		//To seconds
		//sc_delta /= 1000;
		sc_prev_time = sb_now;
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <state_c_function+0x74>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a08      	ldr	r2, [pc, #32]	; (8000424 <state_c_function+0x6c>)
 8000402:	6013      	str	r3, [r2, #0]
		printf("This is the output of STATE C: %ld millisecond ago \n\r ", sc_delta);
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <state_c_function+0x70>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4619      	mov	r1, r3
 800040a:	4809      	ldr	r0, [pc, #36]	; (8000430 <state_c_function+0x78>)
 800040c:	f000 fb1a 	bl	8000a44 <iprintf>
		//printf("This is the execution of STATE C \n");
	}
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000a4 	.word	0x200000a4
 8000418:	38e38e39 	.word	0x38e38e39
 800041c:	200000c4 	.word	0x200000c4
 8000420:	200000cc 	.word	0x200000cc
 8000424:	200000b0 	.word	0x200000b0
 8000428:	200000d0 	.word	0x200000d0
 800042c:	200000c0 	.word	0x200000c0
 8000430:	08001978 	.word	0x08001978

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <HAL_MspInit+0x4c>)
 8000440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000442:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <HAL_MspInit+0x4c>)
 8000444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000448:	6453      	str	r3, [r2, #68]	; 0x44
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_MspInit+0x4c>)
 800044c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800044e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	2300      	movs	r3, #0
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <HAL_MspInit+0x4c>)
 800045c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800045e:	4a08      	ldr	r2, [pc, #32]	; (8000480 <HAL_MspInit+0x4c>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	6413      	str	r3, [r2, #64]	; 0x40
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_MspInit+0x4c>)
 8000468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800046a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000472:	2007      	movs	r0, #7
 8000474:	f000 fa80 	bl	8000978 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40023800 	.word	0x40023800

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <NMI_Handler+0x4>

0800048a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <MemManage_Handler+0x4>

08000496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d0:	f000 f95c 	bl	800078c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <ITM_SendChar+0x48>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <ITM_SendChar+0x48>)
 80004e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <ITM_SendChar+0x4c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <ITM_SendChar+0x4c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004fa:	bf00      	nop
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f8      	beq.n	80004fc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800050a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	6013      	str	r3, [r2, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000edfc 	.word	0xe000edfc
 8000524:	e0000e00 	.word	0xe0000e00

08000528 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	e00a      	b.n	8000550 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800053a:	f3af 8000 	nop.w
 800053e:	4601      	mov	r1, r0
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	60ba      	str	r2, [r7, #8]
 8000546:	b2ca      	uxtb	r2, r1
 8000548:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	3301      	adds	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	429a      	cmp	r2, r3
 8000556:	dbf0      	blt.n	800053a <_read+0x12>
	}

return len;
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b086      	sub	sp, #24
 8000566:	af00      	add	r7, sp, #0
 8000568:	60f8      	str	r0, [r7, #12]
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e009      	b.n	8000588 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++); //Add itm_sent_data.c function here
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	60ba      	str	r2, [r7, #8]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ffab 	bl	80004d8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	dbf1      	blt.n	8000574 <_write+0x12>

	}
	return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <_close>:

int _close(int file)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c2:	605a      	str	r2, [r3, #4]
	return 0;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <_isatty>:

int _isatty(int file)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
	return 1;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
	return 0;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <_sbrk+0x5c>)
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <_sbrk+0x60>)
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <_sbrk+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <_sbrk+0x64>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <_sbrk+0x68>)
 8000624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <_sbrk+0x64>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	429a      	cmp	r2, r3
 8000632:	d207      	bcs.n	8000644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000634:	f000 f9d4 	bl	80009e0 <__errno>
 8000638:	4603      	mov	r3, r0
 800063a:	220c      	movs	r2, #12
 800063c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000642:	e009      	b.n	8000658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <_sbrk+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <_sbrk+0x64>)
 8000654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20020000 	.word	0x20020000
 8000664:	00000400 	.word	0x00000400
 8000668:	200000b4 	.word	0x200000b4
 800066c:	200000f0 	.word	0x200000f0

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <SystemInit+0x20>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <SystemInit+0x20>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800069a:	490e      	ldr	r1, [pc, #56]	; (80006d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006b0:	4c0b      	ldr	r4, [pc, #44]	; (80006e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006be:	f7ff ffd7 	bl	8000670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006c2:	f000 f993 	bl	80009ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006c6:	f7ff fdd3 	bl	8000270 <main>
  bx  lr    
 80006ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80006d8:	08001a50 	.word	0x08001a50
  ldr r2, =_sbss
 80006dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80006e0:	200000f0 	.word	0x200000f0

080006e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC_IRQHandler>
	...

080006e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_Init+0x40>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <HAL_Init+0x40>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_Init+0x40>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_Init+0x40>)
 80006fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_Init+0x40>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_Init+0x40>)
 800070a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800070e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000710:	2003      	movs	r0, #3
 8000712:	f000 f931 	bl	8000978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000716:	2000      	movs	r0, #0
 8000718:	f000 f808 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800071c:	f7ff fe8a 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023c00 	.word	0x40023c00

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_InitTick+0x54>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	fbb3 f3f1 	udiv	r3, r3, r1
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f93b 	bl	80009c6 <HAL_SYSTICK_Config>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e00e      	b.n	8000778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d80a      	bhi.n	8000776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000768:	f000 f911 	bl	800098e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_InitTick+0x5c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	e000      	b.n	8000778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000018 	.word	0x20000018
 8000784:	20000020 	.word	0x20000020
 8000788:	2000001c 	.word	0x2000001c

0800078c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_IncTick+0x20>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_IncTick+0x24>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_IncTick+0x24>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000020 	.word	0x20000020
 80007b0:	200000dc 	.word	0x200000dc

080007b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_GetTick+0x14>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	200000dc 	.word	0x200000dc

080007cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff ffee 	bl	80007b4 <HAL_GetTick>
 80007d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007e4:	d005      	beq.n	80007f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_Delay+0x44>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007f2:	bf00      	nop
 80007f4:	f7ff ffde 	bl	80007b4 <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d8f7      	bhi.n	80007f4 <HAL_Delay+0x28>
  {
  }
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000020 	.word	0x20000020

08000814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000830:	4013      	ands	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800083c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	60d3      	str	r3, [r2, #12]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <__NVIC_GetPriorityGrouping+0x18>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	f003 0307 	and.w	r3, r3, #7
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db0a      	blt.n	80008a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	490c      	ldr	r1, [pc, #48]	; (80008c4 <__NVIC_SetPriority+0x4c>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a0:	e00a      	b.n	80008b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4908      	ldr	r1, [pc, #32]	; (80008c8 <__NVIC_SetPriority+0x50>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	440b      	add	r3, r1
 80008b6:	761a      	strb	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f1c3 0307 	rsb	r3, r3, #7
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	bf28      	it	cs
 80008ea:	2304      	movcs	r3, #4
 80008ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3304      	adds	r3, #4
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d902      	bls.n	80008fc <NVIC_EncodePriority+0x30>
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b03      	subs	r3, #3
 80008fa:	e000      	b.n	80008fe <NVIC_EncodePriority+0x32>
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43da      	mvns	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	401a      	ands	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000914:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43d9      	mvns	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4313      	orrs	r3, r2
         );
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	; 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000944:	d301      	bcc.n	800094a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000946:	2301      	movs	r3, #1
 8000948:	e00f      	b.n	800096a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <SysTick_Config+0x40>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000952:	210f      	movs	r1, #15
 8000954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000958:	f7ff ff8e 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <SysTick_Config+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <SysTick_Config+0x40>)
 8000964:	2207      	movs	r2, #7
 8000966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	e000e010 	.word	0xe000e010

08000978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff47 	bl	8000814 <__NVIC_SetPriorityGrouping>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	4603      	mov	r3, r0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a0:	f7ff ff5c 	bl	800085c <__NVIC_GetPriorityGrouping>
 80009a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff ff8e 	bl	80008cc <NVIC_EncodePriority>
 80009b0:	4602      	mov	r2, r0
 80009b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff5d 	bl	8000878 <__NVIC_SetPriority>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ffb0 	bl	8000934 <SysTick_Config>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <__errno>:
 80009e0:	4b01      	ldr	r3, [pc, #4]	; (80009e8 <__errno+0x8>)
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000024 	.word	0x20000024

080009ec <__libc_init_array>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	4d0d      	ldr	r5, [pc, #52]	; (8000a24 <__libc_init_array+0x38>)
 80009f0:	4c0d      	ldr	r4, [pc, #52]	; (8000a28 <__libc_init_array+0x3c>)
 80009f2:	1b64      	subs	r4, r4, r5
 80009f4:	10a4      	asrs	r4, r4, #2
 80009f6:	2600      	movs	r6, #0
 80009f8:	42a6      	cmp	r6, r4
 80009fa:	d109      	bne.n	8000a10 <__libc_init_array+0x24>
 80009fc:	4d0b      	ldr	r5, [pc, #44]	; (8000a2c <__libc_init_array+0x40>)
 80009fe:	4c0c      	ldr	r4, [pc, #48]	; (8000a30 <__libc_init_array+0x44>)
 8000a00:	f000 ff76 	bl	80018f0 <_init>
 8000a04:	1b64      	subs	r4, r4, r5
 8000a06:	10a4      	asrs	r4, r4, #2
 8000a08:	2600      	movs	r6, #0
 8000a0a:	42a6      	cmp	r6, r4
 8000a0c:	d105      	bne.n	8000a1a <__libc_init_array+0x2e>
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a14:	4798      	blx	r3
 8000a16:	3601      	adds	r6, #1
 8000a18:	e7ee      	b.n	80009f8 <__libc_init_array+0xc>
 8000a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a1e:	4798      	blx	r3
 8000a20:	3601      	adds	r6, #1
 8000a22:	e7f2      	b.n	8000a0a <__libc_init_array+0x1e>
 8000a24:	08001a48 	.word	0x08001a48
 8000a28:	08001a48 	.word	0x08001a48
 8000a2c:	08001a48 	.word	0x08001a48
 8000a30:	08001a4c 	.word	0x08001a4c

08000a34 <memset>:
 8000a34:	4402      	add	r2, r0
 8000a36:	4603      	mov	r3, r0
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d100      	bne.n	8000a3e <memset+0xa>
 8000a3c:	4770      	bx	lr
 8000a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8000a42:	e7f9      	b.n	8000a38 <memset+0x4>

08000a44 <iprintf>:
 8000a44:	b40f      	push	{r0, r1, r2, r3}
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <iprintf+0x2c>)
 8000a48:	b513      	push	{r0, r1, r4, lr}
 8000a4a:	681c      	ldr	r4, [r3, #0]
 8000a4c:	b124      	cbz	r4, 8000a58 <iprintf+0x14>
 8000a4e:	69a3      	ldr	r3, [r4, #24]
 8000a50:	b913      	cbnz	r3, 8000a58 <iprintf+0x14>
 8000a52:	4620      	mov	r0, r4
 8000a54:	f000 f866 	bl	8000b24 <__sinit>
 8000a58:	ab05      	add	r3, sp, #20
 8000a5a:	9a04      	ldr	r2, [sp, #16]
 8000a5c:	68a1      	ldr	r1, [r4, #8]
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	4620      	mov	r0, r4
 8000a62:	f000 f983 	bl	8000d6c <_vfiprintf_r>
 8000a66:	b002      	add	sp, #8
 8000a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr
 8000a70:	20000024 	.word	0x20000024

08000a74 <std>:
 8000a74:	2300      	movs	r3, #0
 8000a76:	b510      	push	{r4, lr}
 8000a78:	4604      	mov	r4, r0
 8000a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8000a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a82:	6083      	str	r3, [r0, #8]
 8000a84:	8181      	strh	r1, [r0, #12]
 8000a86:	6643      	str	r3, [r0, #100]	; 0x64
 8000a88:	81c2      	strh	r2, [r0, #14]
 8000a8a:	6183      	str	r3, [r0, #24]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	2208      	movs	r2, #8
 8000a90:	305c      	adds	r0, #92	; 0x5c
 8000a92:	f7ff ffcf 	bl	8000a34 <memset>
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <std+0x38>)
 8000a98:	6263      	str	r3, [r4, #36]	; 0x24
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <std+0x3c>)
 8000a9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <std+0x40>)
 8000aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <std+0x44>)
 8000aa4:	6224      	str	r4, [r4, #32]
 8000aa6:	6323      	str	r3, [r4, #48]	; 0x30
 8000aa8:	bd10      	pop	{r4, pc}
 8000aaa:	bf00      	nop
 8000aac:	08001315 	.word	0x08001315
 8000ab0:	08001337 	.word	0x08001337
 8000ab4:	0800136f 	.word	0x0800136f
 8000ab8:	08001393 	.word	0x08001393

08000abc <_cleanup_r>:
 8000abc:	4901      	ldr	r1, [pc, #4]	; (8000ac4 <_cleanup_r+0x8>)
 8000abe:	f000 b8af 	b.w	8000c20 <_fwalk_reent>
 8000ac2:	bf00      	nop
 8000ac4:	0800166d 	.word	0x0800166d

08000ac8 <__sfmoreglue>:
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	1e4a      	subs	r2, r1, #1
 8000acc:	2568      	movs	r5, #104	; 0x68
 8000ace:	4355      	muls	r5, r2
 8000ad0:	460e      	mov	r6, r1
 8000ad2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ad6:	f000 f8c5 	bl	8000c64 <_malloc_r>
 8000ada:	4604      	mov	r4, r0
 8000adc:	b140      	cbz	r0, 8000af0 <__sfmoreglue+0x28>
 8000ade:	2100      	movs	r1, #0
 8000ae0:	e9c0 1600 	strd	r1, r6, [r0]
 8000ae4:	300c      	adds	r0, #12
 8000ae6:	60a0      	str	r0, [r4, #8]
 8000ae8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000aec:	f7ff ffa2 	bl	8000a34 <memset>
 8000af0:	4620      	mov	r0, r4
 8000af2:	bd70      	pop	{r4, r5, r6, pc}

08000af4 <__sfp_lock_acquire>:
 8000af4:	4801      	ldr	r0, [pc, #4]	; (8000afc <__sfp_lock_acquire+0x8>)
 8000af6:	f000 b8b3 	b.w	8000c60 <__retarget_lock_acquire_recursive>
 8000afa:	bf00      	nop
 8000afc:	200000e8 	.word	0x200000e8

08000b00 <__sfp_lock_release>:
 8000b00:	4801      	ldr	r0, [pc, #4]	; (8000b08 <__sfp_lock_release+0x8>)
 8000b02:	f000 b8ae 	b.w	8000c62 <__retarget_lock_release_recursive>
 8000b06:	bf00      	nop
 8000b08:	200000e8 	.word	0x200000e8

08000b0c <__sinit_lock_acquire>:
 8000b0c:	4801      	ldr	r0, [pc, #4]	; (8000b14 <__sinit_lock_acquire+0x8>)
 8000b0e:	f000 b8a7 	b.w	8000c60 <__retarget_lock_acquire_recursive>
 8000b12:	bf00      	nop
 8000b14:	200000e3 	.word	0x200000e3

08000b18 <__sinit_lock_release>:
 8000b18:	4801      	ldr	r0, [pc, #4]	; (8000b20 <__sinit_lock_release+0x8>)
 8000b1a:	f000 b8a2 	b.w	8000c62 <__retarget_lock_release_recursive>
 8000b1e:	bf00      	nop
 8000b20:	200000e3 	.word	0x200000e3

08000b24 <__sinit>:
 8000b24:	b510      	push	{r4, lr}
 8000b26:	4604      	mov	r4, r0
 8000b28:	f7ff fff0 	bl	8000b0c <__sinit_lock_acquire>
 8000b2c:	69a3      	ldr	r3, [r4, #24]
 8000b2e:	b11b      	cbz	r3, 8000b38 <__sinit+0x14>
 8000b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b34:	f7ff bff0 	b.w	8000b18 <__sinit_lock_release>
 8000b38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b3c:	6523      	str	r3, [r4, #80]	; 0x50
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <__sinit+0x68>)
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <__sinit+0x6c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	bf04      	itt	eq
 8000b4a:	2301      	moveq	r3, #1
 8000b4c:	61a3      	streq	r3, [r4, #24]
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f000 f820 	bl	8000b94 <__sfp>
 8000b54:	6060      	str	r0, [r4, #4]
 8000b56:	4620      	mov	r0, r4
 8000b58:	f000 f81c 	bl	8000b94 <__sfp>
 8000b5c:	60a0      	str	r0, [r4, #8]
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f000 f818 	bl	8000b94 <__sfp>
 8000b64:	2200      	movs	r2, #0
 8000b66:	60e0      	str	r0, [r4, #12]
 8000b68:	2104      	movs	r1, #4
 8000b6a:	6860      	ldr	r0, [r4, #4]
 8000b6c:	f7ff ff82 	bl	8000a74 <std>
 8000b70:	68a0      	ldr	r0, [r4, #8]
 8000b72:	2201      	movs	r2, #1
 8000b74:	2109      	movs	r1, #9
 8000b76:	f7ff ff7d 	bl	8000a74 <std>
 8000b7a:	68e0      	ldr	r0, [r4, #12]
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	2112      	movs	r1, #18
 8000b80:	f7ff ff78 	bl	8000a74 <std>
 8000b84:	2301      	movs	r3, #1
 8000b86:	61a3      	str	r3, [r4, #24]
 8000b88:	e7d2      	b.n	8000b30 <__sinit+0xc>
 8000b8a:	bf00      	nop
 8000b8c:	080019b0 	.word	0x080019b0
 8000b90:	08000abd 	.word	0x08000abd

08000b94 <__sfp>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	4607      	mov	r7, r0
 8000b98:	f7ff ffac 	bl	8000af4 <__sfp_lock_acquire>
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <__sfp+0x84>)
 8000b9e:	681e      	ldr	r6, [r3, #0]
 8000ba0:	69b3      	ldr	r3, [r6, #24]
 8000ba2:	b913      	cbnz	r3, 8000baa <__sfp+0x16>
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f7ff ffbd 	bl	8000b24 <__sinit>
 8000baa:	3648      	adds	r6, #72	; 0x48
 8000bac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	d503      	bpl.n	8000bbc <__sfp+0x28>
 8000bb4:	6833      	ldr	r3, [r6, #0]
 8000bb6:	b30b      	cbz	r3, 8000bfc <__sfp+0x68>
 8000bb8:	6836      	ldr	r6, [r6, #0]
 8000bba:	e7f7      	b.n	8000bac <__sfp+0x18>
 8000bbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000bc0:	b9d5      	cbnz	r5, 8000bf8 <__sfp+0x64>
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <__sfp+0x88>)
 8000bc4:	60e3      	str	r3, [r4, #12]
 8000bc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bca:	6665      	str	r5, [r4, #100]	; 0x64
 8000bcc:	f000 f847 	bl	8000c5e <__retarget_lock_init_recursive>
 8000bd0:	f7ff ff96 	bl	8000b00 <__sfp_lock_release>
 8000bd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000bd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000bdc:	6025      	str	r5, [r4, #0]
 8000bde:	61a5      	str	r5, [r4, #24]
 8000be0:	2208      	movs	r2, #8
 8000be2:	4629      	mov	r1, r5
 8000be4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000be8:	f7ff ff24 	bl	8000a34 <memset>
 8000bec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bf8:	3468      	adds	r4, #104	; 0x68
 8000bfa:	e7d9      	b.n	8000bb0 <__sfp+0x1c>
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	4638      	mov	r0, r7
 8000c00:	f7ff ff62 	bl	8000ac8 <__sfmoreglue>
 8000c04:	4604      	mov	r4, r0
 8000c06:	6030      	str	r0, [r6, #0]
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d1d5      	bne.n	8000bb8 <__sfp+0x24>
 8000c0c:	f7ff ff78 	bl	8000b00 <__sfp_lock_release>
 8000c10:	230c      	movs	r3, #12
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	e7ee      	b.n	8000bf4 <__sfp+0x60>
 8000c16:	bf00      	nop
 8000c18:	080019b0 	.word	0x080019b0
 8000c1c:	ffff0001 	.word	0xffff0001

08000c20 <_fwalk_reent>:
 8000c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c24:	4606      	mov	r6, r0
 8000c26:	4688      	mov	r8, r1
 8000c28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c32:	f1b9 0901 	subs.w	r9, r9, #1
 8000c36:	d505      	bpl.n	8000c44 <_fwalk_reent+0x24>
 8000c38:	6824      	ldr	r4, [r4, #0]
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d1f7      	bne.n	8000c2e <_fwalk_reent+0xe>
 8000c3e:	4638      	mov	r0, r7
 8000c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c44:	89ab      	ldrh	r3, [r5, #12]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d907      	bls.n	8000c5a <_fwalk_reent+0x3a>
 8000c4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	d003      	beq.n	8000c5a <_fwalk_reent+0x3a>
 8000c52:	4629      	mov	r1, r5
 8000c54:	4630      	mov	r0, r6
 8000c56:	47c0      	blx	r8
 8000c58:	4307      	orrs	r7, r0
 8000c5a:	3568      	adds	r5, #104	; 0x68
 8000c5c:	e7e9      	b.n	8000c32 <_fwalk_reent+0x12>

08000c5e <__retarget_lock_init_recursive>:
 8000c5e:	4770      	bx	lr

08000c60 <__retarget_lock_acquire_recursive>:
 8000c60:	4770      	bx	lr

08000c62 <__retarget_lock_release_recursive>:
 8000c62:	4770      	bx	lr

08000c64 <_malloc_r>:
 8000c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c66:	1ccd      	adds	r5, r1, #3
 8000c68:	f025 0503 	bic.w	r5, r5, #3
 8000c6c:	3508      	adds	r5, #8
 8000c6e:	2d0c      	cmp	r5, #12
 8000c70:	bf38      	it	cc
 8000c72:	250c      	movcc	r5, #12
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	4606      	mov	r6, r0
 8000c78:	db01      	blt.n	8000c7e <_malloc_r+0x1a>
 8000c7a:	42a9      	cmp	r1, r5
 8000c7c:	d903      	bls.n	8000c86 <_malloc_r+0x22>
 8000c7e:	230c      	movs	r3, #12
 8000c80:	6033      	str	r3, [r6, #0]
 8000c82:	2000      	movs	r0, #0
 8000c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c86:	f000 fda3 	bl	80017d0 <__malloc_lock>
 8000c8a:	4921      	ldr	r1, [pc, #132]	; (8000d10 <_malloc_r+0xac>)
 8000c8c:	680a      	ldr	r2, [r1, #0]
 8000c8e:	4614      	mov	r4, r2
 8000c90:	b99c      	cbnz	r4, 8000cba <_malloc_r+0x56>
 8000c92:	4f20      	ldr	r7, [pc, #128]	; (8000d14 <_malloc_r+0xb0>)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b923      	cbnz	r3, 8000ca2 <_malloc_r+0x3e>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	f000 fb2a 	bl	80012f4 <_sbrk_r>
 8000ca0:	6038      	str	r0, [r7, #0]
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	f000 fb25 	bl	80012f4 <_sbrk_r>
 8000caa:	1c43      	adds	r3, r0, #1
 8000cac:	d123      	bne.n	8000cf6 <_malloc_r+0x92>
 8000cae:	230c      	movs	r3, #12
 8000cb0:	6033      	str	r3, [r6, #0]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	f000 fd92 	bl	80017dc <__malloc_unlock>
 8000cb8:	e7e3      	b.n	8000c82 <_malloc_r+0x1e>
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	1b5b      	subs	r3, r3, r5
 8000cbe:	d417      	bmi.n	8000cf0 <_malloc_r+0x8c>
 8000cc0:	2b0b      	cmp	r3, #11
 8000cc2:	d903      	bls.n	8000ccc <_malloc_r+0x68>
 8000cc4:	6023      	str	r3, [r4, #0]
 8000cc6:	441c      	add	r4, r3
 8000cc8:	6025      	str	r5, [r4, #0]
 8000cca:	e004      	b.n	8000cd6 <_malloc_r+0x72>
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	42a2      	cmp	r2, r4
 8000cd0:	bf0c      	ite	eq
 8000cd2:	600b      	streq	r3, [r1, #0]
 8000cd4:	6053      	strne	r3, [r2, #4]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f000 fd80 	bl	80017dc <__malloc_unlock>
 8000cdc:	f104 000b 	add.w	r0, r4, #11
 8000ce0:	1d23      	adds	r3, r4, #4
 8000ce2:	f020 0007 	bic.w	r0, r0, #7
 8000ce6:	1ac2      	subs	r2, r0, r3
 8000ce8:	d0cc      	beq.n	8000c84 <_malloc_r+0x20>
 8000cea:	1a1b      	subs	r3, r3, r0
 8000cec:	50a3      	str	r3, [r4, r2]
 8000cee:	e7c9      	b.n	8000c84 <_malloc_r+0x20>
 8000cf0:	4622      	mov	r2, r4
 8000cf2:	6864      	ldr	r4, [r4, #4]
 8000cf4:	e7cc      	b.n	8000c90 <_malloc_r+0x2c>
 8000cf6:	1cc4      	adds	r4, r0, #3
 8000cf8:	f024 0403 	bic.w	r4, r4, #3
 8000cfc:	42a0      	cmp	r0, r4
 8000cfe:	d0e3      	beq.n	8000cc8 <_malloc_r+0x64>
 8000d00:	1a21      	subs	r1, r4, r0
 8000d02:	4630      	mov	r0, r6
 8000d04:	f000 faf6 	bl	80012f4 <_sbrk_r>
 8000d08:	3001      	adds	r0, #1
 8000d0a:	d1dd      	bne.n	8000cc8 <_malloc_r+0x64>
 8000d0c:	e7cf      	b.n	8000cae <_malloc_r+0x4a>
 8000d0e:	bf00      	nop
 8000d10:	200000b8 	.word	0x200000b8
 8000d14:	200000bc 	.word	0x200000bc

08000d18 <__sfputc_r>:
 8000d18:	6893      	ldr	r3, [r2, #8]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	b410      	push	{r4}
 8000d20:	6093      	str	r3, [r2, #8]
 8000d22:	da08      	bge.n	8000d36 <__sfputc_r+0x1e>
 8000d24:	6994      	ldr	r4, [r2, #24]
 8000d26:	42a3      	cmp	r3, r4
 8000d28:	db01      	blt.n	8000d2e <__sfputc_r+0x16>
 8000d2a:	290a      	cmp	r1, #10
 8000d2c:	d103      	bne.n	8000d36 <__sfputc_r+0x1e>
 8000d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d32:	f000 bb33 	b.w	800139c <__swbuf_r>
 8000d36:	6813      	ldr	r3, [r2, #0]
 8000d38:	1c58      	adds	r0, r3, #1
 8000d3a:	6010      	str	r0, [r2, #0]
 8000d3c:	7019      	strb	r1, [r3, #0]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <__sfputs_r>:
 8000d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d48:	4606      	mov	r6, r0
 8000d4a:	460f      	mov	r7, r1
 8000d4c:	4614      	mov	r4, r2
 8000d4e:	18d5      	adds	r5, r2, r3
 8000d50:	42ac      	cmp	r4, r5
 8000d52:	d101      	bne.n	8000d58 <__sfputs_r+0x12>
 8000d54:	2000      	movs	r0, #0
 8000d56:	e007      	b.n	8000d68 <__sfputs_r+0x22>
 8000d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d5c:	463a      	mov	r2, r7
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f7ff ffda 	bl	8000d18 <__sfputc_r>
 8000d64:	1c43      	adds	r3, r0, #1
 8000d66:	d1f3      	bne.n	8000d50 <__sfputs_r+0xa>
 8000d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d6c <_vfiprintf_r>:
 8000d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d70:	460d      	mov	r5, r1
 8000d72:	b09d      	sub	sp, #116	; 0x74
 8000d74:	4614      	mov	r4, r2
 8000d76:	4698      	mov	r8, r3
 8000d78:	4606      	mov	r6, r0
 8000d7a:	b118      	cbz	r0, 8000d84 <_vfiprintf_r+0x18>
 8000d7c:	6983      	ldr	r3, [r0, #24]
 8000d7e:	b90b      	cbnz	r3, 8000d84 <_vfiprintf_r+0x18>
 8000d80:	f7ff fed0 	bl	8000b24 <__sinit>
 8000d84:	4b89      	ldr	r3, [pc, #548]	; (8000fac <_vfiprintf_r+0x240>)
 8000d86:	429d      	cmp	r5, r3
 8000d88:	d11b      	bne.n	8000dc2 <_vfiprintf_r+0x56>
 8000d8a:	6875      	ldr	r5, [r6, #4]
 8000d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d8e:	07d9      	lsls	r1, r3, #31
 8000d90:	d405      	bmi.n	8000d9e <_vfiprintf_r+0x32>
 8000d92:	89ab      	ldrh	r3, [r5, #12]
 8000d94:	059a      	lsls	r2, r3, #22
 8000d96:	d402      	bmi.n	8000d9e <_vfiprintf_r+0x32>
 8000d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d9a:	f7ff ff61 	bl	8000c60 <__retarget_lock_acquire_recursive>
 8000d9e:	89ab      	ldrh	r3, [r5, #12]
 8000da0:	071b      	lsls	r3, r3, #28
 8000da2:	d501      	bpl.n	8000da8 <_vfiprintf_r+0x3c>
 8000da4:	692b      	ldr	r3, [r5, #16]
 8000da6:	b9eb      	cbnz	r3, 8000de4 <_vfiprintf_r+0x78>
 8000da8:	4629      	mov	r1, r5
 8000daa:	4630      	mov	r0, r6
 8000dac:	f000 fb5a 	bl	8001464 <__swsetup_r>
 8000db0:	b1c0      	cbz	r0, 8000de4 <_vfiprintf_r+0x78>
 8000db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000db4:	07dc      	lsls	r4, r3, #31
 8000db6:	d50e      	bpl.n	8000dd6 <_vfiprintf_r+0x6a>
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dbc:	b01d      	add	sp, #116	; 0x74
 8000dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dc2:	4b7b      	ldr	r3, [pc, #492]	; (8000fb0 <_vfiprintf_r+0x244>)
 8000dc4:	429d      	cmp	r5, r3
 8000dc6:	d101      	bne.n	8000dcc <_vfiprintf_r+0x60>
 8000dc8:	68b5      	ldr	r5, [r6, #8]
 8000dca:	e7df      	b.n	8000d8c <_vfiprintf_r+0x20>
 8000dcc:	4b79      	ldr	r3, [pc, #484]	; (8000fb4 <_vfiprintf_r+0x248>)
 8000dce:	429d      	cmp	r5, r3
 8000dd0:	bf08      	it	eq
 8000dd2:	68f5      	ldreq	r5, [r6, #12]
 8000dd4:	e7da      	b.n	8000d8c <_vfiprintf_r+0x20>
 8000dd6:	89ab      	ldrh	r3, [r5, #12]
 8000dd8:	0598      	lsls	r0, r3, #22
 8000dda:	d4ed      	bmi.n	8000db8 <_vfiprintf_r+0x4c>
 8000ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000dde:	f7ff ff40 	bl	8000c62 <__retarget_lock_release_recursive>
 8000de2:	e7e9      	b.n	8000db8 <_vfiprintf_r+0x4c>
 8000de4:	2300      	movs	r3, #0
 8000de6:	9309      	str	r3, [sp, #36]	; 0x24
 8000de8:	2320      	movs	r3, #32
 8000dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8000df2:	2330      	movs	r3, #48	; 0x30
 8000df4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000fb8 <_vfiprintf_r+0x24c>
 8000df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dfc:	f04f 0901 	mov.w	r9, #1
 8000e00:	4623      	mov	r3, r4
 8000e02:	469a      	mov	sl, r3
 8000e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e08:	b10a      	cbz	r2, 8000e0e <_vfiprintf_r+0xa2>
 8000e0a:	2a25      	cmp	r2, #37	; 0x25
 8000e0c:	d1f9      	bne.n	8000e02 <_vfiprintf_r+0x96>
 8000e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8000e12:	d00b      	beq.n	8000e2c <_vfiprintf_r+0xc0>
 8000e14:	465b      	mov	r3, fp
 8000e16:	4622      	mov	r2, r4
 8000e18:	4629      	mov	r1, r5
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	f7ff ff93 	bl	8000d46 <__sfputs_r>
 8000e20:	3001      	adds	r0, #1
 8000e22:	f000 80aa 	beq.w	8000f7a <_vfiprintf_r+0x20e>
 8000e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e28:	445a      	add	r2, fp
 8000e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8000e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80a2 	beq.w	8000f7a <_vfiprintf_r+0x20e>
 8000e36:	2300      	movs	r3, #0
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e40:	f10a 0a01 	add.w	sl, sl, #1
 8000e44:	9304      	str	r3, [sp, #16]
 8000e46:	9307      	str	r3, [sp, #28]
 8000e48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e4c:	931a      	str	r3, [sp, #104]	; 0x68
 8000e4e:	4654      	mov	r4, sl
 8000e50:	2205      	movs	r2, #5
 8000e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e56:	4858      	ldr	r0, [pc, #352]	; (8000fb8 <_vfiprintf_r+0x24c>)
 8000e58:	f7ff f9ba 	bl	80001d0 <memchr>
 8000e5c:	9a04      	ldr	r2, [sp, #16]
 8000e5e:	b9d8      	cbnz	r0, 8000e98 <_vfiprintf_r+0x12c>
 8000e60:	06d1      	lsls	r1, r2, #27
 8000e62:	bf44      	itt	mi
 8000e64:	2320      	movmi	r3, #32
 8000e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e6a:	0713      	lsls	r3, r2, #28
 8000e6c:	bf44      	itt	mi
 8000e6e:	232b      	movmi	r3, #43	; 0x2b
 8000e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e74:	f89a 3000 	ldrb.w	r3, [sl]
 8000e78:	2b2a      	cmp	r3, #42	; 0x2a
 8000e7a:	d015      	beq.n	8000ea8 <_vfiprintf_r+0x13c>
 8000e7c:	9a07      	ldr	r2, [sp, #28]
 8000e7e:	4654      	mov	r4, sl
 8000e80:	2000      	movs	r0, #0
 8000e82:	f04f 0c0a 	mov.w	ip, #10
 8000e86:	4621      	mov	r1, r4
 8000e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e8c:	3b30      	subs	r3, #48	; 0x30
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	d94e      	bls.n	8000f30 <_vfiprintf_r+0x1c4>
 8000e92:	b1b0      	cbz	r0, 8000ec2 <_vfiprintf_r+0x156>
 8000e94:	9207      	str	r2, [sp, #28]
 8000e96:	e014      	b.n	8000ec2 <_vfiprintf_r+0x156>
 8000e98:	eba0 0308 	sub.w	r3, r0, r8
 8000e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	9304      	str	r3, [sp, #16]
 8000ea4:	46a2      	mov	sl, r4
 8000ea6:	e7d2      	b.n	8000e4e <_vfiprintf_r+0xe2>
 8000ea8:	9b03      	ldr	r3, [sp, #12]
 8000eaa:	1d19      	adds	r1, r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	9103      	str	r1, [sp, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bfbb      	ittet	lt
 8000eb4:	425b      	neglt	r3, r3
 8000eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8000eba:	9307      	strge	r3, [sp, #28]
 8000ebc:	9307      	strlt	r3, [sp, #28]
 8000ebe:	bfb8      	it	lt
 8000ec0:	9204      	strlt	r2, [sp, #16]
 8000ec2:	7823      	ldrb	r3, [r4, #0]
 8000ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ec6:	d10c      	bne.n	8000ee2 <_vfiprintf_r+0x176>
 8000ec8:	7863      	ldrb	r3, [r4, #1]
 8000eca:	2b2a      	cmp	r3, #42	; 0x2a
 8000ecc:	d135      	bne.n	8000f3a <_vfiprintf_r+0x1ce>
 8000ece:	9b03      	ldr	r3, [sp, #12]
 8000ed0:	1d1a      	adds	r2, r3, #4
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	9203      	str	r2, [sp, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	bfb8      	it	lt
 8000eda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000ede:	3402      	adds	r4, #2
 8000ee0:	9305      	str	r3, [sp, #20]
 8000ee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000fc8 <_vfiprintf_r+0x25c>
 8000ee6:	7821      	ldrb	r1, [r4, #0]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4650      	mov	r0, sl
 8000eec:	f7ff f970 	bl	80001d0 <memchr>
 8000ef0:	b140      	cbz	r0, 8000f04 <_vfiprintf_r+0x198>
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	eba0 000a 	sub.w	r0, r0, sl
 8000ef8:	fa03 f000 	lsl.w	r0, r3, r0
 8000efc:	9b04      	ldr	r3, [sp, #16]
 8000efe:	4303      	orrs	r3, r0
 8000f00:	3401      	adds	r4, #1
 8000f02:	9304      	str	r3, [sp, #16]
 8000f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f08:	482c      	ldr	r0, [pc, #176]	; (8000fbc <_vfiprintf_r+0x250>)
 8000f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f0e:	2206      	movs	r2, #6
 8000f10:	f7ff f95e 	bl	80001d0 <memchr>
 8000f14:	2800      	cmp	r0, #0
 8000f16:	d03f      	beq.n	8000f98 <_vfiprintf_r+0x22c>
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <_vfiprintf_r+0x254>)
 8000f1a:	bb1b      	cbnz	r3, 8000f64 <_vfiprintf_r+0x1f8>
 8000f1c:	9b03      	ldr	r3, [sp, #12]
 8000f1e:	3307      	adds	r3, #7
 8000f20:	f023 0307 	bic.w	r3, r3, #7
 8000f24:	3308      	adds	r3, #8
 8000f26:	9303      	str	r3, [sp, #12]
 8000f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f2a:	443b      	add	r3, r7
 8000f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8000f2e:	e767      	b.n	8000e00 <_vfiprintf_r+0x94>
 8000f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f34:	460c      	mov	r4, r1
 8000f36:	2001      	movs	r0, #1
 8000f38:	e7a5      	b.n	8000e86 <_vfiprintf_r+0x11a>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	3401      	adds	r4, #1
 8000f3e:	9305      	str	r3, [sp, #20]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 0c0a 	mov.w	ip, #10
 8000f46:	4620      	mov	r0, r4
 8000f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f4c:	3a30      	subs	r2, #48	; 0x30
 8000f4e:	2a09      	cmp	r2, #9
 8000f50:	d903      	bls.n	8000f5a <_vfiprintf_r+0x1ee>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0c5      	beq.n	8000ee2 <_vfiprintf_r+0x176>
 8000f56:	9105      	str	r1, [sp, #20]
 8000f58:	e7c3      	b.n	8000ee2 <_vfiprintf_r+0x176>
 8000f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f5e:	4604      	mov	r4, r0
 8000f60:	2301      	movs	r3, #1
 8000f62:	e7f0      	b.n	8000f46 <_vfiprintf_r+0x1da>
 8000f64:	ab03      	add	r3, sp, #12
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	462a      	mov	r2, r5
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <_vfiprintf_r+0x258>)
 8000f6c:	a904      	add	r1, sp, #16
 8000f6e:	4630      	mov	r0, r6
 8000f70:	f3af 8000 	nop.w
 8000f74:	4607      	mov	r7, r0
 8000f76:	1c78      	adds	r0, r7, #1
 8000f78:	d1d6      	bne.n	8000f28 <_vfiprintf_r+0x1bc>
 8000f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f7c:	07d9      	lsls	r1, r3, #31
 8000f7e:	d405      	bmi.n	8000f8c <_vfiprintf_r+0x220>
 8000f80:	89ab      	ldrh	r3, [r5, #12]
 8000f82:	059a      	lsls	r2, r3, #22
 8000f84:	d402      	bmi.n	8000f8c <_vfiprintf_r+0x220>
 8000f86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f88:	f7ff fe6b 	bl	8000c62 <__retarget_lock_release_recursive>
 8000f8c:	89ab      	ldrh	r3, [r5, #12]
 8000f8e:	065b      	lsls	r3, r3, #25
 8000f90:	f53f af12 	bmi.w	8000db8 <_vfiprintf_r+0x4c>
 8000f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f96:	e711      	b.n	8000dbc <_vfiprintf_r+0x50>
 8000f98:	ab03      	add	r3, sp, #12
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	462a      	mov	r2, r5
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <_vfiprintf_r+0x258>)
 8000fa0:	a904      	add	r1, sp, #16
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	f000 f880 	bl	80010a8 <_printf_i>
 8000fa8:	e7e4      	b.n	8000f74 <_vfiprintf_r+0x208>
 8000faa:	bf00      	nop
 8000fac:	080019d4 	.word	0x080019d4
 8000fb0:	080019f4 	.word	0x080019f4
 8000fb4:	080019b4 	.word	0x080019b4
 8000fb8:	08001a14 	.word	0x08001a14
 8000fbc:	08001a1e 	.word	0x08001a1e
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	08000d47 	.word	0x08000d47
 8000fc8:	08001a1a 	.word	0x08001a1a

08000fcc <_printf_common>:
 8000fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd0:	4616      	mov	r6, r2
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	688a      	ldr	r2, [r1, #8]
 8000fd6:	690b      	ldr	r3, [r1, #16]
 8000fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	bfb8      	it	lt
 8000fe0:	4613      	movlt	r3, r2
 8000fe2:	6033      	str	r3, [r6, #0]
 8000fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fe8:	4607      	mov	r7, r0
 8000fea:	460c      	mov	r4, r1
 8000fec:	b10a      	cbz	r2, 8000ff2 <_printf_common+0x26>
 8000fee:	3301      	adds	r3, #1
 8000ff0:	6033      	str	r3, [r6, #0]
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	0699      	lsls	r1, r3, #26
 8000ff6:	bf42      	ittt	mi
 8000ff8:	6833      	ldrmi	r3, [r6, #0]
 8000ffa:	3302      	addmi	r3, #2
 8000ffc:	6033      	strmi	r3, [r6, #0]
 8000ffe:	6825      	ldr	r5, [r4, #0]
 8001000:	f015 0506 	ands.w	r5, r5, #6
 8001004:	d106      	bne.n	8001014 <_printf_common+0x48>
 8001006:	f104 0a19 	add.w	sl, r4, #25
 800100a:	68e3      	ldr	r3, [r4, #12]
 800100c:	6832      	ldr	r2, [r6, #0]
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	42ab      	cmp	r3, r5
 8001012:	dc26      	bgt.n	8001062 <_printf_common+0x96>
 8001014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001018:	1e13      	subs	r3, r2, #0
 800101a:	6822      	ldr	r2, [r4, #0]
 800101c:	bf18      	it	ne
 800101e:	2301      	movne	r3, #1
 8001020:	0692      	lsls	r2, r2, #26
 8001022:	d42b      	bmi.n	800107c <_printf_common+0xb0>
 8001024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001028:	4649      	mov	r1, r9
 800102a:	4638      	mov	r0, r7
 800102c:	47c0      	blx	r8
 800102e:	3001      	adds	r0, #1
 8001030:	d01e      	beq.n	8001070 <_printf_common+0xa4>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	68e5      	ldr	r5, [r4, #12]
 8001036:	6832      	ldr	r2, [r6, #0]
 8001038:	f003 0306 	and.w	r3, r3, #6
 800103c:	2b04      	cmp	r3, #4
 800103e:	bf08      	it	eq
 8001040:	1aad      	subeq	r5, r5, r2
 8001042:	68a3      	ldr	r3, [r4, #8]
 8001044:	6922      	ldr	r2, [r4, #16]
 8001046:	bf0c      	ite	eq
 8001048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800104c:	2500      	movne	r5, #0
 800104e:	4293      	cmp	r3, r2
 8001050:	bfc4      	itt	gt
 8001052:	1a9b      	subgt	r3, r3, r2
 8001054:	18ed      	addgt	r5, r5, r3
 8001056:	2600      	movs	r6, #0
 8001058:	341a      	adds	r4, #26
 800105a:	42b5      	cmp	r5, r6
 800105c:	d11a      	bne.n	8001094 <_printf_common+0xc8>
 800105e:	2000      	movs	r0, #0
 8001060:	e008      	b.n	8001074 <_printf_common+0xa8>
 8001062:	2301      	movs	r3, #1
 8001064:	4652      	mov	r2, sl
 8001066:	4649      	mov	r1, r9
 8001068:	4638      	mov	r0, r7
 800106a:	47c0      	blx	r8
 800106c:	3001      	adds	r0, #1
 800106e:	d103      	bne.n	8001078 <_printf_common+0xac>
 8001070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001078:	3501      	adds	r5, #1
 800107a:	e7c6      	b.n	800100a <_printf_common+0x3e>
 800107c:	18e1      	adds	r1, r4, r3
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	2030      	movs	r0, #48	; 0x30
 8001082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001086:	4422      	add	r2, r4
 8001088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800108c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001090:	3302      	adds	r3, #2
 8001092:	e7c7      	b.n	8001024 <_printf_common+0x58>
 8001094:	2301      	movs	r3, #1
 8001096:	4622      	mov	r2, r4
 8001098:	4649      	mov	r1, r9
 800109a:	4638      	mov	r0, r7
 800109c:	47c0      	blx	r8
 800109e:	3001      	adds	r0, #1
 80010a0:	d0e6      	beq.n	8001070 <_printf_common+0xa4>
 80010a2:	3601      	adds	r6, #1
 80010a4:	e7d9      	b.n	800105a <_printf_common+0x8e>
	...

080010a8 <_printf_i>:
 80010a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010ac:	460c      	mov	r4, r1
 80010ae:	4691      	mov	r9, r2
 80010b0:	7e27      	ldrb	r7, [r4, #24]
 80010b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80010b4:	2f78      	cmp	r7, #120	; 0x78
 80010b6:	4680      	mov	r8, r0
 80010b8:	469a      	mov	sl, r3
 80010ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010be:	d807      	bhi.n	80010d0 <_printf_i+0x28>
 80010c0:	2f62      	cmp	r7, #98	; 0x62
 80010c2:	d80a      	bhi.n	80010da <_printf_i+0x32>
 80010c4:	2f00      	cmp	r7, #0
 80010c6:	f000 80d8 	beq.w	800127a <_printf_i+0x1d2>
 80010ca:	2f58      	cmp	r7, #88	; 0x58
 80010cc:	f000 80a3 	beq.w	8001216 <_printf_i+0x16e>
 80010d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80010d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010d8:	e03a      	b.n	8001150 <_printf_i+0xa8>
 80010da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010de:	2b15      	cmp	r3, #21
 80010e0:	d8f6      	bhi.n	80010d0 <_printf_i+0x28>
 80010e2:	a001      	add	r0, pc, #4	; (adr r0, 80010e8 <_printf_i+0x40>)
 80010e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80010e8:	08001141 	.word	0x08001141
 80010ec:	08001155 	.word	0x08001155
 80010f0:	080010d1 	.word	0x080010d1
 80010f4:	080010d1 	.word	0x080010d1
 80010f8:	080010d1 	.word	0x080010d1
 80010fc:	080010d1 	.word	0x080010d1
 8001100:	08001155 	.word	0x08001155
 8001104:	080010d1 	.word	0x080010d1
 8001108:	080010d1 	.word	0x080010d1
 800110c:	080010d1 	.word	0x080010d1
 8001110:	080010d1 	.word	0x080010d1
 8001114:	08001261 	.word	0x08001261
 8001118:	08001185 	.word	0x08001185
 800111c:	08001243 	.word	0x08001243
 8001120:	080010d1 	.word	0x080010d1
 8001124:	080010d1 	.word	0x080010d1
 8001128:	08001283 	.word	0x08001283
 800112c:	080010d1 	.word	0x080010d1
 8001130:	08001185 	.word	0x08001185
 8001134:	080010d1 	.word	0x080010d1
 8001138:	080010d1 	.word	0x080010d1
 800113c:	0800124b 	.word	0x0800124b
 8001140:	680b      	ldr	r3, [r1, #0]
 8001142:	1d1a      	adds	r2, r3, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	600a      	str	r2, [r1, #0]
 8001148:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800114c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001150:	2301      	movs	r3, #1
 8001152:	e0a3      	b.n	800129c <_printf_i+0x1f4>
 8001154:	6825      	ldr	r5, [r4, #0]
 8001156:	6808      	ldr	r0, [r1, #0]
 8001158:	062e      	lsls	r6, r5, #24
 800115a:	f100 0304 	add.w	r3, r0, #4
 800115e:	d50a      	bpl.n	8001176 <_printf_i+0xce>
 8001160:	6805      	ldr	r5, [r0, #0]
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	2d00      	cmp	r5, #0
 8001166:	da03      	bge.n	8001170 <_printf_i+0xc8>
 8001168:	232d      	movs	r3, #45	; 0x2d
 800116a:	426d      	negs	r5, r5
 800116c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001170:	485e      	ldr	r0, [pc, #376]	; (80012ec <_printf_i+0x244>)
 8001172:	230a      	movs	r3, #10
 8001174:	e019      	b.n	80011aa <_printf_i+0x102>
 8001176:	f015 0f40 	tst.w	r5, #64	; 0x40
 800117a:	6805      	ldr	r5, [r0, #0]
 800117c:	600b      	str	r3, [r1, #0]
 800117e:	bf18      	it	ne
 8001180:	b22d      	sxthne	r5, r5
 8001182:	e7ef      	b.n	8001164 <_printf_i+0xbc>
 8001184:	680b      	ldr	r3, [r1, #0]
 8001186:	6825      	ldr	r5, [r4, #0]
 8001188:	1d18      	adds	r0, r3, #4
 800118a:	6008      	str	r0, [r1, #0]
 800118c:	0628      	lsls	r0, r5, #24
 800118e:	d501      	bpl.n	8001194 <_printf_i+0xec>
 8001190:	681d      	ldr	r5, [r3, #0]
 8001192:	e002      	b.n	800119a <_printf_i+0xf2>
 8001194:	0669      	lsls	r1, r5, #25
 8001196:	d5fb      	bpl.n	8001190 <_printf_i+0xe8>
 8001198:	881d      	ldrh	r5, [r3, #0]
 800119a:	4854      	ldr	r0, [pc, #336]	; (80012ec <_printf_i+0x244>)
 800119c:	2f6f      	cmp	r7, #111	; 0x6f
 800119e:	bf0c      	ite	eq
 80011a0:	2308      	moveq	r3, #8
 80011a2:	230a      	movne	r3, #10
 80011a4:	2100      	movs	r1, #0
 80011a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80011aa:	6866      	ldr	r6, [r4, #4]
 80011ac:	60a6      	str	r6, [r4, #8]
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	bfa2      	ittt	ge
 80011b2:	6821      	ldrge	r1, [r4, #0]
 80011b4:	f021 0104 	bicge.w	r1, r1, #4
 80011b8:	6021      	strge	r1, [r4, #0]
 80011ba:	b90d      	cbnz	r5, 80011c0 <_printf_i+0x118>
 80011bc:	2e00      	cmp	r6, #0
 80011be:	d04d      	beq.n	800125c <_printf_i+0x1b4>
 80011c0:	4616      	mov	r6, r2
 80011c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80011c6:	fb03 5711 	mls	r7, r3, r1, r5
 80011ca:	5dc7      	ldrb	r7, [r0, r7]
 80011cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80011d0:	462f      	mov	r7, r5
 80011d2:	42bb      	cmp	r3, r7
 80011d4:	460d      	mov	r5, r1
 80011d6:	d9f4      	bls.n	80011c2 <_printf_i+0x11a>
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d10b      	bne.n	80011f4 <_printf_i+0x14c>
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	07df      	lsls	r7, r3, #31
 80011e0:	d508      	bpl.n	80011f4 <_printf_i+0x14c>
 80011e2:	6923      	ldr	r3, [r4, #16]
 80011e4:	6861      	ldr	r1, [r4, #4]
 80011e6:	4299      	cmp	r1, r3
 80011e8:	bfde      	ittt	le
 80011ea:	2330      	movle	r3, #48	; 0x30
 80011ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80011f0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80011f4:	1b92      	subs	r2, r2, r6
 80011f6:	6122      	str	r2, [r4, #16]
 80011f8:	f8cd a000 	str.w	sl, [sp]
 80011fc:	464b      	mov	r3, r9
 80011fe:	aa03      	add	r2, sp, #12
 8001200:	4621      	mov	r1, r4
 8001202:	4640      	mov	r0, r8
 8001204:	f7ff fee2 	bl	8000fcc <_printf_common>
 8001208:	3001      	adds	r0, #1
 800120a:	d14c      	bne.n	80012a6 <_printf_i+0x1fe>
 800120c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001210:	b004      	add	sp, #16
 8001212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001216:	4835      	ldr	r0, [pc, #212]	; (80012ec <_printf_i+0x244>)
 8001218:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	680e      	ldr	r6, [r1, #0]
 8001220:	061f      	lsls	r7, r3, #24
 8001222:	f856 5b04 	ldr.w	r5, [r6], #4
 8001226:	600e      	str	r6, [r1, #0]
 8001228:	d514      	bpl.n	8001254 <_printf_i+0x1ac>
 800122a:	07d9      	lsls	r1, r3, #31
 800122c:	bf44      	itt	mi
 800122e:	f043 0320 	orrmi.w	r3, r3, #32
 8001232:	6023      	strmi	r3, [r4, #0]
 8001234:	b91d      	cbnz	r5, 800123e <_printf_i+0x196>
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	f023 0320 	bic.w	r3, r3, #32
 800123c:	6023      	str	r3, [r4, #0]
 800123e:	2310      	movs	r3, #16
 8001240:	e7b0      	b.n	80011a4 <_printf_i+0xfc>
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6023      	str	r3, [r4, #0]
 800124a:	2378      	movs	r3, #120	; 0x78
 800124c:	4828      	ldr	r0, [pc, #160]	; (80012f0 <_printf_i+0x248>)
 800124e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001252:	e7e3      	b.n	800121c <_printf_i+0x174>
 8001254:	065e      	lsls	r6, r3, #25
 8001256:	bf48      	it	mi
 8001258:	b2ad      	uxthmi	r5, r5
 800125a:	e7e6      	b.n	800122a <_printf_i+0x182>
 800125c:	4616      	mov	r6, r2
 800125e:	e7bb      	b.n	80011d8 <_printf_i+0x130>
 8001260:	680b      	ldr	r3, [r1, #0]
 8001262:	6826      	ldr	r6, [r4, #0]
 8001264:	6960      	ldr	r0, [r4, #20]
 8001266:	1d1d      	adds	r5, r3, #4
 8001268:	600d      	str	r5, [r1, #0]
 800126a:	0635      	lsls	r5, r6, #24
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	d501      	bpl.n	8001274 <_printf_i+0x1cc>
 8001270:	6018      	str	r0, [r3, #0]
 8001272:	e002      	b.n	800127a <_printf_i+0x1d2>
 8001274:	0671      	lsls	r1, r6, #25
 8001276:	d5fb      	bpl.n	8001270 <_printf_i+0x1c8>
 8001278:	8018      	strh	r0, [r3, #0]
 800127a:	2300      	movs	r3, #0
 800127c:	6123      	str	r3, [r4, #16]
 800127e:	4616      	mov	r6, r2
 8001280:	e7ba      	b.n	80011f8 <_printf_i+0x150>
 8001282:	680b      	ldr	r3, [r1, #0]
 8001284:	1d1a      	adds	r2, r3, #4
 8001286:	600a      	str	r2, [r1, #0]
 8001288:	681e      	ldr	r6, [r3, #0]
 800128a:	6862      	ldr	r2, [r4, #4]
 800128c:	2100      	movs	r1, #0
 800128e:	4630      	mov	r0, r6
 8001290:	f7fe ff9e 	bl	80001d0 <memchr>
 8001294:	b108      	cbz	r0, 800129a <_printf_i+0x1f2>
 8001296:	1b80      	subs	r0, r0, r6
 8001298:	6060      	str	r0, [r4, #4]
 800129a:	6863      	ldr	r3, [r4, #4]
 800129c:	6123      	str	r3, [r4, #16]
 800129e:	2300      	movs	r3, #0
 80012a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012a4:	e7a8      	b.n	80011f8 <_printf_i+0x150>
 80012a6:	6923      	ldr	r3, [r4, #16]
 80012a8:	4632      	mov	r2, r6
 80012aa:	4649      	mov	r1, r9
 80012ac:	4640      	mov	r0, r8
 80012ae:	47d0      	blx	sl
 80012b0:	3001      	adds	r0, #1
 80012b2:	d0ab      	beq.n	800120c <_printf_i+0x164>
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	079b      	lsls	r3, r3, #30
 80012b8:	d413      	bmi.n	80012e2 <_printf_i+0x23a>
 80012ba:	68e0      	ldr	r0, [r4, #12]
 80012bc:	9b03      	ldr	r3, [sp, #12]
 80012be:	4298      	cmp	r0, r3
 80012c0:	bfb8      	it	lt
 80012c2:	4618      	movlt	r0, r3
 80012c4:	e7a4      	b.n	8001210 <_printf_i+0x168>
 80012c6:	2301      	movs	r3, #1
 80012c8:	4632      	mov	r2, r6
 80012ca:	4649      	mov	r1, r9
 80012cc:	4640      	mov	r0, r8
 80012ce:	47d0      	blx	sl
 80012d0:	3001      	adds	r0, #1
 80012d2:	d09b      	beq.n	800120c <_printf_i+0x164>
 80012d4:	3501      	adds	r5, #1
 80012d6:	68e3      	ldr	r3, [r4, #12]
 80012d8:	9903      	ldr	r1, [sp, #12]
 80012da:	1a5b      	subs	r3, r3, r1
 80012dc:	42ab      	cmp	r3, r5
 80012de:	dcf2      	bgt.n	80012c6 <_printf_i+0x21e>
 80012e0:	e7eb      	b.n	80012ba <_printf_i+0x212>
 80012e2:	2500      	movs	r5, #0
 80012e4:	f104 0619 	add.w	r6, r4, #25
 80012e8:	e7f5      	b.n	80012d6 <_printf_i+0x22e>
 80012ea:	bf00      	nop
 80012ec:	08001a25 	.word	0x08001a25
 80012f0:	08001a36 	.word	0x08001a36

080012f4 <_sbrk_r>:
 80012f4:	b538      	push	{r3, r4, r5, lr}
 80012f6:	4d06      	ldr	r5, [pc, #24]	; (8001310 <_sbrk_r+0x1c>)
 80012f8:	2300      	movs	r3, #0
 80012fa:	4604      	mov	r4, r0
 80012fc:	4608      	mov	r0, r1
 80012fe:	602b      	str	r3, [r5, #0]
 8001300:	f7ff f980 	bl	8000604 <_sbrk>
 8001304:	1c43      	adds	r3, r0, #1
 8001306:	d102      	bne.n	800130e <_sbrk_r+0x1a>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	b103      	cbz	r3, 800130e <_sbrk_r+0x1a>
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	bd38      	pop	{r3, r4, r5, pc}
 8001310:	200000ec 	.word	0x200000ec

08001314 <__sread>:
 8001314:	b510      	push	{r4, lr}
 8001316:	460c      	mov	r4, r1
 8001318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800131c:	f000 fab4 	bl	8001888 <_read_r>
 8001320:	2800      	cmp	r0, #0
 8001322:	bfab      	itete	ge
 8001324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001326:	89a3      	ldrhlt	r3, [r4, #12]
 8001328:	181b      	addge	r3, r3, r0
 800132a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800132e:	bfac      	ite	ge
 8001330:	6563      	strge	r3, [r4, #84]	; 0x54
 8001332:	81a3      	strhlt	r3, [r4, #12]
 8001334:	bd10      	pop	{r4, pc}

08001336 <__swrite>:
 8001336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800133a:	461f      	mov	r7, r3
 800133c:	898b      	ldrh	r3, [r1, #12]
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	4605      	mov	r5, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4616      	mov	r6, r2
 8001346:	d505      	bpl.n	8001354 <__swrite+0x1e>
 8001348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800134c:	2302      	movs	r3, #2
 800134e:	2200      	movs	r2, #0
 8001350:	f000 f9c8 	bl	80016e4 <_lseek_r>
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800135a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800135e:	81a3      	strh	r3, [r4, #12]
 8001360:	4632      	mov	r2, r6
 8001362:	463b      	mov	r3, r7
 8001364:	4628      	mov	r0, r5
 8001366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800136a:	f000 b869 	b.w	8001440 <_write_r>

0800136e <__sseek>:
 800136e:	b510      	push	{r4, lr}
 8001370:	460c      	mov	r4, r1
 8001372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001376:	f000 f9b5 	bl	80016e4 <_lseek_r>
 800137a:	1c43      	adds	r3, r0, #1
 800137c:	89a3      	ldrh	r3, [r4, #12]
 800137e:	bf15      	itete	ne
 8001380:	6560      	strne	r0, [r4, #84]	; 0x54
 8001382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800138a:	81a3      	strheq	r3, [r4, #12]
 800138c:	bf18      	it	ne
 800138e:	81a3      	strhne	r3, [r4, #12]
 8001390:	bd10      	pop	{r4, pc}

08001392 <__sclose>:
 8001392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001396:	f000 b8d3 	b.w	8001540 <_close_r>
	...

0800139c <__swbuf_r>:
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	460e      	mov	r6, r1
 80013a0:	4614      	mov	r4, r2
 80013a2:	4605      	mov	r5, r0
 80013a4:	b118      	cbz	r0, 80013ae <__swbuf_r+0x12>
 80013a6:	6983      	ldr	r3, [r0, #24]
 80013a8:	b90b      	cbnz	r3, 80013ae <__swbuf_r+0x12>
 80013aa:	f7ff fbbb 	bl	8000b24 <__sinit>
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <__swbuf_r+0x98>)
 80013b0:	429c      	cmp	r4, r3
 80013b2:	d12b      	bne.n	800140c <__swbuf_r+0x70>
 80013b4:	686c      	ldr	r4, [r5, #4]
 80013b6:	69a3      	ldr	r3, [r4, #24]
 80013b8:	60a3      	str	r3, [r4, #8]
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	071a      	lsls	r2, r3, #28
 80013be:	d52f      	bpl.n	8001420 <__swbuf_r+0x84>
 80013c0:	6923      	ldr	r3, [r4, #16]
 80013c2:	b36b      	cbz	r3, 8001420 <__swbuf_r+0x84>
 80013c4:	6923      	ldr	r3, [r4, #16]
 80013c6:	6820      	ldr	r0, [r4, #0]
 80013c8:	1ac0      	subs	r0, r0, r3
 80013ca:	6963      	ldr	r3, [r4, #20]
 80013cc:	b2f6      	uxtb	r6, r6
 80013ce:	4283      	cmp	r3, r0
 80013d0:	4637      	mov	r7, r6
 80013d2:	dc04      	bgt.n	80013de <__swbuf_r+0x42>
 80013d4:	4621      	mov	r1, r4
 80013d6:	4628      	mov	r0, r5
 80013d8:	f000 f948 	bl	800166c <_fflush_r>
 80013dc:	bb30      	cbnz	r0, 800142c <__swbuf_r+0x90>
 80013de:	68a3      	ldr	r3, [r4, #8]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	60a3      	str	r3, [r4, #8]
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	6022      	str	r2, [r4, #0]
 80013ea:	701e      	strb	r6, [r3, #0]
 80013ec:	6963      	ldr	r3, [r4, #20]
 80013ee:	3001      	adds	r0, #1
 80013f0:	4283      	cmp	r3, r0
 80013f2:	d004      	beq.n	80013fe <__swbuf_r+0x62>
 80013f4:	89a3      	ldrh	r3, [r4, #12]
 80013f6:	07db      	lsls	r3, r3, #31
 80013f8:	d506      	bpl.n	8001408 <__swbuf_r+0x6c>
 80013fa:	2e0a      	cmp	r6, #10
 80013fc:	d104      	bne.n	8001408 <__swbuf_r+0x6c>
 80013fe:	4621      	mov	r1, r4
 8001400:	4628      	mov	r0, r5
 8001402:	f000 f933 	bl	800166c <_fflush_r>
 8001406:	b988      	cbnz	r0, 800142c <__swbuf_r+0x90>
 8001408:	4638      	mov	r0, r7
 800140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <__swbuf_r+0x9c>)
 800140e:	429c      	cmp	r4, r3
 8001410:	d101      	bne.n	8001416 <__swbuf_r+0x7a>
 8001412:	68ac      	ldr	r4, [r5, #8]
 8001414:	e7cf      	b.n	80013b6 <__swbuf_r+0x1a>
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <__swbuf_r+0xa0>)
 8001418:	429c      	cmp	r4, r3
 800141a:	bf08      	it	eq
 800141c:	68ec      	ldreq	r4, [r5, #12]
 800141e:	e7ca      	b.n	80013b6 <__swbuf_r+0x1a>
 8001420:	4621      	mov	r1, r4
 8001422:	4628      	mov	r0, r5
 8001424:	f000 f81e 	bl	8001464 <__swsetup_r>
 8001428:	2800      	cmp	r0, #0
 800142a:	d0cb      	beq.n	80013c4 <__swbuf_r+0x28>
 800142c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001430:	e7ea      	b.n	8001408 <__swbuf_r+0x6c>
 8001432:	bf00      	nop
 8001434:	080019d4 	.word	0x080019d4
 8001438:	080019f4 	.word	0x080019f4
 800143c:	080019b4 	.word	0x080019b4

08001440 <_write_r>:
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4d07      	ldr	r5, [pc, #28]	; (8001460 <_write_r+0x20>)
 8001444:	4604      	mov	r4, r0
 8001446:	4608      	mov	r0, r1
 8001448:	4611      	mov	r1, r2
 800144a:	2200      	movs	r2, #0
 800144c:	602a      	str	r2, [r5, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	f7ff f887 	bl	8000562 <_write>
 8001454:	1c43      	adds	r3, r0, #1
 8001456:	d102      	bne.n	800145e <_write_r+0x1e>
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	b103      	cbz	r3, 800145e <_write_r+0x1e>
 800145c:	6023      	str	r3, [r4, #0]
 800145e:	bd38      	pop	{r3, r4, r5, pc}
 8001460:	200000ec 	.word	0x200000ec

08001464 <__swsetup_r>:
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <__swsetup_r+0xcc>)
 8001466:	b570      	push	{r4, r5, r6, lr}
 8001468:	681d      	ldr	r5, [r3, #0]
 800146a:	4606      	mov	r6, r0
 800146c:	460c      	mov	r4, r1
 800146e:	b125      	cbz	r5, 800147a <__swsetup_r+0x16>
 8001470:	69ab      	ldr	r3, [r5, #24]
 8001472:	b913      	cbnz	r3, 800147a <__swsetup_r+0x16>
 8001474:	4628      	mov	r0, r5
 8001476:	f7ff fb55 	bl	8000b24 <__sinit>
 800147a:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <__swsetup_r+0xd0>)
 800147c:	429c      	cmp	r4, r3
 800147e:	d10f      	bne.n	80014a0 <__swsetup_r+0x3c>
 8001480:	686c      	ldr	r4, [r5, #4]
 8001482:	89a3      	ldrh	r3, [r4, #12]
 8001484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001488:	0719      	lsls	r1, r3, #28
 800148a:	d42c      	bmi.n	80014e6 <__swsetup_r+0x82>
 800148c:	06dd      	lsls	r5, r3, #27
 800148e:	d411      	bmi.n	80014b4 <__swsetup_r+0x50>
 8001490:	2309      	movs	r3, #9
 8001492:	6033      	str	r3, [r6, #0]
 8001494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001498:	81a3      	strh	r3, [r4, #12]
 800149a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800149e:	e03e      	b.n	800151e <__swsetup_r+0xba>
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <__swsetup_r+0xd4>)
 80014a2:	429c      	cmp	r4, r3
 80014a4:	d101      	bne.n	80014aa <__swsetup_r+0x46>
 80014a6:	68ac      	ldr	r4, [r5, #8]
 80014a8:	e7eb      	b.n	8001482 <__swsetup_r+0x1e>
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <__swsetup_r+0xd8>)
 80014ac:	429c      	cmp	r4, r3
 80014ae:	bf08      	it	eq
 80014b0:	68ec      	ldreq	r4, [r5, #12]
 80014b2:	e7e6      	b.n	8001482 <__swsetup_r+0x1e>
 80014b4:	0758      	lsls	r0, r3, #29
 80014b6:	d512      	bpl.n	80014de <__swsetup_r+0x7a>
 80014b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014ba:	b141      	cbz	r1, 80014ce <__swsetup_r+0x6a>
 80014bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014c0:	4299      	cmp	r1, r3
 80014c2:	d002      	beq.n	80014ca <__swsetup_r+0x66>
 80014c4:	4630      	mov	r0, r6
 80014c6:	f000 f98f 	bl	80017e8 <_free_r>
 80014ca:	2300      	movs	r3, #0
 80014cc:	6363      	str	r3, [r4, #52]	; 0x34
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014d4:	81a3      	strh	r3, [r4, #12]
 80014d6:	2300      	movs	r3, #0
 80014d8:	6063      	str	r3, [r4, #4]
 80014da:	6923      	ldr	r3, [r4, #16]
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	81a3      	strh	r3, [r4, #12]
 80014e6:	6923      	ldr	r3, [r4, #16]
 80014e8:	b94b      	cbnz	r3, 80014fe <__swsetup_r+0x9a>
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f4:	d003      	beq.n	80014fe <__swsetup_r+0x9a>
 80014f6:	4621      	mov	r1, r4
 80014f8:	4630      	mov	r0, r6
 80014fa:	f000 f929 	bl	8001750 <__smakebuf_r>
 80014fe:	89a0      	ldrh	r0, [r4, #12]
 8001500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001504:	f010 0301 	ands.w	r3, r0, #1
 8001508:	d00a      	beq.n	8001520 <__swsetup_r+0xbc>
 800150a:	2300      	movs	r3, #0
 800150c:	60a3      	str	r3, [r4, #8]
 800150e:	6963      	ldr	r3, [r4, #20]
 8001510:	425b      	negs	r3, r3
 8001512:	61a3      	str	r3, [r4, #24]
 8001514:	6923      	ldr	r3, [r4, #16]
 8001516:	b943      	cbnz	r3, 800152a <__swsetup_r+0xc6>
 8001518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800151c:	d1ba      	bne.n	8001494 <__swsetup_r+0x30>
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	0781      	lsls	r1, r0, #30
 8001522:	bf58      	it	pl
 8001524:	6963      	ldrpl	r3, [r4, #20]
 8001526:	60a3      	str	r3, [r4, #8]
 8001528:	e7f4      	b.n	8001514 <__swsetup_r+0xb0>
 800152a:	2000      	movs	r0, #0
 800152c:	e7f7      	b.n	800151e <__swsetup_r+0xba>
 800152e:	bf00      	nop
 8001530:	20000024 	.word	0x20000024
 8001534:	080019d4 	.word	0x080019d4
 8001538:	080019f4 	.word	0x080019f4
 800153c:	080019b4 	.word	0x080019b4

08001540 <_close_r>:
 8001540:	b538      	push	{r3, r4, r5, lr}
 8001542:	4d06      	ldr	r5, [pc, #24]	; (800155c <_close_r+0x1c>)
 8001544:	2300      	movs	r3, #0
 8001546:	4604      	mov	r4, r0
 8001548:	4608      	mov	r0, r1
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f7ff f825 	bl	800059a <_close>
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	d102      	bne.n	800155a <_close_r+0x1a>
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	b103      	cbz	r3, 800155a <_close_r+0x1a>
 8001558:	6023      	str	r3, [r4, #0]
 800155a:	bd38      	pop	{r3, r4, r5, pc}
 800155c:	200000ec 	.word	0x200000ec

08001560 <__sflush_r>:
 8001560:	898a      	ldrh	r2, [r1, #12]
 8001562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001566:	4605      	mov	r5, r0
 8001568:	0710      	lsls	r0, r2, #28
 800156a:	460c      	mov	r4, r1
 800156c:	d458      	bmi.n	8001620 <__sflush_r+0xc0>
 800156e:	684b      	ldr	r3, [r1, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dc05      	bgt.n	8001580 <__sflush_r+0x20>
 8001574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001576:	2b00      	cmp	r3, #0
 8001578:	dc02      	bgt.n	8001580 <__sflush_r+0x20>
 800157a:	2000      	movs	r0, #0
 800157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001582:	2e00      	cmp	r6, #0
 8001584:	d0f9      	beq.n	800157a <__sflush_r+0x1a>
 8001586:	2300      	movs	r3, #0
 8001588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800158c:	682f      	ldr	r7, [r5, #0]
 800158e:	602b      	str	r3, [r5, #0]
 8001590:	d032      	beq.n	80015f8 <__sflush_r+0x98>
 8001592:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	075a      	lsls	r2, r3, #29
 8001598:	d505      	bpl.n	80015a6 <__sflush_r+0x46>
 800159a:	6863      	ldr	r3, [r4, #4]
 800159c:	1ac0      	subs	r0, r0, r3
 800159e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015a0:	b10b      	cbz	r3, 80015a6 <__sflush_r+0x46>
 80015a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a4:	1ac0      	subs	r0, r0, r3
 80015a6:	2300      	movs	r3, #0
 80015a8:	4602      	mov	r2, r0
 80015aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ac:	6a21      	ldr	r1, [r4, #32]
 80015ae:	4628      	mov	r0, r5
 80015b0:	47b0      	blx	r6
 80015b2:	1c43      	adds	r3, r0, #1
 80015b4:	89a3      	ldrh	r3, [r4, #12]
 80015b6:	d106      	bne.n	80015c6 <__sflush_r+0x66>
 80015b8:	6829      	ldr	r1, [r5, #0]
 80015ba:	291d      	cmp	r1, #29
 80015bc:	d82c      	bhi.n	8001618 <__sflush_r+0xb8>
 80015be:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <__sflush_r+0x108>)
 80015c0:	40ca      	lsrs	r2, r1
 80015c2:	07d6      	lsls	r6, r2, #31
 80015c4:	d528      	bpl.n	8001618 <__sflush_r+0xb8>
 80015c6:	2200      	movs	r2, #0
 80015c8:	6062      	str	r2, [r4, #4]
 80015ca:	04d9      	lsls	r1, r3, #19
 80015cc:	6922      	ldr	r2, [r4, #16]
 80015ce:	6022      	str	r2, [r4, #0]
 80015d0:	d504      	bpl.n	80015dc <__sflush_r+0x7c>
 80015d2:	1c42      	adds	r2, r0, #1
 80015d4:	d101      	bne.n	80015da <__sflush_r+0x7a>
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	b903      	cbnz	r3, 80015dc <__sflush_r+0x7c>
 80015da:	6560      	str	r0, [r4, #84]	; 0x54
 80015dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015de:	602f      	str	r7, [r5, #0]
 80015e0:	2900      	cmp	r1, #0
 80015e2:	d0ca      	beq.n	800157a <__sflush_r+0x1a>
 80015e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015e8:	4299      	cmp	r1, r3
 80015ea:	d002      	beq.n	80015f2 <__sflush_r+0x92>
 80015ec:	4628      	mov	r0, r5
 80015ee:	f000 f8fb 	bl	80017e8 <_free_r>
 80015f2:	2000      	movs	r0, #0
 80015f4:	6360      	str	r0, [r4, #52]	; 0x34
 80015f6:	e7c1      	b.n	800157c <__sflush_r+0x1c>
 80015f8:	6a21      	ldr	r1, [r4, #32]
 80015fa:	2301      	movs	r3, #1
 80015fc:	4628      	mov	r0, r5
 80015fe:	47b0      	blx	r6
 8001600:	1c41      	adds	r1, r0, #1
 8001602:	d1c7      	bne.n	8001594 <__sflush_r+0x34>
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0c4      	beq.n	8001594 <__sflush_r+0x34>
 800160a:	2b1d      	cmp	r3, #29
 800160c:	d001      	beq.n	8001612 <__sflush_r+0xb2>
 800160e:	2b16      	cmp	r3, #22
 8001610:	d101      	bne.n	8001616 <__sflush_r+0xb6>
 8001612:	602f      	str	r7, [r5, #0]
 8001614:	e7b1      	b.n	800157a <__sflush_r+0x1a>
 8001616:	89a3      	ldrh	r3, [r4, #12]
 8001618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800161c:	81a3      	strh	r3, [r4, #12]
 800161e:	e7ad      	b.n	800157c <__sflush_r+0x1c>
 8001620:	690f      	ldr	r7, [r1, #16]
 8001622:	2f00      	cmp	r7, #0
 8001624:	d0a9      	beq.n	800157a <__sflush_r+0x1a>
 8001626:	0793      	lsls	r3, r2, #30
 8001628:	680e      	ldr	r6, [r1, #0]
 800162a:	bf08      	it	eq
 800162c:	694b      	ldreq	r3, [r1, #20]
 800162e:	600f      	str	r7, [r1, #0]
 8001630:	bf18      	it	ne
 8001632:	2300      	movne	r3, #0
 8001634:	eba6 0807 	sub.w	r8, r6, r7
 8001638:	608b      	str	r3, [r1, #8]
 800163a:	f1b8 0f00 	cmp.w	r8, #0
 800163e:	dd9c      	ble.n	800157a <__sflush_r+0x1a>
 8001640:	6a21      	ldr	r1, [r4, #32]
 8001642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001644:	4643      	mov	r3, r8
 8001646:	463a      	mov	r2, r7
 8001648:	4628      	mov	r0, r5
 800164a:	47b0      	blx	r6
 800164c:	2800      	cmp	r0, #0
 800164e:	dc06      	bgt.n	800165e <__sflush_r+0xfe>
 8001650:	89a3      	ldrh	r3, [r4, #12]
 8001652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001656:	81a3      	strh	r3, [r4, #12]
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	e78e      	b.n	800157c <__sflush_r+0x1c>
 800165e:	4407      	add	r7, r0
 8001660:	eba8 0800 	sub.w	r8, r8, r0
 8001664:	e7e9      	b.n	800163a <__sflush_r+0xda>
 8001666:	bf00      	nop
 8001668:	20400001 	.word	0x20400001

0800166c <_fflush_r>:
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	690b      	ldr	r3, [r1, #16]
 8001670:	4605      	mov	r5, r0
 8001672:	460c      	mov	r4, r1
 8001674:	b913      	cbnz	r3, 800167c <_fflush_r+0x10>
 8001676:	2500      	movs	r5, #0
 8001678:	4628      	mov	r0, r5
 800167a:	bd38      	pop	{r3, r4, r5, pc}
 800167c:	b118      	cbz	r0, 8001686 <_fflush_r+0x1a>
 800167e:	6983      	ldr	r3, [r0, #24]
 8001680:	b90b      	cbnz	r3, 8001686 <_fflush_r+0x1a>
 8001682:	f7ff fa4f 	bl	8000b24 <__sinit>
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <_fflush_r+0x6c>)
 8001688:	429c      	cmp	r4, r3
 800168a:	d11b      	bne.n	80016c4 <_fflush_r+0x58>
 800168c:	686c      	ldr	r4, [r5, #4]
 800168e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ef      	beq.n	8001676 <_fflush_r+0xa>
 8001696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001698:	07d0      	lsls	r0, r2, #31
 800169a:	d404      	bmi.n	80016a6 <_fflush_r+0x3a>
 800169c:	0599      	lsls	r1, r3, #22
 800169e:	d402      	bmi.n	80016a6 <_fflush_r+0x3a>
 80016a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016a2:	f7ff fadd 	bl	8000c60 <__retarget_lock_acquire_recursive>
 80016a6:	4628      	mov	r0, r5
 80016a8:	4621      	mov	r1, r4
 80016aa:	f7ff ff59 	bl	8001560 <__sflush_r>
 80016ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016b0:	07da      	lsls	r2, r3, #31
 80016b2:	4605      	mov	r5, r0
 80016b4:	d4e0      	bmi.n	8001678 <_fflush_r+0xc>
 80016b6:	89a3      	ldrh	r3, [r4, #12]
 80016b8:	059b      	lsls	r3, r3, #22
 80016ba:	d4dd      	bmi.n	8001678 <_fflush_r+0xc>
 80016bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016be:	f7ff fad0 	bl	8000c62 <__retarget_lock_release_recursive>
 80016c2:	e7d9      	b.n	8001678 <_fflush_r+0xc>
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <_fflush_r+0x70>)
 80016c6:	429c      	cmp	r4, r3
 80016c8:	d101      	bne.n	80016ce <_fflush_r+0x62>
 80016ca:	68ac      	ldr	r4, [r5, #8]
 80016cc:	e7df      	b.n	800168e <_fflush_r+0x22>
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <_fflush_r+0x74>)
 80016d0:	429c      	cmp	r4, r3
 80016d2:	bf08      	it	eq
 80016d4:	68ec      	ldreq	r4, [r5, #12]
 80016d6:	e7da      	b.n	800168e <_fflush_r+0x22>
 80016d8:	080019d4 	.word	0x080019d4
 80016dc:	080019f4 	.word	0x080019f4
 80016e0:	080019b4 	.word	0x080019b4

080016e4 <_lseek_r>:
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	4d07      	ldr	r5, [pc, #28]	; (8001704 <_lseek_r+0x20>)
 80016e8:	4604      	mov	r4, r0
 80016ea:	4608      	mov	r0, r1
 80016ec:	4611      	mov	r1, r2
 80016ee:	2200      	movs	r2, #0
 80016f0:	602a      	str	r2, [r5, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	f7fe ff78 	bl	80005e8 <_lseek>
 80016f8:	1c43      	adds	r3, r0, #1
 80016fa:	d102      	bne.n	8001702 <_lseek_r+0x1e>
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	b103      	cbz	r3, 8001702 <_lseek_r+0x1e>
 8001700:	6023      	str	r3, [r4, #0]
 8001702:	bd38      	pop	{r3, r4, r5, pc}
 8001704:	200000ec 	.word	0x200000ec

08001708 <__swhatbuf_r>:
 8001708:	b570      	push	{r4, r5, r6, lr}
 800170a:	460e      	mov	r6, r1
 800170c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001710:	2900      	cmp	r1, #0
 8001712:	b096      	sub	sp, #88	; 0x58
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	da07      	bge.n	800172a <__swhatbuf_r+0x22>
 800171a:	2300      	movs	r3, #0
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	89b3      	ldrh	r3, [r6, #12]
 8001720:	061a      	lsls	r2, r3, #24
 8001722:	d410      	bmi.n	8001746 <__swhatbuf_r+0x3e>
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	e00e      	b.n	8001748 <__swhatbuf_r+0x40>
 800172a:	466a      	mov	r2, sp
 800172c:	f000 f8be 	bl	80018ac <_fstat_r>
 8001730:	2800      	cmp	r0, #0
 8001732:	dbf2      	blt.n	800171a <__swhatbuf_r+0x12>
 8001734:	9a01      	ldr	r2, [sp, #4]
 8001736:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800173a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800173e:	425a      	negs	r2, r3
 8001740:	415a      	adcs	r2, r3
 8001742:	602a      	str	r2, [r5, #0]
 8001744:	e7ee      	b.n	8001724 <__swhatbuf_r+0x1c>
 8001746:	2340      	movs	r3, #64	; 0x40
 8001748:	2000      	movs	r0, #0
 800174a:	6023      	str	r3, [r4, #0]
 800174c:	b016      	add	sp, #88	; 0x58
 800174e:	bd70      	pop	{r4, r5, r6, pc}

08001750 <__smakebuf_r>:
 8001750:	898b      	ldrh	r3, [r1, #12]
 8001752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001754:	079d      	lsls	r5, r3, #30
 8001756:	4606      	mov	r6, r0
 8001758:	460c      	mov	r4, r1
 800175a:	d507      	bpl.n	800176c <__smakebuf_r+0x1c>
 800175c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001760:	6023      	str	r3, [r4, #0]
 8001762:	6123      	str	r3, [r4, #16]
 8001764:	2301      	movs	r3, #1
 8001766:	6163      	str	r3, [r4, #20]
 8001768:	b002      	add	sp, #8
 800176a:	bd70      	pop	{r4, r5, r6, pc}
 800176c:	ab01      	add	r3, sp, #4
 800176e:	466a      	mov	r2, sp
 8001770:	f7ff ffca 	bl	8001708 <__swhatbuf_r>
 8001774:	9900      	ldr	r1, [sp, #0]
 8001776:	4605      	mov	r5, r0
 8001778:	4630      	mov	r0, r6
 800177a:	f7ff fa73 	bl	8000c64 <_malloc_r>
 800177e:	b948      	cbnz	r0, 8001794 <__smakebuf_r+0x44>
 8001780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001784:	059a      	lsls	r2, r3, #22
 8001786:	d4ef      	bmi.n	8001768 <__smakebuf_r+0x18>
 8001788:	f023 0303 	bic.w	r3, r3, #3
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	e7e3      	b.n	800175c <__smakebuf_r+0xc>
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <__smakebuf_r+0x7c>)
 8001796:	62b3      	str	r3, [r6, #40]	; 0x28
 8001798:	89a3      	ldrh	r3, [r4, #12]
 800179a:	6020      	str	r0, [r4, #0]
 800179c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a0:	81a3      	strh	r3, [r4, #12]
 80017a2:	9b00      	ldr	r3, [sp, #0]
 80017a4:	6163      	str	r3, [r4, #20]
 80017a6:	9b01      	ldr	r3, [sp, #4]
 80017a8:	6120      	str	r0, [r4, #16]
 80017aa:	b15b      	cbz	r3, 80017c4 <__smakebuf_r+0x74>
 80017ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017b0:	4630      	mov	r0, r6
 80017b2:	f000 f88d 	bl	80018d0 <_isatty_r>
 80017b6:	b128      	cbz	r0, 80017c4 <__smakebuf_r+0x74>
 80017b8:	89a3      	ldrh	r3, [r4, #12]
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	81a3      	strh	r3, [r4, #12]
 80017c4:	89a0      	ldrh	r0, [r4, #12]
 80017c6:	4305      	orrs	r5, r0
 80017c8:	81a5      	strh	r5, [r4, #12]
 80017ca:	e7cd      	b.n	8001768 <__smakebuf_r+0x18>
 80017cc:	08000abd 	.word	0x08000abd

080017d0 <__malloc_lock>:
 80017d0:	4801      	ldr	r0, [pc, #4]	; (80017d8 <__malloc_lock+0x8>)
 80017d2:	f7ff ba45 	b.w	8000c60 <__retarget_lock_acquire_recursive>
 80017d6:	bf00      	nop
 80017d8:	200000e4 	.word	0x200000e4

080017dc <__malloc_unlock>:
 80017dc:	4801      	ldr	r0, [pc, #4]	; (80017e4 <__malloc_unlock+0x8>)
 80017de:	f7ff ba40 	b.w	8000c62 <__retarget_lock_release_recursive>
 80017e2:	bf00      	nop
 80017e4:	200000e4 	.word	0x200000e4

080017e8 <_free_r>:
 80017e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80017ea:	2900      	cmp	r1, #0
 80017ec:	d048      	beq.n	8001880 <_free_r+0x98>
 80017ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017f2:	9001      	str	r0, [sp, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f1a1 0404 	sub.w	r4, r1, #4
 80017fa:	bfb8      	it	lt
 80017fc:	18e4      	addlt	r4, r4, r3
 80017fe:	f7ff ffe7 	bl	80017d0 <__malloc_lock>
 8001802:	4a20      	ldr	r2, [pc, #128]	; (8001884 <_free_r+0x9c>)
 8001804:	9801      	ldr	r0, [sp, #4]
 8001806:	6813      	ldr	r3, [r2, #0]
 8001808:	4615      	mov	r5, r2
 800180a:	b933      	cbnz	r3, 800181a <_free_r+0x32>
 800180c:	6063      	str	r3, [r4, #4]
 800180e:	6014      	str	r4, [r2, #0]
 8001810:	b003      	add	sp, #12
 8001812:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001816:	f7ff bfe1 	b.w	80017dc <__malloc_unlock>
 800181a:	42a3      	cmp	r3, r4
 800181c:	d90b      	bls.n	8001836 <_free_r+0x4e>
 800181e:	6821      	ldr	r1, [r4, #0]
 8001820:	1862      	adds	r2, r4, r1
 8001822:	4293      	cmp	r3, r2
 8001824:	bf04      	itt	eq
 8001826:	681a      	ldreq	r2, [r3, #0]
 8001828:	685b      	ldreq	r3, [r3, #4]
 800182a:	6063      	str	r3, [r4, #4]
 800182c:	bf04      	itt	eq
 800182e:	1852      	addeq	r2, r2, r1
 8001830:	6022      	streq	r2, [r4, #0]
 8001832:	602c      	str	r4, [r5, #0]
 8001834:	e7ec      	b.n	8001810 <_free_r+0x28>
 8001836:	461a      	mov	r2, r3
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	b10b      	cbz	r3, 8001840 <_free_r+0x58>
 800183c:	42a3      	cmp	r3, r4
 800183e:	d9fa      	bls.n	8001836 <_free_r+0x4e>
 8001840:	6811      	ldr	r1, [r2, #0]
 8001842:	1855      	adds	r5, r2, r1
 8001844:	42a5      	cmp	r5, r4
 8001846:	d10b      	bne.n	8001860 <_free_r+0x78>
 8001848:	6824      	ldr	r4, [r4, #0]
 800184a:	4421      	add	r1, r4
 800184c:	1854      	adds	r4, r2, r1
 800184e:	42a3      	cmp	r3, r4
 8001850:	6011      	str	r1, [r2, #0]
 8001852:	d1dd      	bne.n	8001810 <_free_r+0x28>
 8001854:	681c      	ldr	r4, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	6053      	str	r3, [r2, #4]
 800185a:	4421      	add	r1, r4
 800185c:	6011      	str	r1, [r2, #0]
 800185e:	e7d7      	b.n	8001810 <_free_r+0x28>
 8001860:	d902      	bls.n	8001868 <_free_r+0x80>
 8001862:	230c      	movs	r3, #12
 8001864:	6003      	str	r3, [r0, #0]
 8001866:	e7d3      	b.n	8001810 <_free_r+0x28>
 8001868:	6825      	ldr	r5, [r4, #0]
 800186a:	1961      	adds	r1, r4, r5
 800186c:	428b      	cmp	r3, r1
 800186e:	bf04      	itt	eq
 8001870:	6819      	ldreq	r1, [r3, #0]
 8001872:	685b      	ldreq	r3, [r3, #4]
 8001874:	6063      	str	r3, [r4, #4]
 8001876:	bf04      	itt	eq
 8001878:	1949      	addeq	r1, r1, r5
 800187a:	6021      	streq	r1, [r4, #0]
 800187c:	6054      	str	r4, [r2, #4]
 800187e:	e7c7      	b.n	8001810 <_free_r+0x28>
 8001880:	b003      	add	sp, #12
 8001882:	bd30      	pop	{r4, r5, pc}
 8001884:	200000b8 	.word	0x200000b8

08001888 <_read_r>:
 8001888:	b538      	push	{r3, r4, r5, lr}
 800188a:	4d07      	ldr	r5, [pc, #28]	; (80018a8 <_read_r+0x20>)
 800188c:	4604      	mov	r4, r0
 800188e:	4608      	mov	r0, r1
 8001890:	4611      	mov	r1, r2
 8001892:	2200      	movs	r2, #0
 8001894:	602a      	str	r2, [r5, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	f7fe fe46 	bl	8000528 <_read>
 800189c:	1c43      	adds	r3, r0, #1
 800189e:	d102      	bne.n	80018a6 <_read_r+0x1e>
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	b103      	cbz	r3, 80018a6 <_read_r+0x1e>
 80018a4:	6023      	str	r3, [r4, #0]
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
 80018a8:	200000ec 	.word	0x200000ec

080018ac <_fstat_r>:
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4d07      	ldr	r5, [pc, #28]	; (80018cc <_fstat_r+0x20>)
 80018b0:	2300      	movs	r3, #0
 80018b2:	4604      	mov	r4, r0
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	602b      	str	r3, [r5, #0]
 80018ba:	f7fe fe7a 	bl	80005b2 <_fstat>
 80018be:	1c43      	adds	r3, r0, #1
 80018c0:	d102      	bne.n	80018c8 <_fstat_r+0x1c>
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	b103      	cbz	r3, 80018c8 <_fstat_r+0x1c>
 80018c6:	6023      	str	r3, [r4, #0]
 80018c8:	bd38      	pop	{r3, r4, r5, pc}
 80018ca:	bf00      	nop
 80018cc:	200000ec 	.word	0x200000ec

080018d0 <_isatty_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4d06      	ldr	r5, [pc, #24]	; (80018ec <_isatty_r+0x1c>)
 80018d4:	2300      	movs	r3, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	602b      	str	r3, [r5, #0]
 80018dc:	f7fe fe79 	bl	80005d2 <_isatty>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	d102      	bne.n	80018ea <_isatty_r+0x1a>
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	b103      	cbz	r3, 80018ea <_isatty_r+0x1a>
 80018e8:	6023      	str	r3, [r4, #0]
 80018ea:	bd38      	pop	{r3, r4, r5, pc}
 80018ec:	200000ec 	.word	0x200000ec

080018f0 <_init>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	bf00      	nop
 80018f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f6:	bc08      	pop	{r3}
 80018f8:	469e      	mov	lr, r3
 80018fa:	4770      	bx	lr

080018fc <_fini>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	bf00      	nop
 8001900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001902:	bc08      	pop	{r3}
 8001904:	469e      	mov	lr, r3
 8001906:	4770      	bx	lr
