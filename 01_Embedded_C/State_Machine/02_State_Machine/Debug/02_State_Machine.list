
02_State_Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08001848  08001848  00011848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001988  08001988  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08001988  08001988  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001988  08001988  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001988  08001988  00011988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800198c  0800198c  0001198c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08001990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000007c  08001a0c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08001a0c  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004fb2  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f8b  00000000  00000000  0002505e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  00025ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  000263f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207c7  00000000  00000000  00026768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004434  00000000  00000000  00046f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1342  00000000  00000000  0004b363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c6a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b4  00000000  00000000  0010c6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001830 	.word	0x08001830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08001830 	.word	0x08001830

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:

static State_Type current_state;
static int Clock;

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

  HAL_Init();
 8000274:	f000 f9fc 	bl	8000670 <HAL_Init>

  //MX_GPIO_Init();

  while (1)
  {
	  state_table[current_state]();
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <main+0x24>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	461a      	mov	r2, r3
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <main+0x28>)
 8000280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000284:	4798      	blx	r3
	  Clock++;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <main+0x2c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	3301      	adds	r3, #1
 800028c:	4a03      	ldr	r2, [pc, #12]	; (800029c <main+0x2c>)
 800028e:	6013      	str	r3, [r2, #0]
	  state_table[current_state]();
 8000290:	e7f2      	b.n	8000278 <main+0x8>
 8000292:	bf00      	nop
 8000294:	20000098 	.word	0x20000098
 8000298:	20000000 	.word	0x20000000
 800029c:	2000009c 	.word	0x2000009c

080002a0 <state_a_function>:

uint32_t sa_prev_time = 0;
uint32_t sa_now;
uint32_t sa_delta;

void state_a_function(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if(Clock ==2){
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <state_a_function+0x44>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d118      	bne.n	80002de <state_a_function+0x3e>
		current_state = STATE_B;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <state_a_function+0x48>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]

		sa_now = HAL_GetTick();
 80002b2:	f000 fa43 	bl	800073c <HAL_GetTick>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <state_a_function+0x4c>)
 80002ba:	6013      	str	r3, [r2, #0]
		sa_delta = sa_now - sa_prev_time;
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <state_a_function+0x4c>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <state_a_function+0x50>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <state_a_function+0x54>)
 80002c8:	6013      	str	r3, [r2, #0]
		//To seconds
		//sa_delta /= 1000;
		sa_prev_time = sa_now;
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <state_a_function+0x4c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <state_a_function+0x50>)
 80002d0:	6013      	str	r3, [r2, #0]

		//printf("This is the execution of STATE A \n");
		printf("This is the output of STATE A: %ld millisecond ago \n\r ", sa_delta);
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <state_a_function+0x54>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4619      	mov	r1, r3
 80002d8:	4807      	ldr	r0, [pc, #28]	; (80002f8 <state_a_function+0x58>)
 80002da:	f000 fb53 	bl	8000984 <iprintf>
	}
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000009c 	.word	0x2000009c
 80002e8:	20000098 	.word	0x20000098
 80002ec:	200000cc 	.word	0x200000cc
 80002f0:	200000a0 	.word	0x200000a0
 80002f4:	200000bc 	.word	0x200000bc
 80002f8:	08001848 	.word	0x08001848

080002fc <state_b_function>:

uint32_t sb_prev_time = 0;
uint32_t sb_now;
uint32_t sb_delta;

void state_b_function(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	if(Clock == 5){
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <state_b_function+0x44>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b05      	cmp	r3, #5
 8000306:	d118      	bne.n	800033a <state_b_function+0x3e>
		current_state = STATE_C;
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <state_b_function+0x48>)
 800030a:	2202      	movs	r2, #2
 800030c:	701a      	strb	r2, [r3, #0]

		sb_now = HAL_GetTick();
 800030e:	f000 fa15 	bl	800073c <HAL_GetTick>
 8000312:	4603      	mov	r3, r0
 8000314:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <state_b_function+0x4c>)
 8000316:	6013      	str	r3, [r2, #0]

		sb_delta = sb_now - sb_prev_time;
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <state_b_function+0x4c>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <state_b_function+0x50>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <state_b_function+0x54>)
 8000324:	6013      	str	r3, [r2, #0]
		//To seconds
		//sb_delta /= 1000;
		sb_prev_time = sb_now;
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <state_b_function+0x4c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a08      	ldr	r2, [pc, #32]	; (800034c <state_b_function+0x50>)
 800032c:	6013      	str	r3, [r2, #0]

		printf("This is the output of STATE B: %ld millisecond ago \n\r ", sb_delta);
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <state_b_function+0x54>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4619      	mov	r1, r3
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <state_b_function+0x58>)
 8000336:	f000 fb25 	bl	8000984 <iprintf>

		//printf("This is the execution of STATE B \n");
	}
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000009c 	.word	0x2000009c
 8000344:	20000098 	.word	0x20000098
 8000348:	200000b8 	.word	0x200000b8
 800034c:	200000a4 	.word	0x200000a4
 8000350:	200000c8 	.word	0x200000c8
 8000354:	08001880 	.word	0x08001880

08000358 <state_c_function>:
uint32_t sc_prev_time = 0;
uint32_t sc_now;
uint32_t sc_delta;


void state_c_function(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	if(Clock == 9){
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <state_c_function+0x48>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b09      	cmp	r3, #9
 8000362:	d11b      	bne.n	800039c <state_c_function+0x44>
		Clock = 0;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <state_c_function+0x48>)
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
		current_state = STATE_A;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <state_c_function+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
		sc_now = HAL_GetTick();
 8000370:	f000 f9e4 	bl	800073c <HAL_GetTick>
 8000374:	4603      	mov	r3, r0
 8000376:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <state_c_function+0x50>)
 8000378:	6013      	str	r3, [r2, #0]

		sc_delta = sc_now - sc_prev_time;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <state_c_function+0x50>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <state_c_function+0x54>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	1ad3      	subs	r3, r2, r3
 8000384:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <state_c_function+0x58>)
 8000386:	6013      	str	r3, [r2, #0]
		//To seconds
		//sc_delta /= 1000;
		sc_prev_time = sb_now;
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <state_c_function+0x5c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a07      	ldr	r2, [pc, #28]	; (80003ac <state_c_function+0x54>)
 800038e:	6013      	str	r3, [r2, #0]
		printf("This is the output of STATE C: %ld millisecond ago \n\r ", sc_delta);
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <state_c_function+0x58>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4619      	mov	r1, r3
 8000396:	4808      	ldr	r0, [pc, #32]	; (80003b8 <state_c_function+0x60>)
 8000398:	f000 faf4 	bl	8000984 <iprintf>
		//printf("This is the execution of STATE C \n");
	}
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000009c 	.word	0x2000009c
 80003a4:	20000098 	.word	0x20000098
 80003a8:	200000c0 	.word	0x200000c0
 80003ac:	200000a8 	.word	0x200000a8
 80003b0:	200000c4 	.word	0x200000c4
 80003b4:	200000b8 	.word	0x200000b8
 80003b8:	080018b8 	.word	0x080018b8

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <HAL_MspInit+0x4c>)
 80003c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003ca:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <HAL_MspInit+0x4c>)
 80003cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003d0:	6453      	str	r3, [r2, #68]	; 0x44
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <HAL_MspInit+0x4c>)
 80003d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	2300      	movs	r3, #0
 80003e0:	603b      	str	r3, [r7, #0]
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <HAL_MspInit+0x4c>)
 80003e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003e6:	4a08      	ldr	r2, [pc, #32]	; (8000408 <HAL_MspInit+0x4c>)
 80003e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ec:	6413      	str	r3, [r2, #64]	; 0x40
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <HAL_MspInit+0x4c>)
 80003f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003fa:	2007      	movs	r0, #7
 80003fc:	f000 fa5c 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40023800 	.word	0x40023800

0800040c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <NMI_Handler+0x4>

08000412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <MemManage_Handler+0x4>

0800041e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <BusFault_Handler+0x4>

08000424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <UsageFault_Handler+0x4>

0800042a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000458:	f000 f95c 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}

08000460 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <ITM_SendChar+0x48>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <ITM_SendChar+0x48>)
 8000470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000474:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <ITM_SendChar+0x4c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <ITM_SendChar+0x4c>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000482:	bf00      	nop
 8000484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f8      	beq.n	8000484 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000492:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	6013      	str	r3, [r2, #0]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000edfc 	.word	0xe000edfc
 80004ac:	e0000e00 	.word	0xe0000e00

080004b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	e00a      	b.n	80004d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004c2:	f3af 8000 	nop.w
 80004c6:	4601      	mov	r1, r0
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	60ba      	str	r2, [r7, #8]
 80004ce:	b2ca      	uxtb	r2, r1
 80004d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	3301      	adds	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	429a      	cmp	r2, r3
 80004de:	dbf0      	blt.n	80004c2 <_read+0x12>
	}

return len;
 80004e0:	687b      	ldr	r3, [r7, #4]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b086      	sub	sp, #24
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	e009      	b.n	8000510 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++); //Add itm_sent_data.c function here
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	60ba      	str	r2, [r7, #8]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ffab 	bl	8000460 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	3301      	adds	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	dbf1      	blt.n	80004fc <_write+0x12>

	}
	return len;
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_close>:

int _close(int file)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
	return -1;
 800052a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054a:	605a      	str	r2, [r3, #4]
	return 0;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_isatty>:

int _isatty(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
	return 1;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	return 0;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <_sbrk+0x5c>)
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <_sbrk+0x60>)
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <_sbrk+0x64>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <_sbrk+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d207      	bcs.n	80005cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005bc:	f000 f9b0 	bl	8000920 <__errno>
 80005c0:	4603      	mov	r3, r0
 80005c2:	220c      	movs	r2, #12
 80005c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ca:	e009      	b.n	80005e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <_sbrk+0x64>)
 80005dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20020000 	.word	0x20020000
 80005ec:	00000400 	.word	0x00000400
 80005f0:	200000ac 	.word	0x200000ac
 80005f4:	200000e8 	.word	0x200000e8

080005f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <SystemInit+0x20>)
 80005fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <SystemInit+0x20>)
 8000604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800061c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000622:	490e      	ldr	r1, [pc, #56]	; (800065c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000624:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000638:	4c0b      	ldr	r4, [pc, #44]	; (8000668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000646:	f7ff ffd7 	bl	80005f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064a:	f000 f96f 	bl	800092c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800064e:	f7ff fe0f 	bl	8000270 <main>
  bx  lr    
 8000652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000660:	08001990 	.word	0x08001990
  ldr r2, =_sbss
 8000664:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000668:	200000e4 	.word	0x200000e4

0800066c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC_IRQHandler>
	...

08000670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_Init+0x40>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <HAL_Init+0x40>)
 800067a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800067e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_Init+0x40>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <HAL_Init+0x40>)
 8000686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800068a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_Init+0x40>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_Init+0x40>)
 8000692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f90d 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f808 	bl	80006b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a4:	f7ff fe8a 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023c00 	.word	0x40023c00

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_InitTick+0x54>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_InitTick+0x58>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f917 	bl	8000906 <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e00e      	b.n	8000700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d80a      	bhi.n	80006fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006f0:	f000 f8ed 	bl	80008ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <HAL_InitTick+0x5c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000000c 	.word	0x2000000c
 800070c:	20000014 	.word	0x20000014
 8000710:	20000010 	.word	0x20000010

08000714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_IncTick+0x20>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_IncTick+0x24>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4413      	add	r3, r2
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <HAL_IncTick+0x24>)
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000014 	.word	0x20000014
 8000738:	200000d0 	.word	0x200000d0

0800073c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <HAL_GetTick+0x14>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000d0 	.word	0x200000d0

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000898:	f7ff ff8e 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff47 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff5c 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ff8e 	bl	800080c <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffb0 	bl	8000874 <SysTick_Config>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <__errno>:
 8000920:	4b01      	ldr	r3, [pc, #4]	; (8000928 <__errno+0x8>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000018 	.word	0x20000018

0800092c <__libc_init_array>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4d0d      	ldr	r5, [pc, #52]	; (8000964 <__libc_init_array+0x38>)
 8000930:	4c0d      	ldr	r4, [pc, #52]	; (8000968 <__libc_init_array+0x3c>)
 8000932:	1b64      	subs	r4, r4, r5
 8000934:	10a4      	asrs	r4, r4, #2
 8000936:	2600      	movs	r6, #0
 8000938:	42a6      	cmp	r6, r4
 800093a:	d109      	bne.n	8000950 <__libc_init_array+0x24>
 800093c:	4d0b      	ldr	r5, [pc, #44]	; (800096c <__libc_init_array+0x40>)
 800093e:	4c0c      	ldr	r4, [pc, #48]	; (8000970 <__libc_init_array+0x44>)
 8000940:	f000 ff76 	bl	8001830 <_init>
 8000944:	1b64      	subs	r4, r4, r5
 8000946:	10a4      	asrs	r4, r4, #2
 8000948:	2600      	movs	r6, #0
 800094a:	42a6      	cmp	r6, r4
 800094c:	d105      	bne.n	800095a <__libc_init_array+0x2e>
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f855 3b04 	ldr.w	r3, [r5], #4
 8000954:	4798      	blx	r3
 8000956:	3601      	adds	r6, #1
 8000958:	e7ee      	b.n	8000938 <__libc_init_array+0xc>
 800095a:	f855 3b04 	ldr.w	r3, [r5], #4
 800095e:	4798      	blx	r3
 8000960:	3601      	adds	r6, #1
 8000962:	e7f2      	b.n	800094a <__libc_init_array+0x1e>
 8000964:	08001988 	.word	0x08001988
 8000968:	08001988 	.word	0x08001988
 800096c:	08001988 	.word	0x08001988
 8000970:	0800198c 	.word	0x0800198c

08000974 <memset>:
 8000974:	4402      	add	r2, r0
 8000976:	4603      	mov	r3, r0
 8000978:	4293      	cmp	r3, r2
 800097a:	d100      	bne.n	800097e <memset+0xa>
 800097c:	4770      	bx	lr
 800097e:	f803 1b01 	strb.w	r1, [r3], #1
 8000982:	e7f9      	b.n	8000978 <memset+0x4>

08000984 <iprintf>:
 8000984:	b40f      	push	{r0, r1, r2, r3}
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <iprintf+0x2c>)
 8000988:	b513      	push	{r0, r1, r4, lr}
 800098a:	681c      	ldr	r4, [r3, #0]
 800098c:	b124      	cbz	r4, 8000998 <iprintf+0x14>
 800098e:	69a3      	ldr	r3, [r4, #24]
 8000990:	b913      	cbnz	r3, 8000998 <iprintf+0x14>
 8000992:	4620      	mov	r0, r4
 8000994:	f000 f866 	bl	8000a64 <__sinit>
 8000998:	ab05      	add	r3, sp, #20
 800099a:	9a04      	ldr	r2, [sp, #16]
 800099c:	68a1      	ldr	r1, [r4, #8]
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	4620      	mov	r0, r4
 80009a2:	f000 f983 	bl	8000cac <_vfiprintf_r>
 80009a6:	b002      	add	sp, #8
 80009a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009ac:	b004      	add	sp, #16
 80009ae:	4770      	bx	lr
 80009b0:	20000018 	.word	0x20000018

080009b4 <std>:
 80009b4:	2300      	movs	r3, #0
 80009b6:	b510      	push	{r4, lr}
 80009b8:	4604      	mov	r4, r0
 80009ba:	e9c0 3300 	strd	r3, r3, [r0]
 80009be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009c2:	6083      	str	r3, [r0, #8]
 80009c4:	8181      	strh	r1, [r0, #12]
 80009c6:	6643      	str	r3, [r0, #100]	; 0x64
 80009c8:	81c2      	strh	r2, [r0, #14]
 80009ca:	6183      	str	r3, [r0, #24]
 80009cc:	4619      	mov	r1, r3
 80009ce:	2208      	movs	r2, #8
 80009d0:	305c      	adds	r0, #92	; 0x5c
 80009d2:	f7ff ffcf 	bl	8000974 <memset>
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <std+0x38>)
 80009d8:	6263      	str	r3, [r4, #36]	; 0x24
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <std+0x3c>)
 80009dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <std+0x40>)
 80009e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <std+0x44>)
 80009e4:	6224      	str	r4, [r4, #32]
 80009e6:	6323      	str	r3, [r4, #48]	; 0x30
 80009e8:	bd10      	pop	{r4, pc}
 80009ea:	bf00      	nop
 80009ec:	08001255 	.word	0x08001255
 80009f0:	08001277 	.word	0x08001277
 80009f4:	080012af 	.word	0x080012af
 80009f8:	080012d3 	.word	0x080012d3

080009fc <_cleanup_r>:
 80009fc:	4901      	ldr	r1, [pc, #4]	; (8000a04 <_cleanup_r+0x8>)
 80009fe:	f000 b8af 	b.w	8000b60 <_fwalk_reent>
 8000a02:	bf00      	nop
 8000a04:	080015ad 	.word	0x080015ad

08000a08 <__sfmoreglue>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	1e4a      	subs	r2, r1, #1
 8000a0c:	2568      	movs	r5, #104	; 0x68
 8000a0e:	4355      	muls	r5, r2
 8000a10:	460e      	mov	r6, r1
 8000a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a16:	f000 f8c5 	bl	8000ba4 <_malloc_r>
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	b140      	cbz	r0, 8000a30 <__sfmoreglue+0x28>
 8000a1e:	2100      	movs	r1, #0
 8000a20:	e9c0 1600 	strd	r1, r6, [r0]
 8000a24:	300c      	adds	r0, #12
 8000a26:	60a0      	str	r0, [r4, #8]
 8000a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a2c:	f7ff ffa2 	bl	8000974 <memset>
 8000a30:	4620      	mov	r0, r4
 8000a32:	bd70      	pop	{r4, r5, r6, pc}

08000a34 <__sfp_lock_acquire>:
 8000a34:	4801      	ldr	r0, [pc, #4]	; (8000a3c <__sfp_lock_acquire+0x8>)
 8000a36:	f000 b8b3 	b.w	8000ba0 <__retarget_lock_acquire_recursive>
 8000a3a:	bf00      	nop
 8000a3c:	200000dc 	.word	0x200000dc

08000a40 <__sfp_lock_release>:
 8000a40:	4801      	ldr	r0, [pc, #4]	; (8000a48 <__sfp_lock_release+0x8>)
 8000a42:	f000 b8ae 	b.w	8000ba2 <__retarget_lock_release_recursive>
 8000a46:	bf00      	nop
 8000a48:	200000dc 	.word	0x200000dc

08000a4c <__sinit_lock_acquire>:
 8000a4c:	4801      	ldr	r0, [pc, #4]	; (8000a54 <__sinit_lock_acquire+0x8>)
 8000a4e:	f000 b8a7 	b.w	8000ba0 <__retarget_lock_acquire_recursive>
 8000a52:	bf00      	nop
 8000a54:	200000d7 	.word	0x200000d7

08000a58 <__sinit_lock_release>:
 8000a58:	4801      	ldr	r0, [pc, #4]	; (8000a60 <__sinit_lock_release+0x8>)
 8000a5a:	f000 b8a2 	b.w	8000ba2 <__retarget_lock_release_recursive>
 8000a5e:	bf00      	nop
 8000a60:	200000d7 	.word	0x200000d7

08000a64 <__sinit>:
 8000a64:	b510      	push	{r4, lr}
 8000a66:	4604      	mov	r4, r0
 8000a68:	f7ff fff0 	bl	8000a4c <__sinit_lock_acquire>
 8000a6c:	69a3      	ldr	r3, [r4, #24]
 8000a6e:	b11b      	cbz	r3, 8000a78 <__sinit+0x14>
 8000a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a74:	f7ff bff0 	b.w	8000a58 <__sinit_lock_release>
 8000a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <__sinit+0x68>)
 8000a80:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <__sinit+0x6c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a86:	42a3      	cmp	r3, r4
 8000a88:	bf04      	itt	eq
 8000a8a:	2301      	moveq	r3, #1
 8000a8c:	61a3      	streq	r3, [r4, #24]
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f000 f820 	bl	8000ad4 <__sfp>
 8000a94:	6060      	str	r0, [r4, #4]
 8000a96:	4620      	mov	r0, r4
 8000a98:	f000 f81c 	bl	8000ad4 <__sfp>
 8000a9c:	60a0      	str	r0, [r4, #8]
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f000 f818 	bl	8000ad4 <__sfp>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60e0      	str	r0, [r4, #12]
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	6860      	ldr	r0, [r4, #4]
 8000aac:	f7ff ff82 	bl	80009b4 <std>
 8000ab0:	68a0      	ldr	r0, [r4, #8]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2109      	movs	r1, #9
 8000ab6:	f7ff ff7d 	bl	80009b4 <std>
 8000aba:	68e0      	ldr	r0, [r4, #12]
 8000abc:	2202      	movs	r2, #2
 8000abe:	2112      	movs	r1, #18
 8000ac0:	f7ff ff78 	bl	80009b4 <std>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61a3      	str	r3, [r4, #24]
 8000ac8:	e7d2      	b.n	8000a70 <__sinit+0xc>
 8000aca:	bf00      	nop
 8000acc:	080018f0 	.word	0x080018f0
 8000ad0:	080009fd 	.word	0x080009fd

08000ad4 <__sfp>:
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	4607      	mov	r7, r0
 8000ad8:	f7ff ffac 	bl	8000a34 <__sfp_lock_acquire>
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <__sfp+0x84>)
 8000ade:	681e      	ldr	r6, [r3, #0]
 8000ae0:	69b3      	ldr	r3, [r6, #24]
 8000ae2:	b913      	cbnz	r3, 8000aea <__sfp+0x16>
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	f7ff ffbd 	bl	8000a64 <__sinit>
 8000aea:	3648      	adds	r6, #72	; 0x48
 8000aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	d503      	bpl.n	8000afc <__sfp+0x28>
 8000af4:	6833      	ldr	r3, [r6, #0]
 8000af6:	b30b      	cbz	r3, 8000b3c <__sfp+0x68>
 8000af8:	6836      	ldr	r6, [r6, #0]
 8000afa:	e7f7      	b.n	8000aec <__sfp+0x18>
 8000afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b00:	b9d5      	cbnz	r5, 8000b38 <__sfp+0x64>
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <__sfp+0x88>)
 8000b04:	60e3      	str	r3, [r4, #12]
 8000b06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8000b0c:	f000 f847 	bl	8000b9e <__retarget_lock_init_recursive>
 8000b10:	f7ff ff96 	bl	8000a40 <__sfp_lock_release>
 8000b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b1c:	6025      	str	r5, [r4, #0]
 8000b1e:	61a5      	str	r5, [r4, #24]
 8000b20:	2208      	movs	r2, #8
 8000b22:	4629      	mov	r1, r5
 8000b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b28:	f7ff ff24 	bl	8000974 <memset>
 8000b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b34:	4620      	mov	r0, r4
 8000b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b38:	3468      	adds	r4, #104	; 0x68
 8000b3a:	e7d9      	b.n	8000af0 <__sfp+0x1c>
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	4638      	mov	r0, r7
 8000b40:	f7ff ff62 	bl	8000a08 <__sfmoreglue>
 8000b44:	4604      	mov	r4, r0
 8000b46:	6030      	str	r0, [r6, #0]
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d1d5      	bne.n	8000af8 <__sfp+0x24>
 8000b4c:	f7ff ff78 	bl	8000a40 <__sfp_lock_release>
 8000b50:	230c      	movs	r3, #12
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	e7ee      	b.n	8000b34 <__sfp+0x60>
 8000b56:	bf00      	nop
 8000b58:	080018f0 	.word	0x080018f0
 8000b5c:	ffff0001 	.word	0xffff0001

08000b60 <_fwalk_reent>:
 8000b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b64:	4606      	mov	r6, r0
 8000b66:	4688      	mov	r8, r1
 8000b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b72:	f1b9 0901 	subs.w	r9, r9, #1
 8000b76:	d505      	bpl.n	8000b84 <_fwalk_reent+0x24>
 8000b78:	6824      	ldr	r4, [r4, #0]
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d1f7      	bne.n	8000b6e <_fwalk_reent+0xe>
 8000b7e:	4638      	mov	r0, r7
 8000b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b84:	89ab      	ldrh	r3, [r5, #12]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d907      	bls.n	8000b9a <_fwalk_reent+0x3a>
 8000b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	d003      	beq.n	8000b9a <_fwalk_reent+0x3a>
 8000b92:	4629      	mov	r1, r5
 8000b94:	4630      	mov	r0, r6
 8000b96:	47c0      	blx	r8
 8000b98:	4307      	orrs	r7, r0
 8000b9a:	3568      	adds	r5, #104	; 0x68
 8000b9c:	e7e9      	b.n	8000b72 <_fwalk_reent+0x12>

08000b9e <__retarget_lock_init_recursive>:
 8000b9e:	4770      	bx	lr

08000ba0 <__retarget_lock_acquire_recursive>:
 8000ba0:	4770      	bx	lr

08000ba2 <__retarget_lock_release_recursive>:
 8000ba2:	4770      	bx	lr

08000ba4 <_malloc_r>:
 8000ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba6:	1ccd      	adds	r5, r1, #3
 8000ba8:	f025 0503 	bic.w	r5, r5, #3
 8000bac:	3508      	adds	r5, #8
 8000bae:	2d0c      	cmp	r5, #12
 8000bb0:	bf38      	it	cc
 8000bb2:	250c      	movcc	r5, #12
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	4606      	mov	r6, r0
 8000bb8:	db01      	blt.n	8000bbe <_malloc_r+0x1a>
 8000bba:	42a9      	cmp	r1, r5
 8000bbc:	d903      	bls.n	8000bc6 <_malloc_r+0x22>
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	6033      	str	r3, [r6, #0]
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bc6:	f000 fda3 	bl	8001710 <__malloc_lock>
 8000bca:	4921      	ldr	r1, [pc, #132]	; (8000c50 <_malloc_r+0xac>)
 8000bcc:	680a      	ldr	r2, [r1, #0]
 8000bce:	4614      	mov	r4, r2
 8000bd0:	b99c      	cbnz	r4, 8000bfa <_malloc_r+0x56>
 8000bd2:	4f20      	ldr	r7, [pc, #128]	; (8000c54 <_malloc_r+0xb0>)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b923      	cbnz	r3, 8000be2 <_malloc_r+0x3e>
 8000bd8:	4621      	mov	r1, r4
 8000bda:	4630      	mov	r0, r6
 8000bdc:	f000 fb2a 	bl	8001234 <_sbrk_r>
 8000be0:	6038      	str	r0, [r7, #0]
 8000be2:	4629      	mov	r1, r5
 8000be4:	4630      	mov	r0, r6
 8000be6:	f000 fb25 	bl	8001234 <_sbrk_r>
 8000bea:	1c43      	adds	r3, r0, #1
 8000bec:	d123      	bne.n	8000c36 <_malloc_r+0x92>
 8000bee:	230c      	movs	r3, #12
 8000bf0:	6033      	str	r3, [r6, #0]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	f000 fd92 	bl	800171c <__malloc_unlock>
 8000bf8:	e7e3      	b.n	8000bc2 <_malloc_r+0x1e>
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	1b5b      	subs	r3, r3, r5
 8000bfe:	d417      	bmi.n	8000c30 <_malloc_r+0x8c>
 8000c00:	2b0b      	cmp	r3, #11
 8000c02:	d903      	bls.n	8000c0c <_malloc_r+0x68>
 8000c04:	6023      	str	r3, [r4, #0]
 8000c06:	441c      	add	r4, r3
 8000c08:	6025      	str	r5, [r4, #0]
 8000c0a:	e004      	b.n	8000c16 <_malloc_r+0x72>
 8000c0c:	6863      	ldr	r3, [r4, #4]
 8000c0e:	42a2      	cmp	r2, r4
 8000c10:	bf0c      	ite	eq
 8000c12:	600b      	streq	r3, [r1, #0]
 8000c14:	6053      	strne	r3, [r2, #4]
 8000c16:	4630      	mov	r0, r6
 8000c18:	f000 fd80 	bl	800171c <__malloc_unlock>
 8000c1c:	f104 000b 	add.w	r0, r4, #11
 8000c20:	1d23      	adds	r3, r4, #4
 8000c22:	f020 0007 	bic.w	r0, r0, #7
 8000c26:	1ac2      	subs	r2, r0, r3
 8000c28:	d0cc      	beq.n	8000bc4 <_malloc_r+0x20>
 8000c2a:	1a1b      	subs	r3, r3, r0
 8000c2c:	50a3      	str	r3, [r4, r2]
 8000c2e:	e7c9      	b.n	8000bc4 <_malloc_r+0x20>
 8000c30:	4622      	mov	r2, r4
 8000c32:	6864      	ldr	r4, [r4, #4]
 8000c34:	e7cc      	b.n	8000bd0 <_malloc_r+0x2c>
 8000c36:	1cc4      	adds	r4, r0, #3
 8000c38:	f024 0403 	bic.w	r4, r4, #3
 8000c3c:	42a0      	cmp	r0, r4
 8000c3e:	d0e3      	beq.n	8000c08 <_malloc_r+0x64>
 8000c40:	1a21      	subs	r1, r4, r0
 8000c42:	4630      	mov	r0, r6
 8000c44:	f000 faf6 	bl	8001234 <_sbrk_r>
 8000c48:	3001      	adds	r0, #1
 8000c4a:	d1dd      	bne.n	8000c08 <_malloc_r+0x64>
 8000c4c:	e7cf      	b.n	8000bee <_malloc_r+0x4a>
 8000c4e:	bf00      	nop
 8000c50:	200000b0 	.word	0x200000b0
 8000c54:	200000b4 	.word	0x200000b4

08000c58 <__sfputc_r>:
 8000c58:	6893      	ldr	r3, [r2, #8]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	b410      	push	{r4}
 8000c60:	6093      	str	r3, [r2, #8]
 8000c62:	da08      	bge.n	8000c76 <__sfputc_r+0x1e>
 8000c64:	6994      	ldr	r4, [r2, #24]
 8000c66:	42a3      	cmp	r3, r4
 8000c68:	db01      	blt.n	8000c6e <__sfputc_r+0x16>
 8000c6a:	290a      	cmp	r1, #10
 8000c6c:	d103      	bne.n	8000c76 <__sfputc_r+0x1e>
 8000c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c72:	f000 bb33 	b.w	80012dc <__swbuf_r>
 8000c76:	6813      	ldr	r3, [r2, #0]
 8000c78:	1c58      	adds	r0, r3, #1
 8000c7a:	6010      	str	r0, [r2, #0]
 8000c7c:	7019      	strb	r1, [r3, #0]
 8000c7e:	4608      	mov	r0, r1
 8000c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <__sfputs_r>:
 8000c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c88:	4606      	mov	r6, r0
 8000c8a:	460f      	mov	r7, r1
 8000c8c:	4614      	mov	r4, r2
 8000c8e:	18d5      	adds	r5, r2, r3
 8000c90:	42ac      	cmp	r4, r5
 8000c92:	d101      	bne.n	8000c98 <__sfputs_r+0x12>
 8000c94:	2000      	movs	r0, #0
 8000c96:	e007      	b.n	8000ca8 <__sfputs_r+0x22>
 8000c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c9c:	463a      	mov	r2, r7
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	f7ff ffda 	bl	8000c58 <__sfputc_r>
 8000ca4:	1c43      	adds	r3, r0, #1
 8000ca6:	d1f3      	bne.n	8000c90 <__sfputs_r+0xa>
 8000ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cac <_vfiprintf_r>:
 8000cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	b09d      	sub	sp, #116	; 0x74
 8000cb4:	4614      	mov	r4, r2
 8000cb6:	4698      	mov	r8, r3
 8000cb8:	4606      	mov	r6, r0
 8000cba:	b118      	cbz	r0, 8000cc4 <_vfiprintf_r+0x18>
 8000cbc:	6983      	ldr	r3, [r0, #24]
 8000cbe:	b90b      	cbnz	r3, 8000cc4 <_vfiprintf_r+0x18>
 8000cc0:	f7ff fed0 	bl	8000a64 <__sinit>
 8000cc4:	4b89      	ldr	r3, [pc, #548]	; (8000eec <_vfiprintf_r+0x240>)
 8000cc6:	429d      	cmp	r5, r3
 8000cc8:	d11b      	bne.n	8000d02 <_vfiprintf_r+0x56>
 8000cca:	6875      	ldr	r5, [r6, #4]
 8000ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cce:	07d9      	lsls	r1, r3, #31
 8000cd0:	d405      	bmi.n	8000cde <_vfiprintf_r+0x32>
 8000cd2:	89ab      	ldrh	r3, [r5, #12]
 8000cd4:	059a      	lsls	r2, r3, #22
 8000cd6:	d402      	bmi.n	8000cde <_vfiprintf_r+0x32>
 8000cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cda:	f7ff ff61 	bl	8000ba0 <__retarget_lock_acquire_recursive>
 8000cde:	89ab      	ldrh	r3, [r5, #12]
 8000ce0:	071b      	lsls	r3, r3, #28
 8000ce2:	d501      	bpl.n	8000ce8 <_vfiprintf_r+0x3c>
 8000ce4:	692b      	ldr	r3, [r5, #16]
 8000ce6:	b9eb      	cbnz	r3, 8000d24 <_vfiprintf_r+0x78>
 8000ce8:	4629      	mov	r1, r5
 8000cea:	4630      	mov	r0, r6
 8000cec:	f000 fb5a 	bl	80013a4 <__swsetup_r>
 8000cf0:	b1c0      	cbz	r0, 8000d24 <_vfiprintf_r+0x78>
 8000cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cf4:	07dc      	lsls	r4, r3, #31
 8000cf6:	d50e      	bpl.n	8000d16 <_vfiprintf_r+0x6a>
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cfc:	b01d      	add	sp, #116	; 0x74
 8000cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d02:	4b7b      	ldr	r3, [pc, #492]	; (8000ef0 <_vfiprintf_r+0x244>)
 8000d04:	429d      	cmp	r5, r3
 8000d06:	d101      	bne.n	8000d0c <_vfiprintf_r+0x60>
 8000d08:	68b5      	ldr	r5, [r6, #8]
 8000d0a:	e7df      	b.n	8000ccc <_vfiprintf_r+0x20>
 8000d0c:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <_vfiprintf_r+0x248>)
 8000d0e:	429d      	cmp	r5, r3
 8000d10:	bf08      	it	eq
 8000d12:	68f5      	ldreq	r5, [r6, #12]
 8000d14:	e7da      	b.n	8000ccc <_vfiprintf_r+0x20>
 8000d16:	89ab      	ldrh	r3, [r5, #12]
 8000d18:	0598      	lsls	r0, r3, #22
 8000d1a:	d4ed      	bmi.n	8000cf8 <_vfiprintf_r+0x4c>
 8000d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d1e:	f7ff ff40 	bl	8000ba2 <__retarget_lock_release_recursive>
 8000d22:	e7e9      	b.n	8000cf8 <_vfiprintf_r+0x4c>
 8000d24:	2300      	movs	r3, #0
 8000d26:	9309      	str	r3, [sp, #36]	; 0x24
 8000d28:	2320      	movs	r3, #32
 8000d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d32:	2330      	movs	r3, #48	; 0x30
 8000d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000ef8 <_vfiprintf_r+0x24c>
 8000d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d3c:	f04f 0901 	mov.w	r9, #1
 8000d40:	4623      	mov	r3, r4
 8000d42:	469a      	mov	sl, r3
 8000d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d48:	b10a      	cbz	r2, 8000d4e <_vfiprintf_r+0xa2>
 8000d4a:	2a25      	cmp	r2, #37	; 0x25
 8000d4c:	d1f9      	bne.n	8000d42 <_vfiprintf_r+0x96>
 8000d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8000d52:	d00b      	beq.n	8000d6c <_vfiprintf_r+0xc0>
 8000d54:	465b      	mov	r3, fp
 8000d56:	4622      	mov	r2, r4
 8000d58:	4629      	mov	r1, r5
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	f7ff ff93 	bl	8000c86 <__sfputs_r>
 8000d60:	3001      	adds	r0, #1
 8000d62:	f000 80aa 	beq.w	8000eba <_vfiprintf_r+0x20e>
 8000d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d68:	445a      	add	r2, fp
 8000d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8000d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80a2 	beq.w	8000eba <_vfiprintf_r+0x20e>
 8000d76:	2300      	movs	r3, #0
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d80:	f10a 0a01 	add.w	sl, sl, #1
 8000d84:	9304      	str	r3, [sp, #16]
 8000d86:	9307      	str	r3, [sp, #28]
 8000d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8000d8e:	4654      	mov	r4, sl
 8000d90:	2205      	movs	r2, #5
 8000d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d96:	4858      	ldr	r0, [pc, #352]	; (8000ef8 <_vfiprintf_r+0x24c>)
 8000d98:	f7ff fa1a 	bl	80001d0 <memchr>
 8000d9c:	9a04      	ldr	r2, [sp, #16]
 8000d9e:	b9d8      	cbnz	r0, 8000dd8 <_vfiprintf_r+0x12c>
 8000da0:	06d1      	lsls	r1, r2, #27
 8000da2:	bf44      	itt	mi
 8000da4:	2320      	movmi	r3, #32
 8000da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000daa:	0713      	lsls	r3, r2, #28
 8000dac:	bf44      	itt	mi
 8000dae:	232b      	movmi	r3, #43	; 0x2b
 8000db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000db4:	f89a 3000 	ldrb.w	r3, [sl]
 8000db8:	2b2a      	cmp	r3, #42	; 0x2a
 8000dba:	d015      	beq.n	8000de8 <_vfiprintf_r+0x13c>
 8000dbc:	9a07      	ldr	r2, [sp, #28]
 8000dbe:	4654      	mov	r4, sl
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f04f 0c0a 	mov.w	ip, #10
 8000dc6:	4621      	mov	r1, r4
 8000dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dcc:	3b30      	subs	r3, #48	; 0x30
 8000dce:	2b09      	cmp	r3, #9
 8000dd0:	d94e      	bls.n	8000e70 <_vfiprintf_r+0x1c4>
 8000dd2:	b1b0      	cbz	r0, 8000e02 <_vfiprintf_r+0x156>
 8000dd4:	9207      	str	r2, [sp, #28]
 8000dd6:	e014      	b.n	8000e02 <_vfiprintf_r+0x156>
 8000dd8:	eba0 0308 	sub.w	r3, r0, r8
 8000ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	9304      	str	r3, [sp, #16]
 8000de4:	46a2      	mov	sl, r4
 8000de6:	e7d2      	b.n	8000d8e <_vfiprintf_r+0xe2>
 8000de8:	9b03      	ldr	r3, [sp, #12]
 8000dea:	1d19      	adds	r1, r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	9103      	str	r1, [sp, #12]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bfbb      	ittet	lt
 8000df4:	425b      	neglt	r3, r3
 8000df6:	f042 0202 	orrlt.w	r2, r2, #2
 8000dfa:	9307      	strge	r3, [sp, #28]
 8000dfc:	9307      	strlt	r3, [sp, #28]
 8000dfe:	bfb8      	it	lt
 8000e00:	9204      	strlt	r2, [sp, #16]
 8000e02:	7823      	ldrb	r3, [r4, #0]
 8000e04:	2b2e      	cmp	r3, #46	; 0x2e
 8000e06:	d10c      	bne.n	8000e22 <_vfiprintf_r+0x176>
 8000e08:	7863      	ldrb	r3, [r4, #1]
 8000e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8000e0c:	d135      	bne.n	8000e7a <_vfiprintf_r+0x1ce>
 8000e0e:	9b03      	ldr	r3, [sp, #12]
 8000e10:	1d1a      	adds	r2, r3, #4
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	9203      	str	r2, [sp, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bfb8      	it	lt
 8000e1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000e1e:	3402      	adds	r4, #2
 8000e20:	9305      	str	r3, [sp, #20]
 8000e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000f08 <_vfiprintf_r+0x25c>
 8000e26:	7821      	ldrb	r1, [r4, #0]
 8000e28:	2203      	movs	r2, #3
 8000e2a:	4650      	mov	r0, sl
 8000e2c:	f7ff f9d0 	bl	80001d0 <memchr>
 8000e30:	b140      	cbz	r0, 8000e44 <_vfiprintf_r+0x198>
 8000e32:	2340      	movs	r3, #64	; 0x40
 8000e34:	eba0 000a 	sub.w	r0, r0, sl
 8000e38:	fa03 f000 	lsl.w	r0, r3, r0
 8000e3c:	9b04      	ldr	r3, [sp, #16]
 8000e3e:	4303      	orrs	r3, r0
 8000e40:	3401      	adds	r4, #1
 8000e42:	9304      	str	r3, [sp, #16]
 8000e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e48:	482c      	ldr	r0, [pc, #176]	; (8000efc <_vfiprintf_r+0x250>)
 8000e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e4e:	2206      	movs	r2, #6
 8000e50:	f7ff f9be 	bl	80001d0 <memchr>
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d03f      	beq.n	8000ed8 <_vfiprintf_r+0x22c>
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <_vfiprintf_r+0x254>)
 8000e5a:	bb1b      	cbnz	r3, 8000ea4 <_vfiprintf_r+0x1f8>
 8000e5c:	9b03      	ldr	r3, [sp, #12]
 8000e5e:	3307      	adds	r3, #7
 8000e60:	f023 0307 	bic.w	r3, r3, #7
 8000e64:	3308      	adds	r3, #8
 8000e66:	9303      	str	r3, [sp, #12]
 8000e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e6a:	443b      	add	r3, r7
 8000e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8000e6e:	e767      	b.n	8000d40 <_vfiprintf_r+0x94>
 8000e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e74:	460c      	mov	r4, r1
 8000e76:	2001      	movs	r0, #1
 8000e78:	e7a5      	b.n	8000dc6 <_vfiprintf_r+0x11a>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	3401      	adds	r4, #1
 8000e7e:	9305      	str	r3, [sp, #20]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 0c0a 	mov.w	ip, #10
 8000e86:	4620      	mov	r0, r4
 8000e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e8c:	3a30      	subs	r2, #48	; 0x30
 8000e8e:	2a09      	cmp	r2, #9
 8000e90:	d903      	bls.n	8000e9a <_vfiprintf_r+0x1ee>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0c5      	beq.n	8000e22 <_vfiprintf_r+0x176>
 8000e96:	9105      	str	r1, [sp, #20]
 8000e98:	e7c3      	b.n	8000e22 <_vfiprintf_r+0x176>
 8000e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e7f0      	b.n	8000e86 <_vfiprintf_r+0x1da>
 8000ea4:	ab03      	add	r3, sp, #12
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	462a      	mov	r2, r5
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <_vfiprintf_r+0x258>)
 8000eac:	a904      	add	r1, sp, #16
 8000eae:	4630      	mov	r0, r6
 8000eb0:	f3af 8000 	nop.w
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	1c78      	adds	r0, r7, #1
 8000eb8:	d1d6      	bne.n	8000e68 <_vfiprintf_r+0x1bc>
 8000eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ebc:	07d9      	lsls	r1, r3, #31
 8000ebe:	d405      	bmi.n	8000ecc <_vfiprintf_r+0x220>
 8000ec0:	89ab      	ldrh	r3, [r5, #12]
 8000ec2:	059a      	lsls	r2, r3, #22
 8000ec4:	d402      	bmi.n	8000ecc <_vfiprintf_r+0x220>
 8000ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ec8:	f7ff fe6b 	bl	8000ba2 <__retarget_lock_release_recursive>
 8000ecc:	89ab      	ldrh	r3, [r5, #12]
 8000ece:	065b      	lsls	r3, r3, #25
 8000ed0:	f53f af12 	bmi.w	8000cf8 <_vfiprintf_r+0x4c>
 8000ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ed6:	e711      	b.n	8000cfc <_vfiprintf_r+0x50>
 8000ed8:	ab03      	add	r3, sp, #12
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	462a      	mov	r2, r5
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <_vfiprintf_r+0x258>)
 8000ee0:	a904      	add	r1, sp, #16
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	f000 f880 	bl	8000fe8 <_printf_i>
 8000ee8:	e7e4      	b.n	8000eb4 <_vfiprintf_r+0x208>
 8000eea:	bf00      	nop
 8000eec:	08001914 	.word	0x08001914
 8000ef0:	08001934 	.word	0x08001934
 8000ef4:	080018f4 	.word	0x080018f4
 8000ef8:	08001954 	.word	0x08001954
 8000efc:	0800195e 	.word	0x0800195e
 8000f00:	00000000 	.word	0x00000000
 8000f04:	08000c87 	.word	0x08000c87
 8000f08:	0800195a 	.word	0x0800195a

08000f0c <_printf_common>:
 8000f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f10:	4616      	mov	r6, r2
 8000f12:	4699      	mov	r9, r3
 8000f14:	688a      	ldr	r2, [r1, #8]
 8000f16:	690b      	ldr	r3, [r1, #16]
 8000f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	bfb8      	it	lt
 8000f20:	4613      	movlt	r3, r2
 8000f22:	6033      	str	r3, [r6, #0]
 8000f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f28:	4607      	mov	r7, r0
 8000f2a:	460c      	mov	r4, r1
 8000f2c:	b10a      	cbz	r2, 8000f32 <_printf_common+0x26>
 8000f2e:	3301      	adds	r3, #1
 8000f30:	6033      	str	r3, [r6, #0]
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	0699      	lsls	r1, r3, #26
 8000f36:	bf42      	ittt	mi
 8000f38:	6833      	ldrmi	r3, [r6, #0]
 8000f3a:	3302      	addmi	r3, #2
 8000f3c:	6033      	strmi	r3, [r6, #0]
 8000f3e:	6825      	ldr	r5, [r4, #0]
 8000f40:	f015 0506 	ands.w	r5, r5, #6
 8000f44:	d106      	bne.n	8000f54 <_printf_common+0x48>
 8000f46:	f104 0a19 	add.w	sl, r4, #25
 8000f4a:	68e3      	ldr	r3, [r4, #12]
 8000f4c:	6832      	ldr	r2, [r6, #0]
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	42ab      	cmp	r3, r5
 8000f52:	dc26      	bgt.n	8000fa2 <_printf_common+0x96>
 8000f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f58:	1e13      	subs	r3, r2, #0
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	bf18      	it	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	0692      	lsls	r2, r2, #26
 8000f62:	d42b      	bmi.n	8000fbc <_printf_common+0xb0>
 8000f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f68:	4649      	mov	r1, r9
 8000f6a:	4638      	mov	r0, r7
 8000f6c:	47c0      	blx	r8
 8000f6e:	3001      	adds	r0, #1
 8000f70:	d01e      	beq.n	8000fb0 <_printf_common+0xa4>
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	68e5      	ldr	r5, [r4, #12]
 8000f76:	6832      	ldr	r2, [r6, #0]
 8000f78:	f003 0306 	and.w	r3, r3, #6
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	bf08      	it	eq
 8000f80:	1aad      	subeq	r5, r5, r2
 8000f82:	68a3      	ldr	r3, [r4, #8]
 8000f84:	6922      	ldr	r2, [r4, #16]
 8000f86:	bf0c      	ite	eq
 8000f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f8c:	2500      	movne	r5, #0
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	bfc4      	itt	gt
 8000f92:	1a9b      	subgt	r3, r3, r2
 8000f94:	18ed      	addgt	r5, r5, r3
 8000f96:	2600      	movs	r6, #0
 8000f98:	341a      	adds	r4, #26
 8000f9a:	42b5      	cmp	r5, r6
 8000f9c:	d11a      	bne.n	8000fd4 <_printf_common+0xc8>
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	e008      	b.n	8000fb4 <_printf_common+0xa8>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4652      	mov	r2, sl
 8000fa6:	4649      	mov	r1, r9
 8000fa8:	4638      	mov	r0, r7
 8000faa:	47c0      	blx	r8
 8000fac:	3001      	adds	r0, #1
 8000fae:	d103      	bne.n	8000fb8 <_printf_common+0xac>
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb8:	3501      	adds	r5, #1
 8000fba:	e7c6      	b.n	8000f4a <_printf_common+0x3e>
 8000fbc:	18e1      	adds	r1, r4, r3
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	2030      	movs	r0, #48	; 0x30
 8000fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fc6:	4422      	add	r2, r4
 8000fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	e7c7      	b.n	8000f64 <_printf_common+0x58>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	4649      	mov	r1, r9
 8000fda:	4638      	mov	r0, r7
 8000fdc:	47c0      	blx	r8
 8000fde:	3001      	adds	r0, #1
 8000fe0:	d0e6      	beq.n	8000fb0 <_printf_common+0xa4>
 8000fe2:	3601      	adds	r6, #1
 8000fe4:	e7d9      	b.n	8000f9a <_printf_common+0x8e>
	...

08000fe8 <_printf_i>:
 8000fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fec:	460c      	mov	r4, r1
 8000fee:	4691      	mov	r9, r2
 8000ff0:	7e27      	ldrb	r7, [r4, #24]
 8000ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000ff4:	2f78      	cmp	r7, #120	; 0x78
 8000ff6:	4680      	mov	r8, r0
 8000ff8:	469a      	mov	sl, r3
 8000ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ffe:	d807      	bhi.n	8001010 <_printf_i+0x28>
 8001000:	2f62      	cmp	r7, #98	; 0x62
 8001002:	d80a      	bhi.n	800101a <_printf_i+0x32>
 8001004:	2f00      	cmp	r7, #0
 8001006:	f000 80d8 	beq.w	80011ba <_printf_i+0x1d2>
 800100a:	2f58      	cmp	r7, #88	; 0x58
 800100c:	f000 80a3 	beq.w	8001156 <_printf_i+0x16e>
 8001010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001018:	e03a      	b.n	8001090 <_printf_i+0xa8>
 800101a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800101e:	2b15      	cmp	r3, #21
 8001020:	d8f6      	bhi.n	8001010 <_printf_i+0x28>
 8001022:	a001      	add	r0, pc, #4	; (adr r0, 8001028 <_printf_i+0x40>)
 8001024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001028:	08001081 	.word	0x08001081
 800102c:	08001095 	.word	0x08001095
 8001030:	08001011 	.word	0x08001011
 8001034:	08001011 	.word	0x08001011
 8001038:	08001011 	.word	0x08001011
 800103c:	08001011 	.word	0x08001011
 8001040:	08001095 	.word	0x08001095
 8001044:	08001011 	.word	0x08001011
 8001048:	08001011 	.word	0x08001011
 800104c:	08001011 	.word	0x08001011
 8001050:	08001011 	.word	0x08001011
 8001054:	080011a1 	.word	0x080011a1
 8001058:	080010c5 	.word	0x080010c5
 800105c:	08001183 	.word	0x08001183
 8001060:	08001011 	.word	0x08001011
 8001064:	08001011 	.word	0x08001011
 8001068:	080011c3 	.word	0x080011c3
 800106c:	08001011 	.word	0x08001011
 8001070:	080010c5 	.word	0x080010c5
 8001074:	08001011 	.word	0x08001011
 8001078:	08001011 	.word	0x08001011
 800107c:	0800118b 	.word	0x0800118b
 8001080:	680b      	ldr	r3, [r1, #0]
 8001082:	1d1a      	adds	r2, r3, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	600a      	str	r2, [r1, #0]
 8001088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800108c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001090:	2301      	movs	r3, #1
 8001092:	e0a3      	b.n	80011dc <_printf_i+0x1f4>
 8001094:	6825      	ldr	r5, [r4, #0]
 8001096:	6808      	ldr	r0, [r1, #0]
 8001098:	062e      	lsls	r6, r5, #24
 800109a:	f100 0304 	add.w	r3, r0, #4
 800109e:	d50a      	bpl.n	80010b6 <_printf_i+0xce>
 80010a0:	6805      	ldr	r5, [r0, #0]
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	2d00      	cmp	r5, #0
 80010a6:	da03      	bge.n	80010b0 <_printf_i+0xc8>
 80010a8:	232d      	movs	r3, #45	; 0x2d
 80010aa:	426d      	negs	r5, r5
 80010ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010b0:	485e      	ldr	r0, [pc, #376]	; (800122c <_printf_i+0x244>)
 80010b2:	230a      	movs	r3, #10
 80010b4:	e019      	b.n	80010ea <_printf_i+0x102>
 80010b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80010ba:	6805      	ldr	r5, [r0, #0]
 80010bc:	600b      	str	r3, [r1, #0]
 80010be:	bf18      	it	ne
 80010c0:	b22d      	sxthne	r5, r5
 80010c2:	e7ef      	b.n	80010a4 <_printf_i+0xbc>
 80010c4:	680b      	ldr	r3, [r1, #0]
 80010c6:	6825      	ldr	r5, [r4, #0]
 80010c8:	1d18      	adds	r0, r3, #4
 80010ca:	6008      	str	r0, [r1, #0]
 80010cc:	0628      	lsls	r0, r5, #24
 80010ce:	d501      	bpl.n	80010d4 <_printf_i+0xec>
 80010d0:	681d      	ldr	r5, [r3, #0]
 80010d2:	e002      	b.n	80010da <_printf_i+0xf2>
 80010d4:	0669      	lsls	r1, r5, #25
 80010d6:	d5fb      	bpl.n	80010d0 <_printf_i+0xe8>
 80010d8:	881d      	ldrh	r5, [r3, #0]
 80010da:	4854      	ldr	r0, [pc, #336]	; (800122c <_printf_i+0x244>)
 80010dc:	2f6f      	cmp	r7, #111	; 0x6f
 80010de:	bf0c      	ite	eq
 80010e0:	2308      	moveq	r3, #8
 80010e2:	230a      	movne	r3, #10
 80010e4:	2100      	movs	r1, #0
 80010e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010ea:	6866      	ldr	r6, [r4, #4]
 80010ec:	60a6      	str	r6, [r4, #8]
 80010ee:	2e00      	cmp	r6, #0
 80010f0:	bfa2      	ittt	ge
 80010f2:	6821      	ldrge	r1, [r4, #0]
 80010f4:	f021 0104 	bicge.w	r1, r1, #4
 80010f8:	6021      	strge	r1, [r4, #0]
 80010fa:	b90d      	cbnz	r5, 8001100 <_printf_i+0x118>
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d04d      	beq.n	800119c <_printf_i+0x1b4>
 8001100:	4616      	mov	r6, r2
 8001102:	fbb5 f1f3 	udiv	r1, r5, r3
 8001106:	fb03 5711 	mls	r7, r3, r1, r5
 800110a:	5dc7      	ldrb	r7, [r0, r7]
 800110c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001110:	462f      	mov	r7, r5
 8001112:	42bb      	cmp	r3, r7
 8001114:	460d      	mov	r5, r1
 8001116:	d9f4      	bls.n	8001102 <_printf_i+0x11a>
 8001118:	2b08      	cmp	r3, #8
 800111a:	d10b      	bne.n	8001134 <_printf_i+0x14c>
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	07df      	lsls	r7, r3, #31
 8001120:	d508      	bpl.n	8001134 <_printf_i+0x14c>
 8001122:	6923      	ldr	r3, [r4, #16]
 8001124:	6861      	ldr	r1, [r4, #4]
 8001126:	4299      	cmp	r1, r3
 8001128:	bfde      	ittt	le
 800112a:	2330      	movle	r3, #48	; 0x30
 800112c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001130:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001134:	1b92      	subs	r2, r2, r6
 8001136:	6122      	str	r2, [r4, #16]
 8001138:	f8cd a000 	str.w	sl, [sp]
 800113c:	464b      	mov	r3, r9
 800113e:	aa03      	add	r2, sp, #12
 8001140:	4621      	mov	r1, r4
 8001142:	4640      	mov	r0, r8
 8001144:	f7ff fee2 	bl	8000f0c <_printf_common>
 8001148:	3001      	adds	r0, #1
 800114a:	d14c      	bne.n	80011e6 <_printf_i+0x1fe>
 800114c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001150:	b004      	add	sp, #16
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001156:	4835      	ldr	r0, [pc, #212]	; (800122c <_printf_i+0x244>)
 8001158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	680e      	ldr	r6, [r1, #0]
 8001160:	061f      	lsls	r7, r3, #24
 8001162:	f856 5b04 	ldr.w	r5, [r6], #4
 8001166:	600e      	str	r6, [r1, #0]
 8001168:	d514      	bpl.n	8001194 <_printf_i+0x1ac>
 800116a:	07d9      	lsls	r1, r3, #31
 800116c:	bf44      	itt	mi
 800116e:	f043 0320 	orrmi.w	r3, r3, #32
 8001172:	6023      	strmi	r3, [r4, #0]
 8001174:	b91d      	cbnz	r5, 800117e <_printf_i+0x196>
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	f023 0320 	bic.w	r3, r3, #32
 800117c:	6023      	str	r3, [r4, #0]
 800117e:	2310      	movs	r3, #16
 8001180:	e7b0      	b.n	80010e4 <_printf_i+0xfc>
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	f043 0320 	orr.w	r3, r3, #32
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	2378      	movs	r3, #120	; 0x78
 800118c:	4828      	ldr	r0, [pc, #160]	; (8001230 <_printf_i+0x248>)
 800118e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001192:	e7e3      	b.n	800115c <_printf_i+0x174>
 8001194:	065e      	lsls	r6, r3, #25
 8001196:	bf48      	it	mi
 8001198:	b2ad      	uxthmi	r5, r5
 800119a:	e7e6      	b.n	800116a <_printf_i+0x182>
 800119c:	4616      	mov	r6, r2
 800119e:	e7bb      	b.n	8001118 <_printf_i+0x130>
 80011a0:	680b      	ldr	r3, [r1, #0]
 80011a2:	6826      	ldr	r6, [r4, #0]
 80011a4:	6960      	ldr	r0, [r4, #20]
 80011a6:	1d1d      	adds	r5, r3, #4
 80011a8:	600d      	str	r5, [r1, #0]
 80011aa:	0635      	lsls	r5, r6, #24
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	d501      	bpl.n	80011b4 <_printf_i+0x1cc>
 80011b0:	6018      	str	r0, [r3, #0]
 80011b2:	e002      	b.n	80011ba <_printf_i+0x1d2>
 80011b4:	0671      	lsls	r1, r6, #25
 80011b6:	d5fb      	bpl.n	80011b0 <_printf_i+0x1c8>
 80011b8:	8018      	strh	r0, [r3, #0]
 80011ba:	2300      	movs	r3, #0
 80011bc:	6123      	str	r3, [r4, #16]
 80011be:	4616      	mov	r6, r2
 80011c0:	e7ba      	b.n	8001138 <_printf_i+0x150>
 80011c2:	680b      	ldr	r3, [r1, #0]
 80011c4:	1d1a      	adds	r2, r3, #4
 80011c6:	600a      	str	r2, [r1, #0]
 80011c8:	681e      	ldr	r6, [r3, #0]
 80011ca:	6862      	ldr	r2, [r4, #4]
 80011cc:	2100      	movs	r1, #0
 80011ce:	4630      	mov	r0, r6
 80011d0:	f7fe fffe 	bl	80001d0 <memchr>
 80011d4:	b108      	cbz	r0, 80011da <_printf_i+0x1f2>
 80011d6:	1b80      	subs	r0, r0, r6
 80011d8:	6060      	str	r0, [r4, #4]
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	6123      	str	r3, [r4, #16]
 80011de:	2300      	movs	r3, #0
 80011e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011e4:	e7a8      	b.n	8001138 <_printf_i+0x150>
 80011e6:	6923      	ldr	r3, [r4, #16]
 80011e8:	4632      	mov	r2, r6
 80011ea:	4649      	mov	r1, r9
 80011ec:	4640      	mov	r0, r8
 80011ee:	47d0      	blx	sl
 80011f0:	3001      	adds	r0, #1
 80011f2:	d0ab      	beq.n	800114c <_printf_i+0x164>
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	079b      	lsls	r3, r3, #30
 80011f8:	d413      	bmi.n	8001222 <_printf_i+0x23a>
 80011fa:	68e0      	ldr	r0, [r4, #12]
 80011fc:	9b03      	ldr	r3, [sp, #12]
 80011fe:	4298      	cmp	r0, r3
 8001200:	bfb8      	it	lt
 8001202:	4618      	movlt	r0, r3
 8001204:	e7a4      	b.n	8001150 <_printf_i+0x168>
 8001206:	2301      	movs	r3, #1
 8001208:	4632      	mov	r2, r6
 800120a:	4649      	mov	r1, r9
 800120c:	4640      	mov	r0, r8
 800120e:	47d0      	blx	sl
 8001210:	3001      	adds	r0, #1
 8001212:	d09b      	beq.n	800114c <_printf_i+0x164>
 8001214:	3501      	adds	r5, #1
 8001216:	68e3      	ldr	r3, [r4, #12]
 8001218:	9903      	ldr	r1, [sp, #12]
 800121a:	1a5b      	subs	r3, r3, r1
 800121c:	42ab      	cmp	r3, r5
 800121e:	dcf2      	bgt.n	8001206 <_printf_i+0x21e>
 8001220:	e7eb      	b.n	80011fa <_printf_i+0x212>
 8001222:	2500      	movs	r5, #0
 8001224:	f104 0619 	add.w	r6, r4, #25
 8001228:	e7f5      	b.n	8001216 <_printf_i+0x22e>
 800122a:	bf00      	nop
 800122c:	08001965 	.word	0x08001965
 8001230:	08001976 	.word	0x08001976

08001234 <_sbrk_r>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4d06      	ldr	r5, [pc, #24]	; (8001250 <_sbrk_r+0x1c>)
 8001238:	2300      	movs	r3, #0
 800123a:	4604      	mov	r4, r0
 800123c:	4608      	mov	r0, r1
 800123e:	602b      	str	r3, [r5, #0]
 8001240:	f7ff f9a4 	bl	800058c <_sbrk>
 8001244:	1c43      	adds	r3, r0, #1
 8001246:	d102      	bne.n	800124e <_sbrk_r+0x1a>
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	b103      	cbz	r3, 800124e <_sbrk_r+0x1a>
 800124c:	6023      	str	r3, [r4, #0]
 800124e:	bd38      	pop	{r3, r4, r5, pc}
 8001250:	200000e0 	.word	0x200000e0

08001254 <__sread>:
 8001254:	b510      	push	{r4, lr}
 8001256:	460c      	mov	r4, r1
 8001258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800125c:	f000 fab4 	bl	80017c8 <_read_r>
 8001260:	2800      	cmp	r0, #0
 8001262:	bfab      	itete	ge
 8001264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001266:	89a3      	ldrhlt	r3, [r4, #12]
 8001268:	181b      	addge	r3, r3, r0
 800126a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800126e:	bfac      	ite	ge
 8001270:	6563      	strge	r3, [r4, #84]	; 0x54
 8001272:	81a3      	strhlt	r3, [r4, #12]
 8001274:	bd10      	pop	{r4, pc}

08001276 <__swrite>:
 8001276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800127a:	461f      	mov	r7, r3
 800127c:	898b      	ldrh	r3, [r1, #12]
 800127e:	05db      	lsls	r3, r3, #23
 8001280:	4605      	mov	r5, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4616      	mov	r6, r2
 8001286:	d505      	bpl.n	8001294 <__swrite+0x1e>
 8001288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800128c:	2302      	movs	r3, #2
 800128e:	2200      	movs	r2, #0
 8001290:	f000 f9c8 	bl	8001624 <_lseek_r>
 8001294:	89a3      	ldrh	r3, [r4, #12]
 8001296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800129a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800129e:	81a3      	strh	r3, [r4, #12]
 80012a0:	4632      	mov	r2, r6
 80012a2:	463b      	mov	r3, r7
 80012a4:	4628      	mov	r0, r5
 80012a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012aa:	f000 b869 	b.w	8001380 <_write_r>

080012ae <__sseek>:
 80012ae:	b510      	push	{r4, lr}
 80012b0:	460c      	mov	r4, r1
 80012b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b6:	f000 f9b5 	bl	8001624 <_lseek_r>
 80012ba:	1c43      	adds	r3, r0, #1
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	bf15      	itete	ne
 80012c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80012c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80012c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80012ca:	81a3      	strheq	r3, [r4, #12]
 80012cc:	bf18      	it	ne
 80012ce:	81a3      	strhne	r3, [r4, #12]
 80012d0:	bd10      	pop	{r4, pc}

080012d2 <__sclose>:
 80012d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012d6:	f000 b8d3 	b.w	8001480 <_close_r>
	...

080012dc <__swbuf_r>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	460e      	mov	r6, r1
 80012e0:	4614      	mov	r4, r2
 80012e2:	4605      	mov	r5, r0
 80012e4:	b118      	cbz	r0, 80012ee <__swbuf_r+0x12>
 80012e6:	6983      	ldr	r3, [r0, #24]
 80012e8:	b90b      	cbnz	r3, 80012ee <__swbuf_r+0x12>
 80012ea:	f7ff fbbb 	bl	8000a64 <__sinit>
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <__swbuf_r+0x98>)
 80012f0:	429c      	cmp	r4, r3
 80012f2:	d12b      	bne.n	800134c <__swbuf_r+0x70>
 80012f4:	686c      	ldr	r4, [r5, #4]
 80012f6:	69a3      	ldr	r3, [r4, #24]
 80012f8:	60a3      	str	r3, [r4, #8]
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	071a      	lsls	r2, r3, #28
 80012fe:	d52f      	bpl.n	8001360 <__swbuf_r+0x84>
 8001300:	6923      	ldr	r3, [r4, #16]
 8001302:	b36b      	cbz	r3, 8001360 <__swbuf_r+0x84>
 8001304:	6923      	ldr	r3, [r4, #16]
 8001306:	6820      	ldr	r0, [r4, #0]
 8001308:	1ac0      	subs	r0, r0, r3
 800130a:	6963      	ldr	r3, [r4, #20]
 800130c:	b2f6      	uxtb	r6, r6
 800130e:	4283      	cmp	r3, r0
 8001310:	4637      	mov	r7, r6
 8001312:	dc04      	bgt.n	800131e <__swbuf_r+0x42>
 8001314:	4621      	mov	r1, r4
 8001316:	4628      	mov	r0, r5
 8001318:	f000 f948 	bl	80015ac <_fflush_r>
 800131c:	bb30      	cbnz	r0, 800136c <__swbuf_r+0x90>
 800131e:	68a3      	ldr	r3, [r4, #8]
 8001320:	3b01      	subs	r3, #1
 8001322:	60a3      	str	r3, [r4, #8]
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	6022      	str	r2, [r4, #0]
 800132a:	701e      	strb	r6, [r3, #0]
 800132c:	6963      	ldr	r3, [r4, #20]
 800132e:	3001      	adds	r0, #1
 8001330:	4283      	cmp	r3, r0
 8001332:	d004      	beq.n	800133e <__swbuf_r+0x62>
 8001334:	89a3      	ldrh	r3, [r4, #12]
 8001336:	07db      	lsls	r3, r3, #31
 8001338:	d506      	bpl.n	8001348 <__swbuf_r+0x6c>
 800133a:	2e0a      	cmp	r6, #10
 800133c:	d104      	bne.n	8001348 <__swbuf_r+0x6c>
 800133e:	4621      	mov	r1, r4
 8001340:	4628      	mov	r0, r5
 8001342:	f000 f933 	bl	80015ac <_fflush_r>
 8001346:	b988      	cbnz	r0, 800136c <__swbuf_r+0x90>
 8001348:	4638      	mov	r0, r7
 800134a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <__swbuf_r+0x9c>)
 800134e:	429c      	cmp	r4, r3
 8001350:	d101      	bne.n	8001356 <__swbuf_r+0x7a>
 8001352:	68ac      	ldr	r4, [r5, #8]
 8001354:	e7cf      	b.n	80012f6 <__swbuf_r+0x1a>
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <__swbuf_r+0xa0>)
 8001358:	429c      	cmp	r4, r3
 800135a:	bf08      	it	eq
 800135c:	68ec      	ldreq	r4, [r5, #12]
 800135e:	e7ca      	b.n	80012f6 <__swbuf_r+0x1a>
 8001360:	4621      	mov	r1, r4
 8001362:	4628      	mov	r0, r5
 8001364:	f000 f81e 	bl	80013a4 <__swsetup_r>
 8001368:	2800      	cmp	r0, #0
 800136a:	d0cb      	beq.n	8001304 <__swbuf_r+0x28>
 800136c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001370:	e7ea      	b.n	8001348 <__swbuf_r+0x6c>
 8001372:	bf00      	nop
 8001374:	08001914 	.word	0x08001914
 8001378:	08001934 	.word	0x08001934
 800137c:	080018f4 	.word	0x080018f4

08001380 <_write_r>:
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	4d07      	ldr	r5, [pc, #28]	; (80013a0 <_write_r+0x20>)
 8001384:	4604      	mov	r4, r0
 8001386:	4608      	mov	r0, r1
 8001388:	4611      	mov	r1, r2
 800138a:	2200      	movs	r2, #0
 800138c:	602a      	str	r2, [r5, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	f7ff f8ab 	bl	80004ea <_write>
 8001394:	1c43      	adds	r3, r0, #1
 8001396:	d102      	bne.n	800139e <_write_r+0x1e>
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	b103      	cbz	r3, 800139e <_write_r+0x1e>
 800139c:	6023      	str	r3, [r4, #0]
 800139e:	bd38      	pop	{r3, r4, r5, pc}
 80013a0:	200000e0 	.word	0x200000e0

080013a4 <__swsetup_r>:
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <__swsetup_r+0xcc>)
 80013a6:	b570      	push	{r4, r5, r6, lr}
 80013a8:	681d      	ldr	r5, [r3, #0]
 80013aa:	4606      	mov	r6, r0
 80013ac:	460c      	mov	r4, r1
 80013ae:	b125      	cbz	r5, 80013ba <__swsetup_r+0x16>
 80013b0:	69ab      	ldr	r3, [r5, #24]
 80013b2:	b913      	cbnz	r3, 80013ba <__swsetup_r+0x16>
 80013b4:	4628      	mov	r0, r5
 80013b6:	f7ff fb55 	bl	8000a64 <__sinit>
 80013ba:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <__swsetup_r+0xd0>)
 80013bc:	429c      	cmp	r4, r3
 80013be:	d10f      	bne.n	80013e0 <__swsetup_r+0x3c>
 80013c0:	686c      	ldr	r4, [r5, #4]
 80013c2:	89a3      	ldrh	r3, [r4, #12]
 80013c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013c8:	0719      	lsls	r1, r3, #28
 80013ca:	d42c      	bmi.n	8001426 <__swsetup_r+0x82>
 80013cc:	06dd      	lsls	r5, r3, #27
 80013ce:	d411      	bmi.n	80013f4 <__swsetup_r+0x50>
 80013d0:	2309      	movs	r3, #9
 80013d2:	6033      	str	r3, [r6, #0]
 80013d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80013d8:	81a3      	strh	r3, [r4, #12]
 80013da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013de:	e03e      	b.n	800145e <__swsetup_r+0xba>
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <__swsetup_r+0xd4>)
 80013e2:	429c      	cmp	r4, r3
 80013e4:	d101      	bne.n	80013ea <__swsetup_r+0x46>
 80013e6:	68ac      	ldr	r4, [r5, #8]
 80013e8:	e7eb      	b.n	80013c2 <__swsetup_r+0x1e>
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <__swsetup_r+0xd8>)
 80013ec:	429c      	cmp	r4, r3
 80013ee:	bf08      	it	eq
 80013f0:	68ec      	ldreq	r4, [r5, #12]
 80013f2:	e7e6      	b.n	80013c2 <__swsetup_r+0x1e>
 80013f4:	0758      	lsls	r0, r3, #29
 80013f6:	d512      	bpl.n	800141e <__swsetup_r+0x7a>
 80013f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013fa:	b141      	cbz	r1, 800140e <__swsetup_r+0x6a>
 80013fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001400:	4299      	cmp	r1, r3
 8001402:	d002      	beq.n	800140a <__swsetup_r+0x66>
 8001404:	4630      	mov	r0, r6
 8001406:	f000 f98f 	bl	8001728 <_free_r>
 800140a:	2300      	movs	r3, #0
 800140c:	6363      	str	r3, [r4, #52]	; 0x34
 800140e:	89a3      	ldrh	r3, [r4, #12]
 8001410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001414:	81a3      	strh	r3, [r4, #12]
 8001416:	2300      	movs	r3, #0
 8001418:	6063      	str	r3, [r4, #4]
 800141a:	6923      	ldr	r3, [r4, #16]
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	81a3      	strh	r3, [r4, #12]
 8001426:	6923      	ldr	r3, [r4, #16]
 8001428:	b94b      	cbnz	r3, 800143e <__swsetup_r+0x9a>
 800142a:	89a3      	ldrh	r3, [r4, #12]
 800142c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001434:	d003      	beq.n	800143e <__swsetup_r+0x9a>
 8001436:	4621      	mov	r1, r4
 8001438:	4630      	mov	r0, r6
 800143a:	f000 f929 	bl	8001690 <__smakebuf_r>
 800143e:	89a0      	ldrh	r0, [r4, #12]
 8001440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001444:	f010 0301 	ands.w	r3, r0, #1
 8001448:	d00a      	beq.n	8001460 <__swsetup_r+0xbc>
 800144a:	2300      	movs	r3, #0
 800144c:	60a3      	str	r3, [r4, #8]
 800144e:	6963      	ldr	r3, [r4, #20]
 8001450:	425b      	negs	r3, r3
 8001452:	61a3      	str	r3, [r4, #24]
 8001454:	6923      	ldr	r3, [r4, #16]
 8001456:	b943      	cbnz	r3, 800146a <__swsetup_r+0xc6>
 8001458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800145c:	d1ba      	bne.n	80013d4 <__swsetup_r+0x30>
 800145e:	bd70      	pop	{r4, r5, r6, pc}
 8001460:	0781      	lsls	r1, r0, #30
 8001462:	bf58      	it	pl
 8001464:	6963      	ldrpl	r3, [r4, #20]
 8001466:	60a3      	str	r3, [r4, #8]
 8001468:	e7f4      	b.n	8001454 <__swsetup_r+0xb0>
 800146a:	2000      	movs	r0, #0
 800146c:	e7f7      	b.n	800145e <__swsetup_r+0xba>
 800146e:	bf00      	nop
 8001470:	20000018 	.word	0x20000018
 8001474:	08001914 	.word	0x08001914
 8001478:	08001934 	.word	0x08001934
 800147c:	080018f4 	.word	0x080018f4

08001480 <_close_r>:
 8001480:	b538      	push	{r3, r4, r5, lr}
 8001482:	4d06      	ldr	r5, [pc, #24]	; (800149c <_close_r+0x1c>)
 8001484:	2300      	movs	r3, #0
 8001486:	4604      	mov	r4, r0
 8001488:	4608      	mov	r0, r1
 800148a:	602b      	str	r3, [r5, #0]
 800148c:	f7ff f849 	bl	8000522 <_close>
 8001490:	1c43      	adds	r3, r0, #1
 8001492:	d102      	bne.n	800149a <_close_r+0x1a>
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	b103      	cbz	r3, 800149a <_close_r+0x1a>
 8001498:	6023      	str	r3, [r4, #0]
 800149a:	bd38      	pop	{r3, r4, r5, pc}
 800149c:	200000e0 	.word	0x200000e0

080014a0 <__sflush_r>:
 80014a0:	898a      	ldrh	r2, [r1, #12]
 80014a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014a6:	4605      	mov	r5, r0
 80014a8:	0710      	lsls	r0, r2, #28
 80014aa:	460c      	mov	r4, r1
 80014ac:	d458      	bmi.n	8001560 <__sflush_r+0xc0>
 80014ae:	684b      	ldr	r3, [r1, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	dc05      	bgt.n	80014c0 <__sflush_r+0x20>
 80014b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	dc02      	bgt.n	80014c0 <__sflush_r+0x20>
 80014ba:	2000      	movs	r0, #0
 80014bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014c2:	2e00      	cmp	r6, #0
 80014c4:	d0f9      	beq.n	80014ba <__sflush_r+0x1a>
 80014c6:	2300      	movs	r3, #0
 80014c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014cc:	682f      	ldr	r7, [r5, #0]
 80014ce:	602b      	str	r3, [r5, #0]
 80014d0:	d032      	beq.n	8001538 <__sflush_r+0x98>
 80014d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014d4:	89a3      	ldrh	r3, [r4, #12]
 80014d6:	075a      	lsls	r2, r3, #29
 80014d8:	d505      	bpl.n	80014e6 <__sflush_r+0x46>
 80014da:	6863      	ldr	r3, [r4, #4]
 80014dc:	1ac0      	subs	r0, r0, r3
 80014de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014e0:	b10b      	cbz	r3, 80014e6 <__sflush_r+0x46>
 80014e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014e4:	1ac0      	subs	r0, r0, r3
 80014e6:	2300      	movs	r3, #0
 80014e8:	4602      	mov	r2, r0
 80014ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014ec:	6a21      	ldr	r1, [r4, #32]
 80014ee:	4628      	mov	r0, r5
 80014f0:	47b0      	blx	r6
 80014f2:	1c43      	adds	r3, r0, #1
 80014f4:	89a3      	ldrh	r3, [r4, #12]
 80014f6:	d106      	bne.n	8001506 <__sflush_r+0x66>
 80014f8:	6829      	ldr	r1, [r5, #0]
 80014fa:	291d      	cmp	r1, #29
 80014fc:	d82c      	bhi.n	8001558 <__sflush_r+0xb8>
 80014fe:	4a2a      	ldr	r2, [pc, #168]	; (80015a8 <__sflush_r+0x108>)
 8001500:	40ca      	lsrs	r2, r1
 8001502:	07d6      	lsls	r6, r2, #31
 8001504:	d528      	bpl.n	8001558 <__sflush_r+0xb8>
 8001506:	2200      	movs	r2, #0
 8001508:	6062      	str	r2, [r4, #4]
 800150a:	04d9      	lsls	r1, r3, #19
 800150c:	6922      	ldr	r2, [r4, #16]
 800150e:	6022      	str	r2, [r4, #0]
 8001510:	d504      	bpl.n	800151c <__sflush_r+0x7c>
 8001512:	1c42      	adds	r2, r0, #1
 8001514:	d101      	bne.n	800151a <__sflush_r+0x7a>
 8001516:	682b      	ldr	r3, [r5, #0]
 8001518:	b903      	cbnz	r3, 800151c <__sflush_r+0x7c>
 800151a:	6560      	str	r0, [r4, #84]	; 0x54
 800151c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800151e:	602f      	str	r7, [r5, #0]
 8001520:	2900      	cmp	r1, #0
 8001522:	d0ca      	beq.n	80014ba <__sflush_r+0x1a>
 8001524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001528:	4299      	cmp	r1, r3
 800152a:	d002      	beq.n	8001532 <__sflush_r+0x92>
 800152c:	4628      	mov	r0, r5
 800152e:	f000 f8fb 	bl	8001728 <_free_r>
 8001532:	2000      	movs	r0, #0
 8001534:	6360      	str	r0, [r4, #52]	; 0x34
 8001536:	e7c1      	b.n	80014bc <__sflush_r+0x1c>
 8001538:	6a21      	ldr	r1, [r4, #32]
 800153a:	2301      	movs	r3, #1
 800153c:	4628      	mov	r0, r5
 800153e:	47b0      	blx	r6
 8001540:	1c41      	adds	r1, r0, #1
 8001542:	d1c7      	bne.n	80014d4 <__sflush_r+0x34>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0c4      	beq.n	80014d4 <__sflush_r+0x34>
 800154a:	2b1d      	cmp	r3, #29
 800154c:	d001      	beq.n	8001552 <__sflush_r+0xb2>
 800154e:	2b16      	cmp	r3, #22
 8001550:	d101      	bne.n	8001556 <__sflush_r+0xb6>
 8001552:	602f      	str	r7, [r5, #0]
 8001554:	e7b1      	b.n	80014ba <__sflush_r+0x1a>
 8001556:	89a3      	ldrh	r3, [r4, #12]
 8001558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800155c:	81a3      	strh	r3, [r4, #12]
 800155e:	e7ad      	b.n	80014bc <__sflush_r+0x1c>
 8001560:	690f      	ldr	r7, [r1, #16]
 8001562:	2f00      	cmp	r7, #0
 8001564:	d0a9      	beq.n	80014ba <__sflush_r+0x1a>
 8001566:	0793      	lsls	r3, r2, #30
 8001568:	680e      	ldr	r6, [r1, #0]
 800156a:	bf08      	it	eq
 800156c:	694b      	ldreq	r3, [r1, #20]
 800156e:	600f      	str	r7, [r1, #0]
 8001570:	bf18      	it	ne
 8001572:	2300      	movne	r3, #0
 8001574:	eba6 0807 	sub.w	r8, r6, r7
 8001578:	608b      	str	r3, [r1, #8]
 800157a:	f1b8 0f00 	cmp.w	r8, #0
 800157e:	dd9c      	ble.n	80014ba <__sflush_r+0x1a>
 8001580:	6a21      	ldr	r1, [r4, #32]
 8001582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001584:	4643      	mov	r3, r8
 8001586:	463a      	mov	r2, r7
 8001588:	4628      	mov	r0, r5
 800158a:	47b0      	blx	r6
 800158c:	2800      	cmp	r0, #0
 800158e:	dc06      	bgt.n	800159e <__sflush_r+0xfe>
 8001590:	89a3      	ldrh	r3, [r4, #12]
 8001592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001596:	81a3      	strh	r3, [r4, #12]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800159c:	e78e      	b.n	80014bc <__sflush_r+0x1c>
 800159e:	4407      	add	r7, r0
 80015a0:	eba8 0800 	sub.w	r8, r8, r0
 80015a4:	e7e9      	b.n	800157a <__sflush_r+0xda>
 80015a6:	bf00      	nop
 80015a8:	20400001 	.word	0x20400001

080015ac <_fflush_r>:
 80015ac:	b538      	push	{r3, r4, r5, lr}
 80015ae:	690b      	ldr	r3, [r1, #16]
 80015b0:	4605      	mov	r5, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	b913      	cbnz	r3, 80015bc <_fflush_r+0x10>
 80015b6:	2500      	movs	r5, #0
 80015b8:	4628      	mov	r0, r5
 80015ba:	bd38      	pop	{r3, r4, r5, pc}
 80015bc:	b118      	cbz	r0, 80015c6 <_fflush_r+0x1a>
 80015be:	6983      	ldr	r3, [r0, #24]
 80015c0:	b90b      	cbnz	r3, 80015c6 <_fflush_r+0x1a>
 80015c2:	f7ff fa4f 	bl	8000a64 <__sinit>
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <_fflush_r+0x6c>)
 80015c8:	429c      	cmp	r4, r3
 80015ca:	d11b      	bne.n	8001604 <_fflush_r+0x58>
 80015cc:	686c      	ldr	r4, [r5, #4]
 80015ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0ef      	beq.n	80015b6 <_fflush_r+0xa>
 80015d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015d8:	07d0      	lsls	r0, r2, #31
 80015da:	d404      	bmi.n	80015e6 <_fflush_r+0x3a>
 80015dc:	0599      	lsls	r1, r3, #22
 80015de:	d402      	bmi.n	80015e6 <_fflush_r+0x3a>
 80015e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015e2:	f7ff fadd 	bl	8000ba0 <__retarget_lock_acquire_recursive>
 80015e6:	4628      	mov	r0, r5
 80015e8:	4621      	mov	r1, r4
 80015ea:	f7ff ff59 	bl	80014a0 <__sflush_r>
 80015ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015f0:	07da      	lsls	r2, r3, #31
 80015f2:	4605      	mov	r5, r0
 80015f4:	d4e0      	bmi.n	80015b8 <_fflush_r+0xc>
 80015f6:	89a3      	ldrh	r3, [r4, #12]
 80015f8:	059b      	lsls	r3, r3, #22
 80015fa:	d4dd      	bmi.n	80015b8 <_fflush_r+0xc>
 80015fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015fe:	f7ff fad0 	bl	8000ba2 <__retarget_lock_release_recursive>
 8001602:	e7d9      	b.n	80015b8 <_fflush_r+0xc>
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <_fflush_r+0x70>)
 8001606:	429c      	cmp	r4, r3
 8001608:	d101      	bne.n	800160e <_fflush_r+0x62>
 800160a:	68ac      	ldr	r4, [r5, #8]
 800160c:	e7df      	b.n	80015ce <_fflush_r+0x22>
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <_fflush_r+0x74>)
 8001610:	429c      	cmp	r4, r3
 8001612:	bf08      	it	eq
 8001614:	68ec      	ldreq	r4, [r5, #12]
 8001616:	e7da      	b.n	80015ce <_fflush_r+0x22>
 8001618:	08001914 	.word	0x08001914
 800161c:	08001934 	.word	0x08001934
 8001620:	080018f4 	.word	0x080018f4

08001624 <_lseek_r>:
 8001624:	b538      	push	{r3, r4, r5, lr}
 8001626:	4d07      	ldr	r5, [pc, #28]	; (8001644 <_lseek_r+0x20>)
 8001628:	4604      	mov	r4, r0
 800162a:	4608      	mov	r0, r1
 800162c:	4611      	mov	r1, r2
 800162e:	2200      	movs	r2, #0
 8001630:	602a      	str	r2, [r5, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	f7fe ff9c 	bl	8000570 <_lseek>
 8001638:	1c43      	adds	r3, r0, #1
 800163a:	d102      	bne.n	8001642 <_lseek_r+0x1e>
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	b103      	cbz	r3, 8001642 <_lseek_r+0x1e>
 8001640:	6023      	str	r3, [r4, #0]
 8001642:	bd38      	pop	{r3, r4, r5, pc}
 8001644:	200000e0 	.word	0x200000e0

08001648 <__swhatbuf_r>:
 8001648:	b570      	push	{r4, r5, r6, lr}
 800164a:	460e      	mov	r6, r1
 800164c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001650:	2900      	cmp	r1, #0
 8001652:	b096      	sub	sp, #88	; 0x58
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	da07      	bge.n	800166a <__swhatbuf_r+0x22>
 800165a:	2300      	movs	r3, #0
 800165c:	602b      	str	r3, [r5, #0]
 800165e:	89b3      	ldrh	r3, [r6, #12]
 8001660:	061a      	lsls	r2, r3, #24
 8001662:	d410      	bmi.n	8001686 <__swhatbuf_r+0x3e>
 8001664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001668:	e00e      	b.n	8001688 <__swhatbuf_r+0x40>
 800166a:	466a      	mov	r2, sp
 800166c:	f000 f8be 	bl	80017ec <_fstat_r>
 8001670:	2800      	cmp	r0, #0
 8001672:	dbf2      	blt.n	800165a <__swhatbuf_r+0x12>
 8001674:	9a01      	ldr	r2, [sp, #4]
 8001676:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800167a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800167e:	425a      	negs	r2, r3
 8001680:	415a      	adcs	r2, r3
 8001682:	602a      	str	r2, [r5, #0]
 8001684:	e7ee      	b.n	8001664 <__swhatbuf_r+0x1c>
 8001686:	2340      	movs	r3, #64	; 0x40
 8001688:	2000      	movs	r0, #0
 800168a:	6023      	str	r3, [r4, #0]
 800168c:	b016      	add	sp, #88	; 0x58
 800168e:	bd70      	pop	{r4, r5, r6, pc}

08001690 <__smakebuf_r>:
 8001690:	898b      	ldrh	r3, [r1, #12]
 8001692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001694:	079d      	lsls	r5, r3, #30
 8001696:	4606      	mov	r6, r0
 8001698:	460c      	mov	r4, r1
 800169a:	d507      	bpl.n	80016ac <__smakebuf_r+0x1c>
 800169c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016a0:	6023      	str	r3, [r4, #0]
 80016a2:	6123      	str	r3, [r4, #16]
 80016a4:	2301      	movs	r3, #1
 80016a6:	6163      	str	r3, [r4, #20]
 80016a8:	b002      	add	sp, #8
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	ab01      	add	r3, sp, #4
 80016ae:	466a      	mov	r2, sp
 80016b0:	f7ff ffca 	bl	8001648 <__swhatbuf_r>
 80016b4:	9900      	ldr	r1, [sp, #0]
 80016b6:	4605      	mov	r5, r0
 80016b8:	4630      	mov	r0, r6
 80016ba:	f7ff fa73 	bl	8000ba4 <_malloc_r>
 80016be:	b948      	cbnz	r0, 80016d4 <__smakebuf_r+0x44>
 80016c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016c4:	059a      	lsls	r2, r3, #22
 80016c6:	d4ef      	bmi.n	80016a8 <__smakebuf_r+0x18>
 80016c8:	f023 0303 	bic.w	r3, r3, #3
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	81a3      	strh	r3, [r4, #12]
 80016d2:	e7e3      	b.n	800169c <__smakebuf_r+0xc>
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <__smakebuf_r+0x7c>)
 80016d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80016d8:	89a3      	ldrh	r3, [r4, #12]
 80016da:	6020      	str	r0, [r4, #0]
 80016dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e0:	81a3      	strh	r3, [r4, #12]
 80016e2:	9b00      	ldr	r3, [sp, #0]
 80016e4:	6163      	str	r3, [r4, #20]
 80016e6:	9b01      	ldr	r3, [sp, #4]
 80016e8:	6120      	str	r0, [r4, #16]
 80016ea:	b15b      	cbz	r3, 8001704 <__smakebuf_r+0x74>
 80016ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016f0:	4630      	mov	r0, r6
 80016f2:	f000 f88d 	bl	8001810 <_isatty_r>
 80016f6:	b128      	cbz	r0, 8001704 <__smakebuf_r+0x74>
 80016f8:	89a3      	ldrh	r3, [r4, #12]
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	81a3      	strh	r3, [r4, #12]
 8001704:	89a0      	ldrh	r0, [r4, #12]
 8001706:	4305      	orrs	r5, r0
 8001708:	81a5      	strh	r5, [r4, #12]
 800170a:	e7cd      	b.n	80016a8 <__smakebuf_r+0x18>
 800170c:	080009fd 	.word	0x080009fd

08001710 <__malloc_lock>:
 8001710:	4801      	ldr	r0, [pc, #4]	; (8001718 <__malloc_lock+0x8>)
 8001712:	f7ff ba45 	b.w	8000ba0 <__retarget_lock_acquire_recursive>
 8001716:	bf00      	nop
 8001718:	200000d8 	.word	0x200000d8

0800171c <__malloc_unlock>:
 800171c:	4801      	ldr	r0, [pc, #4]	; (8001724 <__malloc_unlock+0x8>)
 800171e:	f7ff ba40 	b.w	8000ba2 <__retarget_lock_release_recursive>
 8001722:	bf00      	nop
 8001724:	200000d8 	.word	0x200000d8

08001728 <_free_r>:
 8001728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800172a:	2900      	cmp	r1, #0
 800172c:	d048      	beq.n	80017c0 <_free_r+0x98>
 800172e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001732:	9001      	str	r0, [sp, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f1a1 0404 	sub.w	r4, r1, #4
 800173a:	bfb8      	it	lt
 800173c:	18e4      	addlt	r4, r4, r3
 800173e:	f7ff ffe7 	bl	8001710 <__malloc_lock>
 8001742:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <_free_r+0x9c>)
 8001744:	9801      	ldr	r0, [sp, #4]
 8001746:	6813      	ldr	r3, [r2, #0]
 8001748:	4615      	mov	r5, r2
 800174a:	b933      	cbnz	r3, 800175a <_free_r+0x32>
 800174c:	6063      	str	r3, [r4, #4]
 800174e:	6014      	str	r4, [r2, #0]
 8001750:	b003      	add	sp, #12
 8001752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001756:	f7ff bfe1 	b.w	800171c <__malloc_unlock>
 800175a:	42a3      	cmp	r3, r4
 800175c:	d90b      	bls.n	8001776 <_free_r+0x4e>
 800175e:	6821      	ldr	r1, [r4, #0]
 8001760:	1862      	adds	r2, r4, r1
 8001762:	4293      	cmp	r3, r2
 8001764:	bf04      	itt	eq
 8001766:	681a      	ldreq	r2, [r3, #0]
 8001768:	685b      	ldreq	r3, [r3, #4]
 800176a:	6063      	str	r3, [r4, #4]
 800176c:	bf04      	itt	eq
 800176e:	1852      	addeq	r2, r2, r1
 8001770:	6022      	streq	r2, [r4, #0]
 8001772:	602c      	str	r4, [r5, #0]
 8001774:	e7ec      	b.n	8001750 <_free_r+0x28>
 8001776:	461a      	mov	r2, r3
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b10b      	cbz	r3, 8001780 <_free_r+0x58>
 800177c:	42a3      	cmp	r3, r4
 800177e:	d9fa      	bls.n	8001776 <_free_r+0x4e>
 8001780:	6811      	ldr	r1, [r2, #0]
 8001782:	1855      	adds	r5, r2, r1
 8001784:	42a5      	cmp	r5, r4
 8001786:	d10b      	bne.n	80017a0 <_free_r+0x78>
 8001788:	6824      	ldr	r4, [r4, #0]
 800178a:	4421      	add	r1, r4
 800178c:	1854      	adds	r4, r2, r1
 800178e:	42a3      	cmp	r3, r4
 8001790:	6011      	str	r1, [r2, #0]
 8001792:	d1dd      	bne.n	8001750 <_free_r+0x28>
 8001794:	681c      	ldr	r4, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	6053      	str	r3, [r2, #4]
 800179a:	4421      	add	r1, r4
 800179c:	6011      	str	r1, [r2, #0]
 800179e:	e7d7      	b.n	8001750 <_free_r+0x28>
 80017a0:	d902      	bls.n	80017a8 <_free_r+0x80>
 80017a2:	230c      	movs	r3, #12
 80017a4:	6003      	str	r3, [r0, #0]
 80017a6:	e7d3      	b.n	8001750 <_free_r+0x28>
 80017a8:	6825      	ldr	r5, [r4, #0]
 80017aa:	1961      	adds	r1, r4, r5
 80017ac:	428b      	cmp	r3, r1
 80017ae:	bf04      	itt	eq
 80017b0:	6819      	ldreq	r1, [r3, #0]
 80017b2:	685b      	ldreq	r3, [r3, #4]
 80017b4:	6063      	str	r3, [r4, #4]
 80017b6:	bf04      	itt	eq
 80017b8:	1949      	addeq	r1, r1, r5
 80017ba:	6021      	streq	r1, [r4, #0]
 80017bc:	6054      	str	r4, [r2, #4]
 80017be:	e7c7      	b.n	8001750 <_free_r+0x28>
 80017c0:	b003      	add	sp, #12
 80017c2:	bd30      	pop	{r4, r5, pc}
 80017c4:	200000b0 	.word	0x200000b0

080017c8 <_read_r>:
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	4d07      	ldr	r5, [pc, #28]	; (80017e8 <_read_r+0x20>)
 80017cc:	4604      	mov	r4, r0
 80017ce:	4608      	mov	r0, r1
 80017d0:	4611      	mov	r1, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	602a      	str	r2, [r5, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f7fe fe6a 	bl	80004b0 <_read>
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d102      	bne.n	80017e6 <_read_r+0x1e>
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	b103      	cbz	r3, 80017e6 <_read_r+0x1e>
 80017e4:	6023      	str	r3, [r4, #0]
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
 80017e8:	200000e0 	.word	0x200000e0

080017ec <_fstat_r>:
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4d07      	ldr	r5, [pc, #28]	; (800180c <_fstat_r+0x20>)
 80017f0:	2300      	movs	r3, #0
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	602b      	str	r3, [r5, #0]
 80017fa:	f7fe fe9e 	bl	800053a <_fstat>
 80017fe:	1c43      	adds	r3, r0, #1
 8001800:	d102      	bne.n	8001808 <_fstat_r+0x1c>
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	b103      	cbz	r3, 8001808 <_fstat_r+0x1c>
 8001806:	6023      	str	r3, [r4, #0]
 8001808:	bd38      	pop	{r3, r4, r5, pc}
 800180a:	bf00      	nop
 800180c:	200000e0 	.word	0x200000e0

08001810 <_isatty_r>:
 8001810:	b538      	push	{r3, r4, r5, lr}
 8001812:	4d06      	ldr	r5, [pc, #24]	; (800182c <_isatty_r+0x1c>)
 8001814:	2300      	movs	r3, #0
 8001816:	4604      	mov	r4, r0
 8001818:	4608      	mov	r0, r1
 800181a:	602b      	str	r3, [r5, #0]
 800181c:	f7fe fe9d 	bl	800055a <_isatty>
 8001820:	1c43      	adds	r3, r0, #1
 8001822:	d102      	bne.n	800182a <_isatty_r+0x1a>
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	b103      	cbz	r3, 800182a <_isatty_r+0x1a>
 8001828:	6023      	str	r3, [r4, #0]
 800182a:	bd38      	pop	{r3, r4, r5, pc}
 800182c:	200000e0 	.word	0x200000e0

08001830 <_init>:
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	bf00      	nop
 8001834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001836:	bc08      	pop	{r3}
 8001838:	469e      	mov	lr, r3
 800183a:	4770      	bx	lr

0800183c <_fini>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	bf00      	nop
 8001840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001842:	bc08      	pop	{r3}
 8001844:	469e      	mov	lr, r3
 8001846:	4770      	bx	lr
