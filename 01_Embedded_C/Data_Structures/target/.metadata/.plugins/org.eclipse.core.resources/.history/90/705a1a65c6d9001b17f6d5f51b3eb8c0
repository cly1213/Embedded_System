/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>


struct ARRAY
{
	int32_t data[50];
	int32_t capacity; /*Capacity of array capped at 50*/
	int32_t length;  /*Length of array user wants to initialize*/
};

typedef struct ARRAY arrayType;

void array_append(arrayType *arr, int32_t elem);
void array_insert(arrayType *arr, uint32_t idx, int32_t elem);
int32_t array_delete(arrayType *arr, uint32_t idx);
void array_reverse(arrayType *arr);


int main(){

	arrayType  signal ={{10,20,30,11,12,13,14},50,7};

	printf("The original array is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_append(&signal,3000);

	printf("The array after append is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_insert(&signal,2,4000);

	printf("The array after insert at idx 2 is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_delete(&signal,2);

	printf("The array after delete at idx 2 is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_reverse(&signal);

	printf("The array after reverse is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");


}


void array_append(arrayType *arr, int32_t elem){

	if(arr->length < arr->capacity){
	  arr->data[arr->length++] = elem;
	}
}

void array_insert(arrayType *arr, uint32_t idx, int32_t elem){
   if(idx <=arr->length){

		 for(int i = arr->length;i>idx;i--){

			 arr->data[i] =  arr->data[i-1];
		 }

		 arr->data[idx] = elem;
		 arr->length++;

	 }

}

int32_t array_delete(arrayType *arr, uint32_t idx){

	int32_t elem;
	if(idx < arr->length){
	  elem = arr->data[idx];

		for(int i =idx; i<arr->length -1;i++){
			arr->data[i] = arr->data[i+1];
	}
	arr->length--;
	return elem;
 }
	return 0;
}


void array_reverse(arrayType *arr){
  int i,j;
	int32_t *temp;

	temp  = (int32_t *)malloc(arr->length*sizeof(int32_t));

	for(i =arr->length-1,j=0;i>=0;i--,j++){

	   temp[j] =  arr->data[i];
	}
	for(i =0;i<arr->length;i++){

	 arr->data[i] = temp[i];
	}


}
