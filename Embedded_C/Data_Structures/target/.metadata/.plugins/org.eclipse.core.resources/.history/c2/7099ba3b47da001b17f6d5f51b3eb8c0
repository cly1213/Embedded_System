/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>


struct dll_node{
	int data;
	struct dll_node *prev;
	struct dll_node *next;
};

typedef struct dll_node dll_nodeType;


int main(void){




	for(;;);

}


void d_linked_list_insert_at_start(dll_nodeType **head, int data){

	dll_nodeType *current = *head;
	dll_nodeType *new_node = (dll_nodeType *)malloc(sizeof(dll_nodeType));

	if(!new_node){
		printf("Error memory");
	}

	new_node->prev = NULL;
	new_node->data = data;
	new_node->next = NULL;

	if(*head == NULL){
		*head = new_node;
		return;
	}

	new_node->next = *head;
	(*head)->prev = new_node;
	*head = new_node;


	//No need to traverse
	/*
	while(current->next != NULL){
		current = current->next;
	}
	*/
}

void d_linked_list_insert_at_end(dll_nodeType **head, int data){

	dll_nodeType *current = *head;
	dll_nodeType *new_node = (dll_nodeType *)malloc(sizeof(dll_nodeType));

	if(!new_node){
		printf("Memory error!");
		return;
	}

	new_node->prev = NULL;
	new_node->data = data;
	new_node->next = NULL;

	if(*head == NULL){
		*head = new_node;
		return;
	}

	//traverse
	while(current->next != NULL){
		current = current->next;
	}

	new_node->prev = current;
	current->next = new_node;

}

void d_linked_list_insert_at_middle(dll_nodeType **head, int data, int position){

	dll_nodeType *current = *head;
	dll_nodeType *new_node = (dll_nodeType *)malloc(sizeof(dll_nodeType));

	if(!new_node){
			printf("Memory error!");
			return;
	}

	new_node->prev = NULL;
	new_node->data = data;
	new_node->next = NULL;

	int k=1;

	while((k < position-1) && (current->next != NULL)){
		current = current->next;
		k++;
	}

	if(k < position-1 ){
		printf("Invalid position passed to the function.");
		return;
	}

	new_node->next = current->next;
	new_node->prev = current;

	if(current->next){
		current->next->prev = new_node;
	}

	current->next = new_node;

	return;

}

