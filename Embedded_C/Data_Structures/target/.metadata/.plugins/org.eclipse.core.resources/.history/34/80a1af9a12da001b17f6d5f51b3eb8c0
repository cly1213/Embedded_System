/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>


struct ARRAY
{
	int32_t data[50];
	int32_t capacity; /*Capacity of array capped at 50*/
	int32_t length;  /*Length of array user wants to initialize*/
};

typedef struct ARRAY arrayType;

void array_append(arrayType *arr, int32_t elem);
void array_insert(arrayType *arr, uint32_t idx, int32_t elem);
int32_t array_delete(arrayType *arr, uint32_t idx);
void array_reverse(arrayType *arr);
int8_t array_isAscending(arrayType *arr);
int8_t  array_isDescending(arrayType *arr);
void array_sort_ascend(arrayType *arr);
void array_sort_descend(arrayType *arr);
arrayType * array_merge(arrayType * arr1, arrayType *arr2);


int main(){

//	arrayType  signal ={{7,6,5,4,3,2,1},50,7};
//
//	printf(" Is the array ascending : %d \n\r ",array_isAscending(&signal));
//	printf(" Is the array descending : %d \n\r ",array_isDescending(&signal));

	arrayType  signal ={{10,20,30,11,12,13,14},50,7};
	arrayType  signal2 ={{11,21,31,11,11,13,14},50,7};
	arrayType *full_signal;


	printf("The original array is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_append(&signal,3000);

	printf("The array after append is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_insert(&signal,2,4000);

	printf("The array after insert at idx 2 is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_delete(&signal,2);

	printf("The array after delete at idx 2 is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_reverse(&signal);

	printf("The array after reverse is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_sort_ascend(&signal);

	printf("The array after sort ascend is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");

	array_sort_descend(&signal);
	printf("The array after sort descend is : \n\r");
	for(int i=0;i<signal.length;i++){
		printf(" %ld ",signal.data[i]);
	}
	printf("\n\r\n\r");


	full_signal = array_merge(&signal,&signal2);

	printf("Merge of signal1 and signal2: \n\r");
	for(int i=0;i<full_signal->length;i++){
		printf(" %ld ",full_signal->data[i]);
	}
	printf("\n\r\n\r");
}


void array_append(arrayType *arr, int32_t elem){

	if(arr->length < arr->capacity){
	  arr->data[arr->length++] = elem;
	}
}

void array_insert(arrayType *arr, uint32_t idx, int32_t elem){
   if(idx <=arr->length){

		 for(int i = arr->length;i>idx;i--){

			 arr->data[i] =  arr->data[i-1];
		 }

		 arr->data[idx] = elem;
		 arr->length++;

	 }

}

int32_t array_delete(arrayType *arr, uint32_t idx){

	int32_t elem;
	if(idx < arr->length){
	  elem = arr->data[idx];

		for(int i =idx; i<arr->length -1;i++){
			arr->data[i] = arr->data[i+1];
	}
	arr->length--;
	return elem;
 }
	return 0;
}


void array_reverse(arrayType *arr){
  int i,j;
	int32_t *temp;

	temp  = (int32_t *)malloc(arr->length*sizeof(int32_t));

	for(i =arr->length-1,j=0;i>=0;i--,j++){

	   temp[j] =  arr->data[i];
	}
	for(i =0;i<arr->length;i++){

	 arr->data[i] = temp[i];
	}


}



int8_t array_isAscending(arrayType *arr){

	  for(int i=0;i<arr->length-1;i++){

		if(arr->data[i] > arr->data[i+1]){
		  return 0;
		}

	}

  return 1;

}

int8_t  array_isDescending(arrayType *arr){

	  for(int i =0;i<arr->length;i++){

			 if(arr->data[i] < arr->data[i+1]){
			    return 0;
			 }
		}

		return 1;

}


void array_sort_ascend(arrayType *arr){
  int32_t i,j,n_temp;
	for(i =1;i<arr->length;i++){
	  n_temp  =  arr->data[i];
		j =i;
		while(j >0 && n_temp<arr->data[j-1]){
		  arr->data[j] = arr->data[j-1];
			--j;
		}
		arr->data[j] = n_temp;
	}

}


void array_sort_descend(arrayType *arr){
  int32_t i,j,n_temp;

	for(i =1;i<arr->length;i++){
	 n_temp = arr->data[i];
	 j=i;
		while(j>0 && n_temp > arr->data[j-1]){
		  arr->data[j] =  arr->data[j-1];
			--j;
		}
		arr->data[j] =  n_temp;

	}

}

arrayType * array_merge(arrayType * arr1, arrayType *arr2){

	  int32_t i,j,k;
	  i=0;
	  j=0;
	  k=0;


	arrayType *dest_arr =(arrayType *)malloc(sizeof(arrayType));

	while(i < arr1->length && j <arr2->length){

		 if(arr1->data[i]  <  arr2->data[j]){
		  dest_arr->data[k++] =  arr1->data[i++];
		 }

		 else{

			  dest_arr->data[k++] =  arr2->data[j++];
		 }

		}

		  for(; i<arr1->length;i++){
			   dest_arr->data[k++] = arr1->data[i];
			}
			for(;j<arr2->length;j++){
			   dest_arr->data[k++]  =  arr1->data[j];
			}
			dest_arr->length =  arr1->length+ arr2->length;

			return dest_arr;

}

