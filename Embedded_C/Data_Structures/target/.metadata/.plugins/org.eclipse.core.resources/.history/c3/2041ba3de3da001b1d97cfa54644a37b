/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>


struct cll_node{
	int data;
	struct cll_node *next;
};

typedef struct cll_node cll_nodeType;

void c_linkedlist_insert_at_start(cll_nodeType **head, int data);
void c_linkedlist_insert_at_end(cll_nodeType **head, int data);
int c_linkedlist_length(cll_nodeType *head);
void c_linkedlist_print_list(cll_nodeType *head);

void c_linkedlist_delete_end(cll_nodeType **head);
void c_linkedlist_delete_start(cll_nodeType **head);

int main(){
	cll_nodeType *head  = NULL;

	c_linkedlist_insert_at_start(&head, 7);
	c_linkedlist_insert_at_start(&head, 14);
	c_linkedlist_insert_at_start(&head, 21);
	c_linkedlist_insert_at_start(&head, 28);
	c_linkedlist_insert_at_start(&head, 35);

	c_linkedlist_delete_end(&head);


	c_linkedlist_print_list(head); //35 28 21 14 7

	printf("The length of list is %d \n\t", c_linkedlist_length(head));






	for(;;);

}


void c_linkedlist_insert_at_start(cll_nodeType **head, int data){

	cll_nodeType *current = *head; //current(dummy pointer)

	cll_nodeType *newNode = (cll_nodeType *)malloc(sizeof(cll_nodeType));

	if(!newNode){
		printf("Memory error!\r\n");
		return;
	}

	newNode->data = data;
	newNode->next = newNode;

	if(current == NULL){
		*head = newNode;
		return;
	}

	while(current->next != *head){
		current = current->next;
	}

	newNode->next = *head;
	current->next = newNode;
	*head = newNode; //insert at start, so should change head pointer to newNode.
}

void c_linkedlist_insert_at_end(cll_nodeType **head, int data){
	cll_nodeType *current = *head; //current(dummy pointer)

	cll_nodeType *newNode = (cll_nodeType *)malloc(sizeof(cll_nodeType));

	if(!newNode){
		printf("Memory error!\r\n");
		return;
	}

	newNode->data = data;
	newNode->next = newNode;

	if(current == NULL){
		*head = newNode;
		return;
	}

	while(current->next != *head){
		current = current->next;
	}

	newNode->next = *head;
	current->next = newNode;

}

int c_linkedlist_length(cll_nodeType *head){
	cll_nodeType *current = head;
	int count = 0;
	if(head == NULL){
		return 0;
	}
	do{
		current = current->next;
		count++;
	}while(current != head);

	return count;
}

void c_linkedlist_print_list(cll_nodeType *head){
	cll_nodeType *current = head;

	if(head == NULL){
		return;
	}

	do{
		printf("%d-->\t", current->data);
		current = current->next;
	}while(current != head);

	printf("\n");

}

void c_linkedlist_delete_end(cll_nodeType **head){
	cll_nodeType *current = *head;
	cll_nodeType *temp = *head;

	if(*head == NULL){
		printf("List is empty\r\n");
		return;
	}

	while(current->next != *head){
		temp = current;
		current = current->next;
	}

	temp->next = current->next;
	free(current);
	return;

}

void c_linkedlist_delete_start(cll_nodeType **head){

	cll_nodeType *current = *head;
	//cll_nodeType *temp = *head;

	if(*head == NULL){
		printf("List is empty\r\n");
		return;
	}

	while(current->next != *head){
		current = current->next;
	}

	current->next = (*head)->next;
	*head = (*head)->next;
	free(current);

	return;


}












